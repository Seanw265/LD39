// Generated by Haxe 3.3.0
#ifndef INCLUDED_Building
#define INCLUDED_Building

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS0(Building)
HX_DECLARE_CLASS0(Lot)
HX_DECLARE_CLASS0(ProgressBar)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Building_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Building_obj OBJ_;
		Building_obj();

	public:
		void __construct(::String type, ::Lot lot);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Building")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Building"); }
		static hx::ObjectPtr< Building_obj > __new(::String type, ::Lot lot);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Building_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Building","\x94","\x9e","\x79","\x2d"); }

		Float output;
		Float outputPerSecond;
		Float availableUnits;
		Float chargeTime;
		Float curChargeTime;
		Float totalTime;
		Float dies;
		Float efficiency;
		::String type;
		 ::ProgressBar progressBar;
		 ::Lot lot;
		Float getAvailableUnits();
		::Dynamic getAvailableUnits_dyn();

		void draw();

		void update(Float elapsed);

		void breakDown();
		::Dynamic breakDown_dyn();

};


#endif /* INCLUDED_Building */ 
