// Generated by Haxe 3.3.0
#ifndef INCLUDED_Chromatic
#define INCLUDED_Chromatic

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
HX_DECLARE_CLASS0(Chromatic)
HX_DECLARE_CLASS2(openfl,display,GLShaderParameter)
HX_DECLARE_CLASS2(openfl,display,Shader)



class HXCPP_CLASS_ATTRIBUTES Chromatic_obj : public  ::openfl::display::Shader_obj
{
	public:
		typedef  ::openfl::display::Shader_obj super;
		typedef Chromatic_obj OBJ_;
		Chromatic_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Chromatic")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Chromatic"); }
		static hx::ObjectPtr< Chromatic_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Chromatic_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Chromatic","\x78","\x15","\xfc","\x5a"); }

		static void __boot();
		static  ::Dynamic __meta__;
		::String fragment;
		 ::openfl::display::GLShaderParameter _hx___uROffset;
		::Array< Float > get_uROffset();
		::Dynamic get_uROffset_dyn();

		::Array< Float > set_uROffset(::Array< Float > v);
		::Dynamic set_uROffset_dyn();

		 ::openfl::display::GLShaderParameter _hx___uGOffset;
		::Array< Float > get_uGOffset();
		::Dynamic get_uGOffset_dyn();

		::Array< Float > set_uGOffset(::Array< Float > v);
		::Dynamic set_uGOffset_dyn();

		 ::openfl::display::GLShaderParameter _hx___uBOffset;
		::Array< Float > get_uBOffset();
		::Dynamic get_uBOffset_dyn();

		::Array< Float > set_uBOffset(::Array< Float > v);
		::Dynamic set_uBOffset_dyn();

		 ::openfl::display::GLShaderParameter _hx___uSize;
		::Array< Float > get_uSize();
		::Dynamic get_uSize_dyn();

		::Array< Float > set_uSize(::Array< Float > v);
		::Dynamic set_uSize_dyn();

};


#endif /* INCLUDED_Chromatic */ 
