// Generated by Haxe 3.3.0
#ifndef INCLUDED_Lot
#define INCLUDED_Lot

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
HX_DECLARE_CLASS0(Building)
HX_DECLARE_CLASS0(Lot)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Lot_obj : public  ::flixel::FlxObject_obj
{
	public:
		typedef  ::flixel::FlxObject_obj super;
		typedef Lot_obj OBJ_;
		Lot_obj();

	public:
		void __construct(Float x,Float y, ::flixel::group::FlxTypedGroup buildingsGroup);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Lot")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Lot"); }
		static hx::ObjectPtr< Lot_obj > __new(Float x,Float y, ::flixel::group::FlxTypedGroup buildingsGroup);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Lot_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Lot","\x71","\x0c","\x3a","\x00"); }

		 ::flixel::group::FlxTypedGroup buildingsGroup;
		 ::Building building;
		void add( ::Building b);
		::Dynamic add_dyn();

		void removeBuilding();
		::Dynamic removeBuilding_dyn();

};


#endif /* INCLUDED_Lot */ 
