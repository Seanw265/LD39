// Generated by Haxe 3.3.0
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Lot)
HX_DECLARE_CLASS0(LotManager)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(UIGroup)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static hx::ObjectPtr< PlayState_obj > __new( ::Dynamic MaxSize);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46"); }

		 ::flixel::FlxSprite player;
		Int LOTWIDTH;
		Int LOTHEIGHT;
		 ::LotManager lots;
		 ::flixel::group::FlxTypedGroup buildings;
		 ::flixel::tile::FlxTilemap lotsMap;
		 ::flixel::tile::FlxTilemap backgroundMap;
		 ::UIGroup ui;
		Bool placing;
		::String placingObject;
		void create();

		Int PLAYER_ACCELERATION;
		void update(Float elapsed);

		void removeObject( ::flixel::FlxObject o, ::Lot lot);
		::Dynamic removeObject_dyn();

		void closeBuildingScreen(Bool isPlacing,::String placingObject);
		::Dynamic closeBuildingScreen_dyn();

		void placeObject( ::flixel::FlxObject o, ::Lot lot);
		::Dynamic placeObject_dyn();

		void startTutorial();
		::Dynamic startTutorial_dyn();

};


#endif /* INCLUDED_PlayState */ 
