// Generated by Haxe 3.3.0
#ifndef INCLUDED_Scanline
#define INCLUDED_Scanline

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
HX_DECLARE_CLASS0(Scanline)
HX_DECLARE_CLASS2(openfl,display,GLShaderParameter)
HX_DECLARE_CLASS2(openfl,display,Shader)



class HXCPP_CLASS_ATTRIBUTES Scanline_obj : public  ::openfl::display::Shader_obj
{
	public:
		typedef  ::openfl::display::Shader_obj super;
		typedef Scanline_obj OBJ_;
		Scanline_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Scanline")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Scanline"); }
		static hx::ObjectPtr< Scanline_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Scanline_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Scanline","\x11","\xd4","\x8c","\x06"); }

		static void __boot();
		static  ::Dynamic __meta__;
		::String fragment;
		 ::openfl::display::GLShaderParameter _hx___scale;
		Float get_scale();
		::Dynamic get_scale_dyn();

		Float set_scale(Float v);
		::Dynamic set_scale_dyn();

};


#endif /* INCLUDED_Scanline */ 
