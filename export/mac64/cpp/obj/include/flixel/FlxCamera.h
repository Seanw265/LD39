// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_FlxCamera
#define INCLUDED_flixel_FlxCamera

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxCamera)
HX_DECLARE_CLASS1(flixel,FlxCameraFollowStyle)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,graphics,FlxGraphic)
HX_DECLARE_CLASS3(flixel,graphics,frames,FlxFrame)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxDrawBaseItem)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxDrawTilesItem)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxDrawTrianglesItem)
HX_DECLARE_CLASS2(flixel,math,FlxMatrix)
HX_DECLARE_CLASS2(flixel,math,FlxPoint)
HX_DECLARE_CLASS2(flixel,math,FlxRect)
HX_DECLARE_CLASS2(flixel,util,FlxAxes)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(flixel,util,IFlxPooled)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)
HX_DECLARE_CLASS2(openfl,geom,ColorTransform)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace flixel{


class HXCPP_CLASS_ATTRIBUTES FlxCamera_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef FlxCamera_obj OBJ_;
		FlxCamera_obj();

	public:
		void __construct(hx::Null< Int >  __o_X,hx::Null< Int >  __o_Y,hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Float >  __o_Zoom);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.FlxCamera")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.FlxCamera"); }
		static hx::ObjectPtr< FlxCamera_obj > __new(hx::Null< Int >  __o_X,hx::Null< Int >  __o_Y,hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Float >  __o_Zoom);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxCamera_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FlxCamera","\x97","\x40","\x7b","\x39"); }

		static void __boot();
		static Float defaultZoom;
		static ::Array< ::Dynamic> defaultCameras;
		static  ::flixel::graphics::tile::FlxDrawTilesItem _storageTilesHead;
		static  ::flixel::graphics::tile::FlxDrawTrianglesItem _storageTrianglesHead;
		static ::Array< Float > drawVertices;
		static  ::openfl::display::Sprite trianglesSprite;
		static  ::flixel::math::FlxPoint renderPoint;
		static  ::flixel::math::FlxRect renderRect;
		Float x;
		Float y;
		Float scaleX;
		Float scaleY;
		Float totalScaleX;
		Float totalScaleY;
		::hx::EnumBase style;
		 ::flixel::FlxObject target;
		 ::flixel::math::FlxPoint targetOffset;
		Float followLerp;
		 ::flixel::math::FlxRect deadzone;
		 ::Dynamic minScrollX;
		 ::Dynamic maxScrollX;
		 ::Dynamic minScrollY;
		 ::Dynamic maxScrollY;
		 ::flixel::math::FlxPoint scroll;
		 ::openfl::display::BitmapData buffer;
		Int bgColor;
		 ::flixel::FlxSprite screen;
		Bool useBgAlphaBlending;
		 ::openfl::display::Sprite flashSprite;
		Bool pixelPerfectRender;
		Int width;
		Int height;
		Float zoom;
		Float viewOffsetX;
		Float viewOffsetY;
		Float viewOffsetWidth;
		Float viewOffsetHeight;
		Float viewWidth;
		Float viewHeight;
		 ::flixel::math::FlxMatrix _blitMatrix;
		Bool _useBlitMatrix;
		Float alpha;
		Float angle;
		Int color;
		Bool antialiasing;
		 ::flixel::math::FlxPoint followLead;
		Bool filtersEnabled;
		 ::openfl::geom::Rectangle _flashRect;
		 ::openfl::geom::Point _flashPoint;
		 ::flixel::math::FlxPoint _flashOffset;
		Int _fxFlashColor;
		Float _fxFlashDuration;
		 ::Dynamic _fxFlashComplete;
		 ::Dynamic &_fxFlashComplete_dyn() { return _fxFlashComplete;}
		Float _fxFlashAlpha;
		Int _fxFadeColor;
		 ::flixel::math::FlxPoint _lastTargetPosition;
		 ::flixel::math::FlxPoint _scrollTarget;
		Float _fxFadeDuration;
		Bool _fxFadeIn;
		 ::Dynamic _fxFadeComplete;
		 ::Dynamic &_fxFadeComplete_dyn() { return _fxFadeComplete;}
		Bool _fxFadeCompleted;
		Float _fxFadeAlpha;
		Float _fxShakeIntensity;
		Float _fxShakeDuration;
		 ::Dynamic _fxShakeComplete;
		 ::Dynamic &_fxShakeComplete_dyn() { return _fxShakeComplete;}
		::hx::EnumBase _fxShakeAxes;
		 ::flixel::math::FlxPoint _point;
		::Array< ::Dynamic> _filters;
		Float initialZoom;
		 ::openfl::display::BitmapData _fill;
		 ::openfl::display::Bitmap _flashBitmap;
		 ::openfl::display::Sprite _scrollRect;
		 ::flixel::math::FlxRect _bounds;
		 ::openfl::display::Sprite canvas;
		 ::flixel::math::FlxMatrix _helperMatrix;
		 ::openfl::geom::Point _helperPoint;
		 ::flixel::graphics::tile::FlxDrawBaseItem _currentDrawItem;
		 ::flixel::graphics::tile::FlxDrawBaseItem _headOfDrawStack;
		 ::flixel::graphics::tile::FlxDrawTilesItem _headTiles;
		 ::flixel::graphics::tile::FlxDrawTrianglesItem _headTriangles;
		 ::flixel::graphics::tile::FlxDrawTilesItem startQuadBatch( ::flixel::graphics::FlxGraphic graphic,Bool colored,hx::Null< Bool >  hasColorOffsets, ::Dynamic blend,hx::Null< Bool >  smooth, ::openfl::display::Shader shader);
		::Dynamic startQuadBatch_dyn();

		 ::flixel::graphics::tile::FlxDrawTrianglesItem startTrianglesBatch( ::flixel::graphics::FlxGraphic graphic,hx::Null< Bool >  smoothing,hx::Null< Bool >  isColored, ::Dynamic blend);
		::Dynamic startTrianglesBatch_dyn();

		 ::flixel::graphics::tile::FlxDrawTrianglesItem getNewDrawTrianglesItem( ::flixel::graphics::FlxGraphic graphic,hx::Null< Bool >  smoothing,hx::Null< Bool >  isColored, ::Dynamic blend);
		::Dynamic getNewDrawTrianglesItem_dyn();

		void clearDrawStack();
		::Dynamic clearDrawStack_dyn();

		void render();
		::Dynamic render_dyn();

		void drawPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::display::BitmapData pixels, ::flixel::math::FlxMatrix matrix, ::openfl::geom::ColorTransform transform, ::Dynamic blend, ::Dynamic smoothing, ::openfl::display::Shader shader);
		::Dynamic drawPixels_dyn();

		void copyPixels( ::flixel::graphics::frames::FlxFrame frame, ::openfl::display::BitmapData pixels, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::geom::ColorTransform transform, ::Dynamic blend, ::Dynamic smoothing, ::openfl::display::Shader shader);
		::Dynamic copyPixels_dyn();

		void drawTriangles( ::flixel::graphics::FlxGraphic graphic,::Array< Float > vertices,::Array< Int > indices,::Array< Float > uvtData,::Array< Int > colors, ::flixel::math::FlxPoint position, ::Dynamic blend,hx::Null< Bool >  repeat,hx::Null< Bool >  smoothing);
		::Dynamic drawTriangles_dyn();

		 ::flixel::math::FlxRect transformRect( ::flixel::math::FlxRect rect);
		::Dynamic transformRect_dyn();

		 ::flixel::math::FlxPoint transformPoint( ::flixel::math::FlxPoint point);
		::Dynamic transformPoint_dyn();

		 ::flixel::math::FlxPoint transformVector( ::flixel::math::FlxPoint vector);
		::Dynamic transformVector_dyn();

		 ::openfl::display::DisplayObject transformObject( ::openfl::display::DisplayObject object);
		::Dynamic transformObject_dyn();

		void destroy();

		void update(Float elapsed);

		void updateScroll();
		::Dynamic updateScroll_dyn();

		void updateFollow();
		::Dynamic updateFollow_dyn();

		void updateFlash(Float elapsed);
		::Dynamic updateFlash_dyn();

		void updateFade(Float elapsed);
		::Dynamic updateFade_dyn();

		void completeFade();
		::Dynamic completeFade_dyn();

		void updateShake(Float elapsed);
		::Dynamic updateShake_dyn();

		void updateFlashSpritePosition();
		::Dynamic updateFlashSpritePosition_dyn();

		void updateFlashOffset();
		::Dynamic updateFlashOffset_dyn();

		void updateScrollRect();
		::Dynamic updateScrollRect_dyn();

		void updateInternalSpritePositions();
		::Dynamic updateInternalSpritePositions_dyn();

		void follow( ::flixel::FlxObject Target,::hx::EnumBase Style, ::Dynamic Lerp);
		::Dynamic follow_dyn();

		void snapToTarget();
		::Dynamic snapToTarget_dyn();

		void focusOn( ::flixel::math::FlxPoint point);
		::Dynamic focusOn_dyn();

		void flash(hx::Null< Int >  Color,hx::Null< Float >  Duration, ::Dynamic OnComplete,hx::Null< Bool >  Force);
		::Dynamic flash_dyn();

		void fade(hx::Null< Int >  Color,hx::Null< Float >  Duration,hx::Null< Bool >  FadeIn, ::Dynamic OnComplete,hx::Null< Bool >  Force);
		::Dynamic fade_dyn();

		void shake(hx::Null< Float >  Intensity,hx::Null< Float >  Duration, ::Dynamic OnComplete,hx::Null< Bool >  Force,::hx::EnumBase Axes);
		::Dynamic shake_dyn();

		void stopFX();
		::Dynamic stopFX_dyn();

		void setFilters(::Array< ::Dynamic> filters);
		::Dynamic setFilters_dyn();

		 ::flixel::FlxCamera copyFrom( ::flixel::FlxCamera Camera);
		::Dynamic copyFrom_dyn();

		void fill(Int Color,hx::Null< Bool >  BlendAlpha,hx::Null< Float >  FxAlpha, ::openfl::display::Graphics graphics);
		::Dynamic fill_dyn();

		void drawFX();
		::Dynamic drawFX_dyn();

		void checkResize();
		::Dynamic checkResize_dyn();

		void updateBlitMatrix();
		::Dynamic updateBlitMatrix_dyn();

		void setSize(Int Width,Int Height);
		::Dynamic setSize_dyn();

		void setPosition(hx::Null< Float >  X,hx::Null< Float >  Y);
		::Dynamic setPosition_dyn();

		void setScrollBoundsRect(hx::Null< Float >  X,hx::Null< Float >  Y,hx::Null< Float >  Width,hx::Null< Float >  Height,hx::Null< Bool >  UpdateWorld);
		::Dynamic setScrollBoundsRect_dyn();

		void setScrollBounds( ::Dynamic MinX, ::Dynamic MaxX, ::Dynamic MinY, ::Dynamic MaxY);
		::Dynamic setScrollBounds_dyn();

		void setScale(Float X,Float Y);
		::Dynamic setScale_dyn();

		void onResize();
		::Dynamic onResize_dyn();

		Bool containsPoint( ::flixel::math::FlxPoint point,hx::Null< Float >  width,hx::Null< Float >  height);
		::Dynamic containsPoint_dyn();

		Float set_followLerp(Float Value);
		::Dynamic set_followLerp_dyn();

		Int set_width(Int Value);
		::Dynamic set_width_dyn();

		Int set_height(Int Value);
		::Dynamic set_height_dyn();

		Float set_zoom(Float Zoom);
		::Dynamic set_zoom_dyn();

		Float set_alpha(Float Alpha);
		::Dynamic set_alpha_dyn();

		Float set_angle(Float Angle);
		::Dynamic set_angle_dyn();

		Int set_color(Int Color);
		::Dynamic set_color_dyn();

		Bool set_antialiasing(Bool Antialiasing);
		::Dynamic set_antialiasing_dyn();

		Float set_x(Float x);
		::Dynamic set_x_dyn();

		Float set_y(Float y);
		::Dynamic set_y_dyn();

		Bool set_visible(Bool visible);

		void calcOffsetX();
		::Dynamic calcOffsetX_dyn();

		void calcOffsetY();
		::Dynamic calcOffsetY_dyn();

};

} // end namespace flixel

#endif /* INCLUDED_flixel_FlxCamera */ 
