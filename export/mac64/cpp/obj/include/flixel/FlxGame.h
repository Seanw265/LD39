// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_FlxGame
#define INCLUDED_flixel_FlxGame

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxGame)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,effects,postprocess,PostProcess)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,display,DirectRenderer)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,OpenGLView)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,filters,BitmapFilter)

namespace flixel{


class HXCPP_CLASS_ATTRIBUTES FlxGame_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef FlxGame_obj OBJ_;
		FlxGame_obj();

	public:
		void __construct(hx::Null< Int >  __o_GameWidth,hx::Null< Int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< Int >  __o_UpdateFramerate,hx::Null< Int >  __o_DrawFramerate,hx::Null< Bool >  __o_SkipSplash,hx::Null< Bool >  __o_StartFullscreen);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.FlxGame")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.FlxGame"); }
		static hx::ObjectPtr< FlxGame_obj > __new(hx::Null< Int >  __o_GameWidth,hx::Null< Int >  __o_GameHeight,hx::Class InitialState,hx::Null< Float >  __o_Zoom,hx::Null< Int >  __o_UpdateFramerate,hx::Null< Int >  __o_DrawFramerate,hx::Null< Bool >  __o_SkipSplash,hx::Null< Bool >  __o_StartFullscreen);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxGame_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FlxGame","\x64","\x2d","\xb7","\xd4"); }

		Int focusLostFramerate;
		Int ticks;
		Bool filtersEnabled;
		Bool _gameJustStarted;
		hx::Class _initialState;
		 ::flixel::FlxState _state;
		Int _total;
		Int _startTime;
		Float _accumulator;
		Float _elapsedMS;
		Float _stepMS;
		Float _stepSeconds;
		Float _maxAccumulation;
		Bool _lostFocus;
		::Array< ::Dynamic> _filters;
		 ::openfl::display::Sprite _inputContainer;
		Bool _skipSplash;
		Bool _startFullscreen;
		 ::flixel::FlxState _requestedState;
		Bool _resetGame;
		 ::openfl::display::Sprite postProcessLayer;
		::Array< ::Dynamic> postProcesses;
		void setFilters(::Array< ::Dynamic> filters);
		::Dynamic setFilters_dyn();

		void create( ::Dynamic _);
		::Dynamic create_dyn();

		void onFocus( ::Dynamic _);
		::Dynamic onFocus_dyn();

		void onFocusLost( ::openfl::events::Event event);
		::Dynamic onFocusLost_dyn();

		void onResize( ::Dynamic _);
		::Dynamic onResize_dyn();

		void resizeGame(Int width,Int height);
		::Dynamic resizeGame_dyn();

		void onEnterFrame( ::Dynamic _);
		::Dynamic onEnterFrame_dyn();

		void resetGame();
		::Dynamic resetGame_dyn();

		void switchState();
		::Dynamic switchState_dyn();

		void gameStart();
		::Dynamic gameStart_dyn();

		void step();
		::Dynamic step_dyn();

		void handleReplayRequests();
		::Dynamic handleReplayRequests_dyn();

		void update();
		::Dynamic update_dyn();

		void updateElapsed();
		::Dynamic updateElapsed_dyn();

		void updateInput();
		::Dynamic updateInput_dyn();

		void draw();
		::Dynamic draw_dyn();

		Int getTicks();
		::Dynamic getTicks_dyn();

		::Dynamic getTimer;
		inline ::Dynamic &getTimer_dyn() {return getTimer; }

};

} // end namespace flixel

#endif /* INCLUDED_flixel_FlxGame */ 
