// Generated by Haxe 3.3.0
#ifndef INCLUDED_flixel_system_FlxBasePreloader
#define INCLUDED_flixel_system_FlxBasePreloader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_NMEPreloader
#include <NMEPreloader.h>
#endif
HX_DECLARE_CLASS0(NMEPreloader)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxBasePreloader)
HX_DECLARE_CLASS2(openfl,display,Bitmap)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace flixel{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES FlxBasePreloader_obj : public  ::NMEPreloader_obj
{
	public:
		typedef  ::NMEPreloader_obj super;
		typedef FlxBasePreloader_obj OBJ_;
		FlxBasePreloader_obj();

	public:
		void __construct(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.system.FlxBasePreloader")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.system.FlxBasePreloader"); }
		static hx::ObjectPtr< FlxBasePreloader_obj > __new(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxBasePreloader_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FlxBasePreloader","\x73","\xda","\x54","\x5d"); }

		static void __boot();
		static ::String LOCAL;
		Float minDisplayTime;
		::Array< ::String > allowedURLs;
		Int siteLockURLIndex;
		::String siteLockTitleText;
		::String siteLockBodyText;
		Float _percent;
		Int _width;
		Int _height;
		Bool _loaded;
		Bool _urlChecked;
		Float _startTime;
		virtual void create();
		::Dynamic create_dyn();

		void onInit();

		void onUpdate(Int bytesLoaded,Int bytesTotal);

		void onEnterFrame( ::openfl::events::Event E);
		::Dynamic onEnterFrame_dyn();

		virtual void destroy();
		::Dynamic destroy_dyn();

		virtual void update(Float Percent);
		::Dynamic update_dyn();

		void onLoaded();

		 ::openfl::display::Bitmap createBitmap(hx::Class bitmapDataClass, ::Dynamic onLoad);
		::Dynamic createBitmap_dyn();

		 ::openfl::display::BitmapData loadBitmapData(hx::Class bitmapDataClass, ::Dynamic onLoad);
		::Dynamic loadBitmapData_dyn();

		void checkSiteLock();
		::Dynamic checkSiteLock_dyn();

};

} // end namespace flixel
} // end namespace system

#endif /* INCLUDED_flixel_system_FlxBasePreloader */ 
