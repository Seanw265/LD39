// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#define INCLUDED_openfl__internal_renderer_opengl_GLRenderer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
HX_DECLARE_CLASS2(lime,app,IModule)
HX_DECLARE_CLASS2(lime,graphics,GLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLFramebuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS3(openfl,_internal,renderer,AbstractMaskManager)
HX_DECLARE_CLASS3(openfl,_internal,renderer,AbstractRenderer)
HX_DECLARE_CLASS3(openfl,_internal,renderer,RenderSession)
HX_DECLARE_CLASS4(openfl,_internal,renderer,opengl,GLRenderer)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,BlendModeManager)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,FilterManager)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,GLMaskManager)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,ShaderManager)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,SpriteBatch)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,StencilManager)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Stage)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{


class HXCPP_CLASS_ATTRIBUTES GLRenderer_obj : public  ::openfl::_internal::renderer::AbstractRenderer_obj
{
	public:
		typedef  ::openfl::_internal::renderer::AbstractRenderer_obj super;
		typedef GLRenderer_obj OBJ_;
		GLRenderer_obj();

	public:
		void __construct(hx::Null< Int >  __o_width,hx::Null< Int >  __o_height, ::lime::graphics::GLRenderContext gl,hx::Null< Bool >  __o_transparent,hx::Null< Bool >  __o_antialias,hx::Null< Bool >  __o_preserveDrawingBuffer);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.renderer.opengl.GLRenderer")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.renderer.opengl.GLRenderer"); }
		static hx::ObjectPtr< GLRenderer_obj > __new(hx::Null< Int >  __o_width,hx::Null< Int >  __o_height, ::lime::graphics::GLRenderContext gl,hx::Null< Bool >  __o_transparent,hx::Null< Bool >  __o_antialias,hx::Null< Bool >  __o_preserveDrawingBuffer);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLRenderer_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("GLRenderer","\x88","\xec","\xdf","\x80"); }

		static void __boot();
		static Int glContextId;
		static ::Array< ::Dynamic> glContexts;
		static void renderBitmap( ::openfl::display::DisplayObject shape, ::openfl::_internal::renderer::RenderSession renderSession,hx::Null< Bool >  smooth);
		static ::Dynamic renderBitmap_dyn();

		 ::openfl::_internal::renderer::opengl::utils::BlendModeManager blendModeManager;
		Bool contextLost;
		 ::lime::graphics::opengl::GLFramebuffer defaultFramebuffer;
		 ::openfl::_internal::renderer::opengl::utils::FilterManager filterManager;
		 ::lime::graphics::GLRenderContext gl;
		Int _glContextId;
		 ::openfl::_internal::renderer::opengl::utils::GLMaskManager maskManager;
		 ::openfl::geom::Point offset;
		 ::Dynamic options;
		Bool preserveDrawingBuffer;
		 ::openfl::geom::Point projection;
		 ::openfl::_internal::renderer::opengl::utils::ShaderManager shaderManager;
		 ::openfl::_internal::renderer::opengl::utils::SpriteBatch spriteBatch;
		 ::openfl::_internal::renderer::opengl::utils::StencilManager stencilManager;
		 ::Dynamic view;
		 ::openfl::geom::Matrix projectionMatrix;
		 ::Dynamic _hx___stage;
		Int vpX;
		Int vpY;
		Int vpWidth;
		Int vpHeight;
		void destroy();
		::Dynamic destroy_dyn();

		void setViewport(Int x,Int y,Int width,Int height);

		void setOrtho(Float x,Float y,Float width,Float height);
		::Dynamic setOrtho_dyn();

		void handleContextLost( ::Dynamic event);
		::Dynamic handleContextLost_dyn();

		void handleContextRestored();
		::Dynamic handleContextRestored_dyn();

		void render( ::openfl::display::Stage stage);

		void renderDisplayObject( ::openfl::display::DisplayObject displayObject, ::openfl::geom::Point projection, ::lime::graphics::opengl::GLFramebuffer buffer);
		::Dynamic renderDisplayObject_dyn();

		void resize(Int width,Int height);

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl

#endif /* INCLUDED_openfl__internal_renderer_opengl_GLRenderer */ 
