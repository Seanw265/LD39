// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_FilterManager
#define INCLUDED_openfl__internal_renderer_opengl_utils_FilterManager

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lime,graphics,GLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLBuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLFramebuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS3(openfl,_internal,renderer,RenderSession)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,shaders2,DefaultShader)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,shaders2,Shader)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,FilterManager)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,RenderTexture)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES FilterManager_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef FilterManager_obj OBJ_;
		FilterManager_obj();

	public:
		void __construct( ::lime::graphics::GLRenderContext gl,Bool transparent);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.renderer.opengl.utils.FilterManager")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.renderer.opengl.utils.FilterManager"); }
		static hx::ObjectPtr< FilterManager_obj > __new( ::lime::graphics::GLRenderContext gl,Bool transparent);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FilterManager_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("FilterManager","\x75","\xd1","\x81","\x1c"); }

		 ::lime::graphics::opengl::GLFramebuffer buffer;
		 ::lime::utils::ArrayBufferView colorArray;
		 ::lime::graphics::opengl::GLBuffer colorBuffer;
		 ::openfl::_internal::renderer::opengl::shaders2::DefaultShader defaultShader;
		::cpp::VirtualArray filterStack;
		 ::lime::graphics::GLRenderContext gl;
		Int height;
		 ::lime::graphics::opengl::GLBuffer indexBuffer;
		Float offsetX;
		Float offsetY;
		 ::openfl::_internal::renderer::RenderSession renderSession;
		::Array< ::Dynamic> texturePool;
		Bool transparent;
		 ::lime::utils::ArrayBufferView uvArray;
		 ::lime::graphics::opengl::GLBuffer uvBuffer;
		 ::lime::utils::ArrayBufferView vertexArray;
		 ::lime::graphics::opengl::GLBuffer vertexBuffer;
		Int width;
		void applyFilterPass( ::Dynamic filter, ::openfl::geom::Rectangle filterArea,Int width,Int height);
		::Dynamic applyFilterPass_dyn();

		void begin( ::openfl::_internal::renderer::RenderSession renderSession, ::lime::graphics::opengl::GLFramebuffer buffer);
		::Dynamic begin_dyn();

		void destroy();
		::Dynamic destroy_dyn();

		void initShaderBuffers();
		::Dynamic initShaderBuffers_dyn();

		void popFilter();
		::Dynamic popFilter_dyn();

		void pushFilter( ::Dynamic filterBlock);
		::Dynamic pushFilter_dyn();

		void setContext( ::lime::graphics::GLRenderContext gl);
		::Dynamic setContext_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils

#endif /* INCLUDED_openfl__internal_renderer_opengl_utils_FilterManager */ 
