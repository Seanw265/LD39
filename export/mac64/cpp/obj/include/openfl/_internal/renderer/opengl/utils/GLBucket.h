// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucket
#define INCLUDED_openfl__internal_renderer_opengl_utils_GLBucket

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lime,graphics,GLRenderContext)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLBuffer)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLObject)
HX_DECLARE_CLASS3(lime,graphics,opengl,GLTexture)
HX_DECLARE_CLASS2(lime,utils,ArrayBufferView)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,BucketDataType)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,BucketMode)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,GLBucket)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,GLBucketData)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,GraphicType)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Point)

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES GLBucket_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef GLBucket_obj OBJ_;
		GLBucket_obj();

	public:
		void __construct( ::lime::graphics::GLRenderContext gl);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl._internal.renderer.opengl.utils.GLBucket")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl._internal.renderer.opengl.utils.GLBucket"); }
		static hx::ObjectPtr< GLBucket_obj > __new( ::lime::graphics::GLRenderContext gl);
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~GLBucket_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("GLBucket","\x6f","\x40","\x8e","\x38"); }

		 ::lime::graphics::GLRenderContext gl;
		::Array< Float > color;
		Float alpha;
		Bool dirty;
		::hx::EnumBase graphicType;
		Int lastIndex;
		Int fillIndex;
		::hx::EnumBase mode;
		::Array< ::Dynamic> fills;
		::Array< ::Dynamic> lines;
		 ::openfl::display::BitmapData bitmap;
		 ::lime::graphics::opengl::GLTexture texture;
		 ::openfl::geom::Matrix textureMatrix;
		Bool textureRepeat;
		Bool textureSmooth;
		 ::openfl::geom::Point textureTL;
		 ::openfl::geom::Point textureBR;
		 ::openfl::geom::Matrix overrideMatrix;
		 ::lime::graphics::opengl::GLBuffer tileBuffer;
		 ::lime::utils::ArrayBufferView glTile;
		::Array< Int > tile;
		Bool uploadTileBuffer;
		 ::openfl::_internal::renderer::opengl::utils::GLBucketData getData(::hx::EnumBase type);
		::Dynamic getData_dyn();

		void optimize();
		::Dynamic optimize_dyn();

		void reset();
		::Dynamic reset_dyn();

		void uploadTile(Int x,Int y,Int w,Int h);
		::Dynamic uploadTile_dyn();

		void upload();
		::Dynamic upload_dyn();

};

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils

#endif /* INCLUDED_openfl__internal_renderer_opengl_utils_GLBucket */ 
