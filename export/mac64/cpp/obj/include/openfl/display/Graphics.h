// Generated by Haxe 3.3.0
#ifndef INCLUDED_openfl_display_Graphics
#define INCLUDED_openfl_display_Graphics

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(lime,graphics,Image)
HX_DECLARE_CLASS3(lime,graphics,cairo,Cairo)
HX_DECLARE_CLASS3(openfl,_internal,renderer,DrawCommandBuffer)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,DrawPath)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,GLStack)
HX_DECLARE_CLASS5(openfl,_internal,renderer,opengl,utils,RenderTexture)
HX_DECLARE_CLASS2(openfl,display,BitmapData)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,Graphics)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,IGraphicsData)
HX_DECLARE_CLASS2(openfl,display,Shader)
HX_DECLARE_CLASS2(openfl,display,Tilesheet)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,geom,Matrix)
HX_DECLARE_CLASS2(openfl,geom,Rectangle)

namespace openfl{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Graphics_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Graphics_obj OBJ_;
		Graphics_obj();

	public:
		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="openfl.display.Graphics")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"openfl.display.Graphics"); }
		static hx::ObjectPtr< Graphics_obj > __new();
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Graphics_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		::String __ToString() const { return HX_HCSTRING("Graphics","\xeb","\xb4","\x19","\xec"); }

		static void __boot();
		static Int TILE_SCALE;
		static Int TILE_ROTATION;
		static Int TILE_RGB;
		static Int TILE_ALPHA;
		static Int TILE_TRANS_2x2;
		static Int TILE_RECT;
		static Int TILE_ORIGIN;
		static Int TILE_BLEND_NORMAL;
		static Int TILE_BLEND_ADD;
		static Int TILE_BLEND_MULTIPLY;
		static Int TILE_BLEND_SCREEN;
		static Int TILE_BLEND_SUBTRACT;
		static Int TILE_BLEND_DARKEN;
		static Int TILE_BLEND_LIGHTEN;
		static Int TILE_BLEND_OVERLAY;
		static Int TILE_BLEND_HARDLIGHT;
		static Int TILE_BLEND_DIFFERENCE;
		static Int TILE_BLEND_INVERT;
		Bool _hx___hardware;
		 ::openfl::geom::Rectangle _hx___bounds;
		 ::openfl::_internal::renderer::DrawCommandBuffer _hx___commands;
		Bool _hx___dirty;
		::Array< ::Dynamic> _hx___glStack;
		::Array< ::Dynamic> _hx___drawPaths;
		 ::lime::graphics::Image _hx___image;
		Float _hx___positionX;
		Float _hx___positionY;
		Float _hx___strokePadding;
		Bool _hx___transformDirty;
		Bool _hx___visible;
		 ::openfl::_internal::renderer::opengl::utils::RenderTexture _hx___cachedTexture;
		 ::openfl::display::DisplayObject _hx___owner;
		 ::lime::graphics::cairo::Cairo _hx___cairo;
		 ::openfl::display::BitmapData _hx___bitmap;
		void beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< Bool >  repeat,hx::Null< Bool >  smooth);
		::Dynamic beginBitmapFill_dyn();

		void beginFill(hx::Null< Int >  color,hx::Null< Float >  alpha);
		::Dynamic beginFill_dyn();

		void beginGradientFill( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,hx::Null< Float >  focalPointRatio);
		::Dynamic beginGradientFill_dyn();

		void clear();
		::Dynamic clear_dyn();

		void copyFrom( ::openfl::display::Graphics sourceGraphics);
		::Dynamic copyFrom_dyn();

		void cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY);
		::Dynamic cubicCurveTo_dyn();

		void curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY);
		::Dynamic curveTo_dyn();

		void drawCircle(Float x,Float y,Float radius);
		::Dynamic drawCircle_dyn();

		void drawEllipse(Float x,Float y,Float width,Float height);
		::Dynamic drawEllipse_dyn();

		void drawGraphicsData(::Array< ::Dynamic> graphicsData);
		::Dynamic drawGraphicsData_dyn();

		void drawPath(::Array< Int > commands,::Array< Float > data,::String winding);
		::Dynamic drawPath_dyn();

		void drawRect(Float x,Float y,Float width,Float height);
		::Dynamic drawRect_dyn();

		void drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight);
		::Dynamic drawRoundRect_dyn();

		void drawRoundRectComplex(Float x,Float y,Float width,Float height,Float topLeftRadius,Float topRightRadius,Float bottomLeftRadius,Float bottomRightRadius);
		::Dynamic drawRoundRectComplex_dyn();

		void drawTiles( ::openfl::display::Tilesheet sheet,::Array< Float > tileData,hx::Null< Bool >  smooth,hx::Null< Int >  flags, ::openfl::display::Shader shader,hx::Null< Int >  count);
		::Dynamic drawTiles_dyn();

		void drawTriangles(::Array< Float > vertices,::Array< Int > indices,::Array< Float > uvtData, ::Dynamic culling);
		::Dynamic drawTriangles_dyn();

		void endFill();
		::Dynamic endFill_dyn();

		void lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,hx::Null< Bool >  repeat,hx::Null< Bool >  smooth);
		::Dynamic lineBitmapStyle_dyn();

		void lineGradientStyle( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,hx::Null< Float >  focalPointRatio);
		::Dynamic lineGradientStyle_dyn();

		void lineStyle( ::Dynamic thickness,hx::Null< Int >  color,hx::Null< Float >  alpha,hx::Null< Bool >  pixelHinting, ::Dynamic scaleMode, ::Dynamic caps, ::Dynamic joints,hx::Null< Float >  miterLimit);
		::Dynamic lineStyle_dyn();

		void lineTo(Float x,Float y);
		::Dynamic lineTo_dyn();

		void moveTo(Float x,Float y);
		::Dynamic moveTo_dyn();

		Float _hx___calculateBezierCubicPoint(Float t,Float p1,Float p2,Float p3,Float p4);
		::Dynamic _hx___calculateBezierCubicPoint_dyn();

		Float _hx___calculateBezierQuadPoint(Float t,Float p1,Float p2,Float p3);
		::Dynamic _hx___calculateBezierQuadPoint_dyn();

		void _hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix);
		::Dynamic _hx___getBounds_dyn();

		Bool _hx___hitTest(Float x,Float y,Bool shapeFlag, ::openfl::geom::Matrix matrix);
		::Dynamic _hx___hitTest_dyn();

		void _hx___inflateBounds(Float x,Float y);
		::Dynamic _hx___inflateBounds_dyn();

		Bool set___dirty(Bool value);
		::Dynamic set___dirty_dyn();

};

} // end namespace openfl
} // end namespace display

#endif /* INCLUDED_openfl_display_Graphics */ 
