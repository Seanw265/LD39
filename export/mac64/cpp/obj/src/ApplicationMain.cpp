// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_ApplicationMain
#include <ApplicationMain.h>
#endif
#ifndef INCLUDED_DocumentClass
#include <DocumentClass.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_NMEPreloader
#include <NMEPreloader.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_system_FlxBasePreloader
#include <flixel/system/FlxBasePreloader.h>
#endif
#ifndef INCLUDED_flixel_system_FlxPreloader
#include <flixel/system/FlxPreloader.h>
#endif
#ifndef INCLUDED_lime_Assets
#include <lime/Assets.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Event_Void_Void
#include <lime/app/Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app_Preloader
#include <lime/app/Preloader.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Preloader
#include <openfl/display/Preloader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_ActivityEvent
#include <openfl/events/ActivityEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FullScreenEvent
#include <openfl/events/FullScreenEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)0,
};

void ApplicationMain_obj::__construct() { }

Dynamic ApplicationMain_obj::__CreateEmpty() { return new ApplicationMain_obj; }

hx::ObjectPtr< ApplicationMain_obj > ApplicationMain_obj::__new()
{
	hx::ObjectPtr< ApplicationMain_obj > _hx_result = new ApplicationMain_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ApplicationMain_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ApplicationMain_obj > _hx_result = new ApplicationMain_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic ApplicationMain_obj::config;

 ::openfl::display::Preloader ApplicationMain_obj::preloader;

void ApplicationMain_obj::create(){
            	HX_STACK_FRAME("ApplicationMain","create",0x2f7db141,"ApplicationMain.create","ApplicationMain.hx",16,0x0780ded5)
HXLINE(  18)		HX_VARI(  ::openfl::display::Application,app) =  ::openfl::display::Application_obj::__new();
HXLINE(  19)		app->create(::ApplicationMain_obj::config);
HXLINE(  21)		HX_VARI(  ::flixel::_hx_system::FlxPreloader,display) =  ::flixel::_hx_system::FlxPreloader_obj::__new(null(),null());
HXLINE(  23)		::ApplicationMain_obj::preloader =  ::openfl::display::Preloader_obj::__new(display);
HXLINE(  24)		app->setPreloader(::ApplicationMain_obj::preloader);
HXLINE(  25)		::ApplicationMain_obj::preloader->onComplete->add(::ApplicationMain_obj::init_dyn(),null(),null());
HXLINE(  26)		::ApplicationMain_obj::preloader->create(::ApplicationMain_obj::config);
HXLINE(  75)		HX_VARI( Int,result) = app->exec();
HXLINE(  78)		::Sys_obj::exit(result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ApplicationMain_obj,create,(void))

void ApplicationMain_obj::init(){
            	HX_STACK_FRAME("ApplicationMain","init",0x9137fa15,"ApplicationMain.init","ApplicationMain.hx",84,0x0780ded5)
HXLINE(  86)		HX_VARI( ::Array< Int >,loaded) = ::Array_obj< Int >::fromData( _hx_array_data_0,1);
HXLINE(  87)		HX_VARI( Int,total) = (int)0;
HXLINE( 100)		::ApplicationMain_obj::preloader = null();
HXLINE( 105)		if ((total == (int)0)) {
HXLINE( 107)			::ApplicationMain_obj::start();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ApplicationMain_obj,init,(void))

void ApplicationMain_obj::main(){
            	HX_STACK_FRAME("ApplicationMain","main",0x93d2f73e,"ApplicationMain.main","ApplicationMain.hx",114,0x0780ded5)
HXLINE( 116)		::ApplicationMain_obj::config =  ::Dynamic(hx::Anon_obj::Create(9)
            			->setFixed(0,HX_("company",3d,15,69,83),HX_("HaxeFlixel",42,8f,0c,ac))
            			->setFixed(1,HX_("build",2e,db,ea,ba),HX_("332",92,df,26,00))
            			->setFixed(2,HX_("windows",83,de,74,e8),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Dynamic(hx::Anon_obj::Create(16)
            				->setFixed(0,HX_("resizable",6b,37,50,a9),true)
            				->setFixed(1,HX_("display",42,2a,4a,bb),(int)0)
            				->setFixed(2,HX_("width",06,b6,62,ca),(int)640)
            				->setFixed(3,HX_("fullscreen",3b,3a,b4,f9),false)
            				->setFixed(4,HX_("x",78,00,00,00),null())
            				->setFixed(5,HX_("y",79,00,00,00),null())
            				->setFixed(6,HX_("height",e7,07,4c,02),(int)360)
            				->setFixed(7,HX_("title",98,15,3b,10),HX_("LD39",1e,fd,6f,32))
            				->setFixed(8,HX_("borderless",45,46,71,17),false)
            				->setFixed(9,HX_("background",ee,93,1d,26),(int)0)
            				->setFixed(10,HX_("stencilBuffer",1c,94,39,31),true)
            				->setFixed(11,HX_("vsync",d1,2d,a8,3d),true)
            				->setFixed(12,HX_("antialiasing",f4,16,b3,48),(int)0)
            				->setFixed(13,HX_("parameters",aa,be,7e,51),HX_("{}",a2,6b,00,00))
            				->setFixed(14,HX_("depthBuffer",63,46,9e,52),false)
            				->setFixed(15,HX_("hardware",a8,e2,d3,75),true))))
            			->setFixed(3,HX_("orientation",d0,ee,fe,fd),HX_("landscape",3b,78,ad,fc))
            			->setFixed(4,HX_("fps",e9,c7,4d,00),(int)60)
            			->setFixed(5,HX_("packageName",f1,04,ad,04),HX_("com.example.myapp",84,30,57,c1))
            			->setFixed(6,HX_("file",7c,ce,bb,43),HX_("LD39",1e,fd,6f,32))
            			->setFixed(7,HX_("name",4b,72,ff,48),HX_("LD39",1e,fd,6f,32))
            			->setFixed(8,HX_("version",18,e7,f1,7c),HX_("0.0.1",35,3d,c8,c1)));
HXLINE( 163)		::ApplicationMain_obj::create();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ApplicationMain_obj,main,(void))

void ApplicationMain_obj::start(){
            	HX_STACK_FRAME("ApplicationMain","start",0x45b5d9bd,"ApplicationMain.start","ApplicationMain.hx",169,0x0780ded5)
HXLINE( 171)		HX_VARI( Bool,hasMain) = false;
HXLINE( 172)		HX_VARI( hx::Class,entryPoint) = ::Type_obj::resolveClass(HX_("Main",59,64,2f,33));
HXLINE( 174)		{
HXLINE( 174)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 174)			HX_VARI( ::Array< ::String >,_g1) = ::Type_obj::getClassFields(entryPoint);
HXDLIN( 174)			while((_g < _g1->length)){
HXLINE( 174)				HX_VARI( ::String,methodName) = _g1->__get(_g);
HXDLIN( 174)				++_g;
HXLINE( 176)				if ((methodName == HX_("main",39,38,56,48))) {
HXLINE( 178)					hasMain = true;
HXLINE( 179)					goto _hx_goto_1;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 185)		::lime::Assets_obj::initialize();
HXLINE( 187)		if (hasMain) {
HXLINE( 189)			 ::Dynamic _hx_tmp = ::Reflect_obj::field(entryPoint,HX_("main",39,38,56,48));
HXDLIN( 189)			::Reflect_obj::callMethod(entryPoint,_hx_tmp,::cpp::VirtualArray_obj::__new(0));
            		}
            		else {
HXLINE( 193)			::Type_obj::createInstance(hx::ClassOf< ::DocumentClass >(),::cpp::VirtualArray_obj::__new(0));
            		}
HXLINE( 204)		Bool _hx_tmp1 = ::openfl::Lib_obj::current->stage->window->_hx___fullscreen;
HXDLIN( 204)		if (_hx_tmp1) {
HXLINE( 206)			::openfl::Lib_obj::current->stage->dispatchEvent( ::openfl::events::FullScreenEvent_obj::__new(HX_("fullScreen",5b,ae,48,2e),false,false,true,true));
            		}
HXLINE( 210)		::openfl::Lib_obj::current->stage->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("resize",f4,59,7b,08),false,false));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ApplicationMain_obj,start,(void))


ApplicationMain_obj::ApplicationMain_obj()
{
}

bool ApplicationMain_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { outValue = config; return true; }
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"preloader") ) { outValue = preloader; return true; }
	}
	return false;
}

bool ApplicationMain_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"config") ) { config=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"preloader") ) { preloader=ioValue.Cast<  ::openfl::display::Preloader >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ApplicationMain_obj_sMemberStorageInfo = 0;
static hx::StaticInfo ApplicationMain_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &ApplicationMain_obj::config,HX_HCSTRING("config","\xc2","\x56","\xd2","\xc7")},
	{hx::fsObject /*::openfl::display::Preloader*/ ,(void *) &ApplicationMain_obj::preloader,HX_HCSTRING("preloader","\x76","\xe4","\x7b","\x82")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ApplicationMain_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::config,"config");
	HX_MARK_MEMBER_NAME(ApplicationMain_obj::preloader,"preloader");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ApplicationMain_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::config,"config");
	HX_VISIT_MEMBER_NAME(ApplicationMain_obj::preloader,"preloader");
};

#endif

hx::Class ApplicationMain_obj::__mClass;

static ::String ApplicationMain_obj_sStaticFields[] = {
	HX_HCSTRING("config","\xc2","\x56","\xd2","\xc7"),
	HX_HCSTRING("preloader","\x76","\xe4","\x7b","\x82"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	::String(null())
};

void ApplicationMain_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("ApplicationMain","\x89","\xff","\x39","\x4a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ApplicationMain_obj::__GetStatic;
	__mClass->mSetStaticField = &ApplicationMain_obj::__SetStatic;
	__mClass->mMarkFunc = ApplicationMain_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ApplicationMain_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ApplicationMain_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ApplicationMain_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ApplicationMain_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ApplicationMain_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

