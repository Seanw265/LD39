// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_BuildScreen
#include <BuildScreen.h>
#endif
#ifndef INCLUDED_BuildingInfo
#include <BuildingInfo.h>
#endif
#ifndef INCLUDED_LotManager
#include <LotManager.h>
#endif
#ifndef INCLUDED_NotEnoughCashState
#include <NotEnoughCashState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)0,
};
static const Int _hx_array_data_1[] = {
	(Int)1,
};
static const Int _hx_array_data_2[] = {
	(Int)2,
};
static const Int _hx_array_data_3[] = {
	(Int)0,(Int)1,(Int)2,(Int)3,
};
static const Int _hx_array_data_4[] = {
	(Int)0,
};
static const Int _hx_array_data_5[] = {
	(Int)1,
};
static const Int _hx_array_data_6[] = {
	(Int)2,
};
static const Int _hx_array_data_7[] = {
	(Int)0,
};
static const Int _hx_array_data_8[] = {
	(Int)1,
};
static const Int _hx_array_data_9[] = {
	(Int)2,
};
static const Int _hx_array_data_10[] = {
	(Int)0,
};
static const Int _hx_array_data_11[] = {
	(Int)1,
};
static const Int _hx_array_data_12[] = {
	(Int)2,
};
static const Int _hx_array_data_13[] = {
	(Int)0,(Int)1,(Int)2,(Int)3,
};

void BuildScreen_obj::__construct( ::PlayState playState){
            	HX_STACK_FRAME("BuildScreen","new",0xb477ef0c,"BuildScreen.new","BuildScreen.hx",23,0x5dcbb5e4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(playState,"playState")
HXLINE(  94)		this->currentIndex = (int)0;
HXLINE( 104)		super::__construct(null());
HXLINE( 106)		this->playState = playState;
HXLINE( 108)		HX_VARI(  ::flixel::FlxSprite,backgroundSprite) =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE( 109)		Float _hx_tmp = (::flixel::FlxG_obj::camera->width * ((Float)0.9));
HXDLIN( 109)		Int _hx_tmp1 = ::Math_obj::round(_hx_tmp);
HXDLIN( 109)		Float _hx_tmp2 = (::flixel::FlxG_obj::camera->height * ((Float)0.9));
HXDLIN( 109)		Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN( 109)		backgroundSprite->makeGraphic(_hx_tmp1,_hx_tmp3,(int)-14077892,null(),null());
HXLINE( 110)		Float _hx_tmp4 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN( 110)		Float _hx_tmp5 = backgroundSprite->get_width();
HXDLIN( 110)		backgroundSprite->set_x((_hx_tmp4 - ((Float)_hx_tmp5 / (Float)(int)2)));
HXLINE( 111)		Float _hx_tmp6 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN( 111)		Float _hx_tmp7 = backgroundSprite->get_height();
HXDLIN( 111)		backgroundSprite->set_y((_hx_tmp6 - ((Float)_hx_tmp7 / (Float)(int)2)));
HXLINE( 112)		this->add(backgroundSprite);
HXLINE( 114)		Float _hx_tmp8 = backgroundSprite->x;
HXDLIN( 114)		Float _hx_tmp9 = backgroundSprite->get_width();
HXDLIN( 114)		Float _hx_tmp10 = (((_hx_tmp8 + _hx_tmp9) - (int)8) - (int)2);
HXDLIN( 114)		Float _hx_tmp11 = (backgroundSprite->y + (int)2);
HXDLIN( 114)		HX_VARI(  ::flixel::ui::FlxButton,cancelButton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp10,_hx_tmp11,HX_("",00,00,00,00),this->closeButtonPressed_dyn());
HXLINE( 115)		cancelButton->loadGraphic(HX_("assets/images/CloseButton.png",9a,7a,e2,97),true,(int)8,(int)8,null(),null());
HXLINE( 116)		cancelButton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_0,1),null(),null(),null(),null());
HXLINE( 117)		cancelButton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_1,1),null(),null(),null(),null());
HXLINE( 118)		cancelButton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_2,1),null(),null(),null(),null());
HXLINE( 119)		this->add(cancelButton);
HXLINE( 121)		HX_VARI(  ::flixel::FlxSprite,buildingBackground) =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE( 122)		buildingBackground->makeGraphic((int)24,(int)40,(int)-7299935,null(),null());
HXLINE( 123)		Float _hx_tmp12 = (backgroundSprite->x + (int)2);
HXDLIN( 123)		buildingBackground->set_x(_hx_tmp12);
HXLINE( 124)		Float _hx_tmp13 = backgroundSprite->y;
HXDLIN( 124)		Float _hx_tmp14 = backgroundSprite->get_height();
HXDLIN( 124)		Float _hx_tmp15 = (_hx_tmp13 + ((Float)_hx_tmp14 / (Float)(int)2));
HXDLIN( 124)		Float _hx_tmp16 = buildingBackground->get_height();
HXDLIN( 124)		buildingBackground->set_y((_hx_tmp15 - ((Float)_hx_tmp16 / (Float)(int)2)));
HXLINE( 125)		this->add(buildingBackground);
HXLINE( 127)		this->buildingDisplay =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE( 128)		this->buildingDisplay->loadGraphic(HX_("assets/images/Windmill-1.png",4e,3c,e9,9a),true,(int)24,(int)40,null(),null());
HXLINE( 129)		Float _hx_tmp17 = (backgroundSprite->x + (int)2);
HXDLIN( 129)		this->buildingDisplay->set_x(_hx_tmp17);
HXLINE( 130)		Float _hx_tmp18 = backgroundSprite->y;
HXDLIN( 130)		Float _hx_tmp19 = backgroundSprite->get_height();
HXDLIN( 130)		Float _hx_tmp20 = (_hx_tmp18 + ((Float)_hx_tmp19 / (Float)(int)2));
HXDLIN( 130)		Float _hx_tmp21 = this->buildingDisplay->get_height();
HXDLIN( 130)		this->buildingDisplay->set_y((_hx_tmp20 - ((Float)_hx_tmp21 / (Float)(int)2)));
HXLINE( 131)		this->buildingDisplay->animation->add(HX_("display",42,2a,4a,bb),::Array_obj< Int >::fromData( _hx_array_data_3,4),(int)10,true,null(),null());
HXLINE( 132)		this->buildingDisplay->animation->play(HX_("display",42,2a,4a,bb),null(),null(),null());
HXLINE( 133)		this->add(this->buildingDisplay);
HXLINE( 135)		Float _hx_tmp22 = (backgroundSprite->x + (int)2);
HXDLIN( 135)		Float _hx_tmp23 = (backgroundSprite->y + (int)2);
HXDLIN( 135)		this->buildingTitleDisplay =  ::flixel::text::FlxText_obj::__new(_hx_tmp22,_hx_tmp23,(int)100,HX_("Old Windmill",7d,84,4e,79),(int)13,null());
HXLINE( 136)		this->buildingTitleDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE( 137)		this->add(this->buildingTitleDisplay);
HXLINE( 139)		Float _hx_tmp24 = this->buildingDisplay->x;
HXDLIN( 139)		Float _hx_tmp25 = this->buildingDisplay->get_width();
HXDLIN( 139)		Float _hx_tmp26 = ((_hx_tmp24 + _hx_tmp25) + (int)2);
HXDLIN( 139)		Float _hx_tmp27 = backgroundSprite->x;
HXDLIN( 139)		Float _hx_tmp28 = backgroundSprite->get_width();
HXDLIN( 139)		Float _hx_tmp29 = (_hx_tmp27 + _hx_tmp28);
HXDLIN( 139)		Float _hx_tmp30 = this->buildingDisplay->x;
HXDLIN( 139)		Float _hx_tmp31 = this->buildingDisplay->get_width();
HXDLIN( 139)		Float _hx_tmp32 = (_hx_tmp26 - ((Float)(((int)2 * (_hx_tmp29 - ((_hx_tmp30 + _hx_tmp31) + (int)2))) - (int)2) / (Float)(int)4));
HXDLIN( 139)		Float _hx_tmp33 = this->buildingTitleDisplay->y;
HXDLIN( 139)		Float _hx_tmp34 = this->buildingTitleDisplay->get_height();
HXDLIN( 139)		Float _hx_tmp35 = ((_hx_tmp33 + _hx_tmp34) + (int)2);
HXDLIN( 139)		Float _hx_tmp36 = backgroundSprite->x;
HXDLIN( 139)		Float _hx_tmp37 = backgroundSprite->get_width();
HXDLIN( 139)		Float _hx_tmp38 = (_hx_tmp36 + _hx_tmp37);
HXDLIN( 139)		Float _hx_tmp39 = this->buildingDisplay->x;
HXDLIN( 139)		Float _hx_tmp40 = this->buildingDisplay->get_width();
HXDLIN( 139)		this->buildingDescriptionDisplay =  ::flixel::text::FlxText_obj::__new(_hx_tmp32,_hx_tmp35,(((int)2 * (_hx_tmp38 - ((_hx_tmp39 + _hx_tmp40) + (int)2))) - (int)2),HX_("Wow! This windmill powered Thomas Edison's toaster from 1880 until 1881! Consider yourself lucky, you've got an antique on your hands!\nDelivers 1 unit every 3 seconds",ee,d8,03,4e),(int)13,null());
HXLINE( 140)		this->buildingDescriptionDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE( 141)		this->buildingDescriptionDisplay->scale->set_x(((Float)0.5));
HXLINE( 142)		this->buildingDescriptionDisplay->scale->set_y(((Float)0.5));
HXLINE( 143)		this->add(this->buildingDescriptionDisplay);
HXLINE( 145)		Float _hx_tmp41 = backgroundSprite->x;
HXDLIN( 145)		Float _hx_tmp42 = backgroundSprite->get_width();
HXDLIN( 145)		Float _hx_tmp43 = (((_hx_tmp41 + _hx_tmp42) - (int)32) - (int)2);
HXDLIN( 145)		Float _hx_tmp44 = backgroundSprite->y;
HXDLIN( 145)		Float _hx_tmp45 = backgroundSprite->get_height();
HXDLIN( 145)		HX_VARI(  ::flixel::ui::FlxButton,buyButton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp43,(((_hx_tmp44 + _hx_tmp45) - (int)20) - (int)2),HX_("",00,00,00,00),this->buy_dyn());
HXLINE( 146)		buyButton->loadGraphic(HX_("assets/images/Buy.png",16,07,71,3c),true,(int)32,(int)20,null(),null());
HXLINE( 147)		buyButton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_4,1),null(),null(),null(),null());
HXLINE( 148)		buyButton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_5,1),null(),null(),null(),null());
HXLINE( 149)		buyButton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_6,1),null(),null(),null(),null());
HXLINE( 150)		this->add(buyButton);
HXLINE( 152)		Float _hx_tmp46 = backgroundSprite->x;
HXDLIN( 152)		Float _hx_tmp47 = backgroundSprite->get_width();
HXDLIN( 152)		Float _hx_tmp48 = (((_hx_tmp46 + ((Float)_hx_tmp47 / (Float)(int)2)) - (int)16) - (int)1);
HXDLIN( 152)		Float _hx_tmp49 = backgroundSprite->y;
HXDLIN( 152)		Float _hx_tmp50 = backgroundSprite->get_height();
HXDLIN( 152)		HX_VARI(  ::flixel::ui::FlxButton,leftbutton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp48,(((_hx_tmp49 + _hx_tmp50) - (int)20) - (int)2),HX_("",00,00,00,00),this->left_dyn());
HXLINE( 153)		leftbutton->loadGraphic(HX_("assets/images/Left.png",8d,6b,bc,d2),true,(int)16,(int)20,null(),null());
HXLINE( 154)		leftbutton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_7,1),null(),null(),null(),null());
HXLINE( 155)		leftbutton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_8,1),null(),null(),null(),null());
HXLINE( 156)		leftbutton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_9,1),null(),null(),null(),null());
HXLINE( 157)		this->add(leftbutton);
HXLINE( 159)		Float _hx_tmp51 = backgroundSprite->x;
HXDLIN( 159)		Float _hx_tmp52 = backgroundSprite->get_width();
HXDLIN( 159)		Float _hx_tmp53 = ((_hx_tmp51 + ((Float)_hx_tmp52 / (Float)(int)2)) + (int)1);
HXDLIN( 159)		Float _hx_tmp54 = backgroundSprite->y;
HXDLIN( 159)		Float _hx_tmp55 = backgroundSprite->get_height();
HXDLIN( 159)		HX_VARI(  ::flixel::ui::FlxButton,rightbutton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp53,(((_hx_tmp54 + _hx_tmp55) - (int)20) - (int)2),HX_("",00,00,00,00),this->right_dyn());
HXLINE( 160)		rightbutton->loadGraphic(HX_("assets/images/Right.png",ec,21,4f,e8),true,(int)16,(int)20,null(),null());
HXLINE( 161)		rightbutton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_10,1),null(),null(),null(),null());
HXLINE( 162)		rightbutton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_11,1),null(),null(),null(),null());
HXLINE( 163)		rightbutton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_12,1),null(),null(),null(),null());
HXLINE( 164)		this->add(rightbutton);
HXLINE( 166)		this->setCurrentIndex((int)0);
HXLINE( 168)		Int _hx_tmp56 = ::Math_obj::round(playState->lots->totalUnits);
HXDLIN( 168)		this->unitsDisplay =  ::flixel::text::FlxText_obj::__new((int)0,(int)0,(int)100,(_hx_tmp56 + HX_(" U",35,1c,00,00)),(int)13,null());
HXLINE( 169)		this->unitsDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE( 170)		this->unitsDisplay->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 171)		Float _hx_tmp57 = (backgroundSprite->x + (int)2);
HXDLIN( 171)		Float _hx_tmp58 = this->unitsDisplay->get_width();
HXDLIN( 171)		this->unitsDisplay->set_x((_hx_tmp57 - ((Float)_hx_tmp58 / (Float)(int)4)));
HXLINE( 172)		Float _hx_tmp59 = backgroundSprite->get_height();
HXDLIN( 172)		Float _hx_tmp60 = (_hx_tmp59 + backgroundSprite->y);
HXDLIN( 172)		Float _hx_tmp61 = this->unitsDisplay->get_height();
HXDLIN( 172)		this->unitsDisplay->set_y((_hx_tmp60 - _hx_tmp61));
HXLINE( 174)		this->unitsDisplay->scale->set_x(((Float)0.5));
HXLINE( 175)		this->unitsDisplay->scale->set_y(((Float)0.5));
HXLINE( 176)		this->add(this->unitsDisplay);
HXLINE( 178)		Int _hx_tmp62 = ::Math_obj::round(playState->lots->money);
HXDLIN( 178)		this->cashDisplay =  ::flixel::text::FlxText_obj::__new((int)0,(int)0,(int)100,(_hx_tmp62 + HX_(" $",04,1c,00,00)),(int)13,null());
HXLINE( 179)		this->cashDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE( 180)		this->cashDisplay->set_alignment(HX_("left",07,08,b0,47));
HXLINE( 181)		this->cashDisplay->set_x(this->unitsDisplay->x);
HXLINE( 182)		Float _hx_tmp63 = this->unitsDisplay->y;
HXDLIN( 182)		Float _hx_tmp64 = this->unitsDisplay->get_height();
HXDLIN( 182)		Float _hx_tmp65 = (_hx_tmp63 + (_hx_tmp64 * this->unitsDisplay->scale->y));
HXDLIN( 182)		Float _hx_tmp66 = this->cashDisplay->get_height();
HXDLIN( 182)		this->cashDisplay->set_y(((_hx_tmp65 - ((Float)_hx_tmp66 / (Float)(int)4)) + (int)1));
HXLINE( 183)		this->cashDisplay->scale->set_x(((Float)0.5));
HXLINE( 184)		this->cashDisplay->scale->set_y(((Float)0.5));
HXLINE( 185)		this->add(this->cashDisplay);
            	}

Dynamic BuildScreen_obj::__CreateEmpty() { return new BuildScreen_obj; }

hx::ObjectPtr< BuildScreen_obj > BuildScreen_obj::__new( ::PlayState playState)
{
	hx::ObjectPtr< BuildScreen_obj > _hx_result = new BuildScreen_obj();
	_hx_result->__construct(playState);
	return _hx_result;
}

Dynamic BuildScreen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BuildScreen_obj > _hx_result = new BuildScreen_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void BuildScreen_obj::closeButtonPressed(){
            	HX_STACK_FRAME("BuildScreen","closeButtonPressed",0x228da2cc,"BuildScreen.closeButtonPressed","BuildScreen.hx",188,0x5dcbb5e4)
            	HX_STACK_THIS(this)
HXLINE( 189)		this->playState->closeBuildingScreen(false,null());
HXLINE( 190)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuildScreen_obj,closeButtonPressed,(void))

void BuildScreen_obj::buy(){
            	HX_STACK_FRAME("BuildScreen","buy",0xb46ee1f2,"BuildScreen.buy","BuildScreen.hx",193,0x5dcbb5e4)
            	HX_STACK_THIS(this)
HXLINE( 194)		::String key = ::BuildingInfo_obj::types->__get(this->currentIndex);
HXDLIN( 194)		HX_VARI(  ::Dynamic,currentData) = ::BuildingInfo_obj::data->get(key);
HXLINE( 195)		Bool _hx_tmp = (this->playState->lots->money >= ( (Int)(currentData->__Field(HX_("cost",4d,be,c4,41),hx::paccDynamic)) ));
HXDLIN( 195)		if (_hx_tmp) {
HXLINE( 196)			hx::SubEq(this->playState->lots->money,( (Int)(currentData->__Field(HX_("cost",4d,be,c4,41),hx::paccDynamic)) ));
HXLINE( 198)			this->playState->closeBuildingScreen(true, ::Dynamic(currentData->__Field(HX_("imageName",46,07,34,2b),hx::paccDynamic)));
HXLINE( 200)			this->close();
            		}
            		else {
HXLINE( 202)			this->openSubState( ::NotEnoughCashState_obj::__new());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuildScreen_obj,buy,(void))

void BuildScreen_obj::left(){
            	HX_STACK_FRAME("BuildScreen","left",0x3326bfdb,"BuildScreen.left","BuildScreen.hx",207,0x5dcbb5e4)
            	HX_STACK_THIS(this)
HXLINE( 207)		Int _hx_tmp = (this->currentIndex - (int)1);
HXDLIN( 207)		this->setCurrentIndex(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuildScreen_obj,left,(void))

void BuildScreen_obj::right(){
            	HX_STACK_FRAME("BuildScreen","right",0x05ce2d88,"BuildScreen.right","BuildScreen.hx",211,0x5dcbb5e4)
            	HX_STACK_THIS(this)
HXLINE( 211)		Int _hx_tmp = (this->currentIndex + (int)1);
HXDLIN( 211)		this->setCurrentIndex(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BuildScreen_obj,right,(void))

void BuildScreen_obj::setCurrentIndex(Int i){
            	HX_STACK_FRAME("BuildScreen","setCurrentIndex",0xea03c387,"BuildScreen.setCurrentIndex","BuildScreen.hx",216,0x5dcbb5e4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE( 216)		Bool _hx_tmp;
HXDLIN( 216)		if ((i >= (int)0)) {
HXLINE( 216)			_hx_tmp = (i < ::BuildingInfo_obj::types->length);
            		}
            		else {
HXLINE( 216)			_hx_tmp = false;
            		}
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 217)			::String _hx_tmp1 = ::BuildingInfo_obj::types->__get(i);
HXDLIN( 217)			HX_VARI(  ::Dynamic,currentData) = ::BuildingInfo_obj::data->get(_hx_tmp1);
HXLINE( 219)			Bool _hx_tmp2 = hx::IsNotNull( currentData );
HXDLIN( 219)			if (_hx_tmp2) {
HXLINE( 220)				this->currentIndex = i;
HXLINE( 222)				this->buildingDisplay->loadGraphic(((HX_("assets/images/",ab,47,cb,9f) + ( (::String)(currentData->__Field(HX_("imageName",46,07,34,2b),hx::paccDynamic)) )) + HX_(".png",3b,2d,bd,1e)),true,(int)24,(int)40,null(),null());
HXLINE( 223)				this->buildingDisplay->animation->add(HX_("display",42,2a,4a,bb),::Array_obj< Int >::fromData( _hx_array_data_13,4),(int)10,true,null(),null());
HXLINE( 224)				this->buildingDisplay->animation->play(HX_("display",42,2a,4a,bb),null(),null(),null());
HXLINE( 225)				this->buildingTitleDisplay->set_text( ::Dynamic(currentData->__Field(HX_("title",98,15,3b,10),hx::paccDynamic)));
HXLINE( 226)				::String _hx_tmp3 = ((( (::String)(currentData->__Field(HX_("description",fc,08,1d,5f),hx::paccDynamic)) ) + HX_("\nCosts $",20,6c,cc,03)) + ( (Int)(currentData->__Field(HX_("cost",4d,be,c4,41),hx::paccDynamic)) ));
HXDLIN( 226)				this->buildingDescriptionDisplay->set_text(_hx_tmp3);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BuildScreen_obj,setCurrentIndex,(void))

 ::Dynamic BuildScreen_obj::add( ::Dynamic _tmp_b){
            	HX_STACK_FRAME("BuildScreen","add",0xb46e10cd,"BuildScreen.add","BuildScreen.hx",231,0x5dcbb5e4)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_b,"_tmp_b")
HXLINE( 232)		HX_VARI(  ::flixel::FlxBasic,b) = ( ( ::flixel::FlxBasic)(_tmp_b) );
HXDLIN( 232)		Bool _hx_tmp = ::Std_obj::is(b,hx::ClassOf< ::flixel::FlxObject >());
HXDLIN( 232)		if (_hx_tmp) {
HXLINE( 233)			HX_VARI(  ::flixel::FlxObject,o) = hx::TCast<  ::flixel::FlxObject >::cast(b);
HXLINE( 234)			o->scrollFactor->set_x((int)0);
HXLINE( 235)			o->scrollFactor->set_y((int)0);
            		}
HXLINE( 237)		return ( ( ::flixel::FlxBasic)(this->super::add(b)) );
            	}



BuildScreen_obj::BuildScreen_obj()
{
}

void BuildScreen_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BuildScreen);
	HX_MARK_MEMBER_NAME(playState,"playState");
	HX_MARK_MEMBER_NAME(currentIndex,"currentIndex");
	HX_MARK_MEMBER_NAME(buildingDisplay,"buildingDisplay");
	HX_MARK_MEMBER_NAME(buildingTitleDisplay,"buildingTitleDisplay");
	HX_MARK_MEMBER_NAME(buildingDescriptionDisplay,"buildingDescriptionDisplay");
	HX_MARK_MEMBER_NAME(unitsDisplay,"unitsDisplay");
	HX_MARK_MEMBER_NAME(cashDisplay,"cashDisplay");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void BuildScreen_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playState,"playState");
	HX_VISIT_MEMBER_NAME(currentIndex,"currentIndex");
	HX_VISIT_MEMBER_NAME(buildingDisplay,"buildingDisplay");
	HX_VISIT_MEMBER_NAME(buildingTitleDisplay,"buildingTitleDisplay");
	HX_VISIT_MEMBER_NAME(buildingDescriptionDisplay,"buildingDescriptionDisplay");
	HX_VISIT_MEMBER_NAME(unitsDisplay,"unitsDisplay");
	HX_VISIT_MEMBER_NAME(cashDisplay,"cashDisplay");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val BuildScreen_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"buy") ) { return hx::Val( buy_dyn()); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playState") ) { return hx::Val( playState); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cashDisplay") ) { return hx::Val( cashDisplay); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentIndex") ) { return hx::Val( currentIndex); }
		if (HX_FIELD_EQ(inName,"unitsDisplay") ) { return hx::Val( unitsDisplay); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buildingDisplay") ) { return hx::Val( buildingDisplay); }
		if (HX_FIELD_EQ(inName,"setCurrentIndex") ) { return hx::Val( setCurrentIndex_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"closeButtonPressed") ) { return hx::Val( closeButtonPressed_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"buildingTitleDisplay") ) { return hx::Val( buildingTitleDisplay); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"buildingDescriptionDisplay") ) { return hx::Val( buildingDescriptionDisplay); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BuildScreen_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"playState") ) { playState=inValue.Cast<  ::PlayState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cashDisplay") ) { cashDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentIndex") ) { currentIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unitsDisplay") ) { unitsDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"buildingDisplay") ) { buildingDisplay=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"buildingTitleDisplay") ) { buildingTitleDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"buildingDescriptionDisplay") ) { buildingDescriptionDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BuildScreen_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"));
	outFields->push(HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05"));
	outFields->push(HX_HCSTRING("buildingDisplay","\x2e","\x66","\x4f","\xbf"));
	outFields->push(HX_HCSTRING("buildingTitleDisplay","\x1e","\xac","\x6e","\x93"));
	outFields->push(HX_HCSTRING("buildingDescriptionDisplay","\x3a","\x54","\x2f","\x33"));
	outFields->push(HX_HCSTRING("unitsDisplay","\x93","\x84","\x42","\x1a"));
	outFields->push(HX_HCSTRING("cashDisplay","\xcf","\xbf","\xc6","\x39"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BuildScreen_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::PlayState*/ ,(int)offsetof(BuildScreen_obj,playState),HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4")},
	{hx::fsInt,(int)offsetof(BuildScreen_obj,currentIndex),HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(BuildScreen_obj,buildingDisplay),HX_HCSTRING("buildingDisplay","\x2e","\x66","\x4f","\xbf")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(BuildScreen_obj,buildingTitleDisplay),HX_HCSTRING("buildingTitleDisplay","\x1e","\xac","\x6e","\x93")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(BuildScreen_obj,buildingDescriptionDisplay),HX_HCSTRING("buildingDescriptionDisplay","\x3a","\x54","\x2f","\x33")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(BuildScreen_obj,unitsDisplay),HX_HCSTRING("unitsDisplay","\x93","\x84","\x42","\x1a")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(BuildScreen_obj,cashDisplay),HX_HCSTRING("cashDisplay","\xcf","\xbf","\xc6","\x39")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BuildScreen_obj_sStaticStorageInfo = 0;
#endif

static ::String BuildScreen_obj_sMemberFields[] = {
	HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"),
	HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05"),
	HX_HCSTRING("buildingDisplay","\x2e","\x66","\x4f","\xbf"),
	HX_HCSTRING("buildingTitleDisplay","\x1e","\xac","\x6e","\x93"),
	HX_HCSTRING("buildingDescriptionDisplay","\x3a","\x54","\x2f","\x33"),
	HX_HCSTRING("unitsDisplay","\x93","\x84","\x42","\x1a"),
	HX_HCSTRING("cashDisplay","\xcf","\xbf","\xc6","\x39"),
	HX_HCSTRING("closeButtonPressed","\xf8","\x5f","\x04","\x15"),
	HX_HCSTRING("buy","\x46","\xc3","\x4a","\x00"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("setCurrentIndex","\xdb","\x52","\xd6","\x23"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	::String(null()) };

static void BuildScreen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BuildScreen_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BuildScreen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BuildScreen_obj::__mClass,"__mClass");
};

#endif

hx::Class BuildScreen_obj::__mClass;

void BuildScreen_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("BuildScreen","\x1a","\xb9","\x00","\x7c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BuildScreen_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BuildScreen_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BuildScreen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BuildScreen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuildScreen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuildScreen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

