// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Building
#include <Building.h>
#endif
#ifndef INCLUDED_BuildingInfo
#include <BuildingInfo.h>
#endif
#ifndef INCLUDED_Lot
#include <Lot.h>
#endif
#ifndef INCLUDED_ProgressBar
#include <ProgressBar.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)0,(Int)1,(Int)2,(Int)3,
};

void Building_obj::__construct(::String type, ::Lot lot){
            	HX_STACK_FRAME("Building","new",0x83aa1986,"Building.new","Building.hx",9,0x95d3f8aa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(lot,"lot")
HXLINE(  22)		this->efficiency = ((Float)1.0);
HXLINE(  15)		this->chargeTime = ((Float)10.0);
HXLINE(  33)		super::__construct(null(),null(),null());
HXLINE(  35)		this->lot = lot;
HXLINE(  37)		HX_VARI(  ::Dynamic,curData) = ::BuildingInfo_obj::data->get(type);
HXLINE(  38)		this->output = ( (Float)(curData->__Field(HX_("output",01,0f,81,0c),hx::paccDynamic)) );
HXLINE(  39)		this->chargeTime = (( (Float)(curData->__Field(HX_("chargeTime",a1,dc,9b,cd),hx::paccDynamic)) ) + ((Float)0.1));
HXLINE(  40)		this->dies = ( (Float)(curData->__Field(HX_("dies",33,5b,69,42),hx::paccDynamic)) );
HXLINE(  42)		this->type = type;
HXLINE(  44)		this->set_width((int)24);
HXLINE(  45)		this->set_height((int)40);
HXLINE(  47)		this->loadGraphic(((HX_("assets/images/",ab,47,cb,9f) + type) + HX_(".png",3b,2d,bd,1e)),true,(int)24,(int)40,null(),null());
HXLINE(  48)		this->animation->add(HX_("run",4b,e7,56,00),::Array_obj< Int >::fromData( _hx_array_data_0,4),(int)10,true,null(),null());
HXLINE(  49)		this->animation->play(HX_("run",4b,e7,56,00),null(),null(),null());
HXLINE(  51)		this->progressBar =  ::ProgressBar_obj::__new();
HXLINE(  52)		Float _hx_tmp = this->get_width();
HXDLIN(  52)		this->progressBar->setWidth((_hx_tmp - (int)4));
            	}

Dynamic Building_obj::__CreateEmpty() { return new Building_obj; }

hx::ObjectPtr< Building_obj > Building_obj::__new(::String type, ::Lot lot)
{
	hx::ObjectPtr< Building_obj > _hx_result = new Building_obj();
	_hx_result->__construct(type,lot);
	return _hx_result;
}

Dynamic Building_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Building_obj > _hx_result = new Building_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

Float Building_obj::getAvailableUnits(){
            	HX_STACK_FRAME("Building","getAvailableUnits",0x86bbd5c2,"Building.getAvailableUnits","Building.hx",57,0x95d3f8aa)
            	HX_STACK_THIS(this)
HXLINE(  58)		HX_VARI( Float,wasAvailableUnits) = this->availableUnits;
HXLINE(  59)		this->availableUnits = (int)0;
HXLINE(  60)		return wasAvailableUnits;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Building_obj,getAvailableUnits,return )

void Building_obj::draw(){
            	HX_STACK_FRAME("Building","draw",0xaa99e41e,"Building.draw","Building.hx",63,0x95d3f8aa)
            	HX_STACK_THIS(this)
HXLINE(  64)		this->super::draw();
HXLINE(  65)		this->progressBar->draw();
            	}


void Building_obj::update(Float elapsed){
            	HX_STACK_FRAME("Building","update",0x9720f8a3,"Building.update","Building.hx",68,0x95d3f8aa)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  69)		this->super::update(elapsed);
HXLINE(  71)		hx::AddEq(this->totalTime,elapsed);
HXLINE(  72)		hx::AddEq(this->curChargeTime,elapsed);
HXLINE(  74)		Bool _hx_tmp = (this->dies > (int)0);
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  75)			Bool _hx_tmp1 = (this->totalTime > this->dies);
HXDLIN(  75)			if (_hx_tmp1) {
HXLINE(  76)				this->breakDown();
            			}
            		}
HXLINE(  80)		this->outputPerSecond = ((Float)this->output / (Float)this->chargeTime);
HXLINE(  82)		Bool _hx_tmp2 = (this->curChargeTime > this->chargeTime);
HXDLIN(  82)		if (_hx_tmp2) {
HXLINE(  83)			hx::AddEq(this->availableUnits,(this->output * this->efficiency));
HXLINE(  84)			this->curChargeTime = (int)0;
            		}
HXLINE(  87)		Float _hx_tmp3 = (this->x + (int)2);
HXDLIN(  87)		this->progressBar->set_x(_hx_tmp3);
HXLINE(  88)		Float _hx_tmp4 = this->y;
HXDLIN(  88)		Float _hx_tmp5 = this->get_height();
HXDLIN(  88)		this->progressBar->set_y(((_hx_tmp4 + _hx_tmp5) - (int)5));
HXLINE(  89)		Float _hx_tmp6 = ((Float)this->curChargeTime / (Float)this->chargeTime);
HXDLIN(  89)		this->progressBar->setValue(_hx_tmp6);
HXLINE(  91)		Float _hx_tmp7 = ((int)10 * this->efficiency);
HXDLIN(  91)		Int _hx_tmp8 = ::Math_obj::round(_hx_tmp7);
HXDLIN(  91)		this->animation->_curAnim->set_frameRate(_hx_tmp8);
            	}


void Building_obj::breakDown(){
            	HX_STACK_FRAME("Building","breakDown",0xa580be67,"Building.breakDown","Building.hx",95,0x95d3f8aa)
            	HX_STACK_THIS(this)
HXLINE(  95)		this->lot->removeBuilding();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Building_obj,breakDown,(void))


Building_obj::Building_obj()
{
}

void Building_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Building);
	HX_MARK_MEMBER_NAME(output,"output");
	HX_MARK_MEMBER_NAME(outputPerSecond,"outputPerSecond");
	HX_MARK_MEMBER_NAME(availableUnits,"availableUnits");
	HX_MARK_MEMBER_NAME(chargeTime,"chargeTime");
	HX_MARK_MEMBER_NAME(curChargeTime,"curChargeTime");
	HX_MARK_MEMBER_NAME(totalTime,"totalTime");
	HX_MARK_MEMBER_NAME(dies,"dies");
	HX_MARK_MEMBER_NAME(efficiency,"efficiency");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(progressBar,"progressBar");
	HX_MARK_MEMBER_NAME(lot,"lot");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Building_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(output,"output");
	HX_VISIT_MEMBER_NAME(outputPerSecond,"outputPerSecond");
	HX_VISIT_MEMBER_NAME(availableUnits,"availableUnits");
	HX_VISIT_MEMBER_NAME(chargeTime,"chargeTime");
	HX_VISIT_MEMBER_NAME(curChargeTime,"curChargeTime");
	HX_VISIT_MEMBER_NAME(totalTime,"totalTime");
	HX_VISIT_MEMBER_NAME(dies,"dies");
	HX_VISIT_MEMBER_NAME(efficiency,"efficiency");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(progressBar,"progressBar");
	HX_VISIT_MEMBER_NAME(lot,"lot");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Building_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lot") ) { return hx::Val( lot); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dies") ) { return hx::Val( dies); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { return hx::Val( output); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"totalTime") ) { return hx::Val( totalTime); }
		if (HX_FIELD_EQ(inName,"breakDown") ) { return hx::Val( breakDown_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chargeTime") ) { return hx::Val( chargeTime); }
		if (HX_FIELD_EQ(inName,"efficiency") ) { return hx::Val( efficiency); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { return hx::Val( progressBar); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curChargeTime") ) { return hx::Val( curChargeTime); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"availableUnits") ) { return hx::Val( availableUnits); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"outputPerSecond") ) { return hx::Val( outputPerSecond); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getAvailableUnits") ) { return hx::Val( getAvailableUnits_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Building_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"lot") ) { lot=inValue.Cast<  ::Lot >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dies") ) { dies=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"output") ) { output=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"totalTime") ) { totalTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"chargeTime") ) { chargeTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"efficiency") ) { efficiency=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"progressBar") ) { progressBar=inValue.Cast<  ::ProgressBar >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curChargeTime") ) { curChargeTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"availableUnits") ) { availableUnits=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"outputPerSecond") ) { outputPerSecond=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Building_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"));
	outFields->push(HX_HCSTRING("outputPerSecond","\xf0","\x84","\x72","\x92"));
	outFields->push(HX_HCSTRING("availableUnits","\xe6","\x66","\x8a","\xc8"));
	outFields->push(HX_HCSTRING("chargeTime","\xa1","\xdc","\x9b","\xcd"));
	outFields->push(HX_HCSTRING("curChargeTime","\x41","\x46","\x46","\x2d"));
	outFields->push(HX_HCSTRING("totalTime","\xf1","\x7d","\xb7","\x69"));
	outFields->push(HX_HCSTRING("dies","\x33","\x5b","\x69","\x42"));
	outFields->push(HX_HCSTRING("efficiency","\xe9","\x4b","\x76","\x0f"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("progressBar","\x26","\xbc","\x55","\xe6"));
	outFields->push(HX_HCSTRING("lot","\x91","\x54","\x52","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Building_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Building_obj,output),HX_HCSTRING("output","\x01","\x0f","\x81","\x0c")},
	{hx::fsFloat,(int)offsetof(Building_obj,outputPerSecond),HX_HCSTRING("outputPerSecond","\xf0","\x84","\x72","\x92")},
	{hx::fsFloat,(int)offsetof(Building_obj,availableUnits),HX_HCSTRING("availableUnits","\xe6","\x66","\x8a","\xc8")},
	{hx::fsFloat,(int)offsetof(Building_obj,chargeTime),HX_HCSTRING("chargeTime","\xa1","\xdc","\x9b","\xcd")},
	{hx::fsFloat,(int)offsetof(Building_obj,curChargeTime),HX_HCSTRING("curChargeTime","\x41","\x46","\x46","\x2d")},
	{hx::fsFloat,(int)offsetof(Building_obj,totalTime),HX_HCSTRING("totalTime","\xf1","\x7d","\xb7","\x69")},
	{hx::fsFloat,(int)offsetof(Building_obj,dies),HX_HCSTRING("dies","\x33","\x5b","\x69","\x42")},
	{hx::fsFloat,(int)offsetof(Building_obj,efficiency),HX_HCSTRING("efficiency","\xe9","\x4b","\x76","\x0f")},
	{hx::fsString,(int)offsetof(Building_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::ProgressBar*/ ,(int)offsetof(Building_obj,progressBar),HX_HCSTRING("progressBar","\x26","\xbc","\x55","\xe6")},
	{hx::fsObject /*::Lot*/ ,(int)offsetof(Building_obj,lot),HX_HCSTRING("lot","\x91","\x54","\x52","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Building_obj_sStaticStorageInfo = 0;
#endif

static ::String Building_obj_sMemberFields[] = {
	HX_HCSTRING("output","\x01","\x0f","\x81","\x0c"),
	HX_HCSTRING("outputPerSecond","\xf0","\x84","\x72","\x92"),
	HX_HCSTRING("availableUnits","\xe6","\x66","\x8a","\xc8"),
	HX_HCSTRING("chargeTime","\xa1","\xdc","\x9b","\xcd"),
	HX_HCSTRING("curChargeTime","\x41","\x46","\x46","\x2d"),
	HX_HCSTRING("totalTime","\xf1","\x7d","\xb7","\x69"),
	HX_HCSTRING("dies","\x33","\x5b","\x69","\x42"),
	HX_HCSTRING("efficiency","\xe9","\x4b","\x76","\x0f"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("progressBar","\x26","\xbc","\x55","\xe6"),
	HX_HCSTRING("lot","\x91","\x54","\x52","\x00"),
	HX_HCSTRING("getAvailableUnits","\x1c","\x16","\xfe","\x3a"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("breakDown","\xc1","\x14","\x9e","\x32"),
	::String(null()) };

static void Building_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Building_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Building_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Building_obj::__mClass,"__mClass");
};

#endif

hx::Class Building_obj::__mClass;

void Building_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Building","\x94","\x9e","\x79","\x2d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Building_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Building_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Building_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Building_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Building_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Building_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

