// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_BuildingInfo
#include <BuildingInfo.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("Windmill-1",28,9e,10,02),HX_("Windmill-2",29,9e,10,02),HX_("Windmill-3",2a,9e,10,02),HX_("Gas-1",9d,4c,e8,21),HX_("Gas-2",9e,4c,e8,21),HX_("Gas-3",9f,4c,e8,21),HX_("Battery-1",51,dc,a8,ba),HX_("Battery-2",52,dc,a8,ba),HX_("Battery-3",53,dc,a8,ba),
};

void BuildingInfo_obj::__construct(){
            	HX_STACK_FRAME("BuildingInfo","new",0xbf10b714,"BuildingInfo.new","BuildingInfo.hx",110,0x7281c6dc)
            	HX_STACK_THIS(this)
            	}

Dynamic BuildingInfo_obj::__CreateEmpty() { return new BuildingInfo_obj; }

hx::ObjectPtr< BuildingInfo_obj > BuildingInfo_obj::__new()
{
	hx::ObjectPtr< BuildingInfo_obj > _hx_result = new BuildingInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic BuildingInfo_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BuildingInfo_obj > _hx_result = new BuildingInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::String > BuildingInfo_obj::types;

 ::haxe::ds::StringMap BuildingInfo_obj::data;


BuildingInfo_obj::BuildingInfo_obj()
{
}

bool BuildingInfo_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { outValue = data; return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { outValue = types; return true; }
	}
	return false;
}

bool BuildingInfo_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *BuildingInfo_obj_sMemberStorageInfo = 0;
static hx::StaticInfo BuildingInfo_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &BuildingInfo_obj::types,HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &BuildingInfo_obj::data,HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void BuildingInfo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BuildingInfo_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BuildingInfo_obj::types,"types");
	HX_MARK_MEMBER_NAME(BuildingInfo_obj::data,"data");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BuildingInfo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BuildingInfo_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BuildingInfo_obj::types,"types");
	HX_VISIT_MEMBER_NAME(BuildingInfo_obj::data,"data");
};

#endif

hx::Class BuildingInfo_obj::__mClass;

static ::String BuildingInfo_obj_sStaticFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	::String(null())
};

void BuildingInfo_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("BuildingInfo","\x22","\xdd","\x82","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BuildingInfo_obj::__GetStatic;
	__mClass->mSetStaticField = &BuildingInfo_obj::__SetStatic;
	__mClass->mMarkFunc = BuildingInfo_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BuildingInfo_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< BuildingInfo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BuildingInfo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BuildingInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BuildingInfo_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BuildingInfo_obj::__boot()
{
{
            	HX_STACK_FRAME("BuildingInfo","boot",0x67a87afe,"BuildingInfo.boot","BuildingInfo.hx",15,0x7281c6dc)
HXLINE(  15)		types = ::Array_obj< ::String >::fromData( _hx_array_data_0,9);
            	}
{
            	HX_STACK_FRAME("BuildingInfo","boot",0x67a87afe,"BuildingInfo.boot","BuildingInfo.hx",17,0x7281c6dc)
HXLINE(  17)		HX_VARI(  ::haxe::ds::StringMap,_g) =  ::haxe::ds::StringMap_obj::__new();
HXDLIN(  17)		_g->set(HX_("Windmill-1",28,9e,10,02), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)4.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),((Float)1.0))
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Old Windmill",7d,84,4e,79))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Windmill-1",28,9e,10,02))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)100)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)-1)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("Wow! This windmill powered Thomas Edison's toaster from 1880 until 1881! Consider yourself lucky, you've got an antique on your hands!\nDelivers 1 unit every 4 seconds",ef,41,f5,20))));
HXDLIN(  17)		_g->set(HX_("Windmill-2",29,9e,10,02), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)5.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),(int)3)
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Slightly Newer Windmill",c7,64,ec,ec))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Windmill-2",29,9e,10,02))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)250)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)-1)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("WOW... Wait weren't these older than the other ones???\nDelivers 3 units every 5 seconds.",22,3c,f1,95))));
HXDLIN(  17)		_g->set(HX_("Windmill-3",2a,9e,10,02), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)2.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),((Float)10.0))
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Wind Turbine",b7,4e,74,b1))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Windmill-3",2a,9e,10,02))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)2000)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)-1)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("Now this is impressive. Maybe you should like build more of these.\nDelivers 10 units every 2 seconds",db,bf,f3,bf))));
HXDLIN(  17)		_g->set(HX_("Gas-1",9d,4c,e8,21), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)6.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),((Float)1.0))
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Spoiled Camper Generator",6d,52,70,39))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Gas-1",9d,4c,e8,21))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)40)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)-1)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("Do you really need one of these? Really?\nDelivers 1 unit every 6 seconds",9f,68,8f,e6))));
HXDLIN(  17)		_g->set(HX_("Gas-2",9e,4c,e8,21), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)10.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),((Float)4.0))
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Household Backup Generator",76,ff,0e,97))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Gas-2",9e,4c,e8,21))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)200)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)-1)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("The power goes out. You hear a blood curdling scream. The lights come back on. You realize that was you...\nDelivers 4 units every 10 seconds",0b,62,dd,8e))));
HXDLIN(  17)		_g->set(HX_("Gas-3",9f,4c,e8,21), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)40.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),((Float)10.0))
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Power Plant Generator",e3,e7,9a,be))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Gas-3",9f,4c,e8,21))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)1000)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)-1)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("These things *CAN'T* be good for the environment!\nDelivers 10 units every 10 seconds",8c,3a,89,a2))));
HXDLIN(  17)		_g->set(HX_("Battery-1",51,dc,a8,ba), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),((Float)1.0))
            			->setFixed(1,HX_("output",01,0f,81,0c),((Float)1.0))
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Flashlight Battery",d3,6a,a6,73))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Battery-1",51,dc,a8,ba))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)10)
            			->setFixed(5,HX_("dies",33,5b,69,42),((Float)10.0))
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("That's cute.\nDelivers 1 unit every second but DIES after 10 seconds",10,5b,4b,85))));
HXDLIN(  17)		_g->set(HX_("Battery-2",52,dc,a8,ba), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),(int)1)
            			->setFixed(1,HX_("output",01,0f,81,0c),(int)2)
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("Car Battery",81,33,d8,44))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Battery-2",52,dc,a8,ba))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)50)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)8)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("I dare you to lick it.\nDelivers 2 units every second but DIES after 8 seconds",d2,d5,b8,b8))));
HXDLIN(  17)		_g->set(HX_("Battery-3",53,dc,a8,ba), ::Dynamic(hx::Anon_obj::Create(7)
            			->setFixed(0,HX_("chargeTime",a1,dc,9b,cd),(int)1)
            			->setFixed(1,HX_("output",01,0f,81,0c),(int)8)
            			->setFixed(2,HX_("title",98,15,3b,10),HX_("GIANT BATTERY",72,e6,c5,0f))
            			->setFixed(3,HX_("imageName",46,07,34,2b),HX_("Battery-3",53,dc,a8,ba))
            			->setFixed(4,HX_("cost",4d,be,c4,41),(int)100)
            			->setFixed(5,HX_("dies",33,5b,69,42),(int)4)
            			->setFixed(6,HX_("description",fc,08,1d,5f),HX_("I'm not even gonna go near that.\nDelivers 8 units every second but DIES after 4 seconds",6f,8d,62,5b))));
HXDLIN(  17)		data = _g;
            	}
}

