// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Chromatic
#include <Chromatic.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_GLShaderParameter
#include <openfl/display/GLShaderParameter.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif


void Chromatic_obj::__construct(){
            	HX_STACK_FRAME("Chromatic","new",0x29fbd26a,"Chromatic.new","Chromatic.hx",9,0xdb73e846)
            	HX_STACK_THIS(this)
HXLINE(  11)		this->_hx___uSize =  ::openfl::display::GLShaderParameter_obj::__new(HX_("vec2",5e,27,4c,4e),(int)0);
HXDLIN(  11)		this->_hx___uBOffset =  ::openfl::display::GLShaderParameter_obj::__new(HX_("vec2",5e,27,4c,4e),(int)0);
HXDLIN(  11)		this->_hx___uGOffset =  ::openfl::display::GLShaderParameter_obj::__new(HX_("vec2",5e,27,4c,4e),(int)0);
HXDLIN(  11)		this->_hx___uROffset =  ::openfl::display::GLShaderParameter_obj::__new(HX_("vec2",5e,27,4c,4e),(int)0);
HXDLIN(  11)		this->fragment = ((((((((((((HX_("\n\tuniform vec2 uROffset;\n\tuniform vec2 uGOffset;\n\tuniform vec2 uBOffset;\n\n\tuniform vec2 uSize;\n\n\tvoid main()\n\t{\n\t\tvec4 rValue = texture2D(",93,0b,25,54) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(" - uROffset/uSize);\n\t\tvec4 gValue = texture2D(",82,32,3b,b8)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(" - uGOffset/uSize);\n\t\tvec4 bValue = texture2D(",a8,32,08,66)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(" - uBOffset/uSize);\n\n\t\t// Combine the offset colors.\n\t\tgl_FragColor = vec4(rValue.r, gValue.g, bValue.b, 1.0);\n\t}",2f,cb,8e,9c));
HXLINE(  30)		super::__construct(null());
HXLINE(  11)		this->data->set(HX_("uROffset",b0,3d,c2,0a),this->_hx___uROffset);
HXDLIN(  11)		this->data->set(HX_("uGOffset",65,23,56,41),this->_hx___uGOffset);
HXDLIN(  11)		this->data->set(HX_("uBOffset",a0,d1,6a,71),this->_hx___uBOffset);
HXDLIN(  11)		this->data->set(HX_("uSize",d6,ab,0e,95),this->_hx___uSize);
HXDLIN(  11)		this->_hx___buildFragmentCode(((((((((((((HX_("\n\tuniform vec2 uROffset;\n\tuniform vec2 uGOffset;\n\tuniform vec2 uBOffset;\n\n\tuniform vec2 uSize;\n\n\tvoid main()\n\t{\n\t\tvec4 rValue = texture2D(",93,0b,25,54) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(" - uROffset/uSize);\n\t\tvec4 gValue = texture2D(",82,32,3b,b8)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(" - uGOffset/uSize);\n\t\tvec4 bValue = texture2D(",a8,32,08,66)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(" - uBOffset/uSize);\n\n\t\t// Combine the offset colors.\n\t\tgl_FragColor = vec4(rValue.r, gValue.g, bValue.b, 1.0);\n\t}",2f,cb,8e,9c)));
            	}

Dynamic Chromatic_obj::__CreateEmpty() { return new Chromatic_obj; }

hx::ObjectPtr< Chromatic_obj > Chromatic_obj::__new()
{
	hx::ObjectPtr< Chromatic_obj > _hx_result = new Chromatic_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Chromatic_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Chromatic_obj > _hx_result = new Chromatic_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > Chromatic_obj::get_uROffset(){
            	HX_STACK_FRAME("Chromatic","get_uROffset",0x390c5e6f,"Chromatic.get_uROffset","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
HXLINE(  11)		return this->_hx___uROffset->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chromatic_obj,get_uROffset,return )

::Array< Float > Chromatic_obj::set_uROffset(::Array< Float > v){
            	HX_STACK_FRAME("Chromatic","set_uROffset",0x4e0581e3,"Chromatic.set_uROffset","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		HX_VARI(  ::openfl::display::GLShaderParameter,_this) = this->_hx___uROffset;
HXDLIN(  11)		if ((_this->internalType == (int)4)) {
HXLINE(  11)			HX_STACK_DO_THROW(HX_("This parameter doesn't accept a value, use bitmap instead",ef,e0,bb,96));
            		}
HXDLIN(  11)		return (_this->value = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chromatic_obj,set_uROffset,return )

::Array< Float > Chromatic_obj::get_uGOffset(){
            	HX_STACK_FRAME("Chromatic","get_uGOffset",0x6fa04424,"Chromatic.get_uGOffset","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
HXLINE(  11)		return this->_hx___uGOffset->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chromatic_obj,get_uGOffset,return )

::Array< Float > Chromatic_obj::set_uGOffset(::Array< Float > v){
            	HX_STACK_FRAME("Chromatic","set_uGOffset",0x84996798,"Chromatic.set_uGOffset","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		HX_VARI(  ::openfl::display::GLShaderParameter,_this) = this->_hx___uGOffset;
HXDLIN(  11)		if ((_this->internalType == (int)4)) {
HXLINE(  11)			HX_STACK_DO_THROW(HX_("This parameter doesn't accept a value, use bitmap instead",ef,e0,bb,96));
            		}
HXDLIN(  11)		return (_this->value = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chromatic_obj,set_uGOffset,return )

::Array< Float > Chromatic_obj::get_uBOffset(){
            	HX_STACK_FRAME("Chromatic","get_uBOffset",0x9fb4f25f,"Chromatic.get_uBOffset","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
HXLINE(  11)		return this->_hx___uBOffset->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chromatic_obj,get_uBOffset,return )

::Array< Float > Chromatic_obj::set_uBOffset(::Array< Float > v){
            	HX_STACK_FRAME("Chromatic","set_uBOffset",0xb4ae15d3,"Chromatic.set_uBOffset","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		HX_VARI(  ::openfl::display::GLShaderParameter,_this) = this->_hx___uBOffset;
HXDLIN(  11)		if ((_this->internalType == (int)4)) {
HXLINE(  11)			HX_STACK_DO_THROW(HX_("This parameter doesn't accept a value, use bitmap instead",ef,e0,bb,96));
            		}
HXDLIN(  11)		return (_this->value = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chromatic_obj,set_uBOffset,return )

::Array< Float > Chromatic_obj::get_uSize(){
            	HX_STACK_FRAME("Chromatic","get_uSize",0x7b242db7,"Chromatic.get_uSize","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
HXLINE(  11)		return this->_hx___uSize->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Chromatic_obj,get_uSize,return )

::Array< Float > Chromatic_obj::set_uSize(::Array< Float > v){
            	HX_STACK_FRAME("Chromatic","set_uSize",0x5e7519c3,"Chromatic.set_uSize","Chromatic.hx",11,0xdb73e846)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		HX_VARI(  ::openfl::display::GLShaderParameter,_this) = this->_hx___uSize;
HXDLIN(  11)		if ((_this->internalType == (int)4)) {
HXLINE(  11)			HX_STACK_DO_THROW(HX_("This parameter doesn't accept a value, use bitmap instead",ef,e0,bb,96));
            		}
HXDLIN(  11)		return (_this->value = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Chromatic_obj,set_uSize,return )


Chromatic_obj::Chromatic_obj()
{
}

void Chromatic_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Chromatic);
	HX_MARK_MEMBER_NAME(fragment,"fragment");
	HX_MARK_MEMBER_NAME(_hx___uROffset,"__uROffset");
	HX_MARK_MEMBER_NAME(_hx___uGOffset,"__uGOffset");
	HX_MARK_MEMBER_NAME(_hx___uBOffset,"__uBOffset");
	HX_MARK_MEMBER_NAME(_hx___uSize,"__uSize");
	 ::openfl::display::Shader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Chromatic_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fragment,"fragment");
	HX_VISIT_MEMBER_NAME(_hx___uROffset,"__uROffset");
	HX_VISIT_MEMBER_NAME(_hx___uGOffset,"__uGOffset");
	HX_VISIT_MEMBER_NAME(_hx___uBOffset,"__uBOffset");
	HX_VISIT_MEMBER_NAME(_hx___uSize,"__uSize");
	 ::openfl::display::Shader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Chromatic_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"uSize") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_uSize()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__uSize") ) { return hx::Val( _hx___uSize); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fragment") ) { return hx::Val( fragment); }
		if (HX_FIELD_EQ(inName,"uROffset") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_uROffset()); }
		if (HX_FIELD_EQ(inName,"uGOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_uGOffset()); }
		if (HX_FIELD_EQ(inName,"uBOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_uBOffset()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_uSize") ) { return hx::Val( get_uSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_uSize") ) { return hx::Val( set_uSize_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__uROffset") ) { return hx::Val( _hx___uROffset); }
		if (HX_FIELD_EQ(inName,"__uGOffset") ) { return hx::Val( _hx___uGOffset); }
		if (HX_FIELD_EQ(inName,"__uBOffset") ) { return hx::Val( _hx___uBOffset); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_uROffset") ) { return hx::Val( get_uROffset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_uROffset") ) { return hx::Val( set_uROffset_dyn()); }
		if (HX_FIELD_EQ(inName,"get_uGOffset") ) { return hx::Val( get_uGOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_uGOffset") ) { return hx::Val( set_uGOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"get_uBOffset") ) { return hx::Val( get_uBOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_uBOffset") ) { return hx::Val( set_uBOffset_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Chromatic_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"uSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_uSize(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__uSize") ) { _hx___uSize=inValue.Cast<  ::openfl::display::GLShaderParameter >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fragment") ) { fragment=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uROffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_uROffset(inValue) ); }
		if (HX_FIELD_EQ(inName,"uGOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_uGOffset(inValue) ); }
		if (HX_FIELD_EQ(inName,"uBOffset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_uBOffset(inValue) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"__uROffset") ) { _hx___uROffset=inValue.Cast<  ::openfl::display::GLShaderParameter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uGOffset") ) { _hx___uGOffset=inValue.Cast<  ::openfl::display::GLShaderParameter >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uBOffset") ) { _hx___uBOffset=inValue.Cast<  ::openfl::display::GLShaderParameter >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Chromatic_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad"));
	outFields->push(HX_HCSTRING("__uROffset","\xd0","\xb0","\xfa","\xad"));
	outFields->push(HX_HCSTRING("uROffset","\xb0","\x3d","\xc2","\x0a"));
	outFields->push(HX_HCSTRING("__uGOffset","\x85","\x96","\x8e","\xe4"));
	outFields->push(HX_HCSTRING("uGOffset","\x65","\x23","\x56","\x41"));
	outFields->push(HX_HCSTRING("__uBOffset","\xc0","\x44","\xa3","\x14"));
	outFields->push(HX_HCSTRING("uBOffset","\xa0","\xd1","\x6a","\x71"));
	outFields->push(HX_HCSTRING("__uSize","\xb6","\x04","\x6d","\xff"));
	outFields->push(HX_HCSTRING("uSize","\xd6","\xab","\x0e","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Chromatic_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Chromatic_obj,fragment),HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad")},
	{hx::fsObject /*::openfl::display::GLShaderParameter*/ ,(int)offsetof(Chromatic_obj,_hx___uROffset),HX_HCSTRING("__uROffset","\xd0","\xb0","\xfa","\xad")},
	{hx::fsObject /*::openfl::display::GLShaderParameter*/ ,(int)offsetof(Chromatic_obj,_hx___uGOffset),HX_HCSTRING("__uGOffset","\x85","\x96","\x8e","\xe4")},
	{hx::fsObject /*::openfl::display::GLShaderParameter*/ ,(int)offsetof(Chromatic_obj,_hx___uBOffset),HX_HCSTRING("__uBOffset","\xc0","\x44","\xa3","\x14")},
	{hx::fsObject /*::openfl::display::GLShaderParameter*/ ,(int)offsetof(Chromatic_obj,_hx___uSize),HX_HCSTRING("__uSize","\xb6","\x04","\x6d","\xff")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Chromatic_obj_sStaticStorageInfo = 0;
#endif

static ::String Chromatic_obj_sMemberFields[] = {
	HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad"),
	HX_HCSTRING("__uROffset","\xd0","\xb0","\xfa","\xad"),
	HX_HCSTRING("get_uROffset","\xb9","\xf1","\xdb","\xbf"),
	HX_HCSTRING("set_uROffset","\x2d","\x15","\xd5","\xd4"),
	HX_HCSTRING("__uGOffset","\x85","\x96","\x8e","\xe4"),
	HX_HCSTRING("get_uGOffset","\x6e","\xd7","\x6f","\xf6"),
	HX_HCSTRING("set_uGOffset","\xe2","\xfa","\x68","\x0b"),
	HX_HCSTRING("__uBOffset","\xc0","\x44","\xa3","\x14"),
	HX_HCSTRING("get_uBOffset","\xa9","\x85","\x84","\x26"),
	HX_HCSTRING("set_uBOffset","\x1d","\xa9","\x7d","\x3b"),
	HX_HCSTRING("__uSize","\xb6","\x04","\x6d","\xff"),
	HX_HCSTRING("get_uSize","\x2d","\x08","\xb8","\xd8"),
	HX_HCSTRING("set_uSize","\x39","\xf4","\x08","\xbc"),
	::String(null()) };

static void Chromatic_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Chromatic_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Chromatic_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Chromatic_obj::__mClass,"__mClass");
};

#endif

hx::Class Chromatic_obj::__mClass;

void Chromatic_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Chromatic","\x78","\x15","\xfc","\x5a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Chromatic_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Chromatic_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Chromatic_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Chromatic_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Chromatic_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Chromatic_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Chromatic_obj::__boot()
{
{
            	HX_STACK_FRAME("Chromatic","boot",0x8a754ae8,"Chromatic.boot","Chromatic.hx",9,0xdb73e846)
HXLINE(   9)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(9)
            				->setFixed(0,HX_("fragment",d0,5f,e5,ad), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),null())))
            				->setFixed(1,HX_("set_uSize",39,f4,08,bc), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(2,HX_("get_uROffset",b9,f1,db,bf), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(3,HX_("set_uROffset",2d,15,d5,d4), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(4,HX_("get_uSize",2d,08,b8,d8), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(5,HX_("get_uGOffset",6e,d7,6f,f6), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(6,HX_("set_uGOffset",e2,fa,68,0b), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(7,HX_("get_uBOffset",a9,85,84,26), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(8,HX_("set_uBOffset",1d,a9,7d,3b), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null()))))));
            	}
}

