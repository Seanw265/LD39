// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DefaultAssetLibrary
#include <DefaultAssetLibrary.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED___ASSET__OPENFL__assets_data_visitor2_ttf
#include <__ASSET__OPENFL__assets_data_visitor2_ttf.h>
#endif
#ifndef INCLUDED___ASSET__OPENFL__flixel_fonts_monsterrat_ttf
#include <__ASSET__OPENFL__flixel_fonts_monsterrat_ttf.h>
#endif
#ifndef INCLUDED___ASSET__OPENFL__flixel_fonts_nokiafc22_ttf
#include <__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf.h>
#endif
#ifndef INCLUDED___ASSET__assets_data_visitor2_ttf
#include <__ASSET__assets_data_visitor2_ttf.h>
#endif
#ifndef INCLUDED___ASSET__flixel_fonts_monsterrat_ttf
#include <__ASSET__flixel_fonts_monsterrat_ttf.h>
#endif
#ifndef INCLUDED___ASSET__flixel_fonts_nokiafc22_ttf
#include <__ASSET__flixel_fonts_nokiafc22_ttf.h>
#endif
#ifndef INCLUDED___ASSET__flixel_images_logo_default_png
#include <__ASSET__flixel_images_logo_default_png.h>
#endif
#ifndef INCLUDED___ASSET__flixel_images_ui_button_png
#include <__ASSET__flixel_images_ui_button_png.h>
#endif
#ifndef INCLUDED___ASSET__flixel_sounds_beep_ogg
#include <__ASSET__flixel_sounds_beep_ogg.h>
#endif
#ifndef INCLUDED___ASSET__flixel_sounds_flixel_ogg
#include <__ASSET__flixel_sounds_flixel_ogg.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_AssetLibrary
#include <lime/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_app_Event_Void_Void
#include <lime/app/Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise
#include <lime/app/Promise.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Bytes
#include <lime/utils/Bytes.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif


void DefaultAssetLibrary_obj::__construct(){
            	HX_STACK_FRAME("DefaultAssetLibrary","new",0xbc37e41e,"DefaultAssetLibrary.new","DefaultAssetLibrary.hx",37,0x0fc48912)
            	HX_STACK_THIS(this)
HXLINE(  42)		this->type =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  41)		this->path =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  40)		this->className =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  48)		HX_VARI(  ::DefaultAssetLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  50)		super::__construct();
HXLINE(  60)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::__ASSET__OPENFL__assets_data_visitor2_ttf >());
HXLINE(  88)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf >());
HXLINE(  89)		::openfl::text::Font_obj::registerFont(hx::ClassOf< ::__ASSET__OPENFL__flixel_fonts_monsterrat_ttf >());
HXLINE( 322)		this->className->set(HX_("assets/data/visitor2.ttf",b5,24,16,61),hx::ClassOf< ::__ASSET__assets_data_visitor2_ttf >());
HXLINE( 323)		this->type->set(HX_("assets/data/visitor2.ttf",b5,24,16,61),HX_("FONT",cf,25,81,2e));
HXLINE( 350)		this->className->set(HX_("flixel/sounds/beep.ogg",c7,05,0e,d0),hx::ClassOf< ::__ASSET__flixel_sounds_beep_ogg >());
HXLINE( 351)		this->type->set(HX_("flixel/sounds/beep.ogg",c7,05,0e,d0),HX_("SOUND",af,c4,ba,fe));
HXLINE( 353)		this->className->set(HX_("flixel/sounds/flixel.ogg",35,e0,ef,88),hx::ClassOf< ::__ASSET__flixel_sounds_flixel_ogg >());
HXLINE( 354)		this->type->set(HX_("flixel/sounds/flixel.ogg",35,e0,ef,88),HX_("SOUND",af,c4,ba,fe));
HXLINE( 356)		this->className->set(HX_("flixel/fonts/nokiafc22.ttf",59,d0,25,83),hx::ClassOf< ::__ASSET__flixel_fonts_nokiafc22_ttf >());
HXLINE( 357)		this->type->set(HX_("flixel/fonts/nokiafc22.ttf",59,d0,25,83),HX_("FONT",cf,25,81,2e));
HXLINE( 359)		this->className->set(HX_("flixel/fonts/monsterrat.ttf",01,2e,a7,65),hx::ClassOf< ::__ASSET__flixel_fonts_monsterrat_ttf >());
HXLINE( 360)		this->type->set(HX_("flixel/fonts/monsterrat.ttf",01,2e,a7,65),HX_("FONT",cf,25,81,2e));
HXLINE( 362)		this->className->set(HX_("flixel/images/ui/button.png",44,ee,2f,34),hx::ClassOf< ::__ASSET__flixel_images_ui_button_png >());
HXLINE( 363)		this->type->set(HX_("flixel/images/ui/button.png",44,ee,2f,34),HX_("IMAGE",3b,57,57,3b));
HXLINE( 365)		this->className->set(HX_("flixel/images/logo/default.png",1c,39,3e,0e),hx::ClassOf< ::__ASSET__flixel_images_logo_default_png >());
HXLINE( 366)		this->type->set(HX_("flixel/images/logo/default.png",1c,39,3e,0e),HX_("IMAGE",3b,57,57,3b));
HXLINE( 369)		{
HXLINE( 371)			this->loadManifest();
HXLINE( 373)			Int _hx_tmp = ::Sys_obj::args()->indexOf(HX_("-livereload",b2,45,9f,14),null());
HXDLIN( 373)			if ((_hx_tmp > (int)-1)) {
            				HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::DefaultAssetLibrary,_gthis,::String,path) HXARGC(0)
            				void _hx_run(){
            					HX_STACK_FRAME("DefaultAssetLibrary","new",0xbc37e41e,"DefaultAssetLibrary.new","DefaultAssetLibrary.hx",379,0x0fc48912)
HXLINE( 381)					HX_VARI( Float,modified) = ( ( ::Date)(::sys::FileSystem_obj::stat(path)->__Field(HX_("mtime",fa,06,aa,0f),hx::paccDynamic)) )->getTime();
HXLINE( 383)					Bool _hx_tmp1 = (modified > _gthis->lastModified);
HXDLIN( 383)					if (_hx_tmp1) {
HXLINE( 385)						_gthis->lastModified = modified;
HXLINE( 386)						_gthis->loadManifest();
HXLINE( 388)						_gthis->onChange->dispatch();
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 375)				HX_VARI( ::String,path) = ::sys::FileSystem_obj::fullPath(HX_("manifest",af,fb,29,d0));
HXLINE( 376)				this->lastModified = ( ( ::Date)(::sys::FileSystem_obj::stat(path)->__Field(HX_("mtime",fa,06,aa,0f),hx::paccDynamic)) )->getTime();
HXLINE( 378)				this->timer =  ::haxe::Timer_obj::__new((int)2000);
HXLINE( 379)				this->timer->run =  ::Dynamic(new _hx_Closure_0(_gthis,path));
            			}
            		}
            	}

Dynamic DefaultAssetLibrary_obj::__CreateEmpty() { return new DefaultAssetLibrary_obj; }

hx::ObjectPtr< DefaultAssetLibrary_obj > DefaultAssetLibrary_obj::__new()
{
	hx::ObjectPtr< DefaultAssetLibrary_obj > _hx_result = new DefaultAssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DefaultAssetLibrary_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultAssetLibrary_obj > _hx_result = new DefaultAssetLibrary_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool DefaultAssetLibrary_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("DefaultAssetLibrary","exists",0x972074de,"DefaultAssetLibrary.exists","DefaultAssetLibrary.hx",408,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE( 410)		HX_VAR( ::String,requestedType);
HXDLIN( 410)		Bool _hx_tmp = hx::IsNotNull( type );
HXDLIN( 410)		if (_hx_tmp) {
HXLINE( 410)			requestedType = type;
            		}
            		else {
HXLINE( 410)			requestedType = null();
            		}
HXLINE( 411)		HX_VARI( ::String,assetType) = ( (::String)(this->type->get(id)) );
HXLINE( 413)		Bool _hx_tmp1 = hx::IsNotNull( assetType );
HXDLIN( 413)		if (_hx_tmp1) {
HXLINE( 415)			Bool _hx_tmp2;
HXDLIN( 415)			if ((assetType != requestedType)) {
HXLINE( 415)				Bool _hx_tmp3;
HXDLIN( 415)				if ((requestedType != HX_("SOUND",af,c4,ba,fe))) {
HXLINE( 415)					_hx_tmp3 = (requestedType == HX_("MUSIC",85,08,49,8e));
            				}
            				else {
HXLINE( 415)					_hx_tmp3 = true;
            				}
HXDLIN( 415)				if (_hx_tmp3) {
HXLINE( 415)					if ((assetType != HX_("MUSIC",85,08,49,8e))) {
HXLINE( 415)						_hx_tmp2 = (assetType == HX_("SOUND",af,c4,ba,fe));
            					}
            					else {
HXLINE( 415)						_hx_tmp2 = true;
            					}
            				}
            				else {
HXLINE( 415)					_hx_tmp2 = false;
            				}
            			}
            			else {
HXLINE( 415)				_hx_tmp2 = true;
            			}
HXDLIN( 415)			if (_hx_tmp2) {
HXLINE( 417)				return true;
            			}
HXLINE( 439)			Bool _hx_tmp4;
HXDLIN( 439)			Bool _hx_tmp5;
HXDLIN( 439)			if ((requestedType != HX_("BINARY",01,68,8e,9f))) {
HXLINE( 439)				_hx_tmp5 = hx::IsNull( requestedType );
            			}
            			else {
HXLINE( 439)				_hx_tmp5 = true;
            			}
HXDLIN( 439)			if (!(_hx_tmp5)) {
HXLINE( 439)				if ((assetType == HX_("BINARY",01,68,8e,9f))) {
HXLINE( 439)					_hx_tmp4 = (requestedType == HX_("TEXT",ad,94,ba,37));
            				}
            				else {
HXLINE( 439)					_hx_tmp4 = false;
            				}
            			}
            			else {
HXLINE( 439)				_hx_tmp4 = true;
            			}
HXDLIN( 439)			if (_hx_tmp4) {
HXLINE( 441)				return true;
            			}
            		}
HXLINE( 449)		return false;
            	}


 ::lime::audio::AudioBuffer DefaultAssetLibrary_obj::getAudioBuffer(::String id){
            	HX_STACK_FRAME("DefaultAssetLibrary","getAudioBuffer",0xeeb56a82,"DefaultAssetLibrary.getAudioBuffer","DefaultAssetLibrary.hx",469,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 469)		Bool _hx_tmp = this->className->exists(id);
HXDLIN( 469)		if (_hx_tmp) {
HXLINE( 469)			return ::lime::audio::AudioBuffer_obj::fromBytes(::Type_obj::createInstance(this->className->get(id),::cpp::VirtualArray_obj::__new(0)));
            		}
            		else {
HXLINE( 470)			return ::lime::audio::AudioBuffer_obj::fromFile(( (::String)(this->path->get(id)) ));
            		}
HXLINE( 469)		return null();
            	}


 ::lime::utils::Bytes DefaultAssetLibrary_obj::getBytes(::String id){
            	HX_STACK_FRAME("DefaultAssetLibrary","getBytes",0x86b4b377,"DefaultAssetLibrary.getBytes","DefaultAssetLibrary.hx",523,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 523)		Bool _hx_tmp = this->className->exists(id);
HXDLIN( 523)		if (_hx_tmp) {
HXLINE( 523)			return hx::TCast<  ::lime::utils::Bytes >::cast(::Type_obj::createInstance(this->className->get(id),::cpp::VirtualArray_obj::__new(0)));
            		}
            		else {
HXLINE( 524)			return ::lime::utils::Bytes_obj::readFile(( (::String)(this->path->get(id)) ));
            		}
HXLINE( 523)		return null();
            	}


 ::lime::text::Font DefaultAssetLibrary_obj::getFont(::String id){
            	HX_STACK_FRAME("DefaultAssetLibrary","getFont",0x974ed843,"DefaultAssetLibrary.getFont","DefaultAssetLibrary.hx",547,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 547)		Bool _hx_tmp = this->className->exists(id);
HXDLIN( 547)		if (_hx_tmp) {
HXLINE( 549)			HX_VARI(  ::Dynamic,fontClass) = this->className->get(id);
HXLINE( 550)			return hx::TCast<  ::lime::text::Font >::cast(::Type_obj::createInstance(fontClass,::cpp::VirtualArray_obj::__new(0)));
            		}
            		else {
HXLINE( 554)			return ::lime::text::Font_obj::fromFile(( (::String)(this->path->get(id)) ));
            		}
HXLINE( 547)		return null();
            	}


 ::lime::graphics::Image DefaultAssetLibrary_obj::getImage(::String id){
            	HX_STACK_FRAME("DefaultAssetLibrary","getImage",0x8685ca67,"DefaultAssetLibrary.getImage","DefaultAssetLibrary.hx",575,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 575)		Bool _hx_tmp = this->className->exists(id);
HXDLIN( 575)		if (_hx_tmp) {
HXLINE( 577)			HX_VARI(  ::Dynamic,fontClass) = this->className->get(id);
HXLINE( 578)			return hx::TCast<  ::lime::graphics::Image >::cast(::Type_obj::createInstance(fontClass,::cpp::VirtualArray_obj::__new(0)));
            		}
            		else {
HXLINE( 582)			return ::lime::graphics::Image_obj::fromFile(( (::String)(this->path->get(id)) ),null(),null());
            		}
HXLINE( 575)		return null();
            	}


::String DefaultAssetLibrary_obj::getPath(::String id){
            	HX_STACK_FRAME("DefaultAssetLibrary","getPath",0x9de06019,"DefaultAssetLibrary.getPath","DefaultAssetLibrary.hx",629,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 629)		return ( (::String)(this->path->get(id)) );
            	}


::String DefaultAssetLibrary_obj::getText(::String id){
            	HX_STACK_FRAME("DefaultAssetLibrary","getText",0xa0884721,"DefaultAssetLibrary.getText","DefaultAssetLibrary.hx",636,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 661)		HX_VARI(  ::lime::utils::Bytes,bytes) = this->getBytes(id);
HXLINE( 663)		Bool _hx_tmp = hx::IsNull( bytes );
HXDLIN( 663)		if (_hx_tmp) {
HXLINE( 665)			return null();
            		}
            		else {
HXLINE( 669)			return bytes->getString((int)0,bytes->length);
            		}
HXLINE( 663)		return null();
            	}


Bool DefaultAssetLibrary_obj::isLocal(::String id,::String type){
            	HX_STACK_FRAME("DefaultAssetLibrary","isLocal",0x968237df,"DefaultAssetLibrary.isLocal","DefaultAssetLibrary.hx",678,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE( 680)		Bool _hx_tmp = hx::IsNotNull( type );
HXDLIN( 680)		if (_hx_tmp) {
HXLINE( 680)			type;
            		}
HXLINE( 692)		return true;
            	}


::Array< ::String > DefaultAssetLibrary_obj::list(::String type){
            	HX_STACK_FRAME("DefaultAssetLibrary","list",0xf3604ee0,"DefaultAssetLibrary.list","DefaultAssetLibrary.hx",697,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 699)		HX_VAR( ::String,requestedType);
HXDLIN( 699)		Bool _hx_tmp = hx::IsNotNull( type );
HXDLIN( 699)		if (_hx_tmp) {
HXLINE( 699)			requestedType = type;
            		}
            		else {
HXLINE( 699)			requestedType = null();
            		}
HXLINE( 700)		HX_VARI( ::Array< ::String >,items) = ::Array_obj< ::String >::__new(0);
HXLINE( 702)		{
HXLINE( 702)			HX_VARI(  ::Dynamic,tmp) = this->type->keys();
HXDLIN( 702)			while(true){
HXLINE( 702)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 702)				if (_hx_tmp1) {
HXLINE( 702)					goto _hx_goto_0;
            				}
HXDLIN( 702)				HX_VARI( ::String,id) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 704)				Bool _hx_tmp2;
HXDLIN( 704)				Bool _hx_tmp3 = hx::IsNotNull( requestedType );
HXDLIN( 704)				if (_hx_tmp3) {
HXLINE( 704)					_hx_tmp2 = this->exists(id,type);
            				}
            				else {
HXLINE( 704)					_hx_tmp2 = true;
            				}
HXDLIN( 704)				if (_hx_tmp2) {
HXLINE( 706)					items->push(id);
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 712)		return items;
            	}


 ::lime::app::Future DefaultAssetLibrary_obj::loadAudioBuffer(::String id){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::DefaultAssetLibrary,_gthis) HXARGC(0)
            		 ::lime::audio::AudioBuffer _hx_run(){
            			HX_STACK_FRAME("DefaultAssetLibrary","loadAudioBuffer",0xf38e2aae,"DefaultAssetLibrary.loadAudioBuffer","DefaultAssetLibrary.hx",757,0x0fc48912)
HXLINE( 757)			return _gthis->getAudioBuffer(id);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("DefaultAssetLibrary","loadAudioBuffer",0xf38e2aae,"DefaultAssetLibrary.loadAudioBuffer","DefaultAssetLibrary.hx",717,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 717)		HX_VARI(  ::DefaultAssetLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 719)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 757)		promise->completeWith( ::lime::app::Future_obj::__new( ::Dynamic(new _hx_Closure_0(id,_gthis))));
HXLINE( 761)		return promise->future;
            	}


 ::lime::app::Future DefaultAssetLibrary_obj::loadBytes(::String id){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::DefaultAssetLibrary,_gthis) HXARGC(0)
            		 ::lime::utils::Bytes _hx_run(){
            			HX_STACK_FRAME("DefaultAssetLibrary","loadBytes",0x8c71caa3,"DefaultAssetLibrary.loadBytes","DefaultAssetLibrary.hx",819,0x0fc48912)
HXLINE( 819)			return _gthis->getBytes(id);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("DefaultAssetLibrary","loadBytes",0x8c71caa3,"DefaultAssetLibrary.loadBytes","DefaultAssetLibrary.hx",766,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 766)		HX_VARI(  ::DefaultAssetLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 768)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 819)		promise->completeWith( ::lime::app::Future_obj::__new( ::Dynamic(new _hx_Closure_0(id,_gthis))));
HXLINE( 823)		return promise->future;
            	}


 ::lime::app::Future DefaultAssetLibrary_obj::loadImage(::String id){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0,::String,id, ::DefaultAssetLibrary,_gthis) HXARGC(0)
            		 ::lime::graphics::Image _hx_run(){
            			HX_STACK_FRAME("DefaultAssetLibrary","loadImage",0x8c42e193,"DefaultAssetLibrary.loadImage","DefaultAssetLibrary.hx",886,0x0fc48912)
HXLINE( 886)			return _gthis->getImage(id);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACK_FRAME("DefaultAssetLibrary","loadImage",0x8c42e193,"DefaultAssetLibrary.loadImage","DefaultAssetLibrary.hx",828,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 828)		HX_VARI(  ::DefaultAssetLibrary,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 830)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 886)		promise->completeWith( ::lime::app::Future_obj::__new( ::Dynamic(new _hx_Closure_0(id,_gthis))));
HXLINE( 890)		return promise->future;
            	}


void DefaultAssetLibrary_obj::loadManifest(){
            	HX_STACK_FRAME("DefaultAssetLibrary","loadManifest",0x6f596c77,"DefaultAssetLibrary.loadManifest","DefaultAssetLibrary.hx",898,0x0fc48912)
            	HX_STACK_THIS(this)
HXLINE( 898)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 911)			HX_VARI(  ::lime::utils::Bytes,bytes) = ::lime::utils::Bytes_obj::readFile(HX_("manifest",af,fb,29,d0));
HXLINE( 914)			Bool _hx_tmp = hx::IsNotNull( bytes );
HXDLIN( 914)			if (_hx_tmp) {
HXLINE( 916)				Bool _hx_tmp1 = (bytes->length > (int)0);
HXDLIN( 916)				if (_hx_tmp1) {
HXLINE( 918)					HX_VARI( ::String,data) = bytes->getString((int)0,bytes->length);
HXLINE( 920)					Bool _hx_tmp2;
HXDLIN( 920)					Bool _hx_tmp3 = hx::IsNotNull( data );
HXDLIN( 920)					if (_hx_tmp3) {
HXLINE( 920)						_hx_tmp2 = (data.length > (int)0);
            					}
            					else {
HXLINE( 920)						_hx_tmp2 = false;
            					}
HXDLIN( 920)					if (_hx_tmp2) {
HXLINE( 922)						HX_VARI( ::cpp::VirtualArray,manifest) = ( (::cpp::VirtualArray)(::haxe::Unserializer_obj::run(data)) );
HXLINE( 924)						{
HXLINE( 924)							HX_VARI( Int,_g) = (int)0;
HXDLIN( 924)							while((_g < manifest->get_length())){
HXLINE( 924)								HX_VARI(  ::Dynamic,asset) = manifest->__get(_g);
HXDLIN( 924)								++_g;
HXLINE( 926)								::String key = ( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXDLIN( 926)								Bool _hx_tmp4 = this->className->exists(key);
HXDLIN( 926)								if (!(_hx_tmp4)) {
HXLINE( 931)									{
HXLINE( 931)										::String key1 = ( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXDLIN( 931)										::String value = ( (::String)(asset->__Field(HX_("path",a5,e5,51,4a),hx::paccDynamic)) );
HXDLIN( 931)										this->path->set(key1,value);
            									}
HXLINE( 933)									{
HXLINE( 933)										::String key2 = ( (::String)(asset->__Field(HX_("id",db,5b,00,00),hx::paccDynamic)) );
HXDLIN( 933)										::String value1 = hx::TCast< ::String >::cast( ::Dynamic(asset->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)));
HXDLIN( 933)										this->type->set(key2,value1);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 945)				::haxe::Log_obj::trace(HX_("Warning: Could not load asset manifest (bytes was null)",83,9c,5b,2e),hx::SourceInfo(HX_("DefaultAssetLibrary.hx",12,89,c4,0f),945,HX_("DefaultAssetLibrary",2c,3d,78,3a),HX_("loadManifest",f5,e7,92,89)));
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 951)				::String _hx_tmp5 = ::Std_obj::string(e);
HXDLIN( 951)				::haxe::Log_obj::trace(((HX_("Warning: Could not load asset manifest (",73,7e,fd,21) + _hx_tmp5) + HX_(")",29,00,00,00)),hx::SourceInfo(HX_("DefaultAssetLibrary.hx",12,89,c4,0f),951,HX_("DefaultAssetLibrary",2c,3d,78,3a),HX_("loadManifest",f5,e7,92,89)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DefaultAssetLibrary_obj,loadManifest,(void))

 ::lime::app::Future DefaultAssetLibrary_obj::loadText(::String id){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		 ::lime::app::Future _hx_run( ::lime::utils::Bytes bytes){
            			HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::lime::utils::Bytes,bytes) HXARGC(0)
            			::String _hx_run(){
            				HX_STACK_FRAME("DefaultAssetLibrary","loadText",0x26df3975,"DefaultAssetLibrary.loadText","DefaultAssetLibrary.hx",985,0x0fc48912)
HXLINE( 985)				Bool _hx_tmp1 = hx::IsNull( bytes );
HXDLIN( 985)				if (_hx_tmp1) {
HXLINE( 987)					return null();
            				}
            				else {
HXLINE( 991)					return bytes->getString((int)0,bytes->length);
            				}
HXLINE( 985)				return null();
            			}
            			HX_END_LOCAL_FUNC0(return)

            			HX_STACK_FRAME("DefaultAssetLibrary","loadText",0x26df3975,"DefaultAssetLibrary.loadText","DefaultAssetLibrary.hx",983,0x0fc48912)
            			HX_STACK_ARG(bytes,"bytes")
HXLINE( 983)			return  ::lime::app::Future_obj::__new( ::Dynamic(new _hx_Closure_0(bytes)));
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACK_FRAME("DefaultAssetLibrary","loadText",0x26df3975,"DefaultAssetLibrary.loadText","DefaultAssetLibrary.hx",959,0x0fc48912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 961)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 981)		 ::lime::app::Future _hx_tmp = this->loadBytes(id)->then( ::Dynamic(new _hx_Closure_1()));
HXDLIN( 981)		promise->completeWith(_hx_tmp);
HXLINE(1001)		return promise->future;
            	}



DefaultAssetLibrary_obj::DefaultAssetLibrary_obj()
{
}

void DefaultAssetLibrary_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DefaultAssetLibrary);
	HX_MARK_MEMBER_NAME(className,"className");
	HX_MARK_MEMBER_NAME(path,"path");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(lastModified,"lastModified");
	HX_MARK_MEMBER_NAME(timer,"timer");
	 ::lime::AssetLibrary_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DefaultAssetLibrary_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(className,"className");
	HX_VISIT_MEMBER_NAME(path,"path");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(lastModified,"lastModified");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	 ::lime::AssetLibrary_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DefaultAssetLibrary_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { return hx::Val( path); }
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"list") ) { return hx::Val( list_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { return hx::Val( timer); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return hx::Val( exists_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { return hx::Val( getFont_dyn()); }
		if (HX_FIELD_EQ(inName,"getPath") ) { return hx::Val( getPath_dyn()); }
		if (HX_FIELD_EQ(inName,"getText") ) { return hx::Val( getText_dyn()); }
		if (HX_FIELD_EQ(inName,"isLocal") ) { return hx::Val( isLocal_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { return hx::Val( getBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"getImage") ) { return hx::Val( getImage_dyn()); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return hx::Val( loadText_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { return hx::Val( className); }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return hx::Val( loadBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"loadImage") ) { return hx::Val( loadImage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastModified") ) { return hx::Val( lastModified); }
		if (HX_FIELD_EQ(inName,"loadManifest") ) { return hx::Val( loadManifest_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { return hx::Val( getAudioBuffer_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { return hx::Val( loadAudioBuffer_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DefaultAssetLibrary_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"path") ) { path=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"className") ) { className=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastModified") ) { lastModified=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DefaultAssetLibrary_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"));
	outFields->push(HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78"));
	outFields->push(HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DefaultAssetLibrary_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(DefaultAssetLibrary_obj,className),HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(DefaultAssetLibrary_obj,path),HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(DefaultAssetLibrary_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsFloat,(int)offsetof(DefaultAssetLibrary_obj,lastModified),HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(DefaultAssetLibrary_obj,timer),HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DefaultAssetLibrary_obj_sStaticStorageInfo = 0;
#endif

static ::String DefaultAssetLibrary_obj_sMemberFields[] = {
	HX_HCSTRING("className","\xa3","\x92","\x3d","\xdc"),
	HX_HCSTRING("path","\xa5","\xe5","\x51","\x4a"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("lastModified","\xbf","\xe7","\x59","\x78"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getAudioBuffer","\x80","\x41","\xe3","\x26"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadAudioBuffer","\xf0","\x71","\x7c","\xe3"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("loadManifest","\xf5","\xe7","\x92","\x89"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	::String(null()) };

static void DefaultAssetLibrary_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultAssetLibrary_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultAssetLibrary_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultAssetLibrary_obj::__mClass,"__mClass");
};

#endif

hx::Class DefaultAssetLibrary_obj::__mClass;

void DefaultAssetLibrary_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("DefaultAssetLibrary","\x2c","\x3d","\x78","\x3a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DefaultAssetLibrary_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultAssetLibrary_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultAssetLibrary_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultAssetLibrary_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultAssetLibrary_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultAssetLibrary_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

