// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Distortion
#include <Distortion.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_GLShaderParameter
#include <openfl/display/GLShaderParameter.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif


void Distortion_obj::__construct(){
            	HX_STACK_FRAME("Distortion","new",0x5f251bef,"Distortion.new","Distortion.hx",5,0x78f6f661)
            	HX_STACK_THIS(this)
HXLINE(   7)		this->_hx___BarrelPower =  ::openfl::display::GLShaderParameter_obj::__new(HX_("float",9c,c5,96,02),(int)0);
HXDLIN(   7)		this->fragment = ((((((((((((((((((HX_("\nconst float PI = 3.1415926535;\nuniform float BarrelPower;\n\nvec2 Distort(vec2 p)\n{\n    float theta  = atan(p.y, p.x);\n    float radius = length(p);\n    radius = pow(radius, BarrelPower);\n    p.x = radius * cos(theta);\n    p.y = radius * sin(theta);\n    return 0.5 * (p + 1.0);\n}\n\n// Go from Full Width=.58 to\nvec2 convertToNormalized(vec2 p)\n{\n\treturn p * (",2c,e5,11,07) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\nvec2 convertToFull(vec2 p)\n{\n\treturn p / (",ba,bc,70,1b)) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\nvoid main()\n{\n  vec2 xy = ",d8,97,3e,e3)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(";\n  vec2 uv;\n//  float d = length(xy);\n//  if (d < 1.0)\n//  {\n    uv = Distort(2.0 * convertToNormalized(xy) - 1.0);\n//  }\n//  else\n//  {\n//    uv = convertToNormalized(",e3,2b,9c,35)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n//  }\n\n  vec4 c;\n  if(uv.x > 0.001){\n  \tc = texture2D(",7c,55,e5,8f)) + ::openfl::display::Shader_obj::uSampler) + HX_(", convertToFull(uv));\n  }else{\n  \tc = vec4(0.0);\n  }\n\n//  c = texture2D(",fd,cd,16,83)) + ::openfl::display::Shader_obj::uSampler) + HX_(", smoothstep(vec2(0.0),vec2(1.0),",d1,8e,f7,5a)) + ::openfl::display::Shader_obj::vTexCoord) + HX_("));\n\n//  if(convertToNormalized(xy).x > 1.0){\n//  \tc = vec4(1.0,1.0,1.0,1.0);\n//  }else{\n//    c = vec4(convertToNormalized(xy).x,0.0,0.0,1.0);\n//  }\n  gl_FragColor = c;\n}",ba,f8,1e,07));
HXLINE(  64)		super::__construct(null());
HXLINE(   7)		this->data->set(HX_("BarrelPower",9f,34,d1,6d),this->_hx___BarrelPower);
HXDLIN(   7)		this->_hx___buildFragmentCode(((((((((((((((((((HX_("\nconst float PI = 3.1415926535;\nuniform float BarrelPower;\n\nvec2 Distort(vec2 p)\n{\n    float theta  = atan(p.y, p.x);\n    float radius = length(p);\n    radius = pow(radius, BarrelPower);\n    p.x = radius * cos(theta);\n    p.y = radius * sin(theta);\n    return 0.5 * (p + 1.0);\n}\n\n// Go from Full Width=.58 to\nvec2 convertToNormalized(vec2 p)\n{\n\treturn p * (",2c,e5,11,07) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\nvec2 convertToFull(vec2 p)\n{\n\treturn p / (",ba,bc,70,1b)) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\nvoid main()\n{\n  vec2 xy = ",d8,97,3e,e3)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(";\n  vec2 uv;\n//  float d = length(xy);\n//  if (d < 1.0)\n//  {\n    uv = Distort(2.0 * convertToNormalized(xy) - 1.0);\n//  }\n//  else\n//  {\n//    uv = convertToNormalized(",e3,2b,9c,35)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n//  }\n\n  vec4 c;\n  if(uv.x > 0.001){\n  \tc = texture2D(",7c,55,e5,8f)) + ::openfl::display::Shader_obj::uSampler) + HX_(", convertToFull(uv));\n  }else{\n  \tc = vec4(0.0);\n  }\n\n//  c = texture2D(",fd,cd,16,83)) + ::openfl::display::Shader_obj::uSampler) + HX_(", smoothstep(vec2(0.0),vec2(1.0),",d1,8e,f7,5a)) + ::openfl::display::Shader_obj::vTexCoord) + HX_("));\n\n//  if(convertToNormalized(xy).x > 1.0){\n//  \tc = vec4(1.0,1.0,1.0,1.0);\n//  }else{\n//    c = vec4(convertToNormalized(xy).x,0.0,0.0,1.0);\n//  }\n  gl_FragColor = c;\n}",ba,f8,1e,07)));
            	}

Dynamic Distortion_obj::__CreateEmpty() { return new Distortion_obj; }

hx::ObjectPtr< Distortion_obj > Distortion_obj::__new()
{
	hx::ObjectPtr< Distortion_obj > _hx_result = new Distortion_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Distortion_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Distortion_obj > _hx_result = new Distortion_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float Distortion_obj::get_BarrelPower(){
            	HX_STACK_FRAME("Distortion","get_BarrelPower",0x5e4ed245,"Distortion.get_BarrelPower","Distortion.hx",7,0x78f6f661)
            	HX_STACK_THIS(this)
HXLINE(   7)		return this->_hx___BarrelPower->value->__get((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Distortion_obj,get_BarrelPower,return )

Float Distortion_obj::set_BarrelPower(Float v){
            	HX_STACK_FRAME("Distortion","set_BarrelPower",0x5a1a4f51,"Distortion.set_BarrelPower","Distortion.hx",7,0x78f6f661)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(   7)		return (this->_hx___BarrelPower->value[(int)0] = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Distortion_obj,set_BarrelPower,return )


Distortion_obj::Distortion_obj()
{
}

void Distortion_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Distortion);
	HX_MARK_MEMBER_NAME(fragment,"fragment");
	HX_MARK_MEMBER_NAME(_hx___BarrelPower,"__BarrelPower");
	 ::openfl::display::Shader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Distortion_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fragment,"fragment");
	HX_VISIT_MEMBER_NAME(_hx___BarrelPower,"__BarrelPower");
	 ::openfl::display::Shader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Distortion_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fragment") ) { return hx::Val( fragment); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BarrelPower") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_BarrelPower()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__BarrelPower") ) { return hx::Val( _hx___BarrelPower); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_BarrelPower") ) { return hx::Val( get_BarrelPower_dyn()); }
		if (HX_FIELD_EQ(inName,"set_BarrelPower") ) { return hx::Val( set_BarrelPower_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Distortion_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fragment") ) { fragment=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"BarrelPower") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_BarrelPower(inValue) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__BarrelPower") ) { _hx___BarrelPower=inValue.Cast<  ::openfl::display::GLShaderParameter >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Distortion_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad"));
	outFields->push(HX_HCSTRING("__BarrelPower","\x7f","\x75","\x49","\xb6"));
	outFields->push(HX_HCSTRING("BarrelPower","\x9f","\x34","\xd1","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Distortion_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Distortion_obj,fragment),HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad")},
	{hx::fsObject /*::openfl::display::GLShaderParameter*/ ,(int)offsetof(Distortion_obj,_hx___BarrelPower),HX_HCSTRING("__BarrelPower","\x7f","\x75","\x49","\xb6")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Distortion_obj_sStaticStorageInfo = 0;
#endif

static ::String Distortion_obj_sMemberFields[] = {
	HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad"),
	HX_HCSTRING("__BarrelPower","\x7f","\x75","\x49","\xb6"),
	HX_HCSTRING("get_BarrelPower","\x36","\xec","\xb2","\x2e"),
	HX_HCSTRING("set_BarrelPower","\x42","\x69","\x7e","\x2a"),
	::String(null()) };

static void Distortion_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Distortion_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Distortion_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Distortion_obj::__mClass,"__mClass");
};

#endif

hx::Class Distortion_obj::__mClass;

void Distortion_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Distortion","\x7d","\xf8","\x76","\x74");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Distortion_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Distortion_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Distortion_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Distortion_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Distortion_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Distortion_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Distortion_obj::__boot()
{
{
            	HX_STACK_FRAME("Distortion","boot",0xd96c55c3,"Distortion.boot","Distortion.hx",5,0x78f6f661)
HXLINE(   5)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("fragment",d0,5f,e5,ad), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),null())))
            				->setFixed(1,HX_("set_BarrelPower",42,69,7e,2a), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(2,HX_("get_BarrelPower",36,ec,b2,2e), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null()))))));
            	}
}

