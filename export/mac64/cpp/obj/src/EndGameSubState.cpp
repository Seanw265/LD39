// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_EndGameSubState
#include <EndGameSubState.h>
#endif
#ifndef INCLUDED_LotManager
#include <LotManager.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)0,
};
static const Int _hx_array_data_1[] = {
	(Int)1,
};
static const Int _hx_array_data_2[] = {
	(Int)2,
};

void EndGameSubState_obj::__construct( ::PlayState playState){
            	HX_STACK_FRAME("EndGameSubState","new",0x10bc5ad0,"EndGameSubState.new","EndGameSubState.hx",16,0x6518eea0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(playState,"playState")
HXLINE(  17)		super::__construct(null());
HXLINE(  19)		this->playState = playState;
HXLINE(  21)		HX_VARI(  ::flixel::FlxSprite,backgroundSprite) =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE(  22)		Float _hx_tmp = (::flixel::FlxG_obj::camera->width * ((Float)0.9));
HXDLIN(  22)		Int _hx_tmp1 = ::Math_obj::round(_hx_tmp);
HXDLIN(  22)		Float _hx_tmp2 = (::flixel::FlxG_obj::camera->height * ((Float)0.9));
HXDLIN(  22)		Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN(  22)		backgroundSprite->makeGraphic(_hx_tmp1,_hx_tmp3,(int)-14077892,null(),null());
HXLINE(  23)		Float _hx_tmp4 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN(  23)		Float _hx_tmp5 = backgroundSprite->get_width();
HXDLIN(  23)		backgroundSprite->set_x((_hx_tmp4 - ((Float)_hx_tmp5 / (Float)(int)2)));
HXLINE(  24)		Float _hx_tmp6 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN(  24)		Float _hx_tmp7 = backgroundSprite->get_height();
HXDLIN(  24)		backgroundSprite->set_y((_hx_tmp6 - ((Float)_hx_tmp7 / (Float)(int)2)));
HXLINE(  25)		this->add(backgroundSprite);
HXLINE(  27)		Float _hx_tmp8 = backgroundSprite->x;
HXDLIN(  27)		Float _hx_tmp9 = backgroundSprite->get_width();
HXDLIN(  27)		Float _hx_tmp10 = (((_hx_tmp8 + _hx_tmp9) - (int)8) - (int)2);
HXDLIN(  27)		Float _hx_tmp11 = (backgroundSprite->y + (int)2);
HXDLIN(  27)		HX_VARI(  ::flixel::ui::FlxButton,cancelButton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp10,_hx_tmp11,HX_("",00,00,00,00),this->over_dyn());
HXLINE(  28)		cancelButton->loadGraphic(HX_("assets/images/CloseButton.png",9a,7a,e2,97),true,(int)8,(int)8,null(),null());
HXLINE(  29)		cancelButton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_0,1),null(),null(),null(),null());
HXLINE(  30)		cancelButton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_1,1),null(),null(),null(),null());
HXLINE(  31)		cancelButton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_2,1),null(),null(),null(),null());
HXLINE(  32)		this->add(cancelButton);
HXLINE(  34)		Float _hx_tmp12 = (backgroundSprite->x + (int)2);
HXDLIN(  34)		Float _hx_tmp13 = (backgroundSprite->y + (int)2);
HXDLIN(  34)		HX_VARI(  ::flixel::text::FlxText,titleDisplay) =  ::flixel::text::FlxText_obj::__new(_hx_tmp12,_hx_tmp13,(int)160,HX_("Game Over!",9f,0d,f2,9a),(int)13,null());
HXLINE(  35)		titleDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE(  36)		titleDisplay->set_alignment(HX_("left",07,08,b0,47));
HXLINE(  37)		this->add(titleDisplay);
HXLINE(  39)		Float _hx_tmp14 = (backgroundSprite->x + (int)2);
HXDLIN(  39)		Float _hx_tmp15 = backgroundSprite->get_width();
HXDLIN(  39)		Float _hx_tmp16 = (_hx_tmp14 - ((Float)(_hx_tmp15 - (int)4) / (Float)(int)2));
HXDLIN(  39)		Float _hx_tmp17 = titleDisplay->get_height();
HXDLIN(  39)		Float _hx_tmp18 = (_hx_tmp17 + titleDisplay->y);
HXDLIN(  39)		Float _hx_tmp19 = backgroundSprite->get_width();
HXDLIN(  39)		Float _hx_tmp20 = ((_hx_tmp19 - (int)4) * (int)2);
HXDLIN(  39)		::String _hx_tmp21 = ((HX_("Well that's the game! You gave it a good run and got ",1c,2b,38,e9) + playState->lots->day) + HX_(" days!\n\nThanks for playing! Post how many days you got!\n\nTwitter: @_Sean_Whiteman_",01,47,ab,23));
HXDLIN(  39)		HX_VARI(  ::flixel::text::FlxText,instructionsDisplay) =  ::flixel::text::FlxText_obj::__new(_hx_tmp16,_hx_tmp18,_hx_tmp20,_hx_tmp21,(int)13,null());
HXLINE(  40)		instructionsDisplay->scale->set_x(((Float)0.5));
HXLINE(  41)		instructionsDisplay->scale->set_y(((Float)0.5));
HXLINE(  42)		Float _hx_tmp22 = titleDisplay->get_height();
HXDLIN(  42)		Float _hx_tmp23 = (_hx_tmp22 + titleDisplay->y);
HXDLIN(  42)		Float _hx_tmp24 = titleDisplay->get_height();
HXDLIN(  42)		instructionsDisplay->set_y((_hx_tmp23 - ((Float)_hx_tmp24 / (Float)(int)2)));
HXLINE(  43)		instructionsDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE(  44)		instructionsDisplay->set_alignment(HX_("left",07,08,b0,47));
HXLINE(  45)		this->add(instructionsDisplay);
            	}

Dynamic EndGameSubState_obj::__CreateEmpty() { return new EndGameSubState_obj; }

hx::ObjectPtr< EndGameSubState_obj > EndGameSubState_obj::__new( ::PlayState playState)
{
	hx::ObjectPtr< EndGameSubState_obj > _hx_result = new EndGameSubState_obj();
	_hx_result->__construct(playState);
	return _hx_result;
}

Dynamic EndGameSubState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< EndGameSubState_obj > _hx_result = new EndGameSubState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::Dynamic EndGameSubState_obj::add( ::Dynamic _tmp_b){
            	HX_STACK_FRAME("EndGameSubState","add",0x10b27c91,"EndGameSubState.add","EndGameSubState.hx",48,0x6518eea0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_b,"_tmp_b")
HXLINE(  49)		HX_VARI(  ::flixel::FlxBasic,b) = ( ( ::flixel::FlxBasic)(_tmp_b) );
HXDLIN(  49)		Bool _hx_tmp = ::Std_obj::is(b,hx::ClassOf< ::flixel::FlxObject >());
HXDLIN(  49)		if (_hx_tmp) {
HXLINE(  50)			HX_VARI(  ::flixel::FlxObject,o) = hx::TCast<  ::flixel::FlxObject >::cast(b);
HXLINE(  51)			o->scrollFactor->set_x((int)0);
HXLINE(  52)			o->scrollFactor->set_y((int)0);
            		}
HXLINE(  54)		return ( ( ::flixel::FlxBasic)(this->super::add(b)) );
            	}


void EndGameSubState_obj::over(){
            	HX_STACK_FRAME("EndGameSubState","over",0x94c928e4,"EndGameSubState.over","EndGameSubState.hx",58,0x6518eea0)
            	HX_STACK_THIS(this)
HXLINE(  58)		HX_VARI(  ::flixel::FlxState,nextState) =  ::MenuState_obj::__new(null());
HXDLIN(  58)		Bool _hx_tmp = ::flixel::FlxG_obj::game->_state->switchTo(nextState);
HXDLIN(  58)		if (_hx_tmp) {
HXLINE(  58)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EndGameSubState_obj,over,(void))


EndGameSubState_obj::EndGameSubState_obj()
{
}

void EndGameSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EndGameSubState);
	HX_MARK_MEMBER_NAME(playState,"playState");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EndGameSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playState,"playState");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val EndGameSubState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"over") ) { return hx::Val( over_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playState") ) { return hx::Val( playState); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val EndGameSubState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"playState") ) { playState=inValue.Cast<  ::PlayState >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EndGameSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo EndGameSubState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::PlayState*/ ,(int)offsetof(EndGameSubState_obj,playState),HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *EndGameSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String EndGameSubState_obj_sMemberFields[] = {
	HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("over","\x54","\x91","\xb8","\x49"),
	::String(null()) };

static void EndGameSubState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EndGameSubState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EndGameSubState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EndGameSubState_obj::__mClass,"__mClass");
};

#endif

hx::Class EndGameSubState_obj::__mClass;

void EndGameSubState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("EndGameSubState","\xde","\xf2","\xaa","\x09");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = EndGameSubState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(EndGameSubState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< EndGameSubState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EndGameSubState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EndGameSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EndGameSubState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

