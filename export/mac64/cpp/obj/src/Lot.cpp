// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Building
#include <Building.h>
#endif
#ifndef INCLUDED_Lot
#include <Lot.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif


void Lot_obj::__construct(Float x,Float y, ::flixel::group::FlxTypedGroup buildingsGroup){
            	HX_STACK_FRAME("Lot","new",0xa33339e3,"Lot.new","Lot.hx",11,0x9969d2ed)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(buildingsGroup,"buildingsGroup")
HXLINE(  12)		super::__construct(x,y,null(),null());
HXLINE(  13)		this->set_width((int)24);
HXLINE(  14)		this->set_height((int)24);
HXLINE(  16)		this->buildingsGroup = buildingsGroup;
            	}

Dynamic Lot_obj::__CreateEmpty() { return new Lot_obj; }

hx::ObjectPtr< Lot_obj > Lot_obj::__new(Float x,Float y, ::flixel::group::FlxTypedGroup buildingsGroup)
{
	hx::ObjectPtr< Lot_obj > _hx_result = new Lot_obj();
	_hx_result->__construct(x,y,buildingsGroup);
	return _hx_result;
}

Dynamic Lot_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Lot_obj > _hx_result = new Lot_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void Lot_obj::add( ::Building b){
            	HX_STACK_FRAME("Lot","add",0xa3295ba4,"Lot.add","Lot.hx",19,0x9969d2ed)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(b,"b")
HXLINE(  20)		this->building = b;
HXLINE(  21)		b->set_x(this->x);
HXLINE(  22)		Float _hx_tmp = this->y;
HXDLIN(  22)		Float _hx_tmp1 = this->get_height();
HXDLIN(  22)		Float _hx_tmp2 = (_hx_tmp + _hx_tmp1);
HXDLIN(  22)		Float _hx_tmp3 = b->get_height();
HXDLIN(  22)		b->set_y((_hx_tmp2 - _hx_tmp3));
HXLINE(  23)		this->buildingsGroup->add(b).StaticCast<  ::Building >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Lot_obj,add,(void))

void Lot_obj::removeBuilding(){
            	HX_STACK_FRAME("Lot","removeBuilding",0x628a6e35,"Lot.removeBuilding","Lot.hx",26,0x9969d2ed)
            	HX_STACK_THIS(this)
HXLINE(  27)		this->buildingsGroup->remove(this->building,true).StaticCast<  ::Building >();
HXLINE(  28)		this->building = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Lot_obj,removeBuilding,(void))


Lot_obj::Lot_obj()
{
}

void Lot_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Lot);
	HX_MARK_MEMBER_NAME(buildingsGroup,"buildingsGroup");
	HX_MARK_MEMBER_NAME(building,"building");
	 ::flixel::FlxObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Lot_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buildingsGroup,"buildingsGroup");
	HX_VISIT_MEMBER_NAME(building,"building");
	 ::flixel::FlxObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Lot_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"building") ) { return hx::Val( building); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buildingsGroup") ) { return hx::Val( buildingsGroup); }
		if (HX_FIELD_EQ(inName,"removeBuilding") ) { return hx::Val( removeBuilding_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Lot_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"building") ) { building=inValue.Cast<  ::Building >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"buildingsGroup") ) { buildingsGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Lot_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buildingsGroup","\x40","\xd3","\xc3","\xd5"));
	outFields->push(HX_HCSTRING("building","\x74","\xe2","\xc7","\x53"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Lot_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(Lot_obj,buildingsGroup),HX_HCSTRING("buildingsGroup","\x40","\xd3","\xc3","\xd5")},
	{hx::fsObject /*::Building*/ ,(int)offsetof(Lot_obj,building),HX_HCSTRING("building","\x74","\xe2","\xc7","\x53")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Lot_obj_sStaticStorageInfo = 0;
#endif

static ::String Lot_obj_sMemberFields[] = {
	HX_HCSTRING("buildingsGroup","\x40","\xd3","\xc3","\xd5"),
	HX_HCSTRING("building","\x74","\xe2","\xc7","\x53"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("removeBuilding","\xd8","\x1e","\x1e","\x1e"),
	::String(null()) };

static void Lot_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Lot_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Lot_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Lot_obj::__mClass,"__mClass");
};

#endif

hx::Class Lot_obj::__mClass;

void Lot_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Lot","\x71","\x0c","\x3a","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Lot_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Lot_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Lot_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Lot_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Lot_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Lot_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

