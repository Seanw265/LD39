// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Building
#include <Building.h>
#endif
#ifndef INCLUDED_EndGameSubState
#include <EndGameSubState.h>
#endif
#ifndef INCLUDED_EndOfDaySubState
#include <EndOfDaySubState.h>
#endif
#ifndef INCLUDED_Lot
#include <Lot.h>
#endif
#ifndef INCLUDED_LotManager
#include <LotManager.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif


void LotManager_obj::__construct(){
            	HX_STACK_FRAME("LotManager","new",0xa336dcee,"LotManager.new","LotManager.hx",4,0x56d49a42)
            	HX_STACK_THIS(this)
HXLINE(   9)		this->money = ((Float)500);
HXLINE(  21)		super::__construct(null());
HXLINE(  23)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  23)		this->exchangeRate = (((Float).5) + ((_hx_tmp * ((Float).2)) - ((Float).1)));
HXLINE(  25)		this->dayLength = (int)60;
HXLINE(  27)		this->cityTake = (int)10;
            	}

Dynamic LotManager_obj::__CreateEmpty() { return new LotManager_obj; }

hx::ObjectPtr< LotManager_obj > LotManager_obj::__new()
{
	hx::ObjectPtr< LotManager_obj > _hx_result = new LotManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic LotManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< LotManager_obj > _hx_result = new LotManager_obj();
	_hx_result->__construct();
	return _hx_result;
}

void LotManager_obj::update(Float elapsed){
            	HX_STACK_FRAME("LotManager","update",0xe06e463b,"LotManager.update","LotManager.hx",30,0x56d49a42)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  32)		hx::AddEq(this->rawCurTime,elapsed);
HXLINE(  33)		this->time = ((Float)this->rawCurTime / (Float)this->dayLength);
HXLINE(  34)		Bool _hx_tmp = (this->rawCurTime >= this->dayLength);
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  35)			this->rawCurTime = (int)0;
HXLINE(  36)			this->endDay();
            		}
HXLINE(  39)		this->totalOutputPerSecond = (int)0;
HXLINE(  40)		{
HXLINE(  40)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  40)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->members;
HXDLIN(  40)			while((_g < _g1->length)){
HXLINE(  40)				HX_VARI(  ::Lot,lot) = _g1->__get(_g).StaticCast<  ::Lot >();
HXDLIN(  40)				++_g;
HXLINE(  41)				Bool _hx_tmp1 = hx::IsNotNull( lot->building );
HXDLIN(  41)				if (_hx_tmp1) {
HXLINE(  42)					hx::AddEq(this->totalOutputPerSecond,lot->building->outputPerSecond);
HXLINE(  43)					hx::AddEq(this->totalUnits,lot->building->getAvailableUnits());
            				}
            			}
            		}
            	}


void LotManager_obj::endDay(){
            	HX_STACK_FRAME("LotManager","endDay",0x53d54573,"LotManager.endDay","LotManager.hx",48,0x56d49a42)
            	HX_STACK_THIS(this)
HXLINE(  49)		Float _hx_tmp = ::Math_obj::random();
HXDLIN(  49)		this->exchangeRate = (((Float).5) + ((_hx_tmp * ((Float).2)) - ((Float).1)));
HXLINE(  50)		this->day++;
HXLINE(  51)		Bool _hx_tmp1 = (this->totalUnits > this->cityTake);
HXDLIN(  51)		if (_hx_tmp1) {
HXLINE(  52)			hx::SubEq(this->totalUnits,this->cityTake);
HXLINE(  53)			Float _hx_tmp2 = (this->cityTake * ((Float)0.25));
HXDLIN(  53)			hx::AddEq(this->money,::Math_obj::ceil(_hx_tmp2));
HXLINE(  54)			 ::PlayState _hx_tmp3 = hx::TCast<  ::PlayState >::cast(::flixel::FlxG_obj::game->_state);
HXDLIN(  54)			Int _hx_tmp4 = ::Math_obj::round(this->cityTake);
HXDLIN(  54)			Float _hx_tmp5 = (this->cityTake * ((Float)0.25));
HXDLIN(  54)			Int _hx_tmp6 = ::Math_obj::ceil(_hx_tmp5);
HXDLIN(  54)			Float _hx_tmp7 = (this->cityTake * (int)2);
HXDLIN(  54)			Int _hx_tmp8 = ::Math_obj::round(_hx_tmp7);
HXDLIN(  54)			::flixel::FlxG_obj::game->_state->openSubState( ::EndOfDaySubState_obj::__new(_hx_tmp3,_hx_tmp4,_hx_tmp6,_hx_tmp8));
HXLINE(  55)			hx::AddEq(this->cityTake,this->cityTake);
            		}
            		else {
HXLINE(  57)			::flixel::FlxG_obj::game->_state->openSubState( ::EndGameSubState_obj::__new(::flixel::FlxG_obj::game->_state));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(LotManager_obj,endDay,(void))


LotManager_obj::LotManager_obj()
{
}

hx::Val LotManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"day") ) { return hx::Val( day); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { return hx::Val( money); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"endDay") ) { return hx::Val( endDay_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cityTake") ) { return hx::Val( cityTake); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dayLength") ) { return hx::Val( dayLength); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalUnits") ) { return hx::Val( totalUnits); }
		if (HX_FIELD_EQ(inName,"rawCurTime") ) { return hx::Val( rawCurTime); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"exchangeRate") ) { return hx::Val( exchangeRate); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalOutputPerSecond") ) { return hx::Val( totalOutputPerSecond); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val LotManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"day") ) { day=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"money") ) { money=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"cityTake") ) { cityTake=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dayLength") ) { dayLength=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"totalUnits") ) { totalUnits=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rawCurTime") ) { rawCurTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"exchangeRate") ) { exchangeRate=inValue.Cast< Float >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalOutputPerSecond") ) { totalOutputPerSecond=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LotManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("totalOutputPerSecond","\x8c","\x15","\x41","\x85"));
	outFields->push(HX_HCSTRING("totalUnits","\x0b","\x5f","\x88","\xad"));
	outFields->push(HX_HCSTRING("money","\x40","\xba","\x5f","\x0c"));
	outFields->push(HX_HCSTRING("cityTake","\x92","\xc7","\x81","\x71"));
	outFields->push(HX_HCSTRING("day","\x5c","\x36","\x4c","\x00"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("dayLength","\x62","\x6c","\xab","\x8d"));
	outFields->push(HX_HCSTRING("rawCurTime","\xa5","\x9c","\x78","\xaa"));
	outFields->push(HX_HCSTRING("exchangeRate","\xa3","\x0e","\xb6","\x7e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo LotManager_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(LotManager_obj,totalOutputPerSecond),HX_HCSTRING("totalOutputPerSecond","\x8c","\x15","\x41","\x85")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,totalUnits),HX_HCSTRING("totalUnits","\x0b","\x5f","\x88","\xad")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,money),HX_HCSTRING("money","\x40","\xba","\x5f","\x0c")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,cityTake),HX_HCSTRING("cityTake","\x92","\xc7","\x81","\x71")},
	{hx::fsInt,(int)offsetof(LotManager_obj,day),HX_HCSTRING("day","\x5c","\x36","\x4c","\x00")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,dayLength),HX_HCSTRING("dayLength","\x62","\x6c","\xab","\x8d")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,rawCurTime),HX_HCSTRING("rawCurTime","\xa5","\x9c","\x78","\xaa")},
	{hx::fsFloat,(int)offsetof(LotManager_obj,exchangeRate),HX_HCSTRING("exchangeRate","\xa3","\x0e","\xb6","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *LotManager_obj_sStaticStorageInfo = 0;
#endif

static ::String LotManager_obj_sMemberFields[] = {
	HX_HCSTRING("totalOutputPerSecond","\x8c","\x15","\x41","\x85"),
	HX_HCSTRING("totalUnits","\x0b","\x5f","\x88","\xad"),
	HX_HCSTRING("money","\x40","\xba","\x5f","\x0c"),
	HX_HCSTRING("cityTake","\x92","\xc7","\x81","\x71"),
	HX_HCSTRING("day","\x5c","\x36","\x4c","\x00"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("dayLength","\x62","\x6c","\xab","\x8d"),
	HX_HCSTRING("rawCurTime","\xa5","\x9c","\x78","\xaa"),
	HX_HCSTRING("exchangeRate","\xa3","\x0e","\xb6","\x7e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("endDay","\x41","\x85","\x6c","\xfa"),
	::String(null()) };

static void LotManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(LotManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void LotManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(LotManager_obj::__mClass,"__mClass");
};

#endif

hx::Class LotManager_obj::__mClass;

void LotManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("LotManager","\xfc","\x8d","\xb6","\x58");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = LotManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(LotManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< LotManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = LotManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LotManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LotManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

