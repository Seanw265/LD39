// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_NMEPreloader
#include <NMEPreloader.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif


void NMEPreloader_obj::__construct(){
            	HX_STACK_FRAME("NMEPreloader","new",0x89455562,"NMEPreloader.new","NMEPreloader.hx",15,0x86edec4e)
            	HX_STACK_THIS(this)
HXLINE(  17)		super::__construct();
HXLINE(  19)		HX_VARI( Int,backgroundColor) = this->getBackgroundColor();
HXLINE(  23)		HX_VARI( Float,perceivedLuminosity) = (((((Float)0.299) * ((int)((int)backgroundColor >> (int)(int)16) & (int)(int)255)) + (((Float)0.587) * ((int)((int)backgroundColor >> (int)(int)8) & (int)(int)255))) + (((Float)0.114) * ((int)backgroundColor & (int)(int)255)));
HXLINE(  24)		HX_VARI( Int,color) = (int)0;
HXLINE(  26)		if ((perceivedLuminosity < (int)70)) {
HXLINE(  28)			color = (int)16777215;
            		}
HXLINE(  34)		Float _hx_tmp = this->getHeight();
HXDLIN(  34)		HX_VARI( Float,y) = (((Float)_hx_tmp / (Float)(int)2) - ((Float)3.5));
HXLINE(  35)		Float _hx_tmp1 = this->getWidth();
HXDLIN(  35)		HX_VARI( Float,width) = (_hx_tmp1 - (int)60);
HXLINE(  39)		this->outline =  ::openfl::display::Sprite_obj::__new();
HXLINE(  40)		this->outline->get_graphics()->beginFill(color,((Float)0.07));
HXLINE(  41)		this->outline->get_graphics()->drawRect((int)0,(int)0,width,(int)7);
HXLINE(  42)		this->outline->set_x((int)30);
HXLINE(  43)		this->outline->set_y(y);
HXLINE(  44)		this->addChild(this->outline);
HXLINE(  46)		this->progress =  ::openfl::display::Sprite_obj::__new();
HXLINE(  47)		this->progress->get_graphics()->beginFill(color,((Float)0.35));
HXLINE(  48)		 ::openfl::display::Graphics _hx_tmp2 = this->progress->get_graphics();
HXDLIN(  48)		_hx_tmp2->drawRect((int)0,(int)0,(width - (int)4),(int)3);
HXLINE(  49)		this->progress->set_x((int)32);
HXLINE(  50)		this->progress->set_y((y + (int)2));
HXLINE(  51)		this->progress->set_scaleX((int)0);
HXLINE(  52)		this->addChild(this->progress);
            	}

Dynamic NMEPreloader_obj::__CreateEmpty() { return new NMEPreloader_obj; }

hx::ObjectPtr< NMEPreloader_obj > NMEPreloader_obj::__new()
{
	hx::ObjectPtr< NMEPreloader_obj > _hx_result = new NMEPreloader_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic NMEPreloader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NMEPreloader_obj > _hx_result = new NMEPreloader_obj();
	_hx_result->__construct();
	return _hx_result;
}

Int NMEPreloader_obj::getBackgroundColor(){
            	HX_STACK_FRAME("NMEPreloader","getBackgroundColor",0x81f95bdd,"NMEPreloader.getBackgroundColor","NMEPreloader.hx",59,0x86edec4e)
            	HX_STACK_THIS(this)
HXLINE(  59)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NMEPreloader_obj,getBackgroundColor,return )

Float NMEPreloader_obj::getHeight(){
            	HX_STACK_FRAME("NMEPreloader","getHeight",0xcc30c39f,"NMEPreloader.getHeight","NMEPreloader.hx",70,0x86edec4e)
            	HX_STACK_THIS(this)
HXLINE(  70)		return (int)360;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NMEPreloader_obj,getHeight,return )

Float NMEPreloader_obj::getWidth(){
            	HX_STACK_FRAME("NMEPreloader","getWidth",0xdb5cd94e,"NMEPreloader.getWidth","NMEPreloader.hx",87,0x86edec4e)
            	HX_STACK_THIS(this)
HXLINE(  87)		return (int)640;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NMEPreloader_obj,getWidth,return )

void NMEPreloader_obj::onInit(){
            	HX_STACK_FRAME("NMEPreloader","onInit",0xb6a74c0d,"NMEPreloader.onInit","NMEPreloader.hx",98,0x86edec4e)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NMEPreloader_obj,onInit,(void))

void NMEPreloader_obj::onLoaded(){
            	HX_STACK_FRAME("NMEPreloader","onLoaded",0xe93f5242,"NMEPreloader.onLoaded","NMEPreloader.hx",107,0x86edec4e)
            	HX_STACK_THIS(this)
HXLINE( 107)		this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("complete",b9,00,c8,7f),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(NMEPreloader_obj,onLoaded,(void))

void NMEPreloader_obj::onUpdate(Int bytesLoaded,Int bytesTotal){
            	HX_STACK_FRAME("NMEPreloader","onUpdate",0x17d59046,"NMEPreloader.onUpdate","NMEPreloader.hx",112,0x86edec4e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytesLoaded,"bytesLoaded")
            	HX_STACK_ARG(bytesTotal,"bytesTotal")
HXLINE( 114)		HX_VARI( Float,percentLoaded) = ((Float)bytesLoaded / (Float)bytesTotal);
HXLINE( 116)		Bool _hx_tmp = (percentLoaded > (int)1);
HXDLIN( 116)		if (_hx_tmp) {
HXLINE( 118)			percentLoaded = (int)1;
            		}
HXLINE( 122)		this->progress->set_scaleX(percentLoaded);
            	}


HX_DEFINE_DYNAMIC_FUNC2(NMEPreloader_obj,onUpdate,(void))


NMEPreloader_obj::NMEPreloader_obj()
{
}

void NMEPreloader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NMEPreloader);
	HX_MARK_MEMBER_NAME(outline,"outline");
	HX_MARK_MEMBER_NAME(progress,"progress");
	 ::openfl::display::Sprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NMEPreloader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(outline,"outline");
	HX_VISIT_MEMBER_NAME(progress,"progress");
	 ::openfl::display::Sprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val NMEPreloader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"onInit") ) { return hx::Val( onInit_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { return hx::Val( outline); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { return hx::Val( progress); }
		if (HX_FIELD_EQ(inName,"getWidth") ) { return hx::Val( getWidth_dyn()); }
		if (HX_FIELD_EQ(inName,"onLoaded") ) { return hx::Val( onLoaded_dyn()); }
		if (HX_FIELD_EQ(inName,"onUpdate") ) { return hx::Val( onUpdate_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeight") ) { return hx::Val( getHeight_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getBackgroundColor") ) { return hx::Val( getBackgroundColor_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val NMEPreloader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"outline") ) { outline=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"progress") ) { progress=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NMEPreloader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"));
	outFields->push(HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo NMEPreloader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(NMEPreloader_obj,outline),HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(NMEPreloader_obj,progress),HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *NMEPreloader_obj_sStaticStorageInfo = 0;
#endif

static ::String NMEPreloader_obj_sMemberFields[] = {
	HX_HCSTRING("outline","\x82","\x17","\xbe","\xe1"),
	HX_HCSTRING("progress","\xad","\xf7","\x2a","\x86"),
	HX_HCSTRING("getBackgroundColor","\x9f","\xee","\x0c","\xc0"),
	HX_HCSTRING("getHeight","\x1d","\x91","\xa2","\x7e"),
	HX_HCSTRING("getWidth","\x90","\xc5","\x39","\x2a"),
	HX_HCSTRING("onInit","\xcf","\x43","\x45","\xe8"),
	HX_HCSTRING("onLoaded","\x84","\x3e","\x1c","\x38"),
	HX_HCSTRING("onUpdate","\x88","\x7c","\xb2","\x66"),
	::String(null()) };

static void NMEPreloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NMEPreloader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NMEPreloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NMEPreloader_obj::__mClass,"__mClass");
};

#endif

hx::Class NMEPreloader_obj::__mClass;

void NMEPreloader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("NMEPreloader","\x70","\xbc","\x9a","\xc3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NMEPreloader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NMEPreloader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NMEPreloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NMEPreloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NMEPreloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NMEPreloader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

