// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_NotEnoughCashState
#include <NotEnoughCashState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)0,
};
static const Int _hx_array_data_1[] = {
	(Int)1,
};
static const Int _hx_array_data_2[] = {
	(Int)2,
};

void NotEnoughCashState_obj::__construct(){
            	HX_STACK_FRAME("NotEnoughCashState","new",0xc010e14d,"NotEnoughCashState.new","NotEnoughCashState.hx",12,0x804986c3)
            	HX_STACK_THIS(this)
HXLINE(  13)		super::__construct(null());
HXLINE(  15)		HX_VARI(  ::flixel::FlxSprite,backgroundSprite) =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE(  16)		Float _hx_tmp = (::flixel::FlxG_obj::camera->width * ((Float)0.9));
HXDLIN(  16)		Int _hx_tmp1 = ::Math_obj::round(_hx_tmp);
HXDLIN(  16)		Float _hx_tmp2 = (::flixel::FlxG_obj::camera->height * ((Float)0.9));
HXDLIN(  16)		Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN(  16)		backgroundSprite->makeGraphic(_hx_tmp1,_hx_tmp3,(int)-14077892,null(),null());
HXLINE(  17)		Float _hx_tmp4 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN(  17)		Float _hx_tmp5 = backgroundSprite->get_width();
HXDLIN(  17)		backgroundSprite->set_x((_hx_tmp4 - ((Float)_hx_tmp5 / (Float)(int)2)));
HXLINE(  18)		Float _hx_tmp6 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN(  18)		Float _hx_tmp7 = backgroundSprite->get_height();
HXDLIN(  18)		backgroundSprite->set_y((_hx_tmp6 - ((Float)_hx_tmp7 / (Float)(int)2)));
HXLINE(  19)		this->add(backgroundSprite);
HXLINE(  21)		Float _hx_tmp8 = backgroundSprite->x;
HXDLIN(  21)		Float _hx_tmp9 = backgroundSprite->get_height();
HXDLIN(  21)		Float _hx_tmp10 = ((Float)_hx_tmp9 / (Float)(int)2);
HXDLIN(  21)		Float _hx_tmp11 = backgroundSprite->get_width();
HXDLIN(  21)		HX_VARI(  ::flixel::text::FlxText,buildingTitleDisplay) =  ::flixel::text::FlxText_obj::__new(_hx_tmp8,_hx_tmp10,_hx_tmp11,HX_("Not Enough Cash!",eb,be,e7,a0),(int)13,null());
HXLINE(  22)		buildingTitleDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE(  23)		buildingTitleDisplay->set_alignment(HX_("center",d5,25,db,05));
HXLINE(  24)		this->add(buildingTitleDisplay);
HXLINE(  26)		Float _hx_tmp12 = backgroundSprite->x;
HXDLIN(  26)		Float _hx_tmp13 = backgroundSprite->get_width();
HXDLIN(  26)		Float _hx_tmp14 = (((_hx_tmp12 + _hx_tmp13) - (int)8) - (int)2);
HXDLIN(  26)		Float _hx_tmp15 = (backgroundSprite->y + (int)2);
HXDLIN(  26)		HX_VARI(  ::flixel::ui::FlxButton,cancelButton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp14,_hx_tmp15,HX_("",00,00,00,00),this->close_dyn());
HXLINE(  27)		cancelButton->loadGraphic(HX_("assets/images/CloseButton.png",9a,7a,e2,97),true,(int)8,(int)8,null(),null());
HXLINE(  28)		cancelButton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_0,1),null(),null(),null(),null());
HXLINE(  29)		cancelButton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_1,1),null(),null(),null(),null());
HXLINE(  30)		cancelButton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_2,1),null(),null(),null(),null());
HXLINE(  31)		this->add(cancelButton);
            	}

Dynamic NotEnoughCashState_obj::__CreateEmpty() { return new NotEnoughCashState_obj; }

hx::ObjectPtr< NotEnoughCashState_obj > NotEnoughCashState_obj::__new()
{
	hx::ObjectPtr< NotEnoughCashState_obj > _hx_result = new NotEnoughCashState_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic NotEnoughCashState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< NotEnoughCashState_obj > _hx_result = new NotEnoughCashState_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::Dynamic NotEnoughCashState_obj::add( ::Dynamic _tmp_b){
            	HX_STACK_FRAME("NotEnoughCashState","add",0xc007030e,"NotEnoughCashState.add","NotEnoughCashState.hx",34,0x804986c3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_b,"_tmp_b")
HXLINE(  35)		HX_VARI(  ::flixel::FlxBasic,b) = ( ( ::flixel::FlxBasic)(_tmp_b) );
HXDLIN(  35)		Bool _hx_tmp = ::Std_obj::is(b,hx::ClassOf< ::flixel::FlxObject >());
HXDLIN(  35)		if (_hx_tmp) {
HXLINE(  36)			HX_VARI(  ::flixel::FlxObject,o) = hx::TCast<  ::flixel::FlxObject >::cast(b);
HXLINE(  37)			o->scrollFactor->set_x((int)0);
HXLINE(  38)			o->scrollFactor->set_y((int)0);
            		}
HXLINE(  40)		return ( ( ::flixel::FlxBasic)(this->super::add(b)) );
            	}



NotEnoughCashState_obj::NotEnoughCashState_obj()
{
}

hx::Val NotEnoughCashState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *NotEnoughCashState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *NotEnoughCashState_obj_sStaticStorageInfo = 0;
#endif

static ::String NotEnoughCashState_obj_sMemberFields[] = {
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	::String(null()) };

static void NotEnoughCashState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NotEnoughCashState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NotEnoughCashState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NotEnoughCashState_obj::__mClass,"__mClass");
};

#endif

hx::Class NotEnoughCashState_obj::__mClass;

void NotEnoughCashState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("NotEnoughCashState","\xdb","\x36","\xc1","\xf0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NotEnoughCashState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(NotEnoughCashState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< NotEnoughCashState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NotEnoughCashState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NotEnoughCashState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NotEnoughCashState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

