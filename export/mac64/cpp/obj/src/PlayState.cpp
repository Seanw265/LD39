// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_BuildScreen
#include <BuildScreen.h>
#endif
#ifndef INCLUDED_Building
#include <Building.h>
#endif
#ifndef INCLUDED_Lot
#include <Lot.h>
#endif
#ifndef INCLUDED_LotManager
#include <LotManager.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_SellPowerSubState
#include <SellPowerSubState.h>
#endif
#ifndef INCLUDED_TutorialSubstate
#include <TutorialSubstate.h>
#endif
#ifndef INCLUDED_UIGroup
#include <UIGroup.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileLayer
#include <flixel/addons/editors/tiled/TiledTileLayer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif


void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACK_FRAME("PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",33,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE( 138)		this->PLAYER_ACCELERATION = (int)800;
HXLINE(  50)		this->placingObject = null();
HXLINE(  49)		this->placing = false;
HXLINE(  39)		this->LOTHEIGHT = (int)24;
HXLINE(  38)		this->LOTWIDTH = (int)24;
HXLINE(  33)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(MaxSize);
	return _hx_result;
}

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PlayState_obj::create(){
            	HX_STACK_FRAME("PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",56,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE(  57)		this->super::create();
HXLINE(  59)		::flixel::FlxG_obj::camera->fade((int)-16777216,((Float)0.1),true,this->startTutorial_dyn(),null());
HXLINE(  62)		HX_VARI(  ::flixel::addons::editors::tiled::TiledMap,tiledFile) =  ::flixel::addons::editors::tiled::TiledMap_obj::__new(HX_("assets/data/Map.tmx",14,d6,53,53),null());
HXLINE(  64)		HX_VARI(  ::flixel::addons::editors::tiled::TiledTileLayer,backgroundTMXLayer) = hx::TCast<  ::flixel::addons::editors::tiled::TiledTileLayer >::cast(tiledFile->getLayer(HX_("Background",0e,98,ce,1c)));
HXLINE(  65)		HX_VARI(  ::flixel::addons::editors::tiled::TiledTileLayer,lotsTMXLayer) = hx::TCast<  ::flixel::addons::editors::tiled::TiledTileLayer >::cast(tiledFile->getLayer(HX_("Lots",e2,d6,90,32)));
HXLINE(  68)		this->backgroundMap =  ::flixel::tile::FlxTilemap_obj::__new();
HXLINE(  69)		this->lotsMap =  ::flixel::tile::FlxTilemap_obj::__new();
HXLINE(  71)		::String _hx_tmp = backgroundTMXLayer->get_csvData();
HXDLIN(  71)		this->backgroundMap->loadMapFromCSV(_hx_tmp,HX_("assets/images/Tiles.png",15,9c,a4,97),(int)8,(int)8,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn(),(int)1,null(),null());
HXLINE(  72)		::String _hx_tmp1 = lotsTMXLayer->get_csvData();
HXDLIN(  72)		this->lotsMap->loadMapFromCSV(_hx_tmp1,HX_("assets/images/Tiles.png",15,9c,a4,97),(int)8,(int)8,::flixel::tile::FlxTilemapAutoTiling_obj::OFF_dyn(),(int)1,(int)1,(int)1);
HXLINE(  77)		this->add(this->backgroundMap);
HXLINE(  78)		this->add(this->lotsMap);
HXLINE(  80)		this->lots =  ::LotManager_obj::__new();
HXLINE(  81)		this->add(this->lots);
HXLINE(  83)		this->player =  ::Player_obj::__new();
HXLINE(  84)		this->add(this->player);
HXLINE(  86)		this->buildings =  ::flixel::group::FlxTypedGroup_obj::__new(null());
HXLINE(  87)		this->add(this->buildings);
HXLINE(  89)		{
HXLINE(  89)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  89)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->lotsMap->getTileCoords((int)18,true);
HXDLIN(  89)			while((_g < _g1->length)){
HXLINE(  89)				HX_VARI(  ::flixel::math::FlxPoint,lotPoint) = _g1->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN(  89)				++_g;
HXLINE(  90)				Float _hx_tmp2 = (lotPoint->x - ((Float)this->LOTWIDTH / (Float)(int)2));
HXDLIN(  90)				Float _hx_tmp3 = (lotPoint->y - ((Float)this->LOTHEIGHT / (Float)(int)2));
HXDLIN(  90)				HX_VARI(  ::Lot,lot) =  ::Lot_obj::__new(_hx_tmp2,_hx_tmp3,this->buildings);
HXLINE(  91)				lot->set_immovable(true);
HXLINE(  92)				lot->pixelPerfectPosition = true;
HXLINE(  93)				this->lots->add(lot).StaticCast<  ::Lot >();
            			}
            		}
HXLINE( 100)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_dyn(),((Float)0.25));
HXLINE( 101)		Float _hx_tmp4 = this->backgroundMap->x;
HXDLIN( 101)		Float _hx_tmp5 = this->backgroundMap->y;
HXDLIN( 101)		Float _hx_tmp6 = this->backgroundMap->get_width();
HXDLIN( 101)		Float _hx_tmp7 = this->backgroundMap->get_height();
HXDLIN( 101)		::flixel::FlxG_obj::camera->setScrollBoundsRect(_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,true);
HXLINE( 105)		::flixel::FlxG_obj::debugger->track(this->player,null());
HXLINE( 108)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 128)		this->ui =  ::UIGroup_obj::__new();
HXLINE( 129)		this->add(this->ui);
HXLINE( 131)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/LD39.ogg",35,1a,56,1e),(int)1,true,null());
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACK_FRAME("PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",141,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 142)		::flixel::FlxG_obj::overlap(this->player,this->lots,null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 144)		this->super::update(elapsed);
HXLINE( 146)		HX_VARI(  ::flixel::input::keyboard::FlxKeyList,_this) = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 146)		Bool _hx_tmp = _this->keyManager->checkStatus((int)68,_this->status);
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 147)			this->player->acceleration->set_x(this->PLAYER_ACCELERATION);
            		}
            		else {
HXLINE( 148)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this1,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 148)			Bool _hx_tmp1 = _this1->keyManager->checkStatus((int)65,_this1->status);
HXDLIN( 148)			if (_hx_tmp1) {
HXLINE( 149)				this->player->acceleration->set_x(-(this->PLAYER_ACCELERATION));
            			}
            			else {
HXLINE( 151)				this->player->acceleration->set_x((int)0);
            			}
            		}
HXLINE( 154)		HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this2,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 154)		Bool _hx_tmp2 = _this2->keyManager->checkStatus((int)87,_this2->status);
HXDLIN( 154)		if (_hx_tmp2) {
HXLINE( 155)			this->player->acceleration->set_y(-(this->PLAYER_ACCELERATION));
            		}
            		else {
HXLINE( 156)			HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this3,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 156)			Bool _hx_tmp3 = _this3->keyManager->checkStatus((int)83,_this3->status);
HXDLIN( 156)			if (_hx_tmp3) {
HXLINE( 157)				this->player->acceleration->set_y(this->PLAYER_ACCELERATION);
            			}
            			else {
HXLINE( 159)				this->player->acceleration->set_y((int)0);
            			}
            		}
HXLINE( 162)		Bool _hx_tmp4 = (::flixel::FlxG_obj::mouse->_leftButton->current == (int)2);
HXDLIN( 162)		if (_hx_tmp4) {
HXLINE( 163)			Bool _hx_tmp5 = this->placing;
HXDLIN( 163)			if (_hx_tmp5) {
HXLINE( 164)				HX_VARI(  ::flixel::FlxObject,o) =  ::flixel::FlxObject_obj::__new(::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y,null(),null());
HXLINE( 165)				::flixel::FlxG_obj::overlap(o,this->lots,this->placeObject_dyn(),null());
HXLINE( 166)				o->destroy();
            			}
            		}
HXLINE( 172)		Bool _hx_tmp6 = (::flixel::FlxG_obj::mouse->_rightButton->current == (int)2);
HXDLIN( 172)		if (_hx_tmp6) {
HXLINE( 173)			HX_VARI_NAME(  ::flixel::FlxObject,o1,"o") =  ::flixel::FlxObject_obj::__new(::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y,null(),null());
HXLINE( 174)			::flixel::FlxG_obj::overlap(o1,this->lots,this->removeObject_dyn(),null());
HXLINE( 175)			o1->destroy();
            		}
HXLINE( 178)		HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this4,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 178)		Bool _hx_tmp7 = _this4->keyManager->checkStatus((int)66,_this4->status);
HXDLIN( 178)		if (_hx_tmp7) {
HXLINE( 180)			HX_VARI(  ::BuildScreen,buildScreen) =  ::BuildScreen_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 181)			this->openSubState(buildScreen);
            		}
HXLINE( 184)		HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this5,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 184)		Bool _hx_tmp8 = _this5->keyManager->checkStatus((int)78,_this5->status);
HXDLIN( 184)		if (_hx_tmp8) {
HXLINE( 186)			HX_VARI(  ::SellPowerSubState,sellPowerSubState) =  ::SellPowerSubState_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE( 187)			this->openSubState(sellPowerSubState);
            		}
HXLINE( 196)		HX_VARI_NAME(  ::flixel::input::keyboard::FlxKeyList,_this6,"_this") = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 196)		Bool _hx_tmp9 = _this6->keyManager->checkStatus((int)73,_this6->status);
HXDLIN( 196)		if (_hx_tmp9) {
HXLINE( 197)			this->startTutorial();
            		}
HXLINE( 206)		this->ui->placingText->set_exists(this->placing);
HXLINE( 208)		Int _hx_tmp10 = ::Math_obj::floor(this->lots->money);
HXDLIN( 208)		this->ui->setTotalCash(_hx_tmp10);
HXLINE( 209)		Int _hx_tmp11 = ::Math_obj::floor(this->lots->totalUnits);
HXDLIN( 209)		this->ui->setTotalUnits(_hx_tmp11);
HXLINE( 210)		this->ui->setTime(this->lots->time);
HXLINE( 211)		Int _hx_tmp12 = (this->lots->day + (int)1);
HXDLIN( 211)		this->ui->setDay(_hx_tmp12);
            	}


void PlayState_obj::removeObject( ::flixel::FlxObject o, ::Lot lot){
            	HX_STACK_FRAME("PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",216,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(lot,"lot")
HXLINE( 216)		Bool _hx_tmp = hx::IsNotNull( lot->building );
HXDLIN( 216)		if (_hx_tmp) {
HXLINE( 217)			lot->building->breakDown();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,removeObject,(void))

void PlayState_obj::closeBuildingScreen(Bool isPlacing,::String placingObject){
            	HX_STACK_FRAME("PlayState","closeBuildingScreen",0xae467347,"PlayState.closeBuildingScreen","PlayState.hx",221,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(isPlacing,"isPlacing")
            	HX_STACK_ARG(placingObject,"placingObject")
HXLINE( 222)		this->placing = isPlacing;
HXLINE( 223)		this->placingObject = placingObject;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,closeBuildingScreen,(void))

void PlayState_obj::placeObject( ::flixel::FlxObject o, ::Lot lot){
            	HX_STACK_FRAME("PlayState","placeObject",0x47ce8455,"PlayState.placeObject","PlayState.hx",226,0xb30d7781)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(o,"o")
            	HX_STACK_ARG(lot,"lot")
HXLINE( 227)		lot->add( ::Building_obj::__new(this->placingObject,lot));
HXLINE( 228)		this->placing = false;
HXLINE( 229)		this->placingObject = null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,placeObject,(void))

void PlayState_obj::startTutorial(){
            	HX_STACK_FRAME("PlayState","startTutorial",0x3b00b94f,"PlayState.startTutorial","PlayState.hx",233,0xb30d7781)
            	HX_STACK_THIS(this)
HXLINE( 233)		this->openSubState( ::TutorialSubstate_obj::__new(hx::ObjectPtr<OBJ_>(this)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startTutorial,(void))


PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(LOTWIDTH,"LOTWIDTH");
	HX_MARK_MEMBER_NAME(LOTHEIGHT,"LOTHEIGHT");
	HX_MARK_MEMBER_NAME(lots,"lots");
	HX_MARK_MEMBER_NAME(buildings,"buildings");
	HX_MARK_MEMBER_NAME(lotsMap,"lotsMap");
	HX_MARK_MEMBER_NAME(backgroundMap,"backgroundMap");
	HX_MARK_MEMBER_NAME(ui,"ui");
	HX_MARK_MEMBER_NAME(placing,"placing");
	HX_MARK_MEMBER_NAME(placingObject,"placingObject");
	HX_MARK_MEMBER_NAME(PLAYER_ACCELERATION,"PLAYER_ACCELERATION");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(LOTWIDTH,"LOTWIDTH");
	HX_VISIT_MEMBER_NAME(LOTHEIGHT,"LOTHEIGHT");
	HX_VISIT_MEMBER_NAME(lots,"lots");
	HX_VISIT_MEMBER_NAME(buildings,"buildings");
	HX_VISIT_MEMBER_NAME(lotsMap,"lotsMap");
	HX_VISIT_MEMBER_NAME(backgroundMap,"backgroundMap");
	HX_VISIT_MEMBER_NAME(ui,"ui");
	HX_VISIT_MEMBER_NAME(placing,"placing");
	HX_VISIT_MEMBER_NAME(placingObject,"placingObject");
	HX_VISIT_MEMBER_NAME(PLAYER_ACCELERATION,"PLAYER_ACCELERATION");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ui") ) { return hx::Val( ui); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lots") ) { return hx::Val( lots); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lotsMap") ) { return hx::Val( lotsMap); }
		if (HX_FIELD_EQ(inName,"placing") ) { return hx::Val( placing); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"LOTWIDTH") ) { return hx::Val( LOTWIDTH); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"LOTHEIGHT") ) { return hx::Val( LOTHEIGHT); }
		if (HX_FIELD_EQ(inName,"buildings") ) { return hx::Val( buildings); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"placeObject") ) { return hx::Val( placeObject_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"removeObject") ) { return hx::Val( removeObject_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"backgroundMap") ) { return hx::Val( backgroundMap); }
		if (HX_FIELD_EQ(inName,"placingObject") ) { return hx::Val( placingObject); }
		if (HX_FIELD_EQ(inName,"startTutorial") ) { return hx::Val( startTutorial_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"PLAYER_ACCELERATION") ) { return hx::Val( PLAYER_ACCELERATION); }
		if (HX_FIELD_EQ(inName,"closeBuildingScreen") ) { return hx::Val( closeBuildingScreen_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ui") ) { ui=inValue.Cast<  ::UIGroup >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"lots") ) { lots=inValue.Cast<  ::LotManager >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"lotsMap") ) { lotsMap=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"placing") ) { placing=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"LOTWIDTH") ) { LOTWIDTH=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"LOTHEIGHT") ) { LOTHEIGHT=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buildings") ) { buildings=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"backgroundMap") ) { backgroundMap=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"placingObject") ) { placingObject=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"PLAYER_ACCELERATION") ) { PLAYER_ACCELERATION=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("LOTWIDTH","\xd5","\xc3","\x64","\xae"));
	outFields->push(HX_HCSTRING("LOTHEIGHT","\x18","\x0f","\x16","\xa0"));
	outFields->push(HX_HCSTRING("lots","\xc2","\xaa","\xb7","\x47"));
	outFields->push(HX_HCSTRING("buildings","\x7f","\x43","\x1e","\xfb"));
	outFields->push(HX_HCSTRING("lotsMap","\xfa","\xbc","\x64","\x03"));
	outFields->push(HX_HCSTRING("backgroundMap","\x4e","\xd7","\xeb","\x91"));
	outFields->push(HX_HCSTRING("ui","\x54","\x66","\x00","\x00"));
	outFields->push(HX_HCSTRING("placing","\xc4","\x5d","\x8d","\x7b"));
	outFields->push(HX_HCSTRING("placingObject","\xa3","\xfb","\xb3","\x8f"));
	outFields->push(HX_HCSTRING("PLAYER_ACCELERATION","\x1e","\x8b","\xdc","\x27"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(PlayState_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsInt,(int)offsetof(PlayState_obj,LOTWIDTH),HX_HCSTRING("LOTWIDTH","\xd5","\xc3","\x64","\xae")},
	{hx::fsInt,(int)offsetof(PlayState_obj,LOTHEIGHT),HX_HCSTRING("LOTHEIGHT","\x18","\x0f","\x16","\xa0")},
	{hx::fsObject /*::LotManager*/ ,(int)offsetof(PlayState_obj,lots),HX_HCSTRING("lots","\xc2","\xaa","\xb7","\x47")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(PlayState_obj,buildings),HX_HCSTRING("buildings","\x7f","\x43","\x1e","\xfb")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,lotsMap),HX_HCSTRING("lotsMap","\xfa","\xbc","\x64","\x03")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(PlayState_obj,backgroundMap),HX_HCSTRING("backgroundMap","\x4e","\xd7","\xeb","\x91")},
	{hx::fsObject /*::UIGroup*/ ,(int)offsetof(PlayState_obj,ui),HX_HCSTRING("ui","\x54","\x66","\x00","\x00")},
	{hx::fsBool,(int)offsetof(PlayState_obj,placing),HX_HCSTRING("placing","\xc4","\x5d","\x8d","\x7b")},
	{hx::fsString,(int)offsetof(PlayState_obj,placingObject),HX_HCSTRING("placingObject","\xa3","\xfb","\xb3","\x8f")},
	{hx::fsInt,(int)offsetof(PlayState_obj,PLAYER_ACCELERATION),HX_HCSTRING("PLAYER_ACCELERATION","\x1e","\x8b","\xdc","\x27")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("LOTWIDTH","\xd5","\xc3","\x64","\xae"),
	HX_HCSTRING("LOTHEIGHT","\x18","\x0f","\x16","\xa0"),
	HX_HCSTRING("lots","\xc2","\xaa","\xb7","\x47"),
	HX_HCSTRING("buildings","\x7f","\x43","\x1e","\xfb"),
	HX_HCSTRING("lotsMap","\xfa","\xbc","\x64","\x03"),
	HX_HCSTRING("backgroundMap","\x4e","\xd7","\xeb","\x91"),
	HX_HCSTRING("ui","\x54","\x66","\x00","\x00"),
	HX_HCSTRING("placing","\xc4","\x5d","\x8d","\x7b"),
	HX_HCSTRING("placingObject","\xa3","\xfb","\xb3","\x8f"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("PLAYER_ACCELERATION","\x1e","\x8b","\xdc","\x27"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("removeObject","\x23","\x1a","\x6d","\x84"),
	HX_HCSTRING("closeBuildingScreen","\xd8","\x9e","\xb6","\x93"),
	HX_HCSTRING("placeObject","\xe6","\x36","\x80","\x3e"),
	HX_HCSTRING("startTutorial","\x20","\xf2","\x70","\x87"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PlayState","\x5d","\x83","\xc2","\x46");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

