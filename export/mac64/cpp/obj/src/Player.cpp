// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

static const Int _hx_array_data_0[] = {
	(Int)1,(Int)2,(Int)3,(Int)4,
};
static const Int _hx_array_data_1[] = {
	(Int)5,(Int)6,(Int)7,(Int)8,
};

void Player_obj::__construct(){
            	HX_STACK_FRAME("Player","new",0x8d5554f3,"Player.new","Player.hx",6,0xa27fc9dd)
            	HX_STACK_THIS(this)
HXLINE(   7)		super::__construct(null(),null(),null());
HXLINE(  11)		this->loadGraphic(HX_("assets/images/Player.png",a7,8c,32,bd),true,(int)16,(int)16,null(),null());
HXLINE(  12)		this->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< Int >::fromData( _hx_array_data_0,4),(int)10,true,null(),null());
HXLINE(  13)		this->animation->add(HX_("run",4b,e7,56,00),::Array_obj< Int >::fromData( _hx_array_data_1,4),(int)10,true,null(),null());
HXLINE(  14)		this->maxVelocity->set_x((int)60);
HXLINE(  15)		this->maxVelocity->set_y((int)60);
HXLINE(  16)		this->drag->set_x((int)1000);
HXLINE(  17)		this->drag->set_y((int)1000);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

hx::ObjectPtr< Player_obj > Player_obj::__new()
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Player_obj::update(Float elapsed){
            	HX_STACK_FRAME("Player","update",0xf1f8df56,"Player.update","Player.hx",20,0xa27fc9dd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE(  21)		this->super::update(elapsed);
HXLINE(  23)		Bool _hx_tmp;
HXDLIN(  23)		Float _hx_tmp1 = ::Math_obj::abs(this->velocity->x);
HXDLIN(  23)		if (!((_hx_tmp1 > (int)2))) {
HXLINE(  23)			Float _hx_tmp2 = ::Math_obj::abs(this->velocity->y);
HXDLIN(  23)			_hx_tmp = (_hx_tmp2 > (int)2);
            		}
            		else {
HXLINE(  23)			_hx_tmp = true;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  24)			this->animation->play(HX_("run",4b,e7,56,00),null(),null(),null());
            		}
            		else {
HXLINE(  26)			this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
            	}



Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Player_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

