// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Scanline
#include <Scanline.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_GLShaderParameter
#include <openfl/display/GLShaderParameter.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif


void Scanline_obj::__construct(){
            	HX_STACK_FRAME("Scanline","new",0x18125183,"Scanline.new","Scanline.hx",9,0xc58f8f4d)
            	HX_STACK_THIS(this)
HXLINE(  11)		this->_hx___scale =  ::openfl::display::GLShaderParameter_obj::__new(HX_("float",9c,c5,96,02),(int)0);
HXDLIN(  11)		this->fragment = ((((((((((((((((((((((((((((((((((((((((((((HX_("\n\tuniform float scale;\n\n\t// Go from Full Width=.58 to\nvec2 convertToNormalized(vec2 p)\n{\n\treturn p * (",45,a5,be,dc) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\nvec2 convertToFull(vec2 p)\n{\n\treturn p / (",ba,bc,70,1b)) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\n\tvoid main()\n\t{\n\t\tfloat darkmult = 0.75;\n\t\tfloat lightmult = 0.85;\n\n\n\t\tfloat xMod = mod(floor((convertToNormalized(",b3,d8,9a,2d)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(").x * ",c3,81,7a,30)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".x + 1.0*scale/2.0) / scale), 2.0);\n\t\tfloat yMod = mod(floor((convertToNormalized(",3f,e4,ec,5a)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(").y * ",62,b8,23,31)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".y + 1.0*scale/2.0) / scale), 2.0);\n\n//\t\tfloat xMod = mod(floor((",ae,9e,b8,63)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(".x * ",8c,b6,d8,cb)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".x + 0.0*",63,98,bd,a7)) + ::openfl::display::Shader_obj::uTextureSize) + HX_(".x) / scale), 2.0);\n//\t\tfloat yMod = mod(floor((",d9,52,1a,f4)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(".y * ",2b,ed,81,cc)) + ::openfl::display::Shader_obj::uTextureSize) + HX_(".y + 1.0/",26,41,99,e1)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".y) / scale), 2.0);\n\n//\t\tmult = smoothstep(0.0,8.0,xMod + yMod);\n\n\t\tvec4 darkmultVec = vec4(darkmult, darkmult, darkmult, darkmult);\n\t\tvec4 lightmultVec = vec4(lightmult, lightmult, lightmult, lightmult);\n//\t\tgl_FragColor = multVec * texture2D(",ae,6f,da,59)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n//\t\treturn;\n\n\t\tif (yMod == 0.0)\n\t\t\tgl_FragColor = darkmultVec * texture2D(",38,43,b6,8d)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n\t\telse if (xMod == 0.0)\n\t\t\tgl_FragColor = lightmultVec * texture2D(",6b,da,89,37)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n\t\telse\n\t\t\tgl_FragColor = texture2D(",b7,fe,81,b6)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n\t}",2c,fe,74,c2));
HXLINE(  54)		super::__construct(null());
HXLINE(  11)		this->data->set(HX_("scale",8a,ce,ce,78),this->_hx___scale);
HXDLIN(  11)		this->_hx___buildFragmentCode(((((((((((((((((((((((((((((((((((((((((((((HX_("\n\tuniform float scale;\n\n\t// Go from Full Width=.58 to\nvec2 convertToNormalized(vec2 p)\n{\n\treturn p * (",45,a5,be,dc) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\nvec2 convertToFull(vec2 p)\n{\n\treturn p / (",ba,bc,70,1b)) + ::openfl::display::Shader_obj::uTextureSize) + HX_("/",2f,00,00,00)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(");\n}\n\n\tvoid main()\n\t{\n\t\tfloat darkmult = 0.75;\n\t\tfloat lightmult = 0.85;\n\n\n\t\tfloat xMod = mod(floor((convertToNormalized(",b3,d8,9a,2d)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(").x * ",c3,81,7a,30)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".x + 1.0*scale/2.0) / scale), 2.0);\n\t\tfloat yMod = mod(floor((convertToNormalized(",3f,e4,ec,5a)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(").y * ",62,b8,23,31)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".y + 1.0*scale/2.0) / scale), 2.0);\n\n//\t\tfloat xMod = mod(floor((",ae,9e,b8,63)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(".x * ",8c,b6,d8,cb)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".x + 0.0*",63,98,bd,a7)) + ::openfl::display::Shader_obj::uTextureSize) + HX_(".x) / scale), 2.0);\n//\t\tfloat yMod = mod(floor((",d9,52,1a,f4)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(".y * ",2b,ed,81,cc)) + ::openfl::display::Shader_obj::uTextureSize) + HX_(".y + 1.0/",26,41,99,e1)) + ::openfl::display::Shader_obj::uObjectSize) + HX_(".y) / scale), 2.0);\n\n//\t\tmult = smoothstep(0.0,8.0,xMod + yMod);\n\n\t\tvec4 darkmultVec = vec4(darkmult, darkmult, darkmult, darkmult);\n\t\tvec4 lightmultVec = vec4(lightmult, lightmult, lightmult, lightmult);\n//\t\tgl_FragColor = multVec * texture2D(",ae,6f,da,59)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n//\t\treturn;\n\n\t\tif (yMod == 0.0)\n\t\t\tgl_FragColor = darkmultVec * texture2D(",38,43,b6,8d)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n\t\telse if (xMod == 0.0)\n\t\t\tgl_FragColor = lightmultVec * texture2D(",6b,da,89,37)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n\t\telse\n\t\t\tgl_FragColor = texture2D(",b7,fe,81,b6)) + ::openfl::display::Shader_obj::uSampler) + HX_(", ",74,26,00,00)) + ::openfl::display::Shader_obj::vTexCoord) + HX_(");\n\t}",2c,fe,74,c2)));
            	}

Dynamic Scanline_obj::__CreateEmpty() { return new Scanline_obj; }

hx::ObjectPtr< Scanline_obj > Scanline_obj::__new()
{
	hx::ObjectPtr< Scanline_obj > _hx_result = new Scanline_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Scanline_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Scanline_obj > _hx_result = new Scanline_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float Scanline_obj::get_scale(){
            	HX_STACK_FRAME("Scanline","get_scale",0x36fca844,"Scanline.get_scale","Scanline.hx",11,0xc58f8f4d)
            	HX_STACK_THIS(this)
HXLINE(  11)		return this->_hx___scale->value->__get((int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Scanline_obj,get_scale,return )

Float Scanline_obj::set_scale(Float v){
            	HX_STACK_FRAME("Scanline","set_scale",0x1a4d9450,"Scanline.set_scale","Scanline.hx",11,0xc58f8f4d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(v,"v")
HXLINE(  11)		return (this->_hx___scale->value[(int)0] = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Scanline_obj,set_scale,return )


Scanline_obj::Scanline_obj()
{
}

void Scanline_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Scanline);
	HX_MARK_MEMBER_NAME(fragment,"fragment");
	HX_MARK_MEMBER_NAME(_hx___scale,"__scale");
	 ::openfl::display::Shader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Scanline_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fragment,"fragment");
	HX_VISIT_MEMBER_NAME(_hx___scale,"__scale");
	 ::openfl::display::Shader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Scanline_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scale()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__scale") ) { return hx::Val( _hx___scale); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fragment") ) { return hx::Val( fragment); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_scale") ) { return hx::Val( get_scale_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scale") ) { return hx::Val( set_scale_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Scanline_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scale(inValue) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"__scale") ) { _hx___scale=inValue.Cast<  ::openfl::display::GLShaderParameter >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fragment") ) { fragment=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Scanline_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad"));
	outFields->push(HX_HCSTRING("__scale","\x6a","\x27","\x2d","\xe3"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Scanline_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Scanline_obj,fragment),HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad")},
	{hx::fsObject /*::openfl::display::GLShaderParameter*/ ,(int)offsetof(Scanline_obj,_hx___scale),HX_HCSTRING("__scale","\x6a","\x27","\x2d","\xe3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Scanline_obj_sStaticStorageInfo = 0;
#endif

static ::String Scanline_obj_sMemberFields[] = {
	HX_HCSTRING("fragment","\xd0","\x5f","\xe5","\xad"),
	HX_HCSTRING("__scale","\x6a","\x27","\x2d","\xe3"),
	HX_HCSTRING("get_scale","\xe1","\x2a","\x78","\xbc"),
	HX_HCSTRING("set_scale","\xed","\x16","\xc9","\x9f"),
	::String(null()) };

static void Scanline_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Scanline_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Scanline_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Scanline_obj::__mClass,"__mClass");
};

#endif

hx::Class Scanline_obj::__mClass;

void Scanline_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Scanline","\x11","\xd4","\x8c","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Scanline_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Scanline_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Scanline_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Scanline_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Scanline_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Scanline_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Scanline_obj::__boot()
{
{
            	HX_STACK_FRAME("Scanline","boot",0xf00e01af,"Scanline.boot","Scanline.hx",9,0xc58f8f4d)
HXLINE(   9)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("fields",79,8e,8e,80), ::Dynamic(hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("set_scale",ed,16,c9,9f), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null())))
            				->setFixed(1,HX_("fragment",d0,5f,e5,ad), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("fragment",d0,5f,e5,ad),null())))
            				->setFixed(2,HX_("get_scale",e1,2a,78,bc), ::Dynamic(hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("noCompletion",bd,6a,ba,19),null()))))));
            	}
}

