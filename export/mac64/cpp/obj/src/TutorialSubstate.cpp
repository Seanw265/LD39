// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_LotManager
#include <LotManager.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_TutorialSubstate
#include <TutorialSubstate.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("Welcome to Power Rancher!\n\nPress > to continue!",66,17,eb,46),HX_("In this game you have to fulfull a city's daily power consumption needs.\n\n(Press >)",37,9c,16,58),HX_("You have a certain number of Power Units (U). You will be able to see how many Power Units you have in the top right corner of the screen.",ce,f2,83,7d),HX_("You also have a certain amount of cash ($). You can use your cash to purchase generators which will generate power units.",06,bf,96,04),HX_("To purchase generators you will press (B) on your keyboard.",66,59,3b,94),HX_("Click to place.\n\nRight click to destroy.",29,1d,47,80),HX_("At the end of every day, the city will buy the amount of power they need from you at a discounted rate.",a5,8b,48,63),HX_("You can also sell power to other individuals by pressing (N) on your keyboard.",ac,89,d3,78),HX_("If you don't have enough Units at the end of the day you lose.",20,64,3d,1f),
};
static const Int _hx_array_data_1[] = {
	(Int)0,
};
static const Int _hx_array_data_2[] = {
	(Int)1,
};
static const Int _hx_array_data_3[] = {
	(Int)2,
};
static const Int _hx_array_data_4[] = {
	(Int)0,
};
static const Int _hx_array_data_5[] = {
	(Int)1,
};
static const Int _hx_array_data_6[] = {
	(Int)2,
};
static const Int _hx_array_data_7[] = {
	(Int)0,
};
static const Int _hx_array_data_8[] = {
	(Int)1,
};
static const Int _hx_array_data_9[] = {
	(Int)2,
};

void TutorialSubstate_obj::__construct( ::PlayState playState){
            	HX_STACK_FRAME("TutorialSubstate","new",0xee4c56e1,"TutorialSubstate.new","TutorialSubstate.hx",8,0xea1bdfaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(playState,"playState")
HXLINE(  13)		this->data = ::Array_obj< ::String >::fromData( _hx_array_data_0,9);
HXLINE(  12)		this->currentIndex = (int)0;
HXLINE(  28)		super::__construct(null());
HXLINE(  30)		this->playState = playState;
HXLINE(  32)		HX_VARI(  ::flixel::FlxSprite,backgroundSprite) =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE(  33)		Float _hx_tmp = (::flixel::FlxG_obj::camera->width * ((Float)0.9));
HXDLIN(  33)		Int _hx_tmp1 = ::Math_obj::round(_hx_tmp);
HXDLIN(  33)		Float _hx_tmp2 = (::flixel::FlxG_obj::camera->height * ((Float)0.9));
HXDLIN(  33)		Int _hx_tmp3 = ::Math_obj::round(_hx_tmp2);
HXDLIN(  33)		backgroundSprite->makeGraphic(_hx_tmp1,_hx_tmp3,(int)-14077892,null(),null());
HXLINE(  34)		Float _hx_tmp4 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN(  34)		Float _hx_tmp5 = backgroundSprite->get_width();
HXDLIN(  34)		backgroundSprite->set_x((_hx_tmp4 - ((Float)_hx_tmp5 / (Float)(int)2)));
HXLINE(  35)		Float _hx_tmp6 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN(  35)		Float _hx_tmp7 = backgroundSprite->get_height();
HXDLIN(  35)		backgroundSprite->set_y((_hx_tmp6 - ((Float)_hx_tmp7 / (Float)(int)2)));
HXLINE(  36)		this->add(backgroundSprite);
HXLINE(  38)		Float _hx_tmp8 = backgroundSprite->x;
HXDLIN(  38)		Float _hx_tmp9 = backgroundSprite->get_width();
HXDLIN(  38)		Float _hx_tmp10 = (((_hx_tmp8 + _hx_tmp9) - (int)8) - (int)2);
HXDLIN(  38)		Float _hx_tmp11 = (backgroundSprite->y + (int)2);
HXDLIN(  38)		HX_VARI(  ::flixel::ui::FlxButton,cancelButton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp10,_hx_tmp11,HX_("",00,00,00,00),this->close_dyn());
HXLINE(  39)		cancelButton->loadGraphic(HX_("assets/images/CloseButton.png",9a,7a,e2,97),true,(int)8,(int)8,null(),null());
HXLINE(  40)		cancelButton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_1,1),null(),null(),null(),null());
HXLINE(  41)		cancelButton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_2,1),null(),null(),null(),null());
HXLINE(  42)		cancelButton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_3,1),null(),null(),null(),null());
HXLINE(  43)		this->add(cancelButton);
HXLINE(  45)		Float _hx_tmp12 = (backgroundSprite->x + (int)2);
HXDLIN(  45)		Float _hx_tmp13 = (backgroundSprite->y + (int)2);
HXDLIN(  45)		HX_VARI(  ::flixel::text::FlxText,titleDisplay) =  ::flixel::text::FlxText_obj::__new(_hx_tmp12,_hx_tmp13,(int)160,HX_("Tutorial",be,4b,67,5c),(int)13,null());
HXLINE(  46)		titleDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE(  47)		titleDisplay->set_alignment(HX_("left",07,08,b0,47));
HXLINE(  48)		this->add(titleDisplay);
HXLINE(  50)		Float _hx_tmp14 = (backgroundSprite->x + (int)2);
HXDLIN(  50)		Float _hx_tmp15 = backgroundSprite->get_width();
HXDLIN(  50)		Float _hx_tmp16 = (_hx_tmp14 - ((Float)(_hx_tmp15 - (int)4) / (Float)(int)2));
HXDLIN(  50)		Float _hx_tmp17 = titleDisplay->get_height();
HXDLIN(  50)		Float _hx_tmp18 = (_hx_tmp17 + titleDisplay->y);
HXDLIN(  50)		Float _hx_tmp19 = backgroundSprite->get_width();
HXDLIN(  50)		Float _hx_tmp20 = ((_hx_tmp19 - (int)4) * (int)2);
HXDLIN(  50)		::String _hx_tmp21 = ((HX_("Well that's the game! You gave it a good run and got ",1c,2b,38,e9) + playState->lots->day) + HX_(" days!",8a,75,f7,9f));
HXDLIN(  50)		this->instructionsDisplay =  ::flixel::text::FlxText_obj::__new(_hx_tmp16,_hx_tmp18,_hx_tmp20,_hx_tmp21,(int)13,null());
HXLINE(  51)		this->instructionsDisplay->scale->set_x(((Float)0.5));
HXLINE(  52)		this->instructionsDisplay->scale->set_y(((Float)0.5));
HXLINE(  53)		this->instructionsDisplay->updateHitbox();
HXLINE(  54)		Float _hx_tmp22 = (backgroundSprite->x + (int)2);
HXDLIN(  54)		this->instructionsDisplay->set_x(_hx_tmp22);
HXLINE(  55)		Float _hx_tmp23 = backgroundSprite->get_width();
HXDLIN(  55)		this->instructionsDisplay->set_width((_hx_tmp23 - (int)4));
HXLINE(  56)		Float _hx_tmp24 = titleDisplay->get_height();
HXDLIN(  56)		Float _hx_tmp25 = (_hx_tmp24 + titleDisplay->y);
HXDLIN(  56)		this->instructionsDisplay->set_y(_hx_tmp25);
HXLINE(  57)		this->instructionsDisplay->set_font(HX_("assets/data/visitor2.ttf",b5,24,16,61));
HXLINE(  58)		this->instructionsDisplay->set_alignment(HX_("left",07,08,b0,47));
HXLINE(  59)		this->add(this->instructionsDisplay);
HXLINE(  61)		Float _hx_tmp26 = backgroundSprite->x;
HXDLIN(  61)		Float _hx_tmp27 = backgroundSprite->get_width();
HXDLIN(  61)		Float _hx_tmp28 = (((_hx_tmp26 + ((Float)_hx_tmp27 / (Float)(int)2)) - (int)16) - (int)1);
HXDLIN(  61)		Float _hx_tmp29 = backgroundSprite->y;
HXDLIN(  61)		Float _hx_tmp30 = backgroundSprite->get_height();
HXDLIN(  61)		HX_VARI(  ::flixel::ui::FlxButton,leftbutton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp28,(((_hx_tmp29 + _hx_tmp30) - (int)20) - (int)2),HX_("",00,00,00,00),this->left_dyn());
HXLINE(  62)		leftbutton->loadGraphic(HX_("assets/images/Left.png",8d,6b,bc,d2),true,(int)16,(int)20,null(),null());
HXLINE(  63)		leftbutton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_4,1),null(),null(),null(),null());
HXLINE(  64)		leftbutton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_5,1),null(),null(),null(),null());
HXLINE(  65)		leftbutton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_6,1),null(),null(),null(),null());
HXLINE(  66)		this->add(leftbutton);
HXLINE(  68)		Float _hx_tmp31 = backgroundSprite->x;
HXDLIN(  68)		Float _hx_tmp32 = backgroundSprite->get_width();
HXDLIN(  68)		Float _hx_tmp33 = ((_hx_tmp31 + ((Float)_hx_tmp32 / (Float)(int)2)) + (int)1);
HXDLIN(  68)		Float _hx_tmp34 = backgroundSprite->y;
HXDLIN(  68)		Float _hx_tmp35 = backgroundSprite->get_height();
HXDLIN(  68)		HX_VARI(  ::flixel::ui::FlxButton,rightbutton) =  ::flixel::ui::FlxButton_obj::__new(_hx_tmp33,(((_hx_tmp34 + _hx_tmp35) - (int)20) - (int)2),HX_("",00,00,00,00),this->right_dyn());
HXLINE(  69)		rightbutton->loadGraphic(HX_("assets/images/Right.png",ec,21,4f,e8),true,(int)16,(int)20,null(),null());
HXLINE(  70)		rightbutton->animation->add(HX_("normal",27,72,69,30),::Array_obj< Int >::fromData( _hx_array_data_7,1),null(),null(),null(),null());
HXLINE(  71)		rightbutton->animation->add(HX_("highlight",34,56,00,ed),::Array_obj< Int >::fromData( _hx_array_data_8,1),null(),null(),null(),null());
HXLINE(  72)		rightbutton->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< Int >::fromData( _hx_array_data_9,1),null(),null(),null(),null());
HXLINE(  73)		this->add(rightbutton);
HXLINE(  75)		this->setCurrentIndex((int)0);
            	}

Dynamic TutorialSubstate_obj::__CreateEmpty() { return new TutorialSubstate_obj; }

hx::ObjectPtr< TutorialSubstate_obj > TutorialSubstate_obj::__new( ::PlayState playState)
{
	hx::ObjectPtr< TutorialSubstate_obj > _hx_result = new TutorialSubstate_obj();
	_hx_result->__construct(playState);
	return _hx_result;
}

Dynamic TutorialSubstate_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TutorialSubstate_obj > _hx_result = new TutorialSubstate_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TutorialSubstate_obj::left(){
            	HX_STACK_FRAME("TutorialSubstate","left",0x932d3266,"TutorialSubstate.left","TutorialSubstate.hx",80,0xea1bdfaf)
            	HX_STACK_THIS(this)
HXLINE(  80)		Int _hx_tmp = (this->currentIndex - (int)1);
HXDLIN(  80)		this->setCurrentIndex(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TutorialSubstate_obj,left,(void))

void TutorialSubstate_obj::right(){
            	HX_STACK_FRAME("TutorialSubstate","right",0xab6bf49d,"TutorialSubstate.right","TutorialSubstate.hx",83,0xea1bdfaf)
            	HX_STACK_THIS(this)
HXLINE(  83)		Int _hx_tmp = (this->currentIndex + (int)1);
HXDLIN(  83)		this->setCurrentIndex(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TutorialSubstate_obj,right,(void))

void TutorialSubstate_obj::setCurrentIndex(Int i){
            	HX_STACK_FRAME("TutorialSubstate","setCurrentIndex",0x0d7f16dc,"TutorialSubstate.setCurrentIndex","TutorialSubstate.hx",87,0xea1bdfaf)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(i,"i")
HXLINE(  87)		Bool _hx_tmp;
HXDLIN(  87)		if ((i >= (int)0)) {
HXLINE(  87)			_hx_tmp = (i < this->data->length);
            		}
            		else {
HXLINE(  87)			_hx_tmp = false;
            		}
HXDLIN(  87)		if (_hx_tmp) {
HXLINE(  88)			this->currentIndex = i;
HXLINE(  89)			::String _hx_tmp1 = this->data->__get(i);
HXDLIN(  89)			this->instructionsDisplay->set_text(_hx_tmp1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TutorialSubstate_obj,setCurrentIndex,(void))


TutorialSubstate_obj::TutorialSubstate_obj()
{
}

void TutorialSubstate_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TutorialSubstate);
	HX_MARK_MEMBER_NAME(playState,"playState");
	HX_MARK_MEMBER_NAME(currentIndex,"currentIndex");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(instructionsDisplay,"instructionsDisplay");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TutorialSubstate_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(playState,"playState");
	HX_VISIT_MEMBER_NAME(currentIndex,"currentIndex");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(instructionsDisplay,"instructionsDisplay");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TutorialSubstate_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"left") ) { return hx::Val( left_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return hx::Val( right_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playState") ) { return hx::Val( playState); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentIndex") ) { return hx::Val( currentIndex); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setCurrentIndex") ) { return hx::Val( setCurrentIndex_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"instructionsDisplay") ) { return hx::Val( instructionsDisplay); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TutorialSubstate_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playState") ) { playState=inValue.Cast<  ::PlayState >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"currentIndex") ) { currentIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"instructionsDisplay") ) { instructionsDisplay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TutorialSubstate_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"));
	outFields->push(HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("instructionsDisplay","\x1d","\x0a","\x9e","\x3d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TutorialSubstate_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::PlayState*/ ,(int)offsetof(TutorialSubstate_obj,playState),HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4")},
	{hx::fsInt,(int)offsetof(TutorialSubstate_obj,currentIndex),HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(TutorialSubstate_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(TutorialSubstate_obj,instructionsDisplay),HX_HCSTRING("instructionsDisplay","\x1d","\x0a","\x9e","\x3d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TutorialSubstate_obj_sStaticStorageInfo = 0;
#endif

static ::String TutorialSubstate_obj_sMemberFields[] = {
	HX_HCSTRING("playState","\x7d","\xa3","\xef","\xa4"),
	HX_HCSTRING("currentIndex","\x19","\x80","\x20","\x05"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("instructionsDisplay","\x1d","\x0a","\x9e","\x3d"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("setCurrentIndex","\xdb","\x52","\xd6","\x23"),
	::String(null()) };

static void TutorialSubstate_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TutorialSubstate_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TutorialSubstate_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TutorialSubstate_obj::__mClass,"__mClass");
};

#endif

hx::Class TutorialSubstate_obj::__mClass;

void TutorialSubstate_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("TutorialSubstate","\x6f","\x52","\x05","\x24");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TutorialSubstate_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TutorialSubstate_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TutorialSubstate_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TutorialSubstate_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TutorialSubstate_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TutorialSubstate_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

