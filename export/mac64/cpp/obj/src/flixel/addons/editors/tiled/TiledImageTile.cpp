// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledImageTile
#include <flixel/addons/editors/tiled/TiledImageTile.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif

namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledImageTile_obj::__construct( ::haxe::xml::Fast Source){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledImageTile","new",0xfa04df6e,"flixel.addons.editors.tiled.TiledImageTile.new","flixel/addons/editors/tiled/TiledImageTile.hx",19,0x0527e8a0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Source,"Source")
HXLINE(  19)		HX_VAR(  ::_List::ListNode,_g_head);
HXDLIN(  19)		 ::List _this = Source->nodes->resolve(HX_("image",5b,1f,69,bd));
HXLINE(  17)		_g_head = _this->h;
HXLINE(  19)		while(true){
HXLINE(  19)			Bool _hx_tmp = !(hx::IsNotNull( _g_head ));
HXDLIN(  19)			if (_hx_tmp) {
HXLINE(  19)				goto _hx_goto_0;
            			}
HXDLIN(  19)			HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXLINE(  17)			_g_head = _g_head->next;
HXLINE(  21)			::String _hx_tmp1 = val->att->resolve(HX_("width",06,b6,62,ca));
HXDLIN(  21)			this->width = ::Std_obj::parseFloat(_hx_tmp1);
HXLINE(  22)			::String _hx_tmp2 = val->att->resolve(HX_("height",e7,07,4c,02));
HXDLIN(  22)			this->height = ::Std_obj::parseFloat(_hx_tmp2);
HXLINE(  23)			this->source = val->att->resolve(HX_("source",db,b0,31,32));
            		}
            		_hx_goto_0:;
            	}

Dynamic TiledImageTile_obj::__CreateEmpty() { return new TiledImageTile_obj; }

hx::ObjectPtr< TiledImageTile_obj > TiledImageTile_obj::__new( ::haxe::xml::Fast Source)
{
	hx::ObjectPtr< TiledImageTile_obj > _hx_result = new TiledImageTile_obj();
	_hx_result->__construct(Source);
	return _hx_result;
}

Dynamic TiledImageTile_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledImageTile_obj > _hx_result = new TiledImageTile_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}


TiledImageTile_obj::TiledImageTile_obj()
{
}

void TiledImageTile_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledImageTile);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(source,"source");
	HX_MARK_END_CLASS();
}

void TiledImageTile_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(source,"source");
}

hx::Val TiledImageTile_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"source") ) { return hx::Val( source); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledImageTile_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"source") ) { source=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledImageTile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledImageTile_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TiledImageTile_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TiledImageTile_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(TiledImageTile_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(TiledImageTile_obj,source),HX_HCSTRING("source","\xdb","\xb0","\x31","\x32")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TiledImageTile_obj_sStaticStorageInfo = 0;
#endif

static ::String TiledImageTile_obj_sMemberFields[] = {
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("source","\xdb","\xb0","\x31","\x32"),
	::String(null()) };

static void TiledImageTile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledImageTile_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledImageTile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledImageTile_obj::__mClass,"__mClass");
};

#endif

hx::Class TiledImageTile_obj::__mClass;

void TiledImageTile_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledImageTile","\x7c","\x50","\xb1","\xba");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledImageTile_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledImageTile_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledImageTile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledImageTile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledImageTile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledImageTile_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
