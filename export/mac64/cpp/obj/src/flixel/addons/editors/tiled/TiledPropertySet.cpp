// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledPropertySet
#include <flixel/addons/editors/tiled/TiledPropertySet.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif

namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledPropertySet_obj::__construct(){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledPropertySet","new",0x0ee1ea52,"flixel.addons.editors.tiled.TiledPropertySet.new","flixel/addons/editors/tiled/TiledPropertySet.hx",16,0x279539bc)
            	HX_STACK_THIS(this)
HXLINE(  16)		this->keys =  ::haxe::ds::StringMap_obj::__new();
            	}

Dynamic TiledPropertySet_obj::__CreateEmpty() { return new TiledPropertySet_obj; }

hx::ObjectPtr< TiledPropertySet_obj > TiledPropertySet_obj::__new()
{
	hx::ObjectPtr< TiledPropertySet_obj > _hx_result = new TiledPropertySet_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TiledPropertySet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledPropertySet_obj > _hx_result = new TiledPropertySet_obj();
	_hx_result->__construct();
	return _hx_result;
}

::String TiledPropertySet_obj::get(::String Key){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledPropertySet","get",0x0edc9a88,"flixel.addons.editors.tiled.TiledPropertySet.get","flixel/addons/editors/tiled/TiledPropertySet.hx",21,0x279539bc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Key,"Key")
HXLINE(  21)		return ( (::String)(this->keys->get(Key)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledPropertySet_obj,get,return )

Bool TiledPropertySet_obj::contains(::String Key){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledPropertySet","contains",0x498ff2ed,"flixel.addons.editors.tiled.TiledPropertySet.contains","flixel/addons/editors/tiled/TiledPropertySet.hx",26,0x279539bc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Key,"Key")
HXLINE(  26)		return this->keys->exists(Key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledPropertySet_obj,contains,return )

::String TiledPropertySet_obj::resolve(::String Name){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledPropertySet","resolve",0x30670dde,"flixel.addons.editors.tiled.TiledPropertySet.resolve","flixel/addons/editors/tiled/TiledPropertySet.hx",31,0x279539bc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Name,"Name")
HXLINE(  31)		return ( (::String)(this->keys->get(Name)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledPropertySet_obj,resolve,return )

 ::Dynamic TiledPropertySet_obj::keysIterator(){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledPropertySet","keysIterator",0x218013d0,"flixel.addons.editors.tiled.TiledPropertySet.keysIterator","flixel/addons/editors/tiled/TiledPropertySet.hx",36,0x279539bc)
            	HX_STACK_THIS(this)
HXLINE(  36)		return this->keys->keys();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledPropertySet_obj,keysIterator,return )

void TiledPropertySet_obj::extend( ::haxe::xml::Fast Source){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledPropertySet","extend",0xeb97fb28,"flixel.addons.editors.tiled.TiledPropertySet.extend","flixel/addons/editors/tiled/TiledPropertySet.hx",41,0x279539bc)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Source,"Source")
HXLINE(  41)		HX_VAR(  ::_List::ListNode,_g_head);
HXDLIN(  41)		 ::List _this = Source->nodes->resolve(HX_("property",55,48,38,ac));
HXLINE(  39)		_g_head = _this->h;
HXLINE(  41)		while(true){
HXLINE(  41)			Bool _hx_tmp = !(hx::IsNotNull( _g_head ));
HXDLIN(  41)			if (_hx_tmp) {
HXLINE(  41)				goto _hx_goto_0;
            			}
HXDLIN(  41)			HX_VARI(  ::haxe::xml::Fast,val) = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXLINE(  39)			_g_head = _g_head->next;
HXLINE(  43)			{
HXLINE(  43)				::String key = val->att->resolve(HX_("name",4b,72,ff,48));
HXDLIN(  43)				::String value = val->att->resolve(HX_("value",71,7f,b8,31));
HXDLIN(  43)				this->keys->set(key,value);
            			}
            		}
            		_hx_goto_0:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledPropertySet_obj,extend,(void))


TiledPropertySet_obj::TiledPropertySet_obj()
{
	HX_INIT_IMPLEMENT_DYNAMIC;
}

void TiledPropertySet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledPropertySet);
	HX_MARK_DYNAMIC;
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_END_CLASS();
}

void TiledPropertySet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_DYNAMIC;
	HX_VISIT_MEMBER_NAME(keys,"keys");
}

hx::Val TiledPropertySet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { return hx::Val( get_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return hx::Val( keys); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"extend") ) { return hx::Val( extend_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"resolve") ) { return hx::Val( resolve_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"keysIterator") ) { return hx::Val( keysIterator_dyn()); }
	}
	HX_CHECK_DYNAMIC_GET_FIELD(inName);
	return super::__Field(inName,inCallProp);
}

hx::Val TiledPropertySet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	try { return super::__SetField(inName,inValue,inCallProp); }
	catch(Dynamic e) { HX_DYNAMIC_SET_FIELD(inName,inValue); }
	return inValue;
}

void TiledPropertySet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"));
	HX_APPEND_DYNAMIC_FIELDS(outFields);
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledPropertySet_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(TiledPropertySet_obj,keys),HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TiledPropertySet_obj_sStaticStorageInfo = 0;
#endif

static ::String TiledPropertySet_obj_sMemberFields[] = {
	HX_HCSTRING("keys","\xf4","\xe1","\x06","\x47"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("resolve","\xec","\x12","\x60","\x67"),
	HX_HCSTRING("keysIterator","\x02","\xfc","\xb3","\x65"),
	HX_HCSTRING("extend","\xda","\xd1","\x1a","\xc7"),
	::String(null()) };

static void TiledPropertySet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledPropertySet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledPropertySet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledPropertySet_obj::__mClass,"__mClass");
};

#endif

hx::Class TiledPropertySet_obj::__mClass;

void TiledPropertySet_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledPropertySet","\x60","\x19","\x2e","\xf6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledPropertySet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledPropertySet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledPropertySet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledPropertySet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledPropertySet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledPropertySet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
