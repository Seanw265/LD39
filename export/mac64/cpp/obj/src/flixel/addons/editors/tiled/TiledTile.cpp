// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTile
#include <flixel/addons/editors/tiled/TiledTile.h>
#endif

namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledTile_obj::__construct(Int OriginalId){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","new",0xadac562d,"flixel.addons.editors.tiled.TiledTile.new","flixel/addons/editors/tiled/TiledTile.hx",7,0x237a79c5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(OriginalId,"OriginalId")
HXLINE(  34)		this->isFlipVertically = false;
HXLINE(  30)		this->isFlipHorizontally = false;
HXLINE(  43)		this->tileID = OriginalId;
HXLINE(  44)		this->tilesetID = ((int)this->tileID & (int)(int)536870911);
HXLINE(  45)		this->rotate = (int)0;
HXLINE(  46)		this->resolveFlipAndRotation();
            	}

Dynamic TiledTile_obj::__CreateEmpty() { return new TiledTile_obj; }

hx::ObjectPtr< TiledTile_obj > TiledTile_obj::__new(Int OriginalId)
{
	hx::ObjectPtr< TiledTile_obj > _hx_result = new TiledTile_obj();
	_hx_result->__construct(OriginalId);
	return _hx_result;
}

Dynamic TiledTile_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledTile_obj > _hx_result = new TiledTile_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void TiledTile_obj::resolveFlipAndRotation(){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","resolveFlipAndRotation",0x184e8a4f,"flixel.addons.editors.tiled.TiledTile.resolveFlipAndRotation","flixel/addons/editors/tiled/TiledTile.hx",50,0x237a79c5)
            	HX_STACK_THIS(this)
HXLINE(  51)		HX_VARI( Bool,flipHorizontal) = (((int)this->tileID & (int)(int)-2147483648) != (int)0);
HXLINE(  52)		HX_VARI( Bool,flipVertical) = (((int)this->tileID & (int)(int)1073741824) != (int)0);
HXLINE(  54)		Bool _hx_tmp = (((int)this->tileID & (int)(int)536870912) != (int)0);
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  56)			Bool _hx_tmp1;
HXDLIN(  56)			if (flipHorizontal) {
HXLINE(  56)				_hx_tmp1 = flipVertical;
            			}
            			else {
HXLINE(  56)				_hx_tmp1 = false;
            			}
HXDLIN(  56)			if (_hx_tmp1) {
HXLINE(  58)				this->isFlipHorizontally = true;
HXLINE(  59)				this->rotate = (int)2;
            			}
            			else {
HXLINE(  61)				if (flipHorizontal) {
HXLINE(  63)					this->rotate = (int)1;
            				}
            				else {
HXLINE(  65)					if (flipVertical) {
HXLINE(  67)						this->rotate = (int)2;
            					}
            					else {
HXLINE(  71)						this->isFlipVertically = true;
HXLINE(  72)						this->rotate = (int)2;
            					}
            				}
            			}
            		}
            		else {
HXLINE(  77)			this->isFlipHorizontally = flipHorizontal;
HXLINE(  78)			this->isFlipVertically = flipVertical;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledTile_obj,resolveFlipAndRotation,(void))

Int TiledTile_obj::resolveTilesetID(){
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","resolveTilesetID",0x0ea8a396,"flixel.addons.editors.tiled.TiledTile.resolveTilesetID","flixel/addons/editors/tiled/TiledTile.hx",85,0x237a79c5)
            	HX_STACK_THIS(this)
HXLINE(  85)		return ((int)this->tileID & (int)(int)536870911);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledTile_obj,resolveTilesetID,return )

Int TiledTile_obj::FLIPPED_HORIZONTAL;

Int TiledTile_obj::FLIPPED_VERTICAL;

Int TiledTile_obj::FLIPPED_DIAGONAL;

Int TiledTile_obj::ROTATE_0;

Int TiledTile_obj::ROTATE_90;

Int TiledTile_obj::ROTATE_270;


TiledTile_obj::TiledTile_obj()
{
}

hx::Val TiledTile_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"tileID") ) { return hx::Val( tileID); }
		if (HX_FIELD_EQ(inName,"rotate") ) { return hx::Val( rotate); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tilesetID") ) { return hx::Val( tilesetID); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isFlipVertically") ) { return hx::Val( isFlipVertically); }
		if (HX_FIELD_EQ(inName,"resolveTilesetID") ) { return hx::Val( resolveTilesetID_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isFlipHorizontally") ) { return hx::Val( isFlipHorizontally); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"resolveFlipAndRotation") ) { return hx::Val( resolveFlipAndRotation_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledTile_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"tileID") ) { tileID=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rotate") ) { rotate=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tilesetID") ) { tilesetID=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isFlipVertically") ) { isFlipVertically=inValue.Cast< Bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"isFlipHorizontally") ) { isFlipHorizontally=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledTile_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("tileID","\x89","\xb2","\x28","\x1e"));
	outFields->push(HX_HCSTRING("tilesetID","\x0f","\x76","\x5d","\x72"));
	outFields->push(HX_HCSTRING("isFlipHorizontally","\xc8","\xb6","\x9f","\xe1"));
	outFields->push(HX_HCSTRING("isFlipVertically","\x1a","\xeb","\x3d","\x00"));
	outFields->push(HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledTile_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TiledTile_obj,tileID),HX_HCSTRING("tileID","\x89","\xb2","\x28","\x1e")},
	{hx::fsInt,(int)offsetof(TiledTile_obj,tilesetID),HX_HCSTRING("tilesetID","\x0f","\x76","\x5d","\x72")},
	{hx::fsBool,(int)offsetof(TiledTile_obj,isFlipHorizontally),HX_HCSTRING("isFlipHorizontally","\xc8","\xb6","\x9f","\xe1")},
	{hx::fsBool,(int)offsetof(TiledTile_obj,isFlipVertically),HX_HCSTRING("isFlipVertically","\x1a","\xeb","\x3d","\x00")},
	{hx::fsInt,(int)offsetof(TiledTile_obj,rotate),HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TiledTile_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &TiledTile_obj::FLIPPED_HORIZONTAL,HX_HCSTRING("FLIPPED_HORIZONTAL","\x21","\x8d","\x4f","\x37")},
	{hx::fsInt,(void *) &TiledTile_obj::FLIPPED_VERTICAL,HX_HCSTRING("FLIPPED_VERTICAL","\x73","\xef","\x30","\x68")},
	{hx::fsInt,(void *) &TiledTile_obj::FLIPPED_DIAGONAL,HX_HCSTRING("FLIPPED_DIAGONAL","\xf2","\xb7","\xb3","\xc4")},
	{hx::fsInt,(void *) &TiledTile_obj::ROTATE_0,HX_HCSTRING("ROTATE_0","\x0c","\xd2","\x08","\x62")},
	{hx::fsInt,(void *) &TiledTile_obj::ROTATE_90,HX_HCSTRING("ROTATE_90","\x7b","\x00","\xaf","\x65")},
	{hx::fsInt,(void *) &TiledTile_obj::ROTATE_270,HX_HCSTRING("ROTATE_270","\xa7","\x21","\x6c","\x93")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TiledTile_obj_sMemberFields[] = {
	HX_HCSTRING("tileID","\x89","\xb2","\x28","\x1e"),
	HX_HCSTRING("tilesetID","\x0f","\x76","\x5d","\x72"),
	HX_HCSTRING("isFlipHorizontally","\xc8","\xb6","\x9f","\xe1"),
	HX_HCSTRING("isFlipVertically","\x1a","\xeb","\x3d","\x00"),
	HX_HCSTRING("rotate","\x5b","\x46","\x20","\xcb"),
	HX_HCSTRING("resolveFlipAndRotation","\xfc","\x1b","\x88","\xc6"),
	HX_HCSTRING("resolveTilesetID","\x83","\x85","\xe4","\x41"),
	::String(null()) };

static void TiledTile_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledTile_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TiledTile_obj::FLIPPED_HORIZONTAL,"FLIPPED_HORIZONTAL");
	HX_MARK_MEMBER_NAME(TiledTile_obj::FLIPPED_VERTICAL,"FLIPPED_VERTICAL");
	HX_MARK_MEMBER_NAME(TiledTile_obj::FLIPPED_DIAGONAL,"FLIPPED_DIAGONAL");
	HX_MARK_MEMBER_NAME(TiledTile_obj::ROTATE_0,"ROTATE_0");
	HX_MARK_MEMBER_NAME(TiledTile_obj::ROTATE_90,"ROTATE_90");
	HX_MARK_MEMBER_NAME(TiledTile_obj::ROTATE_270,"ROTATE_270");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledTile_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledTile_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TiledTile_obj::FLIPPED_HORIZONTAL,"FLIPPED_HORIZONTAL");
	HX_VISIT_MEMBER_NAME(TiledTile_obj::FLIPPED_VERTICAL,"FLIPPED_VERTICAL");
	HX_VISIT_MEMBER_NAME(TiledTile_obj::FLIPPED_DIAGONAL,"FLIPPED_DIAGONAL");
	HX_VISIT_MEMBER_NAME(TiledTile_obj::ROTATE_0,"ROTATE_0");
	HX_VISIT_MEMBER_NAME(TiledTile_obj::ROTATE_90,"ROTATE_90");
	HX_VISIT_MEMBER_NAME(TiledTile_obj::ROTATE_270,"ROTATE_270");
};

#endif

hx::Class TiledTile_obj::__mClass;

static ::String TiledTile_obj_sStaticFields[] = {
	HX_HCSTRING("FLIPPED_HORIZONTAL","\x21","\x8d","\x4f","\x37"),
	HX_HCSTRING("FLIPPED_VERTICAL","\x73","\xef","\x30","\x68"),
	HX_HCSTRING("FLIPPED_DIAGONAL","\xf2","\xb7","\xb3","\xc4"),
	HX_HCSTRING("ROTATE_0","\x0c","\xd2","\x08","\x62"),
	HX_HCSTRING("ROTATE_90","\x7b","\x00","\xaf","\x65"),
	HX_HCSTRING("ROTATE_270","\xa7","\x21","\x6c","\x93"),
	::String(null())
};

void TiledTile_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledTile","\xbb","\xbb","\x88","\x10");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledTile_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TiledTile_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledTile_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledTile_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledTile_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledTile_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledTile_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TiledTile_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","boot",0x413811c5,"flixel.addons.editors.tiled.TiledTile.boot","flixel/addons/editors/tiled/TiledTile.hx",9,0x237a79c5)
HXLINE(   9)		FLIPPED_HORIZONTAL = (int)-2147483648;
            	}
{
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","boot",0x413811c5,"flixel.addons.editors.tiled.TiledTile.boot","flixel/addons/editors/tiled/TiledTile.hx",10,0x237a79c5)
HXLINE(  10)		FLIPPED_VERTICAL = (int)1073741824;
            	}
{
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","boot",0x413811c5,"flixel.addons.editors.tiled.TiledTile.boot","flixel/addons/editors/tiled/TiledTile.hx",11,0x237a79c5)
HXLINE(  11)		FLIPPED_DIAGONAL = (int)536870912;
            	}
{
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","boot",0x413811c5,"flixel.addons.editors.tiled.TiledTile.boot","flixel/addons/editors/tiled/TiledTile.hx",13,0x237a79c5)
HXLINE(  13)		ROTATE_0 = (int)0;
            	}
{
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","boot",0x413811c5,"flixel.addons.editors.tiled.TiledTile.boot","flixel/addons/editors/tiled/TiledTile.hx",14,0x237a79c5)
HXLINE(  14)		ROTATE_90 = (int)1;
            	}
{
            	HX_STACK_FRAME("flixel.addons.editors.tiled.TiledTile","boot",0x413811c5,"flixel.addons.editors.tiled.TiledTile.boot","flixel/addons/editors/tiled/TiledTile.hx",15,0x237a79c5)
HXLINE(  15)		ROTATE_270 = (int)2;
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
