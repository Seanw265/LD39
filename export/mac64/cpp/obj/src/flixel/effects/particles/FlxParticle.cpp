// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_FlxParticle
#include <flixel/effects/particles/FlxParticle.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_IFlxParticle
#include <flixel/effects/particles/IFlxParticle.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxRange
#include <flixel/util/helpers/FlxRange.h>
#endif

namespace flixel{
namespace effects{
namespace particles{

void FlxParticle_obj::__construct(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxParticle","new",0x64bf516b,"flixel.effects.particles.FlxParticle.new","flixel/effects/particles/FlxParticle.hx",17,0xdb578328)
            	HX_STACK_THIS(this)
HXLINE(  72)		this->_delta = ((Float)0);
HXLINE(  36)		this->autoUpdateHitbox = false;
HXLINE(  32)		this->percent = ((Float)0);
HXLINE(  27)		this->age = ((Float)0);
HXLINE(  23)		this->lifespan = ((Float)0);
HXLINE(  81)		super::__construct(null(),null(),null());
HXLINE(  83)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  83)		point->_inPool = false;
HXDLIN(  83)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  83)		point1->_inPool = false;
HXDLIN(  83)		this->velocityRange =  ::flixel::util::helpers::FlxRange_obj::__new(point,point1);
HXLINE(  84)		this->angularVelocityRange =  ::flixel::util::helpers::FlxRange_obj::__new((int)0,null());
HXLINE(  85)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)1,(int)1);
HXDLIN(  85)		point2->_inPool = false;
HXDLIN(  85)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)1,(int)1);
HXDLIN(  85)		point3->_inPool = false;
HXDLIN(  85)		this->scaleRange =  ::flixel::util::helpers::FlxRange_obj::__new(point2,point3);
HXLINE(  86)		this->alphaRange =  ::flixel::util::helpers::FlxRange_obj::__new((int)1,(int)1);
HXLINE(  87)		this->colorRange =  ::flixel::util::helpers::FlxRange_obj::__new((int)-1,null());
HXLINE(  88)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point4,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  88)		point4->_inPool = false;
HXDLIN(  88)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point5,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  88)		point5->_inPool = false;
HXDLIN(  88)		this->dragRange =  ::flixel::util::helpers::FlxRange_obj::__new(point4,point5);
HXLINE(  89)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point6,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  89)		point6->_inPool = false;
HXDLIN(  89)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point7,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  89)		point7->_inPool = false;
HXDLIN(  89)		this->accelerationRange =  ::flixel::util::helpers::FlxRange_obj::__new(point6,point7);
HXLINE(  90)		this->elasticityRange =  ::flixel::util::helpers::FlxRange_obj::__new((int)0,null());
HXLINE(  92)		this->set_exists(false);
            	}

Dynamic FlxParticle_obj::__CreateEmpty() { return new FlxParticle_obj; }

hx::ObjectPtr< FlxParticle_obj > FlxParticle_obj::__new()
{
	hx::ObjectPtr< FlxParticle_obj > _hx_result = new FlxParticle_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxParticle_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxParticle_obj > _hx_result = new FlxParticle_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::flixel::IFlxSprite_obj _hx_flixel_effects_particles_FlxParticle__hx_flixel_IFlxSprite= {
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_angle,
	( Int (hx::Object::*)(Int))&::flixel::effects::particles::FlxParticle_obj::set_facing,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_moves,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::effects::particles::FlxParticle_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::effects::particles::FlxParticle_obj::setPosition,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_active,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_visible,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_alive,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_exists,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::update,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::destroy,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::kill,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::revive,
	( ::String (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::toString,
};

static ::flixel::effects::particles::IFlxParticle_obj _hx_flixel_effects_particles_FlxParticle__hx_flixel_effects_particles_IFlxParticle= {
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::onEmit,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_x,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_y,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_alpha,
	( Float (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::set_angle,
	( Int (hx::Object::*)(Int))&::flixel::effects::particles::FlxParticle_obj::set_facing,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_moves,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_immovable,
	( void (hx::Object::*)(Float,Float))&::flixel::effects::particles::FlxParticle_obj::reset,
	( void (hx::Object::*)(hx::Null< Float > ,hx::Null< Float > ))&::flixel::effects::particles::FlxParticle_obj::setPosition,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_active,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_visible,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_alive,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_exists,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::update,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::destroy,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::kill,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::revive,
	( ::String (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::toString,
};

static ::flixel::IFlxBasic_obj _hx_flixel_effects_particles_FlxParticle__hx_flixel_IFlxBasic= {
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_active,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_visible,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_alive,
	( Bool (hx::Object::*)(Bool))&::flixel::effects::particles::FlxParticle_obj::set_exists,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::draw,
	( void (hx::Object::*)(Float))&::flixel::effects::particles::FlxParticle_obj::update,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::destroy,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::kill,
	( void (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::revive,
	( ::String (hx::Object::*)())&::flixel::effects::particles::FlxParticle_obj::toString,
};

void *FlxParticle_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x897c83aa: return &_hx_flixel_effects_particles_FlxParticle__hx_flixel_IFlxSprite;
		case (int)0x1d5bda56: return &_hx_flixel_effects_particles_FlxParticle__hx_flixel_effects_particles_IFlxParticle;
		case (int)0x284cfea9: return &_hx_flixel_effects_particles_FlxParticle__hx_flixel_IFlxBasic;
	}
	return super::_hx_getInterface(inHash);
}

void FlxParticle_obj::destroy(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxParticle","destroy",0xa0ae8f85,"flixel.effects.particles.FlxParticle.destroy","flixel/effects/particles/FlxParticle.hx",99,0xdb578328)
            	HX_STACK_THIS(this)
HXLINE( 100)		Bool _hx_tmp = hx::IsNotNull( this->velocityRange );
HXDLIN( 100)		if (_hx_tmp) {
HXLINE( 102)			this->velocityRange->start = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->velocityRange->start)) );
HXLINE( 103)			this->velocityRange->end = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->velocityRange->end)) );
HXLINE( 104)			this->velocityRange = null();
            		}
HXLINE( 106)		Bool _hx_tmp1 = hx::IsNotNull( this->scaleRange );
HXDLIN( 106)		if (_hx_tmp1) {
HXLINE( 108)			this->scaleRange->start = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scaleRange->start)) );
HXLINE( 109)			this->scaleRange->end = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->scaleRange->end)) );
HXLINE( 110)			this->scaleRange = null();
            		}
HXLINE( 112)		Bool _hx_tmp2 = hx::IsNotNull( this->dragRange );
HXDLIN( 112)		if (_hx_tmp2) {
HXLINE( 114)			this->dragRange->start = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->dragRange->start)) );
HXLINE( 115)			this->dragRange->end = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->dragRange->end)) );
HXLINE( 116)			this->dragRange = null();
            		}
HXLINE( 118)		Bool _hx_tmp3 = hx::IsNotNull( this->accelerationRange );
HXDLIN( 118)		if (_hx_tmp3) {
HXLINE( 120)			this->accelerationRange->start = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->accelerationRange->start)) );
HXLINE( 121)			this->accelerationRange->end = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->accelerationRange->end)) );
HXLINE( 122)			this->angularVelocityRange = null();
            		}
HXLINE( 125)		this->alphaRange = null();
HXLINE( 126)		this->colorRange = null();
HXLINE( 127)		this->accelerationRange = null();
HXLINE( 128)		this->elasticityRange = null();
HXLINE( 130)		this->super::destroy();
            	}


void FlxParticle_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.effects.particles.FlxParticle","update",0xc345fdde,"flixel.effects.particles.FlxParticle.update","flixel/effects/particles/FlxParticle.hx",137,0xdb578328)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 138)		Bool _hx_tmp = (this->age < this->lifespan);
HXDLIN( 138)		if (_hx_tmp) {
HXLINE( 139)			hx::AddEq(this->age,elapsed);
            		}
HXLINE( 141)		Bool _hx_tmp1;
HXDLIN( 141)		if ((this->age >= this->lifespan)) {
HXLINE( 141)			_hx_tmp1 = (this->lifespan != (int)0);
            		}
            		else {
HXLINE( 141)			_hx_tmp1 = false;
            		}
HXDLIN( 141)		if (_hx_tmp1) {
HXLINE( 143)			this->kill();
            		}
            		else {
HXLINE( 147)			this->_delta = ((Float)elapsed / (Float)this->lifespan);
HXLINE( 148)			this->percent = ((Float)this->age / (Float)this->lifespan);
HXLINE( 150)			Bool _hx_tmp2 = this->velocityRange->active;
HXDLIN( 150)			if (_hx_tmp2) {
HXLINE( 152)				{
HXLINE( 152)					HX_VARI(  ::flixel::math::FlxPoint,_g) = this->velocity;
HXDLIN( 152)					Float _hx_tmp3 = _g->x;
HXDLIN( 152)					Float _hx_tmp4 = ((( ( ::flixel::math::FlxPoint)(this->velocityRange->end) )->x - ( ( ::flixel::math::FlxPoint)(this->velocityRange->start) )->x) * this->_delta);
HXDLIN( 152)					_g->set_x((_hx_tmp3 + _hx_tmp4));
            				}
HXLINE( 153)				{
HXLINE( 153)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g1,"_g") = this->velocity;
HXDLIN( 153)					Float _hx_tmp5 = _g1->y;
HXDLIN( 153)					Float _hx_tmp6 = ((( ( ::flixel::math::FlxPoint)(this->velocityRange->end) )->y - ( ( ::flixel::math::FlxPoint)(this->velocityRange->start) )->y) * this->_delta);
HXDLIN( 153)					_g1->set_y((_hx_tmp5 + _hx_tmp6));
            				}
            			}
HXLINE( 156)			Bool _hx_tmp7 = this->angularVelocityRange->active;
HXDLIN( 156)			if (_hx_tmp7) {
HXLINE( 158)				Float _hx_tmp8 = (( (Float)(this->angularVelocityRange->end) ) - ( (Float)(this->angularVelocityRange->start) ));
HXDLIN( 158)				hx::AddEq(this->angularVelocity,(_hx_tmp8 * this->_delta));
            			}
HXLINE( 161)			Bool _hx_tmp9 = this->scaleRange->active;
HXDLIN( 161)			if (_hx_tmp9) {
HXLINE( 163)				{
HXLINE( 163)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g2,"_g") = this->scale;
HXDLIN( 163)					Float _hx_tmp10 = _g2->x;
HXDLIN( 163)					Float _hx_tmp11 = ((( ( ::flixel::math::FlxPoint)(this->scaleRange->end) )->x - ( ( ::flixel::math::FlxPoint)(this->scaleRange->start) )->x) * this->_delta);
HXDLIN( 163)					_g2->set_x((_hx_tmp10 + _hx_tmp11));
            				}
HXLINE( 164)				{
HXLINE( 164)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g3,"_g") = this->scale;
HXDLIN( 164)					Float _hx_tmp12 = _g3->y;
HXDLIN( 164)					Float _hx_tmp13 = ((( ( ::flixel::math::FlxPoint)(this->scaleRange->end) )->y - ( ( ::flixel::math::FlxPoint)(this->scaleRange->start) )->y) * this->_delta);
HXDLIN( 164)					_g3->set_y((_hx_tmp12 + _hx_tmp13));
            				}
HXLINE( 165)				Bool _hx_tmp14 = this->autoUpdateHitbox;
HXDLIN( 165)				if (_hx_tmp14) {
HXLINE( 165)					this->updateHitbox();
            				}
            			}
HXLINE( 168)			Bool _hx_tmp15 = this->alphaRange->active;
HXDLIN( 168)			if (_hx_tmp15) {
HXLINE( 170)				HX_VARI_NAME(  ::flixel::effects::particles::FlxParticle,_g4,"_g") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 170)				Float _hx_tmp16 = _g4->alpha;
HXDLIN( 170)				Float _hx_tmp17 = ((( (Float)(this->alphaRange->end) ) - ( (Float)(this->alphaRange->start) )) * this->_delta);
HXDLIN( 170)				_g4->set_alpha((_hx_tmp16 + _hx_tmp17));
            			}
HXLINE( 173)			Bool _hx_tmp18 = this->colorRange->active;
HXDLIN( 173)			if (_hx_tmp18) {
HXLINE( 175)				HX_VARI( Int,Color1) = ( (Int)(this->colorRange->start) );
HXDLIN( 175)				HX_VARI( Int,Color2) = ( (Int)(this->colorRange->end) );
HXDLIN( 175)				HX_VARI( Float,Factor) = this->percent;
HXDLIN( 175)				HX_VARI( Int,r) = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)16) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)16) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)16) & (int)(int)255)));
HXDLIN( 175)				HX_VARI( Int,g) = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)8) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)8) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)8) & (int)(int)255)));
HXDLIN( 175)				HX_VARI( Int,b) = ::Std_obj::_hx_int((((((int)Color2 & (int)(int)255) - ((int)Color1 & (int)(int)255)) * Factor) + ((int)Color1 & (int)(int)255)));
HXDLIN( 175)				HX_VARI( Int,a) = ::Std_obj::_hx_int((((((int)((int)Color2 >> (int)(int)24) & (int)(int)255) - ((int)((int)Color1 >> (int)(int)24) & (int)(int)255)) * Factor) + ((int)((int)Color1 >> (int)(int)24) & (int)(int)255)));
HXDLIN( 175)				HX_VARI( Int,color) = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 175)				{
HXLINE( 175)					hx::AndEq(color,(int)-16711681);
HXDLIN( 175)					Int _hx_tmp19;
HXDLIN( 175)					if ((r > (int)255)) {
HXLINE( 175)						_hx_tmp19 = (int)255;
            					}
            					else {
HXLINE( 175)						if ((r < (int)0)) {
HXLINE( 175)							_hx_tmp19 = (int)0;
            						}
            						else {
HXLINE( 175)							_hx_tmp19 = r;
            						}
            					}
HXDLIN( 175)					hx::OrEq(color,((int)_hx_tmp19 << (int)(int)16));
            				}
HXDLIN( 175)				{
HXLINE( 175)					hx::AndEq(color,(int)-65281);
HXDLIN( 175)					Int _hx_tmp20;
HXDLIN( 175)					if ((g > (int)255)) {
HXLINE( 175)						_hx_tmp20 = (int)255;
            					}
            					else {
HXLINE( 175)						if ((g < (int)0)) {
HXLINE( 175)							_hx_tmp20 = (int)0;
            						}
            						else {
HXLINE( 175)							_hx_tmp20 = g;
            						}
            					}
HXDLIN( 175)					hx::OrEq(color,((int)_hx_tmp20 << (int)(int)8));
            				}
HXDLIN( 175)				{
HXLINE( 175)					hx::AndEq(color,(int)-256);
HXDLIN( 175)					Int _hx_tmp21;
HXDLIN( 175)					if ((b > (int)255)) {
HXLINE( 175)						_hx_tmp21 = (int)255;
            					}
            					else {
HXLINE( 175)						if ((b < (int)0)) {
HXLINE( 175)							_hx_tmp21 = (int)0;
            						}
            						else {
HXLINE( 175)							_hx_tmp21 = b;
            						}
            					}
HXDLIN( 175)					hx::OrEq(color,_hx_tmp21);
            				}
HXDLIN( 175)				{
HXLINE( 175)					hx::AndEq(color,(int)16777215);
HXDLIN( 175)					Int _hx_tmp22;
HXDLIN( 175)					if ((a > (int)255)) {
HXLINE( 175)						_hx_tmp22 = (int)255;
            					}
            					else {
HXLINE( 175)						if ((a < (int)0)) {
HXLINE( 175)							_hx_tmp22 = (int)0;
            						}
            						else {
HXLINE( 175)							_hx_tmp22 = a;
            						}
            					}
HXDLIN( 175)					hx::OrEq(color,((int)_hx_tmp22 << (int)(int)24));
            				}
HXDLIN( 175)				this->set_color(color);
            			}
HXLINE( 178)			Bool _hx_tmp23 = this->dragRange->active;
HXDLIN( 178)			if (_hx_tmp23) {
HXLINE( 180)				{
HXLINE( 180)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g5,"_g") = this->drag;
HXDLIN( 180)					Float _hx_tmp24 = _g5->x;
HXDLIN( 180)					Float _hx_tmp25 = ((( ( ::flixel::math::FlxPoint)(this->dragRange->end) )->x - ( ( ::flixel::math::FlxPoint)(this->dragRange->start) )->x) * this->_delta);
HXDLIN( 180)					_g5->set_x((_hx_tmp24 + _hx_tmp25));
            				}
HXLINE( 181)				{
HXLINE( 181)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g6,"_g") = this->drag;
HXDLIN( 181)					Float _hx_tmp26 = _g6->y;
HXDLIN( 181)					Float _hx_tmp27 = ((( ( ::flixel::math::FlxPoint)(this->dragRange->end) )->y - ( ( ::flixel::math::FlxPoint)(this->dragRange->start) )->y) * this->_delta);
HXDLIN( 181)					_g6->set_y((_hx_tmp26 + _hx_tmp27));
            				}
            			}
HXLINE( 184)			Bool _hx_tmp28 = this->accelerationRange->active;
HXDLIN( 184)			if (_hx_tmp28) {
HXLINE( 186)				{
HXLINE( 186)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g7,"_g") = this->acceleration;
HXDLIN( 186)					Float _hx_tmp29 = _g7->x;
HXDLIN( 186)					Float _hx_tmp30 = ((( ( ::flixel::math::FlxPoint)(this->accelerationRange->end) )->x - ( ( ::flixel::math::FlxPoint)(this->accelerationRange->start) )->x) * this->_delta);
HXDLIN( 186)					_g7->set_x((_hx_tmp29 + _hx_tmp30));
            				}
HXLINE( 187)				{
HXLINE( 187)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_g8,"_g") = this->acceleration;
HXDLIN( 187)					Float _hx_tmp31 = _g8->y;
HXDLIN( 187)					Float _hx_tmp32 = ((( ( ::flixel::math::FlxPoint)(this->accelerationRange->end) )->y - ( ( ::flixel::math::FlxPoint)(this->accelerationRange->start) )->y) * this->_delta);
HXDLIN( 187)					_g8->set_y((_hx_tmp31 + _hx_tmp32));
            				}
            			}
HXLINE( 190)			Bool _hx_tmp33 = this->elasticityRange->active;
HXDLIN( 190)			if (_hx_tmp33) {
HXLINE( 192)				Float _hx_tmp34 = (( (Float)(this->elasticityRange->end) ) - ( (Float)(this->elasticityRange->start) ));
HXDLIN( 192)				hx::AddEq(this->elasticity,(_hx_tmp34 * this->_delta));
            			}
            		}
HXLINE( 196)		this->super::update(elapsed);
            	}


void FlxParticle_obj::reset(Float X,Float Y){
            	HX_STACK_FRAME("flixel.effects.particles.FlxParticle","reset",0xddde639a,"flixel.effects.particles.FlxParticle.reset","flixel/effects/particles/FlxParticle.hx",200,0xdb578328)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 201)		this->super::reset(X,Y);
HXLINE( 202)		this->age = (int)0;
HXLINE( 203)		this->set_visible(true);
            	}


void FlxParticle_obj::onEmit(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxParticle","onEmit",0x21e01ee7,"flixel.effects.particles.FlxParticle.onEmit","flixel/effects/particles/FlxParticle.hx",210,0xdb578328)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxParticle_obj,onEmit,(void))


FlxParticle_obj::FlxParticle_obj()
{
}

void FlxParticle_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxParticle);
	HX_MARK_MEMBER_NAME(lifespan,"lifespan");
	HX_MARK_MEMBER_NAME(age,"age");
	HX_MARK_MEMBER_NAME(percent,"percent");
	HX_MARK_MEMBER_NAME(autoUpdateHitbox,"autoUpdateHitbox");
	HX_MARK_MEMBER_NAME(velocityRange,"velocityRange");
	HX_MARK_MEMBER_NAME(angularVelocityRange,"angularVelocityRange");
	HX_MARK_MEMBER_NAME(scaleRange,"scaleRange");
	HX_MARK_MEMBER_NAME(alphaRange,"alphaRange");
	HX_MARK_MEMBER_NAME(colorRange,"colorRange");
	HX_MARK_MEMBER_NAME(dragRange,"dragRange");
	HX_MARK_MEMBER_NAME(accelerationRange,"accelerationRange");
	HX_MARK_MEMBER_NAME(elasticityRange,"elasticityRange");
	HX_MARK_MEMBER_NAME(_delta,"_delta");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxParticle_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lifespan,"lifespan");
	HX_VISIT_MEMBER_NAME(age,"age");
	HX_VISIT_MEMBER_NAME(percent,"percent");
	HX_VISIT_MEMBER_NAME(autoUpdateHitbox,"autoUpdateHitbox");
	HX_VISIT_MEMBER_NAME(velocityRange,"velocityRange");
	HX_VISIT_MEMBER_NAME(angularVelocityRange,"angularVelocityRange");
	HX_VISIT_MEMBER_NAME(scaleRange,"scaleRange");
	HX_VISIT_MEMBER_NAME(alphaRange,"alphaRange");
	HX_VISIT_MEMBER_NAME(colorRange,"colorRange");
	HX_VISIT_MEMBER_NAME(dragRange,"dragRange");
	HX_VISIT_MEMBER_NAME(accelerationRange,"accelerationRange");
	HX_VISIT_MEMBER_NAME(elasticityRange,"elasticityRange");
	HX_VISIT_MEMBER_NAME(_delta,"_delta");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxParticle_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"age") ) { return hx::Val( age); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { return hx::Val( _delta); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"onEmit") ) { return hx::Val( onEmit_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"percent") ) { return hx::Val( percent); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifespan") ) { return hx::Val( lifespan); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dragRange") ) { return hx::Val( dragRange); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scaleRange") ) { return hx::Val( scaleRange); }
		if (HX_FIELD_EQ(inName,"alphaRange") ) { return hx::Val( alphaRange); }
		if (HX_FIELD_EQ(inName,"colorRange") ) { return hx::Val( colorRange); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"velocityRange") ) { return hx::Val( velocityRange); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"elasticityRange") ) { return hx::Val( elasticityRange); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"autoUpdateHitbox") ) { return hx::Val( autoUpdateHitbox); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"accelerationRange") ) { return hx::Val( accelerationRange); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"angularVelocityRange") ) { return hx::Val( angularVelocityRange); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxParticle_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"age") ) { age=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_delta") ) { _delta=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"percent") ) { percent=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"lifespan") ) { lifespan=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"dragRange") ) { dragRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"scaleRange") ) { scaleRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alphaRange") ) { alphaRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorRange") ) { colorRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"velocityRange") ) { velocityRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"elasticityRange") ) { elasticityRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"autoUpdateHitbox") ) { autoUpdateHitbox=inValue.Cast< Bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"accelerationRange") ) { accelerationRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"angularVelocityRange") ) { angularVelocityRange=inValue.Cast<  ::flixel::util::helpers::FlxRange >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxParticle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b"));
	outFields->push(HX_HCSTRING("age","\xbf","\xf4","\x49","\x00"));
	outFields->push(HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"));
	outFields->push(HX_HCSTRING("autoUpdateHitbox","\x90","\xaa","\x3d","\x24"));
	outFields->push(HX_HCSTRING("velocityRange","\x60","\x4a","\xa1","\x8e"));
	outFields->push(HX_HCSTRING("angularVelocityRange","\x1e","\xc6","\xce","\x3a"));
	outFields->push(HX_HCSTRING("scaleRange","\xd3","\x52","\x53","\x05"));
	outFields->push(HX_HCSTRING("alphaRange","\x7f","\xf9","\xc4","\x04"));
	outFields->push(HX_HCSTRING("colorRange","\x5a","\xbd","\x8b","\x08"));
	outFields->push(HX_HCSTRING("dragRange","\x29","\x15","\x75","\x46"));
	outFields->push(HX_HCSTRING("accelerationRange","\x5d","\x2d","\x23","\x34"));
	outFields->push(HX_HCSTRING("elasticityRange","\x84","\xbb","\xe8","\xdb"));
	outFields->push(HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxParticle_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(FlxParticle_obj,lifespan),HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b")},
	{hx::fsFloat,(int)offsetof(FlxParticle_obj,age),HX_HCSTRING("age","\xbf","\xf4","\x49","\x00")},
	{hx::fsFloat,(int)offsetof(FlxParticle_obj,percent),HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78")},
	{hx::fsBool,(int)offsetof(FlxParticle_obj,autoUpdateHitbox),HX_HCSTRING("autoUpdateHitbox","\x90","\xaa","\x3d","\x24")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,velocityRange),HX_HCSTRING("velocityRange","\x60","\x4a","\xa1","\x8e")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,angularVelocityRange),HX_HCSTRING("angularVelocityRange","\x1e","\xc6","\xce","\x3a")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,scaleRange),HX_HCSTRING("scaleRange","\xd3","\x52","\x53","\x05")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,alphaRange),HX_HCSTRING("alphaRange","\x7f","\xf9","\xc4","\x04")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,colorRange),HX_HCSTRING("colorRange","\x5a","\xbd","\x8b","\x08")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,dragRange),HX_HCSTRING("dragRange","\x29","\x15","\x75","\x46")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,accelerationRange),HX_HCSTRING("accelerationRange","\x5d","\x2d","\x23","\x34")},
	{hx::fsObject /*::flixel::util::helpers::FlxRange*/ ,(int)offsetof(FlxParticle_obj,elasticityRange),HX_HCSTRING("elasticityRange","\x84","\xbb","\xe8","\xdb")},
	{hx::fsFloat,(int)offsetof(FlxParticle_obj,_delta),HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxParticle_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxParticle_obj_sMemberFields[] = {
	HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b"),
	HX_HCSTRING("age","\xbf","\xf4","\x49","\x00"),
	HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"),
	HX_HCSTRING("autoUpdateHitbox","\x90","\xaa","\x3d","\x24"),
	HX_HCSTRING("velocityRange","\x60","\x4a","\xa1","\x8e"),
	HX_HCSTRING("angularVelocityRange","\x1e","\xc6","\xce","\x3a"),
	HX_HCSTRING("scaleRange","\xd3","\x52","\x53","\x05"),
	HX_HCSTRING("alphaRange","\x7f","\xf9","\xc4","\x04"),
	HX_HCSTRING("colorRange","\x5a","\xbd","\x8b","\x08"),
	HX_HCSTRING("dragRange","\x29","\x15","\x75","\x46"),
	HX_HCSTRING("accelerationRange","\x5d","\x2d","\x23","\x34"),
	HX_HCSTRING("elasticityRange","\x84","\xbb","\xe8","\xdb"),
	HX_HCSTRING("_delta","\x39","\x2f","\x0e","\xd3"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("onEmit","\x12","\xa7","\x9f","\xe5"),
	::String(null()) };

static void FlxParticle_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxParticle_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxParticle_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxParticle_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxParticle_obj::__mClass;

void FlxParticle_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.effects.particles.FlxParticle","\xf9","\xbf","\xf1","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxParticle_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxParticle_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxParticle_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxParticle_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxParticle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxParticle_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace effects
} // end namespace particles
