// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_FlxEmitterMode
#include <flixel/effects/particles/FlxEmitterMode.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_FlxParticle
#include <flixel/effects/particles/FlxParticle.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_FlxTypedEmitter
#include <flixel/effects/particles/FlxTypedEmitter.h>
#endif
#ifndef INCLUDED_flixel_effects_particles_IFlxParticle
#include <flixel/effects/particles/IFlxParticle.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxBounds
#include <flixel/util/helpers/FlxBounds.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxPointRangeBounds
#include <flixel/util/helpers/FlxPointRangeBounds.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxRange
#include <flixel/util/helpers/FlxRange.h>
#endif
#ifndef INCLUDED_flixel_util_helpers_FlxRangeBounds
#include <flixel/util/helpers/FlxRangeBounds.h>
#endif

namespace flixel{
namespace effects{
namespace particles{

void FlxTypedEmitter_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Int >  __o_Size){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Int Size = __o_Size.Default(0);
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","new",0x3e1a9dc9,"flixel.effects.particles.FlxTypedEmitter.new","flixel/effects/particles/FlxEmitter.hx",27,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(Size,"Size")
HXLINE( 176)		this->_waitForKill = false;
HXLINE( 172)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 172)		point->_inPool = false;
HXDLIN( 172)		this->_point = point;
HXLINE( 168)		this->_counter = (int)0;
HXLINE( 164)		this->_timer = ((Float)0);
HXLINE( 160)		this->_explode = true;
HXLINE( 156)		this->_quantity = (int)0;
HXLINE( 147)		this->allowCollisions = (int)0;
HXLINE( 142)		this->autoUpdateHitbox = false;
HXLINE( 137)		this->immovable = false;
HXLINE( 133)		this->elasticity =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)0,null(),null(),null());
HXLINE( 129)		this->acceleration =  ::flixel::util::helpers::FlxPointRangeBounds_obj::__new((int)0,(int)0,null(),null(),null(),null(),null(),null());
HXLINE( 124)		this->drag =  ::flixel::util::helpers::FlxPointRangeBounds_obj::__new((int)0,(int)0,null(),null(),null(),null(),null(),null());
HXLINE( 120)		this->color =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)-1,(int)-1,null(),null());
HXLINE( 116)		this->alpha =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)1,null(),null(),null());
HXLINE( 112)		this->scale =  ::flixel::util::helpers::FlxPointRangeBounds_obj::__new((int)1,(int)1,null(),null(),null(),null(),null(),null());
HXLINE( 108)		this->lifespan =  ::flixel::util::helpers::FlxBounds_obj::__new((int)3,null());
HXLINE( 104)		this->launchAngle =  ::flixel::util::helpers::FlxBounds_obj::__new((int)-180,(int)180);
HXLINE(  99)		this->ignoreAngularVelocity = false;
HXLINE(  94)		this->angle =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)0,null(),null(),null());
HXLINE(  89)		this->angularVelocity =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)0,(int)0,null(),null());
HXLINE(  85)		this->angularDrag =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)0,(int)0,null(),null());
HXLINE(  81)		this->angularAcceleration =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)0,(int)0,null(),null());
HXLINE(  77)		this->speed =  ::flixel::util::helpers::FlxRangeBounds_obj::__new((int)0,(int)100,null(),null());
HXLINE(  73)		this->velocity =  ::flixel::util::helpers::FlxPointRangeBounds_obj::__new((int)-100,(int)-100,(int)100,(int)100,null(),null(),null(),null());
HXLINE(  69)		this->keepScaleRatio = false;
HXLINE(  65)		this->launchMode = ::flixel::effects::particles::FlxEmitterMode_obj::CIRCLE_dyn();
HXLINE(  60)		this->height = ((Float)0);
HXLINE(  56)		this->width = ((Float)0);
HXLINE(  52)		this->y = ((Float)0);
HXLINE(  48)		this->x = ((Float)0);
HXLINE(  40)		this->frequency = ((Float)0.1);
HXLINE(  36)		this->emitting = false;
HXLINE(  32)		this->particleClass = hx::ClassOf< ::flixel::effects::particles::FlxParticle >();
HXLINE( 188)		super::__construct(Size);
HXLINE( 190)		{
HXLINE( 190)			this->x = X;
HXDLIN( 190)			this->y = Y;
            		}
HXLINE( 191)		this->set_exists(false);
            	}

Dynamic FlxTypedEmitter_obj::__CreateEmpty() { return new FlxTypedEmitter_obj; }

hx::ObjectPtr< FlxTypedEmitter_obj > FlxTypedEmitter_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Int >  __o_Size)
{
	hx::ObjectPtr< FlxTypedEmitter_obj > _hx_result = new FlxTypedEmitter_obj();
	_hx_result->__construct(__o_X,__o_Y,__o_Size);
	return _hx_result;
}

Dynamic FlxTypedEmitter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedEmitter_obj > _hx_result = new FlxTypedEmitter_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void FlxTypedEmitter_obj::destroy(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","destroy",0x574a62e3,"flixel.effects.particles.FlxTypedEmitter.destroy","flixel/effects/particles/FlxEmitter.hx",198,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 199)		this->velocity = ( ( ::flixel::util::helpers::FlxPointRangeBounds)(::flixel::util::FlxDestroyUtil_obj::destroy(this->velocity)) );
HXLINE( 200)		this->scale = ( ( ::flixel::util::helpers::FlxPointRangeBounds)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE( 201)		this->drag = ( ( ::flixel::util::helpers::FlxPointRangeBounds)(::flixel::util::FlxDestroyUtil_obj::destroy(this->drag)) );
HXLINE( 202)		this->acceleration = ( ( ::flixel::util::helpers::FlxPointRangeBounds)(::flixel::util::FlxDestroyUtil_obj::destroy(this->acceleration)) );
HXLINE( 203)		this->_point = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->_point)) );
HXLINE( 205)		this->blend = null();
HXLINE( 206)		this->angularAcceleration = null();
HXLINE( 207)		this->angularDrag = null();
HXLINE( 208)		this->angularVelocity = null();
HXLINE( 209)		this->angle = null();
HXLINE( 210)		this->speed = null();
HXLINE( 211)		this->launchAngle = null();
HXLINE( 212)		this->lifespan = null();
HXLINE( 213)		this->alpha = null();
HXLINE( 214)		this->color = null();
HXLINE( 215)		this->elasticity = null();
HXLINE( 217)		this->super::destroy();
            	}


 ::flixel::effects::particles::FlxTypedEmitter FlxTypedEmitter_obj::loadParticles( ::Dynamic Graphics,hx::Null< Int >  __o_Quantity,hx::Null< Int >  __o_bakedRotationAngles,hx::Null< Bool >  __o_Multiple,hx::Null< Bool >  __o_AutoBuffer){
Int Quantity = __o_Quantity.Default(50);
Int bakedRotationAngles = __o_bakedRotationAngles.Default(16);
Bool Multiple = __o_Multiple.Default(false);
Bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","loadParticles",0x7d4e1b10,"flixel.effects.particles.FlxTypedEmitter.loadParticles","flixel/effects/particles/FlxEmitter.hx",237,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Graphics,"Graphics")
            	HX_STACK_ARG(Quantity,"Quantity")
            	HX_STACK_ARG(bakedRotationAngles,"bakedRotationAngles")
            	HX_STACK_ARG(Multiple,"Multiple")
            	HX_STACK_ARG(AutoBuffer,"AutoBuffer")
HXLINE( 238)		this->set_maxSize(Quantity);
HXLINE( 239)		HX_VARI( Int,totalFrames) = (int)1;
HXLINE( 241)		if (Multiple) {
HXLINE( 243)			HX_VARI(  ::flixel::FlxSprite,sprite) =  ::flixel::FlxSprite_obj::__new(null(),null(),null());
HXLINE( 244)			sprite->loadGraphic(Graphics,true,null(),null(),null(),null());
HXLINE( 245)			totalFrames = sprite->numFrames;
HXLINE( 246)			sprite->destroy();
            		}
HXLINE( 249)		{
HXLINE( 249)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 249)			while((_g1 < Quantity)){
HXLINE( 249)				++_g1;
HXLINE( 250)				 ::Dynamic _hx_tmp = this->loadParticle(Graphics,Quantity,bakedRotationAngles,Multiple,AutoBuffer,totalFrames);
HXDLIN( 250)				this->add(_hx_tmp);
            			}
            		}
HXLINE( 252)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxTypedEmitter_obj,loadParticles,return )

 ::Dynamic FlxTypedEmitter_obj::loadParticle( ::Dynamic Graphics,Int Quantity,Int bakedRotationAngles,hx::Null< Bool >  __o_Multiple,hx::Null< Bool >  __o_AutoBuffer,Int totalFrames){
Bool Multiple = __o_Multiple.Default(false);
Bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","loadParticle",0x7ffce803,"flixel.effects.particles.FlxTypedEmitter.loadParticle","flixel/effects/particles/FlxEmitter.hx",257,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Graphics,"Graphics")
            	HX_STACK_ARG(Quantity,"Quantity")
            	HX_STACK_ARG(bakedRotationAngles,"bakedRotationAngles")
            	HX_STACK_ARG(Multiple,"Multiple")
            	HX_STACK_ARG(AutoBuffer,"AutoBuffer")
            	HX_STACK_ARG(totalFrames,"totalFrames")
HXLINE( 258)		HX_VARI(  ::Dynamic,particle) = ::Type_obj::createInstance(this->particleClass,::cpp::VirtualArray_obj::__new(0));
HXLINE( 259)		HX_VAR( Int,frame);
HXDLIN( 259)		if (Multiple) {
HXLINE( 259)			frame = ::flixel::FlxG_obj::random->_hx_int((int)0,(totalFrames - (int)1),null());
            		}
            		else {
HXLINE( 259)			frame = (int)-1;
            		}
HXLINE( 261)		Bool _hx_tmp;
HXDLIN( 261)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 261)			_hx_tmp = (bakedRotationAngles > (int)0);
            		}
            		else {
HXLINE( 261)			_hx_tmp = false;
            		}
HXDLIN( 261)		if (_hx_tmp) {
HXLINE( 262)			( ( ::flixel::FlxSprite)(particle) )->loadRotatedGraphic(Graphics,bakedRotationAngles,frame,false,AutoBuffer,null());
            		}
            		else {
HXLINE( 264)			( ( ::flixel::FlxSprite)(particle) )->loadGraphic(Graphics,Multiple,null(),null(),null(),null());
            		}
HXLINE( 266)		if (Multiple) {
HXLINE( 267)			( ( ::flixel::FlxSprite)(particle) )->animation->set_frameIndex(frame);
            		}
HXLINE( 269)		return particle;
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxTypedEmitter_obj,loadParticle,return )

 ::flixel::effects::particles::FlxTypedEmitter FlxTypedEmitter_obj::makeParticles(hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Int >  __o_Color,hx::Null< Int >  __o_Quantity){
Int Width = __o_Width.Default(2);
Int Height = __o_Height.Default(2);
Int Color = __o_Color.Default(-1);
Int Quantity = __o_Quantity.Default(50);
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","makeParticles",0xf3914248,"flixel.effects.particles.FlxTypedEmitter.makeParticles","flixel/effects/particles/FlxEmitter.hx",283,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(Quantity,"Quantity")
HXLINE( 284)		{
HXLINE( 284)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 284)			while((_g1 < Quantity)){
HXLINE( 284)				++_g1;
HXLINE( 286)				HX_VARI(  ::Dynamic,particle) = ::Type_obj::createInstance(this->particleClass,::cpp::VirtualArray_obj::__new(0));
HXLINE( 287)				( ( ::flixel::FlxSprite)(particle) )->makeGraphic(Width,Height,Color,null(),null());
HXLINE( 288)				this->add(particle);
            			}
            		}
HXLINE( 291)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTypedEmitter_obj,makeParticles,return )

void FlxTypedEmitter_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","update",0x6f244040,"flixel.effects.particles.FlxTypedEmitter.update","flixel/effects/particles/FlxEmitter.hx",298,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 299)		Bool _hx_tmp = this->emitting;
HXDLIN( 299)		if (_hx_tmp) {
HXLINE( 301)			Bool _hx_tmp1 = this->_explode;
HXDLIN( 301)			if (_hx_tmp1) {
HXLINE( 302)				this->explode();
            			}
            			else {
HXLINE( 304)				this->emitContinuously(elapsed);
            			}
            		}
            		else {
HXLINE( 306)			Bool _hx_tmp2 = this->_waitForKill;
HXDLIN( 306)			if (_hx_tmp2) {
HXLINE( 308)				hx::AddEq(this->_timer,elapsed);
HXLINE( 310)				Bool _hx_tmp3;
HXDLIN( 310)				if ((( (Float)(this->lifespan->max) ) > (int)0)) {
HXLINE( 310)					_hx_tmp3 = (this->_timer > ( (Float)(this->lifespan->max) ));
            				}
            				else {
HXLINE( 310)					_hx_tmp3 = false;
            				}
HXDLIN( 310)				if (_hx_tmp3) {
HXLINE( 312)					this->kill();
HXLINE( 313)					return;
            				}
            			}
            		}
HXLINE( 317)		this->super::update(elapsed);
            	}


void FlxTypedEmitter_obj::explode(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","explode",0x5a27f1ca,"flixel.effects.particles.FlxTypedEmitter.explode","flixel/effects/particles/FlxEmitter.hx",321,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 322)		HX_VARI( Int,amount) = this->_quantity;
HXLINE( 323)		Bool _hx_tmp;
HXDLIN( 323)		if ((amount > (int)0)) {
HXLINE( 323)			_hx_tmp = (amount > this->length);
            		}
            		else {
HXLINE( 323)			_hx_tmp = true;
            		}
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 324)			amount = this->length;
            		}
HXLINE( 326)		{
HXLINE( 326)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 326)			HX_VARI( Int,_g) = amount;
HXDLIN( 326)			while((_g1 < _g)){
HXLINE( 326)				++_g1;
HXLINE( 327)				this->emitParticle();
            			}
            		}
HXLINE( 329)		this->onFinished();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedEmitter_obj,explode,(void))

void FlxTypedEmitter_obj::emitContinuously(Float elapsed){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","emitContinuously",0xda87e546,"flixel.effects.particles.FlxTypedEmitter.emitContinuously","flixel/effects/particles/FlxEmitter.hx",335,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 335)		Bool _hx_tmp = (this->frequency <= (int)0);
HXDLIN( 335)		if (_hx_tmp) {
HXLINE( 337)			this->emitParticleContinuously();
            		}
            		else {
HXLINE( 341)			hx::AddEq(this->_timer,elapsed);
HXLINE( 343)			while((this->_timer > this->frequency)){
HXLINE( 345)				hx::SubEq(this->_timer,this->frequency);
HXLINE( 346)				this->emitParticleContinuously();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedEmitter_obj,emitContinuously,(void))

void FlxTypedEmitter_obj::emitParticleContinuously(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","emitParticleContinuously",0xf1d3baac,"flixel.effects.particles.FlxTypedEmitter.emitParticleContinuously","flixel/effects/particles/FlxEmitter.hx",352,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 353)		this->emitParticle();
HXLINE( 354)		this->_counter++;
HXLINE( 356)		Bool _hx_tmp;
HXDLIN( 356)		if ((this->_quantity > (int)0)) {
HXLINE( 356)			_hx_tmp = (this->_counter >= this->_quantity);
            		}
            		else {
HXLINE( 356)			_hx_tmp = false;
            		}
HXDLIN( 356)		if (_hx_tmp) {
HXLINE( 357)			this->onFinished();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedEmitter_obj,emitParticleContinuously,(void))

void FlxTypedEmitter_obj::onFinished(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","onFinished",0xf4d30968,"flixel.effects.particles.FlxTypedEmitter.onFinished","flixel/effects/particles/FlxEmitter.hx",361,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 362)		this->emitting = false;
HXLINE( 363)		this->_waitForKill = true;
HXLINE( 364)		this->_quantity = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedEmitter_obj,onFinished,(void))

void FlxTypedEmitter_obj::kill(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","kill",0x1736ce15,"flixel.effects.particles.FlxTypedEmitter.kill","flixel/effects/particles/FlxEmitter.hx",371,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 372)		this->emitting = false;
HXLINE( 373)		this->_waitForKill = false;
HXLINE( 375)		this->super::kill();
            	}


 ::flixel::effects::particles::FlxTypedEmitter FlxTypedEmitter_obj::start(hx::Null< Bool >  __o_Explode,hx::Null< Float >  __o_Frequency,hx::Null< Int >  __o_Quantity){
Bool Explode = __o_Explode.Default(true);
Float Frequency = __o_Frequency.Default(((Float)0.1));
Int Quantity = __o_Quantity.Default(0);
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","start",0xdb2f2e0b,"flixel.effects.particles.FlxTypedEmitter.start","flixel/effects/particles/FlxEmitter.hx",388,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Explode,"Explode")
            	HX_STACK_ARG(Frequency,"Frequency")
            	HX_STACK_ARG(Quantity,"Quantity")
HXLINE( 389)		this->set_exists(true);
HXLINE( 390)		this->set_visible(true);
HXLINE( 391)		this->emitting = true;
HXLINE( 393)		this->_explode = Explode;
HXLINE( 394)		this->frequency = Frequency;
HXLINE( 395)		hx::AddEq(this->_quantity,Quantity);
HXLINE( 397)		this->_counter = (int)0;
HXLINE( 398)		this->_timer = (int)0;
HXLINE( 400)		this->_waitForKill = false;
HXLINE( 402)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedEmitter_obj,start,return )

 ::Dynamic FlxTypedEmitter_obj::emitParticle(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","emitParticle",0xe36e6130,"flixel.effects.particles.FlxTypedEmitter.emitParticle","flixel/effects/particles/FlxEmitter.hx",409,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 410)		HX_VARI(  ::Dynamic,particle) = this->recycle(this->particleClass,null(),null(),null());
HXLINE( 412)		( ( ::flixel::FlxObject)(particle) )->reset((int)0,(int)0);
HXLINE( 414)		( ( ::flixel::FlxSprite)(particle) )->set_blend(this->blend);
HXLINE( 415)		( ( ::flixel::FlxObject)(particle) )->set_immovable(this->immovable);
HXLINE( 416)		Bool _hx_tmp = (((int)this->allowCollisions & (int)(int)4369) > (int)0);
HXDLIN( 416)		( ( ::flixel::FlxObject)(particle) )->set_solid(_hx_tmp);
HXLINE( 417)		( ( ::flixel::FlxObject)(particle) )->set_allowCollisions(this->allowCollisions);
HXLINE( 418)		particle->__SetField(HX_("autoUpdateHitbox",90,aa,3d,24),this->autoUpdateHitbox,hx::paccDynamic);
HXLINE( 421)		Bool _hx_tmp1 = this->lifespan->active;
HXDLIN( 421)		if (_hx_tmp1) {
HXLINE( 423)			particle->__SetField(HX_("lifespan",c6,19,ce,6b),::flixel::FlxG_obj::random->_hx_float(this->lifespan->min,this->lifespan->max,null()),hx::paccDynamic);
            		}
HXLINE( 426)		Bool _hx_tmp2 = this->velocity->active;
HXDLIN( 426)		if (_hx_tmp2) {
HXLINE( 429)			Bool _hx_tmp3;
HXDLIN( 429)			Bool _hx_tmp4 = (( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0);
HXDLIN( 429)			if (_hx_tmp4) {
HXLINE( 429)				HX_VARI(  ::flixel::math::FlxPoint,_this) = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->start) );
HXDLIN( 429)				HX_VARI(  ::flixel::math::FlxPoint,point) = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->end) );
HXDLIN( 429)				HX_VAR( Bool,result);
HXDLIN( 429)				Float aValueA = _this->x;
HXDLIN( 429)				Float aValueB = point->x;
HXDLIN( 429)				Float _hx_tmp5 = ::Math_obj::abs((aValueA - aValueB));
HXDLIN( 429)				if ((_hx_tmp5 <= ((Float)0.0000001))) {
HXLINE( 429)					Float aValueA1 = _this->y;
HXDLIN( 429)					Float aValueB1 = point->y;
HXDLIN( 429)					Float _hx_tmp6 = ::Math_obj::abs((aValueA1 - aValueB1));
HXDLIN( 429)					result = (_hx_tmp6 <= ((Float)0.0000001));
            				}
            				else {
HXLINE( 429)					result = false;
            				}
HXDLIN( 429)				Bool _hx_tmp7 = point->_weak;
HXDLIN( 429)				if (_hx_tmp7) {
HXLINE( 429)					point->put();
            				}
HXDLIN( 429)				_hx_tmp3 = !(result);
            			}
            			else {
HXLINE( 429)				_hx_tmp3 = false;
            			}
HXDLIN( 429)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->active = _hx_tmp3;
HXLINE( 431)			if (hx::IsEq( this->launchMode,::flixel::effects::particles::FlxEmitterMode_obj::CIRCLE_dyn() )) {
HXLINE( 433)				HX_VARI( Float,particleAngle) = (int)0;
HXLINE( 434)				Bool _hx_tmp8 = this->launchAngle->active;
HXDLIN( 434)				if (_hx_tmp8) {
HXLINE( 435)					particleAngle = ::flixel::FlxG_obj::random->_hx_float(this->launchAngle->min,this->launchAngle->max,null());
            				}
HXLINE( 438)				HX_VARI( Float,Speed) = ::flixel::FlxG_obj::random->_hx_float(this->speed->start->min,this->speed->start->max,null());
HXDLIN( 438)				HX_VARI( Float,a) = (particleAngle * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 438)				Float _hx_tmp9 = ::Math_obj::cos(a);
HXDLIN( 438)				Float X = (_hx_tmp9 * Speed);
HXDLIN( 438)				Float _hx_tmp10 = ::Math_obj::sin(a);
HXDLIN( 438)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,(_hx_tmp10 * Speed));
HXDLIN( 438)				point1->_inPool = false;
HXDLIN( 438)				this->_point = point1;
HXLINE( 439)				( ( ::flixel::FlxObject)(particle) )->velocity->set_x(this->_point->x);
HXLINE( 440)				( ( ::flixel::FlxObject)(particle) )->velocity->set_y(this->_point->y);
HXLINE( 441)				( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->start) )->set(this->_point->x,this->_point->y);
HXLINE( 444)				HX_VARI_NAME( Float,Speed1,"Speed") = ::flixel::FlxG_obj::random->_hx_float(this->speed->end->min,this->speed->end->max,null());
HXDLIN( 444)				HX_VARI_NAME( Float,a1,"a") = (particleAngle * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 444)				Float _hx_tmp11 = ::Math_obj::cos(a1);
HXDLIN( 444)				Float X1 = (_hx_tmp11 * Speed1);
HXDLIN( 444)				Float _hx_tmp12 = ::Math_obj::sin(a1);
HXDLIN( 444)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(X1,(_hx_tmp12 * Speed1));
HXDLIN( 444)				point2->_inPool = false;
HXDLIN( 444)				this->_point = point2;
HXLINE( 445)				( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->end) )->set(this->_point->x,this->_point->y);
            			}
            			else {
HXLINE( 449)				Float _hx_tmp13 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->velocity->start->min) )->x,( ( ::flixel::math::FlxPoint)(this->velocity->start->max) )->x,null());
HXDLIN( 449)				( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->start) )->set_x(_hx_tmp13);
HXLINE( 450)				Float _hx_tmp14 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->velocity->start->min) )->y,( ( ::flixel::math::FlxPoint)(this->velocity->start->max) )->y,null());
HXDLIN( 450)				( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->start) )->set_y(_hx_tmp14);
HXLINE( 451)				Float _hx_tmp15 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->velocity->end->min) )->x,( ( ::flixel::math::FlxPoint)(this->velocity->end->max) )->x,null());
HXDLIN( 451)				( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->end) )->set_x(_hx_tmp15);
HXLINE( 452)				Float _hx_tmp16 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->velocity->end->min) )->y,( ( ::flixel::math::FlxPoint)(this->velocity->end->max) )->y,null());
HXDLIN( 452)				( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->end) )->set_y(_hx_tmp16);
HXLINE( 453)				( ( ::flixel::FlxObject)(particle) )->velocity->set_x(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->start) )->x);
HXLINE( 454)				( ( ::flixel::FlxObject)(particle) )->velocity->set_y(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->start) )->y);
            			}
            		}
            		else {
HXLINE( 458)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("velocityRange",60,4a,a1,8e),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 461)		Bool _hx_tmp17;
HXDLIN( 461)		if ((( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0)) {
HXLINE( 461)			_hx_tmp17 = hx::IsNotEq( this->angularVelocity->start,this->angularVelocity->end );
            		}
            		else {
HXLINE( 461)			_hx_tmp17 = false;
            		}
HXDLIN( 461)		( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("angularVelocityRange",1e,c6,ce,3a),hx::paccDynamic)) )->active = _hx_tmp17;
HXLINE( 463)		Bool _hx_tmp18 = !(this->ignoreAngularVelocity);
HXDLIN( 463)		if (_hx_tmp18) {
HXLINE( 465)			Bool _hx_tmp19 = this->angularAcceleration->active;
HXDLIN( 465)			if (_hx_tmp19) {
HXLINE( 466)				( ( ::flixel::FlxObject)(particle) )->angularAcceleration = ::flixel::FlxG_obj::random->_hx_float(this->angularAcceleration->start->min,this->angularAcceleration->start->max,null());
            			}
HXLINE( 468)			Bool _hx_tmp20 = this->angularVelocity->active;
HXDLIN( 468)			if (_hx_tmp20) {
HXLINE( 470)				( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("angularVelocityRange",1e,c6,ce,3a),hx::paccDynamic)) )->start = ::flixel::FlxG_obj::random->_hx_float(this->angularVelocity->start->min,this->angularVelocity->start->max,null());
HXLINE( 471)				( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("angularVelocityRange",1e,c6,ce,3a),hx::paccDynamic)) )->end = ::flixel::FlxG_obj::random->_hx_float(this->angularVelocity->end->min,this->angularVelocity->end->max,null());
HXLINE( 472)				( ( ::flixel::FlxObject)(particle) )->angularVelocity = ( (Float)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("angularVelocityRange",1e,c6,ce,3a),hx::paccDynamic)) )->start) );
            			}
HXLINE( 475)			Bool _hx_tmp21 = this->angularDrag->active;
HXDLIN( 475)			if (_hx_tmp21) {
HXLINE( 476)				( ( ::flixel::FlxObject)(particle) )->angularDrag = ::flixel::FlxG_obj::random->_hx_float(this->angularDrag->start->min,this->angularDrag->start->max,null());
            			}
            		}
            		else {
HXLINE( 478)			Bool _hx_tmp22 = this->angularVelocity->active;
HXDLIN( 478)			if (_hx_tmp22) {
HXLINE( 480)				Float _hx_tmp23 = ::flixel::FlxG_obj::random->_hx_float(this->angle->end->min,this->angle->end->max,null());
HXDLIN( 480)				Float _hx_tmp24 = ::flixel::FlxG_obj::random->_hx_float(this->angle->start->min,this->angle->start->max,null());
HXDLIN( 480)				Float _hx_tmp25 = (_hx_tmp23 - _hx_tmp24);
HXDLIN( 480)				Float _hx_tmp26 = ::flixel::FlxG_obj::random->_hx_float(this->lifespan->min,this->lifespan->max,null());
HXDLIN( 480)				( ( ::flixel::FlxObject)(particle) )->angularVelocity = ((Float)_hx_tmp25 / (Float)_hx_tmp26);
HXLINE( 481)				( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("angularVelocityRange",1e,c6,ce,3a),hx::paccDynamic)) )->active = false;
            			}
            		}
HXLINE( 485)		Bool _hx_tmp27 = this->angle->active;
HXDLIN( 485)		if (_hx_tmp27) {
HXLINE( 486)			Float _hx_tmp28 = ::flixel::FlxG_obj::random->_hx_float(this->angle->start->min,this->angle->start->max,null());
HXDLIN( 486)			( ( ::flixel::FlxSprite)(particle) )->set_angle(_hx_tmp28);
            		}
HXLINE( 489)		Bool _hx_tmp29 = this->scale->active;
HXDLIN( 489)		if (_hx_tmp29) {
HXLINE( 491)			Float _hx_tmp30 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->scale->start->min) )->x,( ( ::flixel::math::FlxPoint)(this->scale->start->max) )->x,null());
HXDLIN( 491)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->start) )->set_x(_hx_tmp30);
HXLINE( 492)			Float _hx_tmp31;
HXDLIN( 492)			Bool _hx_tmp32 = this->keepScaleRatio;
HXDLIN( 492)			if (_hx_tmp32) {
HXLINE( 492)				_hx_tmp31 = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->start) )->x;
            			}
            			else {
HXLINE( 492)				_hx_tmp31 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->scale->start->min) )->y,( ( ::flixel::math::FlxPoint)(this->scale->start->max) )->y,null());
            			}
HXDLIN( 492)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->start) )->set_y(_hx_tmp31);
HXLINE( 493)			Float _hx_tmp33 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->scale->end->min) )->x,( ( ::flixel::math::FlxPoint)(this->scale->end->max) )->x,null());
HXDLIN( 493)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->end) )->set_x(_hx_tmp33);
HXLINE( 494)			Float _hx_tmp34;
HXDLIN( 494)			Bool _hx_tmp35 = this->keepScaleRatio;
HXDLIN( 494)			if (_hx_tmp35) {
HXLINE( 494)				_hx_tmp34 = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->end) )->x;
            			}
            			else {
HXLINE( 494)				_hx_tmp34 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->scale->end->min) )->y,( ( ::flixel::math::FlxPoint)(this->scale->end->max) )->y,null());
            			}
HXDLIN( 494)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->end) )->set_y(_hx_tmp34);
HXLINE( 495)			Bool _hx_tmp36;
HXDLIN( 495)			Bool _hx_tmp37 = (( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0);
HXDLIN( 495)			if (_hx_tmp37) {
HXLINE( 495)				HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->start) );
HXDLIN( 495)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->end) );
HXDLIN( 495)				HX_VAR_NAME( Bool,result1,"result");
HXDLIN( 495)				Float aValueA2 = _this1->x;
HXDLIN( 495)				Float aValueB2 = point3->x;
HXDLIN( 495)				Float _hx_tmp38 = ::Math_obj::abs((aValueA2 - aValueB2));
HXDLIN( 495)				if ((_hx_tmp38 <= ((Float)0.0000001))) {
HXLINE( 495)					Float aValueA3 = _this1->y;
HXDLIN( 495)					Float aValueB3 = point3->y;
HXDLIN( 495)					Float _hx_tmp39 = ::Math_obj::abs((aValueA3 - aValueB3));
HXDLIN( 495)					result1 = (_hx_tmp39 <= ((Float)0.0000001));
            				}
            				else {
HXLINE( 495)					result1 = false;
            				}
HXDLIN( 495)				Bool _hx_tmp40 = point3->_weak;
HXDLIN( 495)				if (_hx_tmp40) {
HXLINE( 495)					point3->put();
            				}
HXDLIN( 495)				_hx_tmp36 = !(result1);
            			}
            			else {
HXLINE( 495)				_hx_tmp36 = false;
            			}
HXDLIN( 495)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->active = _hx_tmp36;
HXLINE( 496)			( ( ::flixel::FlxSprite)(particle) )->scale->set_x(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->start) )->x);
HXLINE( 497)			( ( ::flixel::FlxSprite)(particle) )->scale->set_y(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->start) )->y);
HXLINE( 498)			Bool _hx_tmp41 = ( (Bool)(particle->__Field(HX_("autoUpdateHitbox",90,aa,3d,24),hx::paccDynamic)) );
HXDLIN( 498)			if (_hx_tmp41) {
HXLINE( 499)				( ( ::flixel::FlxSprite)(particle) )->updateHitbox();
            			}
            		}
            		else {
HXLINE( 502)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("scaleRange",d3,52,53,05),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 505)		Bool _hx_tmp42 = this->alpha->active;
HXDLIN( 505)		if (_hx_tmp42) {
HXLINE( 507)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->start = ::flixel::FlxG_obj::random->_hx_float(this->alpha->start->min,this->alpha->start->max,null());
HXLINE( 508)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->end = ::flixel::FlxG_obj::random->_hx_float(this->alpha->end->min,this->alpha->end->max,null());
HXLINE( 509)			Bool _hx_tmp43;
HXDLIN( 509)			if ((( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0)) {
HXLINE( 509)				_hx_tmp43 = (( (Float)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->start) ) != ( (Float)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->end) ));
            			}
            			else {
HXLINE( 509)				_hx_tmp43 = false;
            			}
HXDLIN( 509)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->active = _hx_tmp43;
HXLINE( 510)			( ( ::flixel::FlxSprite)(particle) )->set_alpha(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->start);
            		}
            		else {
HXLINE( 513)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("alphaRange",7f,f9,c4,04),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 516)		Bool _hx_tmp44 = this->color->active;
HXDLIN( 516)		if (_hx_tmp44) {
HXLINE( 518)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->start = ::flixel::FlxG_obj::random->color(this->color->start->min,this->color->start->max,null(),null());
HXLINE( 519)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->end = ::flixel::FlxG_obj::random->color(this->color->end->min,this->color->end->max,null(),null());
HXLINE( 520)			Bool _hx_tmp45;
HXDLIN( 520)			if ((( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0)) {
HXLINE( 520)				_hx_tmp45 = (( (Int)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->start) ) != ( (Int)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->end) ));
            			}
            			else {
HXLINE( 520)				_hx_tmp45 = false;
            			}
HXDLIN( 520)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->active = _hx_tmp45;
HXLINE( 521)			( ( ::flixel::FlxSprite)(particle) )->set_color(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->start);
            		}
            		else {
HXLINE( 524)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("colorRange",5a,bd,8b,08),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 527)		Bool _hx_tmp46 = this->drag->active;
HXDLIN( 527)		if (_hx_tmp46) {
HXLINE( 529)			Float _hx_tmp47 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->drag->start->min) )->x,( ( ::flixel::math::FlxPoint)(this->drag->start->max) )->x,null());
HXDLIN( 529)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->start) )->set_x(_hx_tmp47);
HXLINE( 530)			Float _hx_tmp48 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->drag->start->min) )->y,( ( ::flixel::math::FlxPoint)(this->drag->start->max) )->y,null());
HXDLIN( 530)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->start) )->set_y(_hx_tmp48);
HXLINE( 531)			Float _hx_tmp49 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->drag->end->min) )->x,( ( ::flixel::math::FlxPoint)(this->drag->end->max) )->x,null());
HXDLIN( 531)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->end) )->set_x(_hx_tmp49);
HXLINE( 532)			Float _hx_tmp50 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->drag->end->min) )->y,( ( ::flixel::math::FlxPoint)(this->drag->end->max) )->y,null());
HXDLIN( 532)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->end) )->set_y(_hx_tmp50);
HXLINE( 533)			Bool _hx_tmp51;
HXDLIN( 533)			Bool _hx_tmp52 = (( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0);
HXDLIN( 533)			if (_hx_tmp52) {
HXLINE( 533)				HX_VARI_NAME(  ::flixel::math::FlxPoint,_this2,"_this") = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->start) );
HXDLIN( 533)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point4,"point") = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->end) );
HXDLIN( 533)				HX_VAR_NAME( Bool,result2,"result");
HXDLIN( 533)				Float aValueA4 = _this2->x;
HXDLIN( 533)				Float aValueB4 = point4->x;
HXDLIN( 533)				Float _hx_tmp53 = ::Math_obj::abs((aValueA4 - aValueB4));
HXDLIN( 533)				if ((_hx_tmp53 <= ((Float)0.0000001))) {
HXLINE( 533)					Float aValueA5 = _this2->y;
HXDLIN( 533)					Float aValueB5 = point4->y;
HXDLIN( 533)					Float _hx_tmp54 = ::Math_obj::abs((aValueA5 - aValueB5));
HXDLIN( 533)					result2 = (_hx_tmp54 <= ((Float)0.0000001));
            				}
            				else {
HXLINE( 533)					result2 = false;
            				}
HXDLIN( 533)				Bool _hx_tmp55 = point4->_weak;
HXDLIN( 533)				if (_hx_tmp55) {
HXLINE( 533)					point4->put();
            				}
HXDLIN( 533)				_hx_tmp51 = !(result2);
            			}
            			else {
HXLINE( 533)				_hx_tmp51 = false;
            			}
HXDLIN( 533)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->active = _hx_tmp51;
HXLINE( 534)			( ( ::flixel::FlxObject)(particle) )->drag->set_x(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->start) )->x);
HXLINE( 535)			( ( ::flixel::FlxObject)(particle) )->drag->set_y(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->start) )->y);
            		}
            		else {
HXLINE( 538)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("dragRange",29,15,75,46),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 541)		Bool _hx_tmp56 = this->acceleration->active;
HXDLIN( 541)		if (_hx_tmp56) {
HXLINE( 543)			Float _hx_tmp57 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->acceleration->start->min) )->x,( ( ::flixel::math::FlxPoint)(this->acceleration->start->max) )->x,null());
HXDLIN( 543)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->start) )->set_x(_hx_tmp57);
HXLINE( 544)			Float _hx_tmp58 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->acceleration->start->min) )->y,( ( ::flixel::math::FlxPoint)(this->acceleration->start->max) )->y,null());
HXDLIN( 544)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->start) )->set_y(_hx_tmp58);
HXLINE( 545)			Float _hx_tmp59 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->acceleration->end->min) )->x,( ( ::flixel::math::FlxPoint)(this->acceleration->end->max) )->x,null());
HXDLIN( 545)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->end) )->set_x(_hx_tmp59);
HXLINE( 546)			Float _hx_tmp60 = ::flixel::FlxG_obj::random->_hx_float(( ( ::flixel::math::FlxPoint)(this->acceleration->end->min) )->y,( ( ::flixel::math::FlxPoint)(this->acceleration->end->max) )->y,null());
HXDLIN( 546)			( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->end) )->set_y(_hx_tmp60);
HXLINE( 547)			Bool _hx_tmp61;
HXDLIN( 547)			Bool _hx_tmp62 = (( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0);
HXDLIN( 547)			if (_hx_tmp62) {
HXLINE( 547)				HX_VARI_NAME(  ::flixel::math::FlxPoint,_this3,"_this") = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->start) );
HXDLIN( 547)				HX_VARI_NAME(  ::flixel::math::FlxPoint,point5,"point") = ( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->end) );
HXDLIN( 547)				HX_VAR_NAME( Bool,result3,"result");
HXDLIN( 547)				Float aValueA6 = _this3->x;
HXDLIN( 547)				Float aValueB6 = point5->x;
HXDLIN( 547)				Float _hx_tmp63 = ::Math_obj::abs((aValueA6 - aValueB6));
HXDLIN( 547)				if ((_hx_tmp63 <= ((Float)0.0000001))) {
HXLINE( 547)					Float aValueA7 = _this3->y;
HXDLIN( 547)					Float aValueB7 = point5->y;
HXDLIN( 547)					Float _hx_tmp64 = ::Math_obj::abs((aValueA7 - aValueB7));
HXDLIN( 547)					result3 = (_hx_tmp64 <= ((Float)0.0000001));
            				}
            				else {
HXLINE( 547)					result3 = false;
            				}
HXDLIN( 547)				Bool _hx_tmp65 = point5->_weak;
HXDLIN( 547)				if (_hx_tmp65) {
HXLINE( 547)					point5->put();
            				}
HXDLIN( 547)				_hx_tmp61 = !(result3);
            			}
            			else {
HXLINE( 547)				_hx_tmp61 = false;
            			}
HXDLIN( 547)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->active = _hx_tmp61;
HXLINE( 548)			( ( ::flixel::FlxObject)(particle) )->acceleration->set_x(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->start) )->x);
HXLINE( 549)			( ( ::flixel::FlxObject)(particle) )->acceleration->set_y(( ( ::flixel::math::FlxPoint)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->start) )->y);
            		}
            		else {
HXLINE( 552)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("accelerationRange",5d,2d,23,34),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 555)		Bool _hx_tmp66 = this->elasticity->active;
HXDLIN( 555)		if (_hx_tmp66) {
HXLINE( 557)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->start = ::flixel::FlxG_obj::random->_hx_float(this->elasticity->start->min,this->elasticity->start->max,null());
HXLINE( 558)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->end = ::flixel::FlxG_obj::random->_hx_float(this->elasticity->end->min,this->elasticity->end->max,null());
HXLINE( 559)			Bool _hx_tmp67;
HXDLIN( 559)			if ((( (Float)(particle->__Field(HX_("lifespan",c6,19,ce,6b),hx::paccDynamic)) ) > (int)0)) {
HXLINE( 559)				_hx_tmp67 = (( (Float)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->start) ) != ( (Float)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->end) ));
            			}
            			else {
HXLINE( 559)				_hx_tmp67 = false;
            			}
HXDLIN( 559)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->active = _hx_tmp67;
HXLINE( 560)			( ( ::flixel::FlxObject)(particle) )->elasticity = ( (Float)(( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->start) );
            		}
            		else {
HXLINE( 563)			( ( ::flixel::util::helpers::FlxRange)(particle->__Field(HX_("elasticityRange",84,bb,e8,db),hx::paccDynamic)) )->active = false;
            		}
HXLINE( 566)		Float _hx_tmp68 = this->x;
HXDLIN( 566)		Float _hx_tmp69 = (this->x + this->width);
HXDLIN( 566)		Float _hx_tmp70 = ::flixel::FlxG_obj::random->_hx_float(_hx_tmp68,_hx_tmp69,null());
HXDLIN( 566)		Float _hx_tmp71 = ( ( ::flixel::FlxObject)(particle) )->get_width();
HXDLIN( 566)		( ( ::flixel::FlxObject)(particle) )->set_x((_hx_tmp70 - ((Float)_hx_tmp71 / (Float)(int)2)));
HXLINE( 567)		Float _hx_tmp72 = this->y;
HXDLIN( 567)		Float _hx_tmp73 = (this->y + this->height);
HXDLIN( 567)		Float _hx_tmp74 = ::flixel::FlxG_obj::random->_hx_float(_hx_tmp72,_hx_tmp73,null());
HXDLIN( 567)		Float _hx_tmp75 = ( ( ::flixel::FlxObject)(particle) )->get_height();
HXDLIN( 567)		( ( ::flixel::FlxObject)(particle) )->set_y((_hx_tmp74 - ((Float)_hx_tmp75 / (Float)(int)2)));
HXLINE( 570)		Bool _hx_tmp76 = hx::IsNotNull( ( ( ::flixel::FlxSprite)(particle) )->animation->_curAnim );
HXDLIN( 570)		if (_hx_tmp76) {
HXLINE( 571)			( ( ::flixel::FlxSprite)(particle) )->animation->_curAnim->restart();
            		}
HXLINE( 573)		::flixel::effects::particles::IFlxParticle_obj::onEmit(particle);
HXLINE( 575)		return particle;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedEmitter_obj,emitParticle,return )

void FlxTypedEmitter_obj::focusOn( ::flixel::FlxObject Object){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","focusOn",0x74478100,"flixel.effects.particles.FlxTypedEmitter.focusOn","flixel/effects/particles/FlxEmitter.hx",584,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
HXLINE( 585)		Object->getMidpoint(this->_point);
HXLINE( 587)		Float _hx_tmp = this->_point->x;
HXDLIN( 587)		Int _hx_tmp1 = ::Std_obj::_hx_int(this->width);
HXDLIN( 587)		this->x = (_hx_tmp - ((int)_hx_tmp1 >> (int)(int)1));
HXLINE( 588)		Float _hx_tmp2 = this->_point->y;
HXDLIN( 588)		Int _hx_tmp3 = ::Std_obj::_hx_int(this->height);
HXDLIN( 588)		this->y = (_hx_tmp2 - ((int)_hx_tmp3 >> (int)(int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedEmitter_obj,focusOn,(void))

void FlxTypedEmitter_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","setPosition",0x453b48d4,"flixel.effects.particles.FlxTypedEmitter.setPosition","flixel/effects/particles/FlxEmitter.hx",595,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 596)		this->x = X;
HXLINE( 597)		this->y = Y;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedEmitter_obj,setPosition,(void))

void FlxTypedEmitter_obj::setSize(Float Width,Float Height){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","setSize",0x449c176c,"flixel.effects.particles.FlxTypedEmitter.setSize","flixel/effects/particles/FlxEmitter.hx",601,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
HXLINE( 602)		this->width = Width;
HXLINE( 603)		this->height = Height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedEmitter_obj,setSize,(void))

Bool FlxTypedEmitter_obj::get_solid(){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","get_solid",0x591b52ab,"flixel.effects.particles.FlxTypedEmitter.get_solid","flixel/effects/particles/FlxEmitter.hx",608,0x6dff0520)
            	HX_STACK_THIS(this)
HXLINE( 608)		return (((int)this->allowCollisions & (int)(int)4369) > (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedEmitter_obj,get_solid,return )

Bool FlxTypedEmitter_obj::set_solid(Bool Solid){
            	HX_STACK_FRAME("flixel.effects.particles.FlxTypedEmitter","set_solid",0x3c6c3eb7,"flixel.effects.particles.FlxTypedEmitter.set_solid","flixel/effects/particles/FlxEmitter.hx",612,0x6dff0520)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Solid,"Solid")
HXLINE( 613)		if (Solid) {
HXLINE( 615)			this->allowCollisions = (int)4369;
            		}
            		else {
HXLINE( 619)			this->allowCollisions = (int)0;
            		}
HXLINE( 621)		return Solid;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedEmitter_obj,set_solid,return )


FlxTypedEmitter_obj::FlxTypedEmitter_obj()
{
}

void FlxTypedEmitter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedEmitter);
	HX_MARK_MEMBER_NAME(particleClass,"particleClass");
	HX_MARK_MEMBER_NAME(emitting,"emitting");
	HX_MARK_MEMBER_NAME(frequency,"frequency");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(launchMode,"launchMode");
	HX_MARK_MEMBER_NAME(keepScaleRatio,"keepScaleRatio");
	HX_MARK_MEMBER_NAME(velocity,"velocity");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_MARK_MEMBER_NAME(angularDrag,"angularDrag");
	HX_MARK_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_MARK_MEMBER_NAME(angle,"angle");
	HX_MARK_MEMBER_NAME(ignoreAngularVelocity,"ignoreAngularVelocity");
	HX_MARK_MEMBER_NAME(launchAngle,"launchAngle");
	HX_MARK_MEMBER_NAME(lifespan,"lifespan");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(drag,"drag");
	HX_MARK_MEMBER_NAME(acceleration,"acceleration");
	HX_MARK_MEMBER_NAME(elasticity,"elasticity");
	HX_MARK_MEMBER_NAME(immovable,"immovable");
	HX_MARK_MEMBER_NAME(autoUpdateHitbox,"autoUpdateHitbox");
	HX_MARK_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_MARK_MEMBER_NAME(_quantity,"_quantity");
	HX_MARK_MEMBER_NAME(_explode,"_explode");
	HX_MARK_MEMBER_NAME(_timer,"_timer");
	HX_MARK_MEMBER_NAME(_counter,"_counter");
	HX_MARK_MEMBER_NAME(_point,"_point");
	HX_MARK_MEMBER_NAME(_waitForKill,"_waitForKill");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedEmitter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(particleClass,"particleClass");
	HX_VISIT_MEMBER_NAME(emitting,"emitting");
	HX_VISIT_MEMBER_NAME(frequency,"frequency");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(launchMode,"launchMode");
	HX_VISIT_MEMBER_NAME(keepScaleRatio,"keepScaleRatio");
	HX_VISIT_MEMBER_NAME(velocity,"velocity");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(angularAcceleration,"angularAcceleration");
	HX_VISIT_MEMBER_NAME(angularDrag,"angularDrag");
	HX_VISIT_MEMBER_NAME(angularVelocity,"angularVelocity");
	HX_VISIT_MEMBER_NAME(angle,"angle");
	HX_VISIT_MEMBER_NAME(ignoreAngularVelocity,"ignoreAngularVelocity");
	HX_VISIT_MEMBER_NAME(launchAngle,"launchAngle");
	HX_VISIT_MEMBER_NAME(lifespan,"lifespan");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(drag,"drag");
	HX_VISIT_MEMBER_NAME(acceleration,"acceleration");
	HX_VISIT_MEMBER_NAME(elasticity,"elasticity");
	HX_VISIT_MEMBER_NAME(immovable,"immovable");
	HX_VISIT_MEMBER_NAME(autoUpdateHitbox,"autoUpdateHitbox");
	HX_VISIT_MEMBER_NAME(allowCollisions,"allowCollisions");
	HX_VISIT_MEMBER_NAME(_quantity,"_quantity");
	HX_VISIT_MEMBER_NAME(_explode,"_explode");
	HX_VISIT_MEMBER_NAME(_timer,"_timer");
	HX_VISIT_MEMBER_NAME(_counter,"_counter");
	HX_VISIT_MEMBER_NAME(_point,"_point");
	HX_VISIT_MEMBER_NAME(_waitForKill,"_waitForKill");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedEmitter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { return hx::Val( drag); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed); }
		if (HX_FIELD_EQ(inName,"angle") ) { return hx::Val( angle); }
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_solid()); }
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"_timer") ) { return hx::Val( _timer); }
		if (HX_FIELD_EQ(inName,"_point") ) { return hx::Val( _point); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"explode") ) { return hx::Val( explode_dyn()); }
		if (HX_FIELD_EQ(inName,"focusOn") ) { return hx::Val( focusOn_dyn()); }
		if (HX_FIELD_EQ(inName,"setSize") ) { return hx::Val( setSize_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"emitting") ) { return hx::Val( emitting); }
		if (HX_FIELD_EQ(inName,"velocity") ) { return hx::Val( velocity); }
		if (HX_FIELD_EQ(inName,"lifespan") ) { return hx::Val( lifespan); }
		if (HX_FIELD_EQ(inName,"_explode") ) { return hx::Val( _explode); }
		if (HX_FIELD_EQ(inName,"_counter") ) { return hx::Val( _counter); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frequency") ) { return hx::Val( frequency); }
		if (HX_FIELD_EQ(inName,"immovable") ) { return hx::Val( immovable); }
		if (HX_FIELD_EQ(inName,"_quantity") ) { return hx::Val( _quantity); }
		if (HX_FIELD_EQ(inName,"get_solid") ) { return hx::Val( get_solid_dyn()); }
		if (HX_FIELD_EQ(inName,"set_solid") ) { return hx::Val( set_solid_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"launchMode") ) { return hx::Val( launchMode); }
		if (HX_FIELD_EQ(inName,"elasticity") ) { return hx::Val( elasticity); }
		if (HX_FIELD_EQ(inName,"onFinished") ) { return hx::Val( onFinished_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"angularDrag") ) { return hx::Val( angularDrag); }
		if (HX_FIELD_EQ(inName,"launchAngle") ) { return hx::Val( launchAngle); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"acceleration") ) { return hx::Val( acceleration); }
		if (HX_FIELD_EQ(inName,"_waitForKill") ) { return hx::Val( _waitForKill); }
		if (HX_FIELD_EQ(inName,"loadParticle") ) { return hx::Val( loadParticle_dyn()); }
		if (HX_FIELD_EQ(inName,"emitParticle") ) { return hx::Val( emitParticle_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"particleClass") ) { return hx::Val( particleClass); }
		if (HX_FIELD_EQ(inName,"loadParticles") ) { return hx::Val( loadParticles_dyn()); }
		if (HX_FIELD_EQ(inName,"makeParticles") ) { return hx::Val( makeParticles_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keepScaleRatio") ) { return hx::Val( keepScaleRatio); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { return hx::Val( angularVelocity); }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { return hx::Val( allowCollisions); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"autoUpdateHitbox") ) { return hx::Val( autoUpdateHitbox); }
		if (HX_FIELD_EQ(inName,"emitContinuously") ) { return hx::Val( emitContinuously_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { return hx::Val( angularAcceleration); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"ignoreAngularVelocity") ) { return hx::Val( ignoreAngularVelocity); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"emitParticleContinuously") ) { return hx::Val( emitParticleContinuously_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTypedEmitter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"drag") ) { drag=inValue.Cast<  ::flixel::util::helpers::FlxPointRangeBounds >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"blend") ) { blend=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"angle") ) { angle=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::util::helpers::FlxPointRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"solid") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_solid(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_timer") ) { _timer=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_point") ) { _point=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"emitting") ) { emitting=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"velocity") ) { velocity=inValue.Cast<  ::flixel::util::helpers::FlxPointRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lifespan") ) { lifespan=inValue.Cast<  ::flixel::util::helpers::FlxBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_explode") ) { _explode=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_counter") ) { _counter=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frequency") ) { frequency=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"immovable") ) { immovable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_quantity") ) { _quantity=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"launchMode") ) { launchMode=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"elasticity") ) { elasticity=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"angularDrag") ) { angularDrag=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"launchAngle") ) { launchAngle=inValue.Cast<  ::flixel::util::helpers::FlxBounds >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"acceleration") ) { acceleration=inValue.Cast<  ::flixel::util::helpers::FlxPointRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_waitForKill") ) { _waitForKill=inValue.Cast< Bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"particleClass") ) { particleClass=inValue.Cast< hx::Class >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"keepScaleRatio") ) { keepScaleRatio=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"angularVelocity") ) { angularVelocity=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowCollisions") ) { allowCollisions=inValue.Cast< Int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"autoUpdateHitbox") ) { autoUpdateHitbox=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"angularAcceleration") ) { angularAcceleration=inValue.Cast<  ::flixel::util::helpers::FlxRangeBounds >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"ignoreAngularVelocity") ) { ignoreAngularVelocity=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedEmitter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("particleClass","\x12","\x2c","\xaf","\x5e"));
	outFields->push(HX_HCSTRING("emitting","\xc1","\x90","\x7b","\x58"));
	outFields->push(HX_HCSTRING("frequency","\x9c","\x82","\xea","\xbb"));
	outFields->push(HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("launchMode","\x36","\x97","\x65","\xb9"));
	outFields->push(HX_HCSTRING("keepScaleRatio","\x06","\x6f","\x41","\x31"));
	outFields->push(HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a"));
	outFields->push(HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c"));
	outFields->push(HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"));
	outFields->push(HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"));
	outFields->push(HX_HCSTRING("ignoreAngularVelocity","\x2d","\x72","\xdc","\x56"));
	outFields->push(HX_HCSTRING("launchAngle","\xa0","\xd8","\x08","\x96"));
	outFields->push(HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42"));
	outFields->push(HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a"));
	outFields->push(HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d"));
	outFields->push(HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27"));
	outFields->push(HX_HCSTRING("autoUpdateHitbox","\x90","\xaa","\x3d","\x24"));
	outFields->push(HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59"));
	outFields->push(HX_HCSTRING("solid","\x2b","\xb4","\xc5","\x80"));
	outFields->push(HX_HCSTRING("_quantity","\xea","\x3e","\xd8","\xf3"));
	outFields->push(HX_HCSTRING("_explode","\x62","\x15","\x1c","\x61"));
	outFields->push(HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"));
	outFields->push(HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57"));
	outFields->push(HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"));
	outFields->push(HX_HCSTRING("_waitForKill","\x53","\x6f","\x91","\x2f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedEmitter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxTypedEmitter_obj,particleClass),HX_HCSTRING("particleClass","\x12","\x2c","\xaf","\x5e")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,emitting),HX_HCSTRING("emitting","\xc1","\x90","\x7b","\x58")},
	{hx::fsFloat,(int)offsetof(FlxTypedEmitter_obj,frequency),HX_HCSTRING("frequency","\x9c","\x82","\xea","\xbb")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTypedEmitter_obj,blend),HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4")},
	{hx::fsFloat,(int)offsetof(FlxTypedEmitter_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxTypedEmitter_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(FlxTypedEmitter_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsFloat,(int)offsetof(FlxTypedEmitter_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::flixel::effects::particles::FlxEmitterMode*/ ,(int)offsetof(FlxTypedEmitter_obj,launchMode),HX_HCSTRING("launchMode","\x36","\x97","\x65","\xb9")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,keepScaleRatio),HX_HCSTRING("keepScaleRatio","\x06","\x6f","\x41","\x31")},
	{hx::fsObject /*::flixel::util::helpers::FlxPointRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,velocity),HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,angularAcceleration),HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,angularDrag),HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,angularVelocity),HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,angle),HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,ignoreAngularVelocity),HX_HCSTRING("ignoreAngularVelocity","\x2d","\x72","\xdc","\x56")},
	{hx::fsObject /*::flixel::util::helpers::FlxBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,launchAngle),HX_HCSTRING("launchAngle","\xa0","\xd8","\x08","\x96")},
	{hx::fsObject /*::flixel::util::helpers::FlxBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,lifespan),HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b")},
	{hx::fsObject /*::flixel::util::helpers::FlxPointRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsObject /*::flixel::util::helpers::FlxPointRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,drag),HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42")},
	{hx::fsObject /*::flixel::util::helpers::FlxPointRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,acceleration),HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a")},
	{hx::fsObject /*::flixel::util::helpers::FlxRangeBounds*/ ,(int)offsetof(FlxTypedEmitter_obj,elasticity),HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,immovable),HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,autoUpdateHitbox),HX_HCSTRING("autoUpdateHitbox","\x90","\xaa","\x3d","\x24")},
	{hx::fsInt,(int)offsetof(FlxTypedEmitter_obj,allowCollisions),HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59")},
	{hx::fsInt,(int)offsetof(FlxTypedEmitter_obj,_quantity),HX_HCSTRING("_quantity","\xea","\x3e","\xd8","\xf3")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,_explode),HX_HCSTRING("_explode","\x62","\x15","\x1c","\x61")},
	{hx::fsFloat,(int)offsetof(FlxTypedEmitter_obj,_timer),HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c")},
	{hx::fsInt,(int)offsetof(FlxTypedEmitter_obj,_counter),HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTypedEmitter_obj,_point),HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2")},
	{hx::fsBool,(int)offsetof(FlxTypedEmitter_obj,_waitForKill),HX_HCSTRING("_waitForKill","\x53","\x6f","\x91","\x2f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedEmitter_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedEmitter_obj_sMemberFields[] = {
	HX_HCSTRING("particleClass","\x12","\x2c","\xaf","\x5e"),
	HX_HCSTRING("emitting","\xc1","\x90","\x7b","\x58"),
	HX_HCSTRING("frequency","\x9c","\x82","\xea","\xbb"),
	HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"),
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("launchMode","\x36","\x97","\x65","\xb9"),
	HX_HCSTRING("keepScaleRatio","\x06","\x6f","\x41","\x31"),
	HX_HCSTRING("velocity","\x1d","\x02","\xfe","\x1e"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("angularAcceleration","\x42","\xc6","\x00","\x9a"),
	HX_HCSTRING("angularDrag","\xf6","\x1f","\x19","\x9c"),
	HX_HCSTRING("angularVelocity","\x1f","\x1f","\xfe","\x58"),
	HX_HCSTRING("angle","\xd3","\x43","\xe2","\x22"),
	HX_HCSTRING("ignoreAngularVelocity","\x2d","\x72","\xdc","\x56"),
	HX_HCSTRING("launchAngle","\xa0","\xd8","\x08","\x96"),
	HX_HCSTRING("lifespan","\xc6","\x19","\xce","\x6b"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("drag","\xf4","\x2b","\x70","\x42"),
	HX_HCSTRING("acceleration","\x40","\x00","\x61","\x9a"),
	HX_HCSTRING("elasticity","\x79","\x23","\xb4","\x4d"),
	HX_HCSTRING("immovable","\x0a","\x27","\x70","\x27"),
	HX_HCSTRING("autoUpdateHitbox","\x90","\xaa","\x3d","\x24"),
	HX_HCSTRING("allowCollisions","\xaa","\xc9","\xd9","\x59"),
	HX_HCSTRING("_quantity","\xea","\x3e","\xd8","\xf3"),
	HX_HCSTRING("_explode","\x62","\x15","\x1c","\x61"),
	HX_HCSTRING("_timer","\x06","\x07","\x1d","\x0c"),
	HX_HCSTRING("_counter","\x7d","\x08","\x12","\x57"),
	HX_HCSTRING("_point","\x91","\xfb","\x76","\xc2"),
	HX_HCSTRING("_waitForKill","\x53","\x6f","\x91","\x2f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("loadParticles","\x67","\x10","\xeb","\x14"),
	HX_HCSTRING("loadParticle","\x8c","\x2a","\xfa","\x25"),
	HX_HCSTRING("makeParticles","\x9f","\x37","\x2e","\x8b"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("explode","\xe1","\xbb","\x63","\x27"),
	HX_HCSTRING("emitContinuously","\x4f","\xa0","\x33","\x17"),
	HX_HCSTRING("emitParticleContinuously","\xb5","\x26","\xaf","\x13"),
	HX_HCSTRING("onFinished","\xb1","\x67","\xc5","\x72"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("emitParticle","\xb9","\xa3","\x6b","\x89"),
	HX_HCSTRING("focusOn","\x17","\x4b","\x83","\x41"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("setSize","\x83","\xe1","\xd7","\x11"),
	HX_HCSTRING("get_solid","\x82","\x10","\x6f","\xc4"),
	HX_HCSTRING("set_solid","\x8e","\xfc","\xbf","\xa7"),
	::String(null()) };

static void FlxTypedEmitter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedEmitter_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedEmitter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedEmitter_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedEmitter_obj::__mClass;

void FlxTypedEmitter_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.effects.particles.FlxTypedEmitter","\x57","\x05","\x9c","\x88");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedEmitter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedEmitter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedEmitter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedEmitter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedEmitter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedEmitter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace effects
} // end namespace particles
