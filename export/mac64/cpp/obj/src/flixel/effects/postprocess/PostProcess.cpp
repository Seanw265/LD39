// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_effects_postprocess_PostProcess
#include <flixel/effects/postprocess/PostProcess.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess_Shader
#include <flixel/effects/postprocess/Shader.h>
#endif
#ifndef INCLUDED_flixel_effects_postprocess__PostProcess_Uniform
#include <flixel/effects/postprocess/_PostProcess/Uniform.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DirectRenderer
#include <openfl/display/DirectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLView
#include <openfl/display/OpenGLView.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

static const Float _hx_array_data_0[] = {
	-1.0,-1.0,(Float)0,(Float)0,1.0,-1.0,(Float)1,(Float)0,-1.0,1.0,(Float)0,(Float)1,1.0,-1.0,(Float)1,(Float)0,1.0,1.0,(Float)1,(Float)1,-1.0,1.0,(Float)0,(Float)1,
};
static const Float _hx_array_data_1[] = {
	-1.0,-1.0,(Float)0,(Float)0,1.0,-1.0,(Float)1,(Float)0,-1.0,1.0,(Float)0,(Float)1,1.0,-1.0,(Float)1,(Float)0,1.0,1.0,(Float)1,(Float)1,-1.0,1.0,(Float)0,(Float)1,
};
namespace flixel{
namespace effects{
namespace postprocess{

void PostProcess_obj::__construct(::String fragmentShader){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","new",0x00edfd24,"flixel.effects.postprocess.PostProcess.new","flixel/effects/postprocess/PostProcess.hx",32,0x6a90b60f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fragmentShader,"fragmentShader")
HXLINE( 248)		this->time = ((Float)0);
HXLINE( 245)		this->defaultFramebuffer = null();
HXLINE(  44)		super::__construct();
HXLINE(  45)		this->uniforms =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  48)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  48)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_framebuffer()) );
HXDLIN(  48)		this->framebuffer =  ::lime::graphics::opengl::GLFramebuffer_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE(  49)		this->rebuild();
HXLINE(  53)		HX_VARI( Int,status) = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_check_framebuffer_status((int)36160)) );
HXLINE(  55)		switch((int)(status)){
            			case (int)36053: {
            			}
            			break;
            			case (int)36054: {
HXLINE(  58)				::haxe::Log_obj::trace(HX_("FRAMEBUFFER_INCOMPLETE_ATTACHMENT",f2,cf,b7,1d),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),58,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("new",60,d0,53,00)));
            			}
            			break;
            			case (int)36061: {
HXLINE(  60)				::haxe::Log_obj::trace(HX_("GL_FRAMEBUFFER_UNSUPPORTED",89,97,3b,c1),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),60,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("new",60,d0,53,00)));
            			}
            			break;
            			default:{
HXLINE(  63)				::haxe::Log_obj::trace((HX_("Check frame buffer: ",71,d6,83,f1) + status),hx::SourceInfo(HX_("PostProcess.hx",4f,e4,20,d0),63,HX_("flixel.effects.postprocess.PostProcess",32,db,9f,9b),HX_("new",60,d0,53,00)));
            			}
            		}
HXLINE(  67)		Int _hx_tmp2 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  67)		Int _hx_tmp3 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN(  67)		this->buffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp2,_hx_tmp3);
HXLINE(  68)		{
HXLINE(  68)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->buffer;
HXDLIN(  68)			{
HXLINE(  68)				Int buffer1;
HXDLIN(  68)				Bool _hx_tmp4 = hx::IsNull( buffer );
HXDLIN(  68)				if (_hx_tmp4) {
HXLINE(  68)					buffer1 = (int)0;
            				}
            				else {
HXLINE(  68)					buffer1 = buffer->id;
            				}
HXDLIN(  68)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,buffer1);
            			}
            		}
HXLINE(  69)		{
HXLINE(  69)			HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::fromData( _hx_array_data_0,24);
HXDLIN(  69)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  69)			Bool _hx_tmp5 = hx::IsNotNull( array );
HXDLIN(  69)			if (_hx_tmp5) {
HXLINE(  69)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  69)				_this->byteOffset = (int)0;
HXDLIN(  69)				_this->length = array->get_length();
HXDLIN(  69)				Int _hx_tmp6 = (_this->length * _this->bytesPerElement);
HXDLIN(  69)				_this->byteLength = _hx_tmp6;
HXDLIN(  69)				Int byteLength = _this->byteLength;
HXDLIN(  69)				HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(  69)				_this->buffer = this2;
HXDLIN(  69)				_this->copyFromArray(array,null());
HXDLIN(  69)				this1 = _this;
            			}
            			else {
HXLINE(  69)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  69)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = this1;
HXDLIN(  69)			{
HXLINE(  69)				Int byteOffset = data->byteOffset;
HXDLIN(  69)				Int size = data->byteLength;
HXDLIN(  69)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data((int)34962,hx::DynamicPtr(data->buffer),byteOffset,size,(int)35044);
            			}
            		}
HXLINE(  70)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,(int)0);
HXLINE(  74)		::String _hx_tmp7 = ::openfl::Assets_obj::getText(fragmentShader);
HXLINE(  72)		this->postProcessShader =  ::flixel::effects::postprocess::Shader_obj::__new(::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fragment",d0,5f,e5,ad),false)
            			->setFixed(1,HX_("src",e4,a6,57,00),HX_("\r\n#ifdef GL_ES\r\n\tprecision mediump float;\r\n#endif\r\n\r\nattribute vec2 aVertex;\r\nattribute vec2 aTexCoord;\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n\tvTexCoord = aTexCoord;\r\n\tgl_Position = vec4(aVertex, 0.0, 1.0);\r\n}",53,85,c0,42))))->init(1, ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("fragment",d0,5f,e5,ad),true)
            			->setFixed(1,HX_("src",e4,a6,57,00),_hx_tmp7))));
HXLINE(  78)		Int program = ( (Int)(this->postProcessShader->program->id) );
HXDLIN(  78)		Int _hx_tmp8 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(program,HX_("uImage0",ca,0a,76,34))) );
HXDLIN(  78)		this->imageUniform = _hx_tmp8;
HXLINE(  79)		Int program1 = ( (Int)(this->postProcessShader->program->id) );
HXDLIN(  79)		Int _hx_tmp9 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(program1,HX_("uTime",22,d7,b7,95))) );
HXDLIN(  79)		this->timeUniform = _hx_tmp9;
HXLINE(  80)		Int program2 = ( (Int)(this->postProcessShader->program->id) );
HXDLIN(  80)		Int _hx_tmp10 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(program2,HX_("uResolution",01,3e,a1,49))) );
HXDLIN(  80)		this->resolutionUniform = _hx_tmp10;
HXLINE(  82)		Int program3 = ( (Int)(this->postProcessShader->program->id) );
HXDLIN(  82)		Int _hx_tmp11 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_attrib_location(program3,HX_("aVertex",a5,4e,7e,97))) );
HXDLIN(  82)		this->vertexSlot = _hx_tmp11;
HXLINE(  83)		Int program4 = ( (Int)(this->postProcessShader->program->id) );
HXDLIN(  83)		Int _hx_tmp12 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_attrib_location(program4,HX_("aTexCoord",cf,8c,5d,f2))) );
HXDLIN(  83)		this->texCoordSlot = _hx_tmp12;
            	}

Dynamic PostProcess_obj::__CreateEmpty() { return new PostProcess_obj; }

hx::ObjectPtr< PostProcess_obj > PostProcess_obj::__new(::String fragmentShader)
{
	hx::ObjectPtr< PostProcess_obj > _hx_result = new PostProcess_obj();
	_hx_result->__construct(fragmentShader);
	return _hx_result;
}

Dynamic PostProcess_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PostProcess_obj > _hx_result = new PostProcess_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PostProcess_obj::setUniform(::String uniform,Float value){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","setUniform",0x2526196e,"flixel.effects.postprocess.PostProcess.setUniform","flixel/effects/postprocess/PostProcess.hx",94,0x6a90b60f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(uniform,"uniform")
            	HX_STACK_ARG(value,"value")
HXLINE(  94)		Bool _hx_tmp = this->uniforms->exists(uniform);
HXDLIN(  94)		if (_hx_tmp) {
HXLINE(  96)			HX_VARI_NAME(  ::flixel::effects::postprocess::_PostProcess::Uniform,uniform1,"uniform") = this->uniforms->get(uniform).StaticCast<  ::flixel::effects::postprocess::_PostProcess::Uniform >();
HXLINE(  97)			uniform1->value = value;
            		}
            		else {
HXLINE( 101)			Int program = ( (Int)(this->postProcessShader->program->id) );
HXDLIN( 101)			HX_VARI( Int,id) = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(program,uniform)) );
HXLINE( 102)			if ((id != (int)-1)) {
HXLINE( 104)				this->uniforms->set(uniform, ::flixel::effects::postprocess::_PostProcess::Uniform_obj::__new(id,value));
            			}
            			else {
HXLINE( 108)				HX_STACK_DO_THROW(((HX_("Uniform with name \"",db,30,9f,c4) + uniform) + HX_("\" could not be found.",bf,d2,c9,28)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,setUniform,(void))

 ::flixel::effects::postprocess::PostProcess PostProcess_obj::set_to( ::flixel::effects::postprocess::PostProcess value){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","set_to",0xe20f76f4,"flixel.effects.postprocess.PostProcess.set_to","flixel/effects/postprocess/PostProcess.hx",121,0x6a90b60f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 122)		 ::lime::graphics::opengl::GLFramebuffer _hx_tmp;
HXDLIN( 122)		Bool _hx_tmp1 = hx::IsNull( value );
HXDLIN( 122)		if (_hx_tmp1) {
HXLINE( 122)			_hx_tmp = this->defaultFramebuffer;
            		}
            		else {
HXLINE( 122)			_hx_tmp = value->framebuffer;
            		}
HXDLIN( 122)		this->renderTo = _hx_tmp;
HXLINE( 123)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PostProcess_obj,set_to,return )

void PostProcess_obj::rebuild(){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","rebuild",0x732f0d5f,"flixel.effects.postprocess.PostProcess.rebuild","flixel/effects/postprocess/PostProcess.hx",130,0x6a90b60f)
            	HX_STACK_THIS(this)
HXLINE( 131)		{
HXLINE( 131)			HX_VARI(  ::lime::graphics::opengl::GLFramebuffer,framebuffer) = this->framebuffer;
HXDLIN( 131)			{
HXLINE( 131)				Int framebuffer1;
HXDLIN( 131)				Bool _hx_tmp = hx::IsNull( framebuffer );
HXDLIN( 131)				if (_hx_tmp) {
HXLINE( 131)					framebuffer1 = (int)0;
            				}
            				else {
HXLINE( 131)					framebuffer1 = framebuffer->id;
            				}
HXDLIN( 131)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_framebuffer((int)36160,framebuffer1);
            			}
            		}
HXLINE( 133)		Bool _hx_tmp1 = hx::IsNotNull( this->texture );
HXDLIN( 133)		if (_hx_tmp1) {
HXLINE( 133)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->texture;
HXDLIN( 133)			{
HXLINE( 133)				Int texture1 = ( (Int)(texture->id) );
HXDLIN( 133)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_texture(texture1);
            			}
HXDLIN( 133)			texture->invalidate();
            		}
HXLINE( 134)		Bool _hx_tmp2 = hx::IsNotNull( this->renderbuffer );
HXDLIN( 134)		if (_hx_tmp2) {
HXLINE( 134)			HX_VARI(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer) = this->renderbuffer;
HXDLIN( 134)			{
HXLINE( 134)				Int renderbuffer1 = ( (Int)(renderbuffer->id) );
HXDLIN( 134)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_render_buffer(renderbuffer1);
            			}
HXDLIN( 134)			renderbuffer->invalidate();
            		}
HXLINE( 136)		this->screenWidth = ::openfl::Lib_obj::current->stage->stageWidth;
HXLINE( 137)		this->screenHeight = ::openfl::Lib_obj::current->stage->stageHeight;
HXLINE( 138)		{
HXLINE( 138)			Int width = this->screenWidth;
HXDLIN( 138)			Int height = this->screenHeight;
HXDLIN( 138)			Int _hx_tmp3 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 138)			Int _hx_tmp4 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_texture()) );
HXDLIN( 138)			this->texture =  ::lime::graphics::opengl::GLTexture_obj::__new(_hx_tmp3,_hx_tmp4);
HXDLIN( 138)			{
HXLINE( 138)				HX_VARI_NAME(  ::lime::graphics::opengl::GLTexture,texture2,"texture") = this->texture;
HXDLIN( 138)				{
HXLINE( 138)					Int texture3;
HXDLIN( 138)					Bool _hx_tmp5 = hx::IsNull( texture2 );
HXDLIN( 138)					if (_hx_tmp5) {
HXLINE( 138)						texture3 = (int)0;
            					}
            					else {
HXLINE( 138)						texture3 = texture2->id;
            					}
HXDLIN( 138)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture((int)3553,texture3);
            				}
            			}
HXDLIN( 138)			{
HXLINE( 138)				HX_VARI(  ::haxe::io::Bytes,buffer) = null();
HXDLIN( 138)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_image_2d((int)3553,(int)0,(int)6407,width,height,(int)0,(int)6407,(int)5121,hx::DynamicPtr(buffer),(int)0);
            			}
HXDLIN( 138)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXDLIN( 138)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
HXDLIN( 138)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10241,(int)9729);
HXDLIN( 138)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXDLIN( 138)			{
HXLINE( 138)				Int texture4 = ( (Int)(this->texture->id) );
HXDLIN( 138)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_texture2D((int)36160,(int)36064,(int)3553,texture4,(int)0);
            			}
            		}
HXLINE( 139)		{
HXLINE( 139)			Int width1 = this->screenWidth;
HXDLIN( 139)			Int height1 = this->screenHeight;
HXDLIN( 139)			Int _hx_tmp6 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 139)			Int _hx_tmp7 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_render_buffer()) );
HXDLIN( 139)			this->renderbuffer =  ::lime::graphics::opengl::GLRenderbuffer_obj::__new(_hx_tmp6,_hx_tmp7);
HXDLIN( 139)			{
HXLINE( 139)				HX_VARI_NAME(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer2,"renderbuffer") = this->renderbuffer;
HXDLIN( 139)				{
HXLINE( 139)					Int renderbuffer3;
HXDLIN( 139)					Bool _hx_tmp8 = hx::IsNull( renderbuffer2 );
HXDLIN( 139)					if (_hx_tmp8) {
HXLINE( 139)						renderbuffer3 = (int)0;
            					}
            					else {
HXLINE( 139)						renderbuffer3 = renderbuffer2->id;
            					}
HXDLIN( 139)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer((int)36161,renderbuffer3);
            				}
            			}
HXDLIN( 139)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_renderbuffer_storage((int)36161,(int)33189,width1,height1);
HXDLIN( 139)			{
HXLINE( 139)				Int renderbuffer4 = ( (Int)(this->renderbuffer->id) );
HXDLIN( 139)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_renderbuffer((int)36160,(int)36096,(int)36161,renderbuffer4);
            			}
            		}
HXLINE( 141)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_framebuffer((int)36160,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,rebuild,(void))

void PostProcess_obj::createRenderbuffer(Int width,Int height){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","createRenderbuffer",0x8a0b59ae,"flixel.effects.postprocess.PostProcess.createRenderbuffer","flixel/effects/postprocess/PostProcess.hx",145,0x6a90b60f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 147)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 147)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_render_buffer()) );
HXDLIN( 147)		this->renderbuffer =  ::lime::graphics::opengl::GLRenderbuffer_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE( 149)		{
HXLINE( 149)			HX_VARI(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer) = this->renderbuffer;
HXDLIN( 149)			{
HXLINE( 149)				Int renderbuffer1;
HXDLIN( 149)				Bool _hx_tmp2 = hx::IsNull( renderbuffer );
HXDLIN( 149)				if (_hx_tmp2) {
HXLINE( 149)					renderbuffer1 = (int)0;
            				}
            				else {
HXLINE( 149)					renderbuffer1 = renderbuffer->id;
            				}
HXDLIN( 149)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer((int)36161,renderbuffer1);
            			}
            		}
HXLINE( 150)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_renderbuffer_storage((int)36161,(int)33189,width,height);
HXLINE( 153)		{
HXLINE( 153)			Int renderbuffer2 = ( (Int)(this->renderbuffer->id) );
HXDLIN( 153)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_renderbuffer((int)36160,(int)36096,(int)36161,renderbuffer2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,createRenderbuffer,(void))

void PostProcess_obj::createTexture(Int width,Int height){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","createTexture",0xf0f6eb03,"flixel.effects.postprocess.PostProcess.createTexture","flixel/effects/postprocess/PostProcess.hx",157,0x6a90b60f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 158)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 158)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_texture()) );
HXDLIN( 158)		this->texture =  ::lime::graphics::opengl::GLTexture_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE( 160)		{
HXLINE( 160)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->texture;
HXDLIN( 160)			{
HXLINE( 160)				Int texture1;
HXDLIN( 160)				Bool _hx_tmp2 = hx::IsNull( texture );
HXDLIN( 160)				if (_hx_tmp2) {
HXLINE( 160)					texture1 = (int)0;
            				}
            				else {
HXLINE( 160)					texture1 = texture->id;
            				}
HXDLIN( 160)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture((int)3553,texture1);
            			}
            		}
HXLINE( 161)		{
HXLINE( 161)			HX_VARI(  ::haxe::io::Bytes,buffer) = null();
HXDLIN( 161)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_image_2d((int)3553,(int)0,(int)6407,width,height,(int)0,(int)6407,(int)5121,hx::DynamicPtr(buffer),(int)0);
            		}
HXLINE( 163)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXLINE( 164)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
HXLINE( 165)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10241,(int)9729);
HXLINE( 166)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10240,(int)9729);
HXLINE( 169)		{
HXLINE( 169)			Int texture2 = ( (Int)(this->texture->id) );
HXDLIN( 169)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_texture2D((int)36160,(int)36064,(int)3553,texture2,(int)0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PostProcess_obj,createTexture,(void))

void PostProcess_obj::capture(){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","capture",0x78fbaf4a,"flixel.effects.postprocess.PostProcess.capture","flixel/effects/postprocess/PostProcess.hx",176,0x6a90b60f)
            	HX_STACK_THIS(this)
HXLINE( 177)		{
HXLINE( 177)			HX_VARI(  ::lime::graphics::opengl::GLFramebuffer,framebuffer) = this->framebuffer;
HXDLIN( 177)			{
HXLINE( 177)				Int framebuffer1;
HXDLIN( 177)				Bool _hx_tmp = hx::IsNull( framebuffer );
HXDLIN( 177)				if (_hx_tmp) {
HXLINE( 177)					framebuffer1 = (int)0;
            				}
            				else {
HXLINE( 177)					framebuffer1 = framebuffer->id;
            				}
HXDLIN( 177)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_framebuffer((int)36160,framebuffer1);
            			}
            		}
HXLINE( 178)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear((int)16640);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,capture,(void))

void PostProcess_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","update",0xf99cabc5,"flixel.effects.postprocess.PostProcess.update","flixel/effects/postprocess/PostProcess.hx",183,0x6a90b60f)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 183)		hx::AddEq(this->time,elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PostProcess_obj,update,(void))

::String PostProcess_obj::VERTEX_SHADER;

::Array< Float > PostProcess_obj::get_vertices(){
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","get_vertices",0x40f38ebe,"flixel.effects.postprocess.PostProcess.get_vertices","flixel/effects/postprocess/PostProcess.hx",275,0x6a90b60f)
HXLINE( 275)		return ::Array_obj< Float >::fromData( _hx_array_data_1,24);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PostProcess_obj,get_vertices,return )


PostProcess_obj::PostProcess_obj()
{
}

void PostProcess_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PostProcess);
	HX_MARK_MEMBER_NAME(screenWidth,"screenWidth");
	HX_MARK_MEMBER_NAME(screenHeight,"screenHeight");
	HX_MARK_MEMBER_NAME(framebuffer,"framebuffer");
	HX_MARK_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(postProcessShader,"postProcessShader");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(renderTo,"renderTo");
	HX_MARK_MEMBER_NAME(defaultFramebuffer,"defaultFramebuffer");
	HX_MARK_MEMBER_NAME(time,"time");
	HX_MARK_MEMBER_NAME(vertexSlot,"vertexSlot");
	HX_MARK_MEMBER_NAME(texCoordSlot,"texCoordSlot");
	HX_MARK_MEMBER_NAME(imageUniform,"imageUniform");
	HX_MARK_MEMBER_NAME(resolutionUniform,"resolutionUniform");
	HX_MARK_MEMBER_NAME(timeUniform,"timeUniform");
	HX_MARK_MEMBER_NAME(uniforms,"uniforms");
	 ::openfl::display::DirectRenderer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PostProcess_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(screenWidth,"screenWidth");
	HX_VISIT_MEMBER_NAME(screenHeight,"screenHeight");
	HX_VISIT_MEMBER_NAME(framebuffer,"framebuffer");
	HX_VISIT_MEMBER_NAME(renderbuffer,"renderbuffer");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(postProcessShader,"postProcessShader");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(renderTo,"renderTo");
	HX_VISIT_MEMBER_NAME(defaultFramebuffer,"defaultFramebuffer");
	HX_VISIT_MEMBER_NAME(time,"time");
	HX_VISIT_MEMBER_NAME(vertexSlot,"vertexSlot");
	HX_VISIT_MEMBER_NAME(texCoordSlot,"texCoordSlot");
	HX_VISIT_MEMBER_NAME(imageUniform,"imageUniform");
	HX_VISIT_MEMBER_NAME(resolutionUniform,"resolutionUniform");
	HX_VISIT_MEMBER_NAME(timeUniform,"timeUniform");
	HX_VISIT_MEMBER_NAME(uniforms,"uniforms");
	 ::openfl::display::DirectRenderer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PostProcess_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { return hx::Val( time); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"set_to") ) { return hx::Val( set_to_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rebuild") ) { return hx::Val( rebuild_dyn()); }
		if (HX_FIELD_EQ(inName,"capture") ) { return hx::Val( capture_dyn()); }
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { return hx::Val( renderTo); }
		if (HX_FIELD_EQ(inName,"uniforms") ) { return hx::Val( uniforms); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setUniform") ) { return hx::Val( setUniform_dyn()); }
		if (HX_FIELD_EQ(inName,"vertexSlot") ) { return hx::Val( vertexSlot); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenWidth") ) { return hx::Val( screenWidth); }
		if (HX_FIELD_EQ(inName,"framebuffer") ) { return hx::Val( framebuffer); }
		if (HX_FIELD_EQ(inName,"timeUniform") ) { return hx::Val( timeUniform); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenHeight") ) { return hx::Val( screenHeight); }
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { return hx::Val( renderbuffer); }
		if (HX_FIELD_EQ(inName,"texCoordSlot") ) { return hx::Val( texCoordSlot); }
		if (HX_FIELD_EQ(inName,"imageUniform") ) { return hx::Val( imageUniform); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createTexture") ) { return hx::Val( createTexture_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"postProcessShader") ) { return hx::Val( postProcessShader); }
		if (HX_FIELD_EQ(inName,"resolutionUniform") ) { return hx::Val( resolutionUniform); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createRenderbuffer") ) { return hx::Val( createRenderbuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"defaultFramebuffer") ) { return hx::Val( defaultFramebuffer); }
	}
	return super::__Field(inName,inCallProp);
}

bool PostProcess_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"vertices") ) { if (inCallProp == hx::paccAlways) { outValue = get_vertices(); return true; } }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_vertices") ) { outValue = get_vertices_dyn(); return true; }
	}
	return false;
}

hx::Val PostProcess_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_to(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"time") ) { time=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"renderTo") ) { renderTo=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uniforms") ) { uniforms=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vertexSlot") ) { vertexSlot=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"screenWidth") ) { screenWidth=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"framebuffer") ) { framebuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeUniform") ) { timeUniform=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"screenHeight") ) { screenHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderbuffer") ) { renderbuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texCoordSlot") ) { texCoordSlot=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"imageUniform") ) { imageUniform=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"postProcessShader") ) { postProcessShader=inValue.Cast<  ::flixel::effects::postprocess::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"resolutionUniform") ) { resolutionUniform=inValue.Cast< Int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"defaultFramebuffer") ) { defaultFramebuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PostProcess_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"));
	outFields->push(HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"));
	outFields->push(HX_HCSTRING("to","\x7b","\x65","\x00","\x00"));
	outFields->push(HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"));
	outFields->push(HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("postProcessShader","\x74","\x62","\x84","\x07"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2"));
	outFields->push(HX_HCSTRING("defaultFramebuffer","\xac","\x79","\x67","\x39"));
	outFields->push(HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd"));
	outFields->push(HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f"));
	outFields->push(HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5"));
	outFields->push(HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86"));
	outFields->push(HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27"));
	outFields->push(HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PostProcess_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(PostProcess_obj,screenWidth),HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,screenHeight),HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(PostProcess_obj,framebuffer),HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(PostProcess_obj,renderbuffer),HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(PostProcess_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::flixel::effects::postprocess::Shader*/ ,(int)offsetof(PostProcess_obj,postProcessShader),HX_HCSTRING("postProcessShader","\x74","\x62","\x84","\x07")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(PostProcess_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(PostProcess_obj,renderTo),HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(PostProcess_obj,defaultFramebuffer),HX_HCSTRING("defaultFramebuffer","\xac","\x79","\x67","\x39")},
	{hx::fsFloat,(int)offsetof(PostProcess_obj,time),HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,vertexSlot),HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,texCoordSlot),HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,imageUniform),HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,resolutionUniform),HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86")},
	{hx::fsInt,(int)offsetof(PostProcess_obj,timeUniform),HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(PostProcess_obj,uniforms),HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo PostProcess_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &PostProcess_obj::VERTEX_SHADER,HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String PostProcess_obj_sMemberFields[] = {
	HX_HCSTRING("screenWidth","\xfa","\x02","\xe8","\x81"),
	HX_HCSTRING("screenHeight","\x73","\x10","\x6a","\xdf"),
	HX_HCSTRING("setUniform","\xb2","\x65","\x43","\x08"),
	HX_HCSTRING("set_to","\x38","\x51","\x78","\x6f"),
	HX_HCSTRING("rebuild","\x9b","\x2e","\x85","\xa1"),
	HX_HCSTRING("createRenderbuffer","\xf2","\x89","\x74","\x05"),
	HX_HCSTRING("createTexture","\x3f","\xa1","\x23","\x87"),
	HX_HCSTRING("capture","\x86","\xd0","\x51","\xa7"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("framebuffer","\xed","\x14","\x48","\x7a"),
	HX_HCSTRING("renderbuffer","\xd6","\x4c","\x56","\x0b"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("postProcessShader","\x74","\x62","\x84","\x07"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("renderTo","\x71","\xb6","\xdb","\xb2"),
	HX_HCSTRING("defaultFramebuffer","\xac","\x79","\x67","\x39"),
	HX_HCSTRING("time","\x0d","\xcc","\xfc","\x4c"),
	HX_HCSTRING("vertexSlot","\x82","\x67","\x12","\xdd"),
	HX_HCSTRING("texCoordSlot","\x6c","\xd0","\x32","\x2f"),
	HX_HCSTRING("imageUniform","\x19","\xbb","\x2c","\xa5"),
	HX_HCSTRING("resolutionUniform","\x68","\x71","\xd8","\x86"),
	HX_HCSTRING("timeUniform","\xa7","\xe8","\xb9","\x27"),
	HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"),
	::String(null()) };

static void PostProcess_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PostProcess_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PostProcess_obj::VERTEX_SHADER,"VERTEX_SHADER");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PostProcess_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PostProcess_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PostProcess_obj::VERTEX_SHADER,"VERTEX_SHADER");
};

#endif

hx::Class PostProcess_obj::__mClass;

static ::String PostProcess_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_SHADER","\xe0","\x69","\x73","\x49"),
	HX_HCSTRING("get_vertices","\x02","\x74","\x2f","\x1f"),
	::String(null())
};

void PostProcess_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.effects.postprocess.PostProcess","\x32","\xdb","\x9f","\x9b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PostProcess_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PostProcess_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PostProcess_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PostProcess_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PostProcess_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PostProcess_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PostProcess_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PostProcess_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PostProcess_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.effects.postprocess.PostProcess","boot",0xc76882ee,"flixel.effects.postprocess.PostProcess.boot","flixel/effects/postprocess/PostProcess.hx",258,0x6a90b60f)
HXLINE( 258)		VERTEX_SHADER = HX_("\r\n#ifdef GL_ES\r\n\tprecision mediump float;\r\n#endif\r\n\r\nattribute vec2 aVertex;\r\nattribute vec2 aTexCoord;\r\nvarying vec2 vTexCoord;\r\n\r\nvoid main() {\r\n\tvTexCoord = aTexCoord;\r\n\tgl_Position = vec4(aVertex, 0.0, 1.0);\r\n}",53,85,c0,42);
            	}
}

} // end namespace flixel
} // end namespace effects
} // end namespace postprocess
