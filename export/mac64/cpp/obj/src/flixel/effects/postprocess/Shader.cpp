// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_effects_postprocess_Shader
#include <flixel/effects/postprocess/Shader.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLShader
#include <lime/graphics/opengl/GLShader.h>
#endif

namespace flixel{
namespace effects{
namespace postprocess{

void Shader_obj::__construct(::Array< ::Dynamic> sources){
            	HX_STACK_FRAME("flixel.effects.postprocess.Shader","new",0x5a1426b4,"flixel.effects.postprocess.Shader.new","flixel/effects/postprocess/Shader.hx",21,0x282d2ed9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sources,"sources")
HXLINE(  22)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  22)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_program()) );
HXDLIN(  22)		this->program =  ::lime::graphics::opengl::GLProgram_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE(  24)		{
HXLINE(  24)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  24)			while((_g < sources->length)){
HXLINE(  24)				HX_VARI(  ::Dynamic,source) = sources->__get(_g);
HXDLIN(  24)				++_g;
HXLINE(  26)				Int _hx_tmp2;
HXDLIN(  26)				if (( (Bool)(source->__Field(HX_("fragment",d0,5f,e5,ad),hx::paccDynamic)) )) {
HXLINE(  26)					_hx_tmp2 = (int)35632;
            				}
            				else {
HXLINE(  26)					_hx_tmp2 = (int)35633;
            				}
HXDLIN(  26)				HX_VARI(  ::lime::graphics::opengl::GLShader,shader) = this->compile( ::Dynamic(source->__Field(HX_("src",e4,a6,57,00),hx::paccDynamic)),_hx_tmp2);
HXLINE(  27)				Bool _hx_tmp3 = hx::IsNull( shader );
HXDLIN(  27)				if (_hx_tmp3) {
HXLINE(  27)					return;
            				}
HXLINE(  28)				{
HXLINE(  28)					HX_VARI(  ::lime::graphics::opengl::GLProgram,program) = this->program;
HXDLIN(  28)					program->attach(shader);
HXDLIN(  28)					{
HXLINE(  28)						Int program1 = ( (Int)(program->id) );
HXDLIN(  28)						Int shader1 = ( (Int)(shader->id) );
HXDLIN(  28)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_attach_shader(program1,shader1);
            					}
            				}
HXLINE(  29)				{
HXLINE(  29)					{
HXLINE(  29)						Int shader2 = ( (Int)(shader->id) );
HXDLIN(  29)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_shader(shader2);
            					}
HXDLIN(  29)					shader->invalidate();
            				}
            			}
            		}
HXLINE(  32)		{
HXLINE(  32)			Int program2 = ( (Int)(this->program->id) );
HXDLIN(  32)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_link_program(program2);
            		}
HXLINE(  34)		Int program3 = ( (Int)(this->program->id) );
HXDLIN(  34)		Int _hx_tmp4 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_program_parameter(program3,(int)35714)) );
HXDLIN(  34)		if ((_hx_tmp4 == (int)0)) {
HXLINE(  36)			Int program4 = ( (Int)(this->program->id) );
HXDLIN(  36)			::String _hx_tmp5 = ( (::String)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_program_info_log(program4)) );
HXDLIN(  36)			::haxe::Log_obj::trace(_hx_tmp5,hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),36,HX_("flixel.effects.postprocess.Shader",c2,fc,ed,12),HX_("new",60,d0,53,00)));
HXLINE(  37)			Int program5 = ( (Int)(this->program->id) );
HXDLIN(  37)			Int _hx_tmp6 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_program_parameter(program5,(int)35715)) );
HXDLIN(  37)			::haxe::Log_obj::trace((HX_("VALIDATE_STATUS: ",61,4a,52,b0) + _hx_tmp6),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),37,HX_("flixel.effects.postprocess.Shader",c2,fc,ed,12),HX_("new",60,d0,53,00)));
HXLINE(  38)			Int _hx_tmp7 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_error()) );
HXDLIN(  38)			::haxe::Log_obj::trace((HX_("ERROR: ",4e,70,de,69) + _hx_tmp7),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),38,HX_("flixel.effects.postprocess.Shader",c2,fc,ed,12),HX_("new",60,d0,53,00)));
HXLINE(  39)			return;
            		}
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

hx::ObjectPtr< Shader_obj > Shader_obj::__new(::Array< ::Dynamic> sources)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(sources);
	return _hx_result;
}

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::lime::graphics::opengl::GLShader Shader_obj::compile(::String source,Int type){
            	HX_STACK_FRAME("flixel.effects.postprocess.Shader","compile",0x90bb35c7,"flixel.effects.postprocess.Shader.compile","flixel/effects/postprocess/Shader.hx",50,0x282d2ed9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(type,"type")
HXLINE(  51)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  51)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_shader(type)) );
HXDLIN(  51)		HX_VARI(  ::lime::graphics::opengl::GLShader,shader) =  ::lime::graphics::opengl::GLShader_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE(  52)		{
HXLINE(  52)			Int shader1 = ( (Int)(shader->id) );
HXDLIN(  52)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_shader_source(shader1,source);
            		}
HXLINE(  53)		{
HXLINE(  53)			Int shader2 = ( (Int)(shader->id) );
HXDLIN(  53)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_compile_shader(shader2);
            		}
HXLINE(  55)		Int shader3 = ( (Int)(shader->id) );
HXDLIN(  55)		Int _hx_tmp2 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_shader_parameter(shader3,(int)35713)) );
HXDLIN(  55)		if ((_hx_tmp2 == (int)0)) {
HXLINE(  57)			Int shader4 = ( (Int)(shader->id) );
HXDLIN(  57)			::String _hx_tmp3 = ( (::String)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_shader_info_log(shader4)) );
HXDLIN(  57)			::haxe::Log_obj::trace(_hx_tmp3,hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),57,HX_("flixel.effects.postprocess.Shader",c2,fc,ed,12),HX_("compile",73,25,6f,83)));
HXLINE(  58)			return null();
            		}
HXLINE(  61)		return shader;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,compile,return )

Int Shader_obj::attribute(::String a){
            	HX_STACK_FRAME("flixel.effects.postprocess.Shader","attribute",0xffa03d70,"flixel.effects.postprocess.Shader.attribute","flixel/effects/postprocess/Shader.hx",71,0x282d2ed9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(a,"a")
HXLINE(  71)		Int program = ( (Int)(this->program->id) );
HXDLIN(  71)		return ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_attrib_location(program,a)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,attribute,return )

Int Shader_obj::uniform(::String u){
            	HX_STACK_FRAME("flixel.effects.postprocess.Shader","uniform",0xc2b05188,"flixel.effects.postprocess.Shader.uniform","flixel/effects/postprocess/Shader.hx",81,0x282d2ed9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(u,"u")
HXLINE(  81)		Int program = ( (Int)(this->program->id) );
HXDLIN(  81)		return ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(program,u)) );
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,uniform,return )

void Shader_obj::bind(){
            	HX_STACK_FRAME("flixel.effects.postprocess.Shader","bind",0x6fa228e9,"flixel.effects.postprocess.Shader.bind","flixel/effects/postprocess/Shader.hx",89,0x282d2ed9)
            	HX_STACK_THIS(this)
HXLINE(  89)		HX_VARI(  ::lime::graphics::opengl::GLProgram,program) = this->program;
HXDLIN(  89)		{
HXLINE(  89)			Int program1;
HXDLIN(  89)			Bool _hx_tmp = hx::IsNull( program );
HXDLIN(  89)			if (_hx_tmp) {
HXLINE(  89)				program1 = (int)0;
            			}
            			else {
HXLINE(  89)				program1 = program->id;
            			}
HXDLIN(  89)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_use_program(program1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,bind,(void))


Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(program,"program");
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bind") ) { return hx::Val( bind_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { return hx::Val( program); }
		if (HX_FIELD_EQ(inName,"compile") ) { return hx::Val( compile_dyn()); }
		if (HX_FIELD_EQ(inName,"uniform") ) { return hx::Val( uniform_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"attribute") ) { return hx::Val( attribute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=inValue.Cast<  ::lime::graphics::opengl::GLProgram >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::opengl::GLProgram*/ ,(int)offsetof(Shader_obj,program),HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Shader_obj_sStaticStorageInfo = 0;
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"),
	HX_HCSTRING("compile","\x73","\x25","\x6f","\x83"),
	HX_HCSTRING("attribute","\x1c","\x70","\xf0","\xfa"),
	HX_HCSTRING("uniform","\x34","\x41","\x64","\xb5"),
	HX_HCSTRING("bind","\xbd","\xf5","\x16","\x41"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
};

#endif

hx::Class Shader_obj::__mClass;

void Shader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.effects.postprocess.Shader","\xc2","\xfc","\xed","\x12");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace effects
} // end namespace postprocess
