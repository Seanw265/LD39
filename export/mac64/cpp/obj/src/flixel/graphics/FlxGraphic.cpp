// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_Assets
#include <openfl/Assets.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

namespace flixel{
namespace graphics{

void FlxGraphic_obj::__construct(::String Key, ::openfl::display::BitmapData Bitmap, ::Dynamic Persist){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","new",0x02373c99,"flixel.graphics.FlxGraphic.new","flixel/graphics/FlxGraphic.hx",20,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Key,"Key")
            	HX_STACK_ARG(Bitmap,"Bitmap")
            	HX_STACK_ARG(Persist,"Persist")
HXLINE( 371)		this->_destroyOnNoUse = true;
HXLINE( 369)		this->_useCount = (int)0;
HXLINE( 355)		this->unique = false;
HXLINE( 308)		this->isDumped = false;
HXLINE( 298)		this->persist = false;
HXLINE( 284)		this->height = (int)0;
HXLINE( 280)		this->width = (int)0;
HXLINE( 383)		this->key = Key;
HXLINE( 384)		Bool _hx_tmp;
HXDLIN( 384)		Bool _hx_tmp1 = hx::IsNotNull( Persist );
HXDLIN( 384)		if (_hx_tmp1) {
HXLINE( 384)			_hx_tmp = Persist;
            		}
            		else {
HXLINE( 384)			_hx_tmp = ::flixel::graphics::FlxGraphic_obj::defaultPersist;
            		}
HXDLIN( 384)		this->persist = _hx_tmp;
HXLINE( 386)		this->frameCollections =  ::haxe::ds::EnumValueMap_obj::__new();
HXLINE( 387)		this->frameCollectionTypes = ::Array_obj< ::Dynamic>::__new();
HXLINE( 388)		this->set_bitmap(Bitmap);
            	}

Dynamic FlxGraphic_obj::__CreateEmpty() { return new FlxGraphic_obj; }

hx::ObjectPtr< FlxGraphic_obj > FlxGraphic_obj::__new(::String Key, ::openfl::display::BitmapData Bitmap, ::Dynamic Persist)
{
	hx::ObjectPtr< FlxGraphic_obj > _hx_result = new FlxGraphic_obj();
	_hx_result->__construct(Key,Bitmap,Persist);
	return _hx_result;
}

Dynamic FlxGraphic_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxGraphic_obj > _hx_result = new FlxGraphic_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

static ::flixel::util::IFlxDestroyable_obj _hx_flixel_graphics_FlxGraphic__hx_flixel_util_IFlxDestroyable= {
	( void (hx::Object::*)())&::flixel::graphics::FlxGraphic_obj::destroy,
};

void *FlxGraphic_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xd4fe2fcd: return &_hx_flixel_graphics_FlxGraphic__hx_flixel_util_IFlxDestroyable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void FlxGraphic_obj::dump(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","dump",0xe78dc2db,"flixel.graphics.FlxGraphic.dump","flixel/graphics/FlxGraphic.hx",396,0xb3633517)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,dump,(void))

void FlxGraphic_obj::undump(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","undump",0xf6fcc174,"flixel.graphics.FlxGraphic.undump","flixel/graphics/FlxGraphic.hx",410,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 411)		HX_VARI(  ::openfl::display::BitmapData,newBitmap) = this->getBitmapFromSystem();
HXLINE( 412)		Bool _hx_tmp = hx::IsNotNull( newBitmap );
HXDLIN( 412)		if (_hx_tmp) {
HXLINE( 413)			this->set_bitmap(newBitmap);
            		}
HXLINE( 414)		this->isDumped = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,undump,(void))

void FlxGraphic_obj::onContext(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","onContext",0x4fa62b89,"flixel.graphics.FlxGraphic.onContext","flixel/graphics/FlxGraphic.hx",424,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 424)		Bool _hx_tmp = this->isDumped;
HXDLIN( 424)		if (_hx_tmp) {
HXLINE( 426)			this->undump();
HXLINE( 427)			this->dump();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,onContext,(void))

void FlxGraphic_obj::onAssetsReload(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","onAssetsReload",0x9c63b062,"flixel.graphics.FlxGraphic.onAssetsReload","flixel/graphics/FlxGraphic.hx",436,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 437)		Bool _hx_tmp;
HXDLIN( 437)		Bool _hx_tmp1 = hx::IsNull( this->assetsClass );
HXDLIN( 437)		if (_hx_tmp1) {
HXLINE( 437)			_hx_tmp = hx::IsNotNull( this->assetsKey );
            		}
            		else {
HXLINE( 437)			_hx_tmp = true;
            		}
HXDLIN( 437)		if (!(_hx_tmp)) {
HXLINE( 438)			return;
            		}
HXLINE( 440)		HX_VARI( Bool,dumped) = this->isDumped;
HXLINE( 441)		this->undump();
HXLINE( 442)		if (dumped) {
HXLINE( 443)			this->dump();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,onAssetsReload,(void))

void FlxGraphic_obj::destroy(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","destroy",0x6c66a9b3,"flixel.graphics.FlxGraphic.destroy","flixel/graphics/FlxGraphic.hx",450,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 451)		 ::openfl::display::BitmapData _hx_tmp = ::flixel::util::FlxDestroyUtil_obj::dispose(this->bitmap);
HXDLIN( 451)		this->set_bitmap(_hx_tmp);
HXLINE( 453)		Bool _hx_tmp1 = ::flixel::FlxG_obj::renderTile;
HXDLIN( 453)		if (_hx_tmp1) {
HXLINE( 454)			this->_tilesheet = null();
            		}
HXLINE( 456)		this->key = null();
HXLINE( 457)		this->assetsKey = null();
HXLINE( 458)		this->assetsClass = null();
HXLINE( 459)		this->_imageFrame = null();
HXLINE( 461)		Bool _hx_tmp2 = hx::IsNull( this->frameCollections );
HXDLIN( 461)		if (_hx_tmp2) {
HXLINE( 462)			return;
            		}
HXLINE( 464)		HX_VAR( ::Array< ::Dynamic>,collections);
HXLINE( 465)		{
HXLINE( 465)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 465)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->frameCollectionTypes;
HXDLIN( 465)			while((_g < _g1->length)){
HXLINE( 465)				HX_VARI( ::hx::EnumBase,collectionType) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 465)				++_g;
HXLINE( 467)				collections = ( (::cpp::VirtualArray)(this->frameCollections->get(collectionType)) );
HXLINE( 468)				::flixel::util::FlxDestroyUtil_obj::destroyArray(collections);
            			}
            		}
HXLINE( 471)		this->frameCollections = null();
HXLINE( 472)		this->frameCollectionTypes = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,destroy,(void))

void FlxGraphic_obj::addFrameCollection( ::flixel::graphics::frames::FlxFramesCollection collection){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","addFrameCollection",0x06dd03b1,"flixel.graphics.FlxGraphic.addFrameCollection","flixel/graphics/FlxGraphic.hx",482,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(collection,"collection")
HXLINE( 482)		Bool _hx_tmp = hx::IsNotNull( collection->type );
HXDLIN( 482)		if (_hx_tmp) {
HXLINE( 484)			HX_VARI( ::hx::EnumBase,type) = collection->type;
HXDLIN( 484)			HX_VARI( ::cpp::VirtualArray,collections) = ( (::cpp::VirtualArray)(this->frameCollections->get(type)) );
HXDLIN( 484)			Bool _hx_tmp1 = hx::IsNull( collections );
HXDLIN( 484)			if (_hx_tmp1) {
HXLINE( 484)				collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 484)				this->frameCollections->set(type,collections);
            			}
HXLINE( 485)			collections->push(collection);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGraphic_obj,addFrameCollection,(void))

::cpp::VirtualArray FlxGraphic_obj::getFramesCollections(::hx::EnumBase type){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","getFramesCollections",0xa4089c80,"flixel.graphics.FlxGraphic.getFramesCollections","flixel/graphics/FlxGraphic.hx",496,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE( 497)		HX_VARI( ::cpp::VirtualArray,collections) = ( (::cpp::VirtualArray)(this->frameCollections->get(type)) );
HXLINE( 498)		Bool _hx_tmp = hx::IsNull( collections );
HXDLIN( 498)		if (_hx_tmp) {
HXLINE( 500)			collections = ::Array_obj< ::Dynamic>::__new();
HXLINE( 501)			this->frameCollections->set(type,collections);
            		}
HXLINE( 503)		return collections;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGraphic_obj,getFramesCollections,return )

 ::flixel::graphics::frames::FlxFrame FlxGraphic_obj::getEmptyFrame( ::flixel::math::FlxPoint size){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","getEmptyFrame",0xc5b0f80f,"flixel.graphics.FlxGraphic.getEmptyFrame","flixel/graphics/FlxGraphic.hx",514,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(size,"size")
HXLINE( 515)		HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) =  ::flixel::graphics::frames::FlxFrame_obj::__new(hx::ObjectPtr<OBJ_>(this),null(),null(),null());
HXLINE( 516)		frame->type = (int)2;
HXLINE( 517)		Float X = (int)0;
HXDLIN( 517)		Float Y = (int)0;
HXDLIN( 517)		Float Width = (int)0;
HXDLIN( 517)		Float Height = (int)0;
HXDLIN( 517)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 517)		_this->x = X;
HXDLIN( 517)		_this->y = Y;
HXDLIN( 517)		_this->width = Width;
HXDLIN( 517)		_this->height = Height;
HXDLIN( 517)		_this->_inPool = false;
HXDLIN( 517)		frame->set_frame(_this);
HXLINE( 518)		{
HXLINE( 518)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = frame->sourceSize;
HXDLIN( 518)			_this1->set_x(size->x);
HXDLIN( 518)			_this1->set_y(size->y);
HXDLIN( 518)			Bool _hx_tmp = size->_weak;
HXDLIN( 518)			if (_hx_tmp) {
HXLINE( 518)				size->put();
            			}
            		}
HXLINE( 519)		return frame;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGraphic_obj,getEmptyFrame,return )

 ::openfl::display::Tilesheet FlxGraphic_obj::get_tilesheet(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","get_tilesheet",0x1819f201,"flixel.graphics.FlxGraphic.get_tilesheet","flixel/graphics/FlxGraphic.hx",526,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 527)		Bool _hx_tmp = hx::IsNull( this->_tilesheet );
HXDLIN( 527)		if (_hx_tmp) {
HXLINE( 529)			HX_VARI( Bool,dumped) = this->isDumped;
HXLINE( 531)			if (dumped) {
HXLINE( 532)				this->undump();
            			}
HXLINE( 534)			this->_tilesheet =  ::openfl::display::Tilesheet_obj::__new(this->bitmap);
HXLINE( 536)			if (dumped) {
HXLINE( 537)				this->dump();
            			}
            		}
HXLINE( 540)		return this->_tilesheet;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,get_tilesheet,return )

 ::openfl::display::BitmapData FlxGraphic_obj::getBitmapFromSystem(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","getBitmapFromSystem",0xb3be27b7,"flixel.graphics.FlxGraphic.getBitmapFromSystem","flixel/graphics/FlxGraphic.hx",548,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 549)		HX_VARI(  ::openfl::display::BitmapData,newBitmap) = null();
HXLINE( 550)		Bool _hx_tmp = hx::IsNotNull( this->assetsClass );
HXDLIN( 550)		if (_hx_tmp) {
HXLINE( 551)			hx::Class source = this->assetsClass;
HXDLIN( 551)			newBitmap = ( ( ::openfl::display::BitmapData)(::Type_obj::createInstance(source,::cpp::VirtualArray_obj::__new(2)->init(0,(int)0)->init(1,(int)0))) );
            		}
            		else {
HXLINE( 552)			Bool _hx_tmp1 = hx::IsNotNull( this->assetsKey );
HXDLIN( 552)			if (_hx_tmp1) {
HXLINE( 553)				HX_VARI( ::String,id) = this->assetsKey;
HXDLIN( 553)				Bool _hx_tmp2 = ::openfl::Assets_obj::exists(id,null());
HXDLIN( 553)				if (_hx_tmp2) {
HXLINE( 553)					newBitmap = ::openfl::Assets_obj::getBitmapData(id,false);
            				}
            				else {
HXLINE( 553)					newBitmap = null();
            				}
            			}
            		}
HXLINE( 555)		Bool _hx_tmp3 = hx::IsNotNull( newBitmap );
HXDLIN( 555)		if (_hx_tmp3) {
HXLINE( 556)			Bool Unique = this->unique;
HXDLIN( 556)			if (Unique) {
HXLINE( 556)				return newBitmap->clone();
            			}
            			else {
HXLINE( 556)				return newBitmap;
            			}
            		}
HXLINE( 558)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,getBitmapFromSystem,return )

Bool FlxGraphic_obj::get_canBeDumped(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","get_canBeDumped",0x9b8a5e36,"flixel.graphics.FlxGraphic.get_canBeDumped","flixel/graphics/FlxGraphic.hx",563,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 563)		Bool _hx_tmp = hx::IsNull( this->assetsClass );
HXDLIN( 563)		if (_hx_tmp) {
HXLINE( 563)			return hx::IsNotNull( this->assetsKey );
            		}
            		else {
HXLINE( 563)			return true;
            		}
HXDLIN( 563)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,get_canBeDumped,return )

Int FlxGraphic_obj::get_useCount(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","get_useCount",0x2bcc1fb8,"flixel.graphics.FlxGraphic.get_useCount","flixel/graphics/FlxGraphic.hx",568,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 568)		return this->_useCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,get_useCount,return )

Int FlxGraphic_obj::set_useCount(Int Value){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","set_useCount",0x40c5432c,"flixel.graphics.FlxGraphic.set_useCount","flixel/graphics/FlxGraphic.hx",572,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 573)		Bool _hx_tmp;
HXDLIN( 573)		Bool _hx_tmp1;
HXDLIN( 573)		if ((Value <= (int)0)) {
HXLINE( 573)			_hx_tmp1 = this->_destroyOnNoUse;
            		}
            		else {
HXLINE( 573)			_hx_tmp1 = false;
            		}
HXDLIN( 573)		if (_hx_tmp1) {
HXLINE( 573)			_hx_tmp = !(this->persist);
            		}
            		else {
HXLINE( 573)			_hx_tmp = false;
            		}
HXDLIN( 573)		if (_hx_tmp) {
HXLINE( 574)			::flixel::FlxG_obj::bitmap->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 576)		return (this->_useCount = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGraphic_obj,set_useCount,return )

Bool FlxGraphic_obj::get_destroyOnNoUse(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","get_destroyOnNoUse",0x7e860bbd,"flixel.graphics.FlxGraphic.get_destroyOnNoUse","flixel/graphics/FlxGraphic.hx",581,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 581)		return this->_destroyOnNoUse;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,get_destroyOnNoUse,return )

Bool FlxGraphic_obj::set_destroyOnNoUse(Bool Value){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","set_destroyOnNoUse",0x5b353e31,"flixel.graphics.FlxGraphic.set_destroyOnNoUse","flixel/graphics/FlxGraphic.hx",585,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 586)		Bool _hx_tmp;
HXDLIN( 586)		Bool _hx_tmp1;
HXDLIN( 586)		Bool _hx_tmp2;
HXDLIN( 586)		if (Value) {
HXLINE( 586)			_hx_tmp2 = (this->_useCount <= (int)0);
            		}
            		else {
HXLINE( 586)			_hx_tmp2 = false;
            		}
HXDLIN( 586)		if (_hx_tmp2) {
HXLINE( 586)			_hx_tmp1 = hx::IsNotNull( this->key );
            		}
            		else {
HXLINE( 586)			_hx_tmp1 = false;
            		}
HXDLIN( 586)		if (_hx_tmp1) {
HXLINE( 586)			_hx_tmp = !(this->persist);
            		}
            		else {
HXLINE( 586)			_hx_tmp = false;
            		}
HXDLIN( 586)		if (_hx_tmp) {
HXLINE( 588)			::flixel::FlxG_obj::bitmap->remove(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 591)		return (this->_destroyOnNoUse = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGraphic_obj,set_destroyOnNoUse,return )

 ::flixel::graphics::frames::FlxImageFrame FlxGraphic_obj::get_imageFrame(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","get_imageFrame",0xc1224382,"flixel.graphics.FlxGraphic.get_imageFrame","flixel/graphics/FlxGraphic.hx",595,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 596)		Bool _hx_tmp = hx::IsNull( this->_imageFrame );
HXDLIN( 596)		if (_hx_tmp) {
HXLINE( 597)			Float Width = this->bitmap->width;
HXDLIN( 597)			Float Height = this->bitmap->height;
HXDLIN( 597)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 597)			_this->x = (int)0;
HXDLIN( 597)			_this->y = (int)0;
HXDLIN( 597)			_this->width = Width;
HXDLIN( 597)			_this->height = Height;
HXDLIN( 597)			_this->_inPool = false;
HXDLIN( 597)			this->_imageFrame = ::flixel::graphics::frames::FlxImageFrame_obj::fromRectangle(hx::ObjectPtr<OBJ_>(this),_this);
            		}
HXLINE( 599)		return this->_imageFrame;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,get_imageFrame,return )

 ::flixel::graphics::frames::FlxAtlasFrames FlxGraphic_obj::get_atlasFrames(){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","get_atlasFrames",0x774c10a1,"flixel.graphics.FlxGraphic.get_atlasFrames","flixel/graphics/FlxGraphic.hx",604,0xb3633517)
            	HX_STACK_THIS(this)
HXLINE( 604)		return ::flixel::graphics::frames::FlxAtlasFrames_obj::findFrame(hx::ObjectPtr<OBJ_>(this),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxGraphic_obj,get_atlasFrames,return )

 ::openfl::display::BitmapData FlxGraphic_obj::set_bitmap( ::openfl::display::BitmapData value){
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","set_bitmap",0x39ee9b13,"flixel.graphics.FlxGraphic.set_bitmap","flixel/graphics/FlxGraphic.hx",608,0xb3633517)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 609)		Bool _hx_tmp = hx::IsNotNull( value );
HXDLIN( 609)		if (_hx_tmp) {
HXLINE( 611)			this->bitmap = value;
HXLINE( 612)			this->width = this->bitmap->width;
HXLINE( 613)			this->height = this->bitmap->height;
HXLINE( 615)			Bool _hx_tmp1;
HXDLIN( 615)			if (::flixel::FlxG_obj::renderTile) {
HXLINE( 615)				_hx_tmp1 = hx::IsNotNull( this->_tilesheet );
            			}
            			else {
HXLINE( 615)				_hx_tmp1 = false;
            			}
HXDLIN( 615)			if (_hx_tmp1) {
HXLINE( 616)				this->_tilesheet =  ::openfl::display::Tilesheet_obj::__new(this->bitmap);
            			}
            		}
HXLINE( 620)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxGraphic_obj,set_bitmap,return )

Bool FlxGraphic_obj::defaultPersist;

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromAssetKey(::String Source,hx::Null< Bool >  __o_Unique,::String Key,hx::Null< Bool >  __o_Cache){
Bool Unique = __o_Unique.Default(false);
Bool Cache = __o_Cache.Default(true);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromAssetKey",0xcea54dc0,"flixel.graphics.FlxGraphic.fromAssetKey","flixel/graphics/FlxGraphic.hx",39,0xb3633517)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
            	HX_STACK_ARG(Cache,"Cache")
HXLINE(  40)		HX_VARI(  ::openfl::display::BitmapData,bitmap) = null();
HXLINE(  42)		if (!(Cache)) {
HXLINE(  44)			 ::openfl::display::BitmapData _hx_tmp;
HXDLIN(  44)			Bool _hx_tmp1 = ::openfl::Assets_obj::exists(Source,null());
HXDLIN(  44)			if (_hx_tmp1) {
HXLINE(  44)				_hx_tmp = ::openfl::Assets_obj::getBitmapData(Source,false);
            			}
            			else {
HXLINE(  44)				_hx_tmp = null();
            			}
HXDLIN(  44)			bitmap = _hx_tmp;
HXLINE(  45)			Bool _hx_tmp2 = hx::IsNull( bitmap );
HXDLIN(  45)			if (_hx_tmp2) {
HXLINE(  46)				return null();
            			}
HXLINE(  47)			return ::flixel::graphics::FlxGraphic_obj::createGraphic(bitmap,Key,Unique,Cache);
            		}
HXLINE(  50)		HX_VARI( ::String,key) = ::flixel::FlxG_obj::bitmap->generateKey(Source,Key,Unique);
HXLINE(  51)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE(  52)		Bool _hx_tmp3 = hx::IsNotNull( graphic );
HXDLIN(  52)		if (_hx_tmp3) {
HXLINE(  53)			return graphic;
            		}
HXLINE(  55)		 ::openfl::display::BitmapData _hx_tmp4;
HXDLIN(  55)		Bool _hx_tmp5 = ::openfl::Assets_obj::exists(Source,null());
HXDLIN(  55)		if (_hx_tmp5) {
HXLINE(  55)			_hx_tmp4 = ::openfl::Assets_obj::getBitmapData(Source,false);
            		}
            		else {
HXLINE(  55)			_hx_tmp4 = null();
            		}
HXDLIN(  55)		bitmap = _hx_tmp4;
HXLINE(  56)		Bool _hx_tmp6 = hx::IsNull( bitmap );
HXDLIN(  56)		if (_hx_tmp6) {
HXLINE(  57)			return null();
            		}
HXLINE(  59)		graphic = ::flixel::graphics::FlxGraphic_obj::createGraphic(bitmap,key,Unique,null());
HXLINE(  60)		graphic->assetsKey = Source;
HXLINE(  61)		return graphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxGraphic_obj,fromAssetKey,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromClass(hx::Class Source,hx::Null< Bool >  __o_Unique,::String Key,hx::Null< Bool >  __o_Cache){
Bool Unique = __o_Unique.Default(false);
Bool Cache = __o_Cache.Default(true);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromClass",0x5b653f67,"flixel.graphics.FlxGraphic.fromClass","flixel/graphics/FlxGraphic.hx",76,0xb3633517)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
            	HX_STACK_ARG(Cache,"Cache")
HXLINE(  77)		HX_VARI(  ::openfl::display::BitmapData,bitmap) = null();
HXLINE(  78)		if (!(Cache)) {
HXLINE(  80)			bitmap = ( ( ::openfl::display::BitmapData)(::Type_obj::createInstance(Source,::cpp::VirtualArray_obj::__new(2)->init(0,(int)0)->init(1,(int)0))) );
HXLINE(  81)			return ::flixel::graphics::FlxGraphic_obj::createGraphic(bitmap,Key,Unique,Cache);
            		}
HXLINE(  84)		HX_VARI( ::String,key) = ::Type_obj::getClassName(Source);
HXLINE(  85)		key = ::flixel::FlxG_obj::bitmap->generateKey(key,Key,Unique);
HXLINE(  86)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE(  87)		Bool _hx_tmp = hx::IsNotNull( graphic );
HXDLIN(  87)		if (_hx_tmp) {
HXLINE(  88)			return graphic;
            		}
HXLINE(  90)		bitmap = ( ( ::openfl::display::BitmapData)(::Type_obj::createInstance(Source,::cpp::VirtualArray_obj::__new(2)->init(0,(int)0)->init(1,(int)0))) );
HXLINE(  91)		graphic = ::flixel::graphics::FlxGraphic_obj::createGraphic(bitmap,key,Unique,null());
HXLINE(  92)		graphic->assetsClass = Source;
HXLINE(  93)		return graphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxGraphic_obj,fromClass,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromBitmapData( ::openfl::display::BitmapData Source,hx::Null< Bool >  __o_Unique,::String Key,hx::Null< Bool >  __o_Cache){
Bool Unique = __o_Unique.Default(false);
Bool Cache = __o_Cache.Default(true);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromBitmapData",0x64c8842a,"flixel.graphics.FlxGraphic.fromBitmapData","flixel/graphics/FlxGraphic.hx",108,0xb3633517)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
            	HX_STACK_ARG(Cache,"Cache")
HXLINE( 109)		if (!(Cache)) {
HXLINE( 110)			return ::flixel::graphics::FlxGraphic_obj::createGraphic(Source,Key,Unique,Cache);
            		}
HXLINE( 112)		HX_VARI( ::String,key) = ::flixel::FlxG_obj::bitmap->findKeyForBitmap(Source);
HXLINE( 114)		HX_VARI( ::String,assetKey) = null();
HXLINE( 115)		HX_VARI( hx::Class,assetClass) = null();
HXLINE( 116)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = null();
HXLINE( 117)		Bool _hx_tmp = hx::IsNotNull( key );
HXDLIN( 117)		if (_hx_tmp) {
HXLINE( 119)			graphic = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE( 120)			assetKey = graphic->assetsKey;
HXLINE( 121)			assetClass = graphic->assetsClass;
            		}
HXLINE( 124)		key = ::flixel::FlxG_obj::bitmap->generateKey(key,Key,Unique);
HXLINE( 125)		graphic = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE( 126)		Bool _hx_tmp1 = hx::IsNotNull( graphic );
HXDLIN( 126)		if (_hx_tmp1) {
HXLINE( 127)			return graphic;
            		}
HXLINE( 129)		graphic = ::flixel::graphics::FlxGraphic_obj::createGraphic(Source,key,Unique,null());
HXLINE( 130)		graphic->assetsKey = assetKey;
HXLINE( 131)		graphic->assetsClass = assetClass;
HXLINE( 132)		return graphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxGraphic_obj,fromBitmapData,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromFrame( ::flixel::graphics::frames::FlxFrame Source,hx::Null< Bool >  __o_Unique,::String Key,hx::Null< Bool >  __o_Cache){
Bool Unique = __o_Unique.Default(false);
Bool Cache = __o_Cache.Default(true);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromFrame",0x19903f5c,"flixel.graphics.FlxGraphic.fromFrame","flixel/graphics/FlxGraphic.hx",147,0xb3633517)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
            	HX_STACK_ARG(Cache,"Cache")
HXLINE( 148)		HX_VARI( ::String,key) = Source->name;
HXLINE( 149)		Bool _hx_tmp = hx::IsNull( key );
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 150)			HX_VARI(  ::flixel::math::FlxRect,_this) = Source->frame;
HXDLIN( 150)			 ::Dynamic value = _this->x;
HXDLIN( 150)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 150)			_this1->label = HX_("x",78,00,00,00);
HXDLIN( 150)			_this1->value = value;
HXDLIN( 150)			 ::Dynamic value1 = _this->y;
HXDLIN( 150)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 150)			_this2->label = HX_("y",79,00,00,00);
HXDLIN( 150)			_this2->value = value1;
HXDLIN( 150)			 ::Dynamic value2 = _this->width;
HXDLIN( 150)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this3,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 150)			_this3->label = HX_("w",77,00,00,00);
HXDLIN( 150)			_this3->value = value2;
HXDLIN( 150)			 ::Dynamic value3 = _this->height;
HXDLIN( 150)			HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this4,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 150)			_this4->label = HX_("h",68,00,00,00);
HXDLIN( 150)			_this4->value = value3;
HXDLIN( 150)			key = ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(4)->init(0,_this1)->init(1,_this2)->init(2,_this3)->init(3,_this4));
            		}
HXLINE( 151)		key = ((Source->parent->key + HX_(":",3a,00,00,00)) + key);
HXLINE( 152)		key = ::flixel::FlxG_obj::bitmap->generateKey(key,Key,Unique);
HXLINE( 153)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE( 154)		Bool _hx_tmp1 = hx::IsNotNull( graphic );
HXDLIN( 154)		if (_hx_tmp1) {
HXLINE( 155)			return graphic;
            		}
HXLINE( 157)		HX_VARI(  ::openfl::display::BitmapData,bitmap) = Source->paint(null(),null(),null(),null());
HXLINE( 158)		graphic = ::flixel::graphics::FlxGraphic_obj::createGraphic(bitmap,key,Unique,Cache);
HXLINE( 159)		HX_VARI(  ::flixel::graphics::frames::FlxImageFrame,image) = ::flixel::graphics::frames::FlxImageFrame_obj::fromGraphic(graphic,null());
HXLINE( 160)		image->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->name = Source->name;
HXLINE( 161)		return graphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxGraphic_obj,fromFrame,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromFrames( ::flixel::graphics::frames::FlxFramesCollection Source,hx::Null< Bool >  __o_Unique,::String Key){
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromFrames",0x44a73197,"flixel.graphics.FlxGraphic.fromFrames","flixel/graphics/FlxGraphic.hx",177,0xb3633517)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 177)		return ::flixel::graphics::FlxGraphic_obj::fromGraphic(Source->parent,Unique,Key);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxGraphic_obj,fromFrames,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromGraphic( ::flixel::graphics::FlxGraphic Source,hx::Null< Bool >  __o_Unique,::String Key){
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromGraphic",0xf9378b97,"flixel.graphics.FlxGraphic.fromGraphic","flixel/graphics/FlxGraphic.hx",191,0xb3633517)
            	HX_STACK_ARG(Source,"Source")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 192)		if (!(Unique)) {
HXLINE( 193)			return Source;
            		}
HXLINE( 195)		HX_VARI( ::String,key) = ::flixel::FlxG_obj::bitmap->generateKey(Source->key,Key,Unique);
HXLINE( 196)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::graphics::FlxGraphic_obj::createGraphic(Source->bitmap,key,Unique,null());
HXLINE( 197)		graphic->unique = Unique;
HXLINE( 198)		graphic->assetsClass = Source->assetsClass;
HXLINE( 199)		graphic->assetsKey = Source->assetsKey;
HXLINE( 200)		::flixel::FlxG_obj::bitmap->_cache->set(graphic->key,graphic);
HXDLIN( 200)		return graphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxGraphic_obj,fromGraphic,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::fromRectangle(Int Width,Int Height,Int Color,hx::Null< Bool >  __o_Unique,::String Key){
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","fromRectangle",0x6fce5ede,"flixel.graphics.FlxGraphic.fromRectangle","flixel/graphics/FlxGraphic.hx",214,0xb3633517)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Color,"Color")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 216)		HX_VARI( ::String,key) = ::flixel::FlxG_obj::bitmap->generateKey(((((Width + HX_("x",78,00,00,00)) + Height) + HX_(":",3a,00,00,00)) + Color),Key,Unique);
HXLINE( 218)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE( 219)		Bool _hx_tmp = hx::IsNotNull( graphic );
HXDLIN( 219)		if (_hx_tmp) {
HXLINE( 220)			return graphic;
            		}
HXLINE( 222)		HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(Width,Height,true,Color);
HXLINE( 223)		return ::flixel::graphics::FlxGraphic_obj::createGraphic(bitmap,key,null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxGraphic_obj,fromRectangle,return )

 ::openfl::display::BitmapData FlxGraphic_obj::getBitmap( ::openfl::display::BitmapData Bitmap,hx::Null< Bool >  __o_Unique){
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","getBitmap",0xcbe6761e,"flixel.graphics.FlxGraphic.getBitmap","flixel/graphics/FlxGraphic.hx",235,0xb3633517)
            	HX_STACK_ARG(Bitmap,"Bitmap")
            	HX_STACK_ARG(Unique,"Unique")
HXLINE( 235)		if (Unique) {
HXLINE( 235)			return Bitmap->clone();
            		}
            		else {
HXLINE( 235)			return Bitmap;
            		}
HXDLIN( 235)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxGraphic_obj,getBitmap,return )

 ::flixel::graphics::FlxGraphic FlxGraphic_obj::createGraphic( ::openfl::display::BitmapData Bitmap,::String Key,hx::Null< Bool >  __o_Unique,hx::Null< Bool >  __o_Cache){
Bool Unique = __o_Unique.Default(false);
Bool Cache = __o_Cache.Default(true);
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","createGraphic",0x3eb28085,"flixel.graphics.FlxGraphic.createGraphic","flixel/graphics/FlxGraphic.hx",250,0xb3633517)
            	HX_STACK_ARG(Bitmap,"Bitmap")
            	HX_STACK_ARG(Key,"Key")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Cache,"Cache")
HXLINE( 251)		if (Unique) {
HXLINE( 251)			Bitmap = Bitmap->clone();
            		}
            		else {
HXLINE( 251)			Bitmap = Bitmap;
            		}
HXLINE( 252)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = null();
HXLINE( 254)		if (Cache) {
HXLINE( 256)			graphic =  ::flixel::graphics::FlxGraphic_obj::__new(Key,Bitmap,null());
HXLINE( 257)			graphic->unique = Unique;
HXLINE( 258)			::flixel::FlxG_obj::bitmap->_cache->set(graphic->key,graphic);
            		}
            		else {
HXLINE( 262)			graphic =  ::flixel::graphics::FlxGraphic_obj::__new(null(),Bitmap,null());
            		}
HXLINE( 265)		return graphic;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxGraphic_obj,createGraphic,return )


FlxGraphic_obj::FlxGraphic_obj()
{
}

void FlxGraphic_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxGraphic);
	HX_MARK_MEMBER_NAME(key,"key");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(assetsKey,"assetsKey");
	HX_MARK_MEMBER_NAME(assetsClass,"assetsClass");
	HX_MARK_MEMBER_NAME(persist,"persist");
	HX_MARK_MEMBER_NAME(isDumped,"isDumped");
	HX_MARK_MEMBER_NAME(tilesheet,"tilesheet");
	HX_MARK_MEMBER_NAME(imageFrame,"imageFrame");
	HX_MARK_MEMBER_NAME(atlasFrames,"atlasFrames");
	HX_MARK_MEMBER_NAME(frameCollections,"frameCollections");
	HX_MARK_MEMBER_NAME(frameCollectionTypes,"frameCollectionTypes");
	HX_MARK_MEMBER_NAME(unique,"unique");
	HX_MARK_MEMBER_NAME(_imageFrame,"_imageFrame");
	HX_MARK_MEMBER_NAME(_tilesheet,"_tilesheet");
	HX_MARK_MEMBER_NAME(_useCount,"_useCount");
	HX_MARK_MEMBER_NAME(_destroyOnNoUse,"_destroyOnNoUse");
	HX_MARK_END_CLASS();
}

void FlxGraphic_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(key,"key");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(assetsKey,"assetsKey");
	HX_VISIT_MEMBER_NAME(assetsClass,"assetsClass");
	HX_VISIT_MEMBER_NAME(persist,"persist");
	HX_VISIT_MEMBER_NAME(isDumped,"isDumped");
	HX_VISIT_MEMBER_NAME(tilesheet,"tilesheet");
	HX_VISIT_MEMBER_NAME(imageFrame,"imageFrame");
	HX_VISIT_MEMBER_NAME(atlasFrames,"atlasFrames");
	HX_VISIT_MEMBER_NAME(frameCollections,"frameCollections");
	HX_VISIT_MEMBER_NAME(frameCollectionTypes,"frameCollectionTypes");
	HX_VISIT_MEMBER_NAME(unique,"unique");
	HX_VISIT_MEMBER_NAME(_imageFrame,"_imageFrame");
	HX_VISIT_MEMBER_NAME(_tilesheet,"_tilesheet");
	HX_VISIT_MEMBER_NAME(_useCount,"_useCount");
	HX_VISIT_MEMBER_NAME(_destroyOnNoUse,"_destroyOnNoUse");
}

hx::Val FlxGraphic_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { return hx::Val( key); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"dump") ) { return hx::Val( dump_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"unique") ) { return hx::Val( unique); }
		if (HX_FIELD_EQ(inName,"undump") ) { return hx::Val( undump_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"persist") ) { return hx::Val( persist); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDumped") ) { return hx::Val( isDumped); }
		if (HX_FIELD_EQ(inName,"useCount") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_useCount()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"assetsKey") ) { return hx::Val( assetsKey); }
		if (HX_FIELD_EQ(inName,"tilesheet") ) { return hx::Val( inCallProp == hx::paccAlways ? get_tilesheet() : tilesheet); }
		if (HX_FIELD_EQ(inName,"_useCount") ) { return hx::Val( _useCount); }
		if (HX_FIELD_EQ(inName,"onContext") ) { return hx::Val( onContext_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"imageFrame") ) { return hx::Val( inCallProp == hx::paccAlways ? get_imageFrame() : imageFrame); }
		if (HX_FIELD_EQ(inName,"_tilesheet") ) { return hx::Val( _tilesheet); }
		if (HX_FIELD_EQ(inName,"set_bitmap") ) { return hx::Val( set_bitmap_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetsClass") ) { return hx::Val( assetsClass); }
		if (HX_FIELD_EQ(inName,"canBeDumped") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_canBeDumped()); }
		if (HX_FIELD_EQ(inName,"atlasFrames") ) { return hx::Val( inCallProp == hx::paccAlways ? get_atlasFrames() : atlasFrames); }
		if (HX_FIELD_EQ(inName,"_imageFrame") ) { return hx::Val( _imageFrame); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_useCount") ) { return hx::Val( get_useCount_dyn()); }
		if (HX_FIELD_EQ(inName,"set_useCount") ) { return hx::Val( set_useCount_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getEmptyFrame") ) { return hx::Val( getEmptyFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"get_tilesheet") ) { return hx::Val( get_tilesheet_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"destroyOnNoUse") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_destroyOnNoUse()); }
		if (HX_FIELD_EQ(inName,"onAssetsReload") ) { return hx::Val( onAssetsReload_dyn()); }
		if (HX_FIELD_EQ(inName,"get_imageFrame") ) { return hx::Val( get_imageFrame_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_destroyOnNoUse") ) { return hx::Val( _destroyOnNoUse); }
		if (HX_FIELD_EQ(inName,"get_canBeDumped") ) { return hx::Val( get_canBeDumped_dyn()); }
		if (HX_FIELD_EQ(inName,"get_atlasFrames") ) { return hx::Val( get_atlasFrames_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"frameCollections") ) { return hx::Val( frameCollections); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"addFrameCollection") ) { return hx::Val( addFrameCollection_dyn()); }
		if (HX_FIELD_EQ(inName,"get_destroyOnNoUse") ) { return hx::Val( get_destroyOnNoUse_dyn()); }
		if (HX_FIELD_EQ(inName,"set_destroyOnNoUse") ) { return hx::Val( set_destroyOnNoUse_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getBitmapFromSystem") ) { return hx::Val( getBitmapFromSystem_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"frameCollectionTypes") ) { return hx::Val( frameCollectionTypes); }
		if (HX_FIELD_EQ(inName,"getFramesCollections") ) { return hx::Val( getFramesCollections_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxGraphic_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromClass") ) { outValue = fromClass_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromFrame") ) { outValue = fromFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBitmap") ) { outValue = getBitmap_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFrames") ) { outValue = fromFrames_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromGraphic") ) { outValue = fromGraphic_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromAssetKey") ) { outValue = fromAssetKey_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromRectangle") ) { outValue = fromRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"createGraphic") ) { outValue = createGraphic_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"defaultPersist") ) { outValue = defaultPersist; return true; }
		if (HX_FIELD_EQ(inName,"fromBitmapData") ) { outValue = fromBitmapData_dyn(); return true; }
	}
	return false;
}

hx::Val FlxGraphic_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"key") ) { key=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_bitmap(inValue) );bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unique") ) { unique=inValue.Cast< Bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"persist") ) { persist=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isDumped") ) { isDumped=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_useCount(inValue) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"assetsKey") ) { assetsKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilesheet") ) { tilesheet=inValue.Cast<  ::openfl::display::Tilesheet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_useCount") ) { _useCount=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"imageFrame") ) { imageFrame=inValue.Cast<  ::flixel::graphics::frames::FlxImageFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tilesheet") ) { _tilesheet=inValue.Cast<  ::openfl::display::Tilesheet >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"assetsClass") ) { assetsClass=inValue.Cast< hx::Class >(); return inValue; }
		if (HX_FIELD_EQ(inName,"atlasFrames") ) { atlasFrames=inValue.Cast<  ::flixel::graphics::frames::FlxAtlasFrames >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_imageFrame") ) { _imageFrame=inValue.Cast<  ::flixel::graphics::frames::FlxImageFrame >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"destroyOnNoUse") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_destroyOnNoUse(inValue) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_destroyOnNoUse") ) { _destroyOnNoUse=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"frameCollections") ) { frameCollections=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"frameCollectionTypes") ) { frameCollectionTypes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxGraphic_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"defaultPersist") ) { defaultPersist=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

void FlxGraphic_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("key","\x9f","\x89","\x51","\x00"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("assetsKey","\xdc","\xec","\x09","\xc6"));
	outFields->push(HX_HCSTRING("assetsClass","\xb5","\xe4","\x5d","\x37"));
	outFields->push(HX_HCSTRING("persist","\x14","\x22","\x71","\x83"));
	outFields->push(HX_HCSTRING("destroyOnNoUse","\x0d","\xef","\x5c","\xa2"));
	outFields->push(HX_HCSTRING("isDumped","\x1d","\x26","\x5d","\xfa"));
	outFields->push(HX_HCSTRING("canBeDumped","\xe6","\x48","\x77","\x53"));
	outFields->push(HX_HCSTRING("tilesheet","\xb1","\xd0","\x4d","\x74"));
	outFields->push(HX_HCSTRING("useCount","\x08","\xa7","\xce","\x11"));
	outFields->push(HX_HCSTRING("imageFrame","\xd2","\x3e","\x51","\x12"));
	outFields->push(HX_HCSTRING("atlasFrames","\x51","\xfb","\x38","\x2f"));
	outFields->push(HX_HCSTRING("frameCollections","\x28","\x29","\x8a","\x63"));
	outFields->push(HX_HCSTRING("frameCollectionTypes","\x8e","\x07","\x3e","\xdd"));
	outFields->push(HX_HCSTRING("unique","\x11","\x93","\x92","\x63"));
	outFields->push(HX_HCSTRING("_imageFrame","\xf1","\x0b","\xdb","\xe4"));
	outFields->push(HX_HCSTRING("_tilesheet","\x72","\x4c","\xf0","\xcf"));
	outFields->push(HX_HCSTRING("_useCount","\x67","\x9e","\x64","\x59"));
	outFields->push(HX_HCSTRING("_destroyOnNoUse","\xac","\x37","\xbd","\xeb"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxGraphic_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(FlxGraphic_obj,key),HX_HCSTRING("key","\x9f","\x89","\x51","\x00")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(FlxGraphic_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsInt,(int)offsetof(FlxGraphic_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(FlxGraphic_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(FlxGraphic_obj,assetsKey),HX_HCSTRING("assetsKey","\xdc","\xec","\x09","\xc6")},
	{hx::fsObject /*::hx::Class*/ ,(int)offsetof(FlxGraphic_obj,assetsClass),HX_HCSTRING("assetsClass","\xb5","\xe4","\x5d","\x37")},
	{hx::fsBool,(int)offsetof(FlxGraphic_obj,persist),HX_HCSTRING("persist","\x14","\x22","\x71","\x83")},
	{hx::fsBool,(int)offsetof(FlxGraphic_obj,isDumped),HX_HCSTRING("isDumped","\x1d","\x26","\x5d","\xfa")},
	{hx::fsObject /*::openfl::display::Tilesheet*/ ,(int)offsetof(FlxGraphic_obj,tilesheet),HX_HCSTRING("tilesheet","\xb1","\xd0","\x4d","\x74")},
	{hx::fsObject /*::flixel::graphics::frames::FlxImageFrame*/ ,(int)offsetof(FlxGraphic_obj,imageFrame),HX_HCSTRING("imageFrame","\xd2","\x3e","\x51","\x12")},
	{hx::fsObject /*::flixel::graphics::frames::FlxAtlasFrames*/ ,(int)offsetof(FlxGraphic_obj,atlasFrames),HX_HCSTRING("atlasFrames","\x51","\xfb","\x38","\x2f")},
	{hx::fsObject /*::haxe::ds::EnumValueMap*/ ,(int)offsetof(FlxGraphic_obj,frameCollections),HX_HCSTRING("frameCollections","\x28","\x29","\x8a","\x63")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxGraphic_obj,frameCollectionTypes),HX_HCSTRING("frameCollectionTypes","\x8e","\x07","\x3e","\xdd")},
	{hx::fsBool,(int)offsetof(FlxGraphic_obj,unique),HX_HCSTRING("unique","\x11","\x93","\x92","\x63")},
	{hx::fsObject /*::flixel::graphics::frames::FlxImageFrame*/ ,(int)offsetof(FlxGraphic_obj,_imageFrame),HX_HCSTRING("_imageFrame","\xf1","\x0b","\xdb","\xe4")},
	{hx::fsObject /*::openfl::display::Tilesheet*/ ,(int)offsetof(FlxGraphic_obj,_tilesheet),HX_HCSTRING("_tilesheet","\x72","\x4c","\xf0","\xcf")},
	{hx::fsInt,(int)offsetof(FlxGraphic_obj,_useCount),HX_HCSTRING("_useCount","\x67","\x9e","\x64","\x59")},
	{hx::fsBool,(int)offsetof(FlxGraphic_obj,_destroyOnNoUse),HX_HCSTRING("_destroyOnNoUse","\xac","\x37","\xbd","\xeb")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxGraphic_obj_sStaticStorageInfo[] = {
	{hx::fsBool,(void *) &FlxGraphic_obj::defaultPersist,HX_HCSTRING("defaultPersist","\x53","\x7b","\xb1","\xb2")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxGraphic_obj_sMemberFields[] = {
	HX_HCSTRING("key","\x9f","\x89","\x51","\x00"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("assetsKey","\xdc","\xec","\x09","\xc6"),
	HX_HCSTRING("assetsClass","\xb5","\xe4","\x5d","\x37"),
	HX_HCSTRING("persist","\x14","\x22","\x71","\x83"),
	HX_HCSTRING("isDumped","\x1d","\x26","\x5d","\xfa"),
	HX_HCSTRING("tilesheet","\xb1","\xd0","\x4d","\x74"),
	HX_HCSTRING("imageFrame","\xd2","\x3e","\x51","\x12"),
	HX_HCSTRING("atlasFrames","\x51","\xfb","\x38","\x2f"),
	HX_HCSTRING("frameCollections","\x28","\x29","\x8a","\x63"),
	HX_HCSTRING("frameCollectionTypes","\x8e","\x07","\x3e","\xdd"),
	HX_HCSTRING("unique","\x11","\x93","\x92","\x63"),
	HX_HCSTRING("_imageFrame","\xf1","\x0b","\xdb","\xe4"),
	HX_HCSTRING("_tilesheet","\x72","\x4c","\xf0","\xcf"),
	HX_HCSTRING("_useCount","\x67","\x9e","\x64","\x59"),
	HX_HCSTRING("_destroyOnNoUse","\xac","\x37","\xbd","\xeb"),
	HX_HCSTRING("dump","\x34","\x7d","\x72","\x42"),
	HX_HCSTRING("undump","\x0d","\x84","\x47","\x60"),
	HX_HCSTRING("onContext","\x90","\x4e","\x22","\xf1"),
	HX_HCSTRING("onAssetsReload","\xfb","\x33","\x88","\x63"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("addFrameCollection","\xca","\xc7","\x4d","\xc6"),
	HX_HCSTRING("getFramesCollections","\xd9","\x58","\x45","\xb4"),
	HX_HCSTRING("getEmptyFrame","\x96","\xaa","\x48","\xe3"),
	HX_HCSTRING("get_tilesheet","\x88","\xa4","\xb1","\x35"),
	HX_HCSTRING("getBitmapFromSystem","\x7e","\xf9","\xf8","\x76"),
	HX_HCSTRING("get_canBeDumped","\x7d","\x00","\x59","\x14"),
	HX_HCSTRING("get_useCount","\x11","\x5b","\xe8","\xc6"),
	HX_HCSTRING("set_useCount","\x85","\x7e","\xe1","\xdb"),
	HX_HCSTRING("get_destroyOnNoUse","\xd6","\xcf","\xf6","\x3d"),
	HX_HCSTRING("set_destroyOnNoUse","\x4a","\x02","\xa6","\x1a"),
	HX_HCSTRING("get_imageFrame","\x1b","\xc7","\x46","\x88"),
	HX_HCSTRING("get_atlasFrames","\xe8","\xb2","\x1a","\xf0"),
	HX_HCSTRING("set_bitmap","\x2c","\x1e","\x11","\xe5"),
	::String(null()) };

static void FlxGraphic_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxGraphic_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxGraphic_obj::defaultPersist,"defaultPersist");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxGraphic_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxGraphic_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxGraphic_obj::defaultPersist,"defaultPersist");
};

#endif

hx::Class FlxGraphic_obj::__mClass;

static ::String FlxGraphic_obj_sStaticFields[] = {
	HX_HCSTRING("defaultPersist","\x53","\x7b","\xb1","\xb2"),
	HX_HCSTRING("fromAssetKey","\x19","\x89","\xc1","\x69"),
	HX_HCSTRING("fromClass","\x6e","\x62","\xe1","\xfc"),
	HX_HCSTRING("fromBitmapData","\xc3","\x07","\xed","\x2b"),
	HX_HCSTRING("fromFrame","\x63","\x62","\x0c","\xbb"),
	HX_HCSTRING("fromFrames","\xb0","\xb4","\xc9","\xef"),
	HX_HCSTRING("fromGraphic","\x5e","\xbe","\x47","\x0c"),
	HX_HCSTRING("fromRectangle","\x65","\x11","\x66","\x8d"),
	HX_HCSTRING("getBitmap","\x25","\x99","\x62","\x6d"),
	HX_HCSTRING("createGraphic","\x0c","\x33","\x4a","\x5c"),
	::String(null())
};

void FlxGraphic_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.FlxGraphic","\x27","\xfc","\xac","\xae");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxGraphic_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxGraphic_obj::__SetStatic;
	__mClass->mMarkFunc = FlxGraphic_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxGraphic_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxGraphic_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxGraphic_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxGraphic_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxGraphic_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxGraphic_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxGraphic_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.graphics.FlxGraphic","boot",0xe636c9d9,"flixel.graphics.FlxGraphic.boot","flixel/graphics/FlxGraphic.hx",26,0xb3633517)
HXLINE(  26)		defaultPersist = false;
            	}
}

} // end namespace flixel
} // end namespace graphics
