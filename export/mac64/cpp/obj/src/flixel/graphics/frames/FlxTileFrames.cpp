// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrameCollectionType
#include <flixel/graphics/frames/FlxFrameCollectionType.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxBitmapDataUtil
#include <flixel/util/FlxBitmapDataUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

namespace flixel{
namespace graphics{
namespace frames{

void FlxTileFrames_obj::__construct( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","new",0xee264501,"flixel.graphics.frames.FlxTileFrames.new","flixel/graphics/frames/FlxTileFrames.hx",17,0x562d6bb0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parent,"parent")
            	HX_STACK_ARG(border,"border")
HXLINE(  39)		this->numCols = (int)0;
HXLINE(  37)		this->numRows = (int)0;
HXLINE(  43)		super::__construct(parent,::flixel::graphics::frames::FlxFrameCollectionType_obj::TILES_dyn(),border);
            	}

Dynamic FlxTileFrames_obj::__CreateEmpty() { return new FlxTileFrames_obj; }

hx::ObjectPtr< FlxTileFrames_obj > FlxTileFrames_obj::__new( ::flixel::graphics::FlxGraphic parent, ::flixel::math::FlxPoint border)
{
	hx::ObjectPtr< FlxTileFrames_obj > _hx_result = new FlxTileFrames_obj();
	_hx_result->__construct(parent,border);
	return _hx_result;
}

Dynamic FlxTileFrames_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTileFrames_obj > _hx_result = new FlxTileFrames_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

 ::flixel::graphics::frames::FlxFrame FlxTileFrames_obj::getByTilePosition(Int column,Int row){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","getByTilePosition",0xcc1d2a05,"flixel.graphics.frames.FlxTileFrames.getByTilePosition","flixel/graphics/frames/FlxTileFrames.hx",51,0x562d6bb0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(column,"column")
            	HX_STACK_ARG(row,"row")
HXLINE(  51)		return this->frames->__get(((row * this->numCols) + column)).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTileFrames_obj,getByTilePosition,return )

Bool FlxTileFrames_obj::equals( ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::graphics::frames::FlxFrame atlasFrame, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","equals",0xd88c543e,"flixel.graphics.frames.FlxTileFrames.equals","flixel/graphics/frames/FlxTileFrames.hx",492,0x562d6bb0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(region,"region")
            	HX_STACK_ARG(atlasFrame,"atlasFrame")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
            	HX_STACK_ARG(border,"border")
HXLINE( 493)		Bool _hx_tmp;
HXDLIN( 493)		Bool _hx_tmp1 = hx::IsNull( this->region );
HXDLIN( 493)		if (_hx_tmp1) {
HXLINE( 493)			_hx_tmp = hx::IsNull( this->atlasFrame );
            		}
            		else {
HXLINE( 493)			_hx_tmp = false;
            		}
HXDLIN( 493)		if (_hx_tmp) {
HXLINE( 495)			return false;
            		}
HXLINE( 498)		Bool _hx_tmp2 = hx::IsNotNull( atlasFrame );
HXDLIN( 498)		if (_hx_tmp2) {
HXLINE( 500)			region = atlasFrame->frame;
            		}
HXLINE( 503)		Bool _hx_tmp3 = hx::IsNull( region );
HXDLIN( 503)		if (_hx_tmp3) {
HXLINE( 504)			Float Width = this->parent->width;
HXDLIN( 504)			Float Height = this->parent->height;
HXDLIN( 504)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 504)			_this->x = (int)0;
HXDLIN( 504)			_this->y = (int)0;
HXDLIN( 504)			_this->width = Width;
HXDLIN( 504)			_this->height = Height;
HXDLIN( 504)			_this->_inPool = false;
HXDLIN( 504)			_this->_weak = true;
HXDLIN( 504)			region = _this;
            		}
HXLINE( 506)		Bool _hx_tmp4 = hx::IsNull( tileSpacing );
HXDLIN( 506)		if (_hx_tmp4) {
HXLINE( 507)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 507)			point->_inPool = false;
HXDLIN( 507)			point->_weak = true;
HXDLIN( 507)			tileSpacing = point;
            		}
HXLINE( 509)		Bool _hx_tmp5 = hx::IsNull( border );
HXDLIN( 509)		if (_hx_tmp5) {
HXLINE( 510)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 510)			point1->_inPool = false;
HXDLIN( 510)			point1->_weak = true;
HXDLIN( 510)			border = point1;
            		}
HXLINE( 512)		Bool _hx_tmp6;
HXDLIN( 512)		Bool _hx_tmp7;
HXDLIN( 512)		Bool _hx_tmp8;
HXDLIN( 512)		if (hx::IsEq( this->atlasFrame,atlasFrame )) {
HXLINE( 512)			HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = this->region;
HXDLIN( 512)			HX_VAR( Bool,result);
HXDLIN( 512)			Bool _hx_tmp9;
HXDLIN( 512)			Bool _hx_tmp10;
HXDLIN( 512)			Float aValueA = _this1->x;
HXDLIN( 512)			Float aValueB = region->x;
HXDLIN( 512)			Float _hx_tmp11 = ::Math_obj::abs((aValueA - aValueB));
HXDLIN( 512)			if ((_hx_tmp11 <= ((Float)0.0000001))) {
HXLINE( 512)				Float aValueA1 = _this1->y;
HXDLIN( 512)				Float aValueB1 = region->y;
HXDLIN( 512)				Float _hx_tmp12 = ::Math_obj::abs((aValueA1 - aValueB1));
HXDLIN( 512)				_hx_tmp10 = (_hx_tmp12 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 512)				_hx_tmp10 = false;
            			}
HXDLIN( 512)			if (_hx_tmp10) {
HXLINE( 512)				Float aValueA2 = _this1->width;
HXDLIN( 512)				Float aValueB2 = region->width;
HXDLIN( 512)				Float _hx_tmp13 = ::Math_obj::abs((aValueA2 - aValueB2));
HXDLIN( 512)				_hx_tmp9 = (_hx_tmp13 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 512)				_hx_tmp9 = false;
            			}
HXDLIN( 512)			if (_hx_tmp9) {
HXLINE( 512)				Float aValueA3 = _this1->height;
HXDLIN( 512)				Float aValueB3 = region->height;
HXDLIN( 512)				Float _hx_tmp14 = ::Math_obj::abs((aValueA3 - aValueB3));
HXDLIN( 512)				result = (_hx_tmp14 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 512)				result = false;
            			}
HXDLIN( 512)			Bool _hx_tmp15 = region->_weak;
HXDLIN( 512)			if (_hx_tmp15) {
HXLINE( 512)				Bool _hx_tmp16 = !(region->_inPool);
HXDLIN( 512)				if (_hx_tmp16) {
HXLINE( 512)					region->_inPool = true;
HXDLIN( 512)					region->_weak = false;
HXDLIN( 512)					::flixel::math::FlxRect_obj::_pool->putUnsafe(region);
            				}
            			}
HXDLIN( 512)			_hx_tmp8 = result;
            		}
            		else {
HXLINE( 512)			_hx_tmp8 = false;
            		}
HXDLIN( 512)		if (_hx_tmp8) {
HXLINE( 513)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this2,"_this") = this->tileSize;
HXDLIN( 513)			HX_VAR_NAME( Bool,result1,"result");
HXDLIN( 513)			Float aValueA4 = _this2->x;
HXDLIN( 513)			Float aValueB4 = tileSize->x;
HXDLIN( 513)			Float _hx_tmp17 = ::Math_obj::abs((aValueA4 - aValueB4));
HXDLIN( 513)			if ((_hx_tmp17 <= ((Float)0.0000001))) {
HXLINE( 513)				Float aValueA5 = _this2->y;
HXDLIN( 513)				Float aValueB5 = tileSize->y;
HXDLIN( 513)				Float _hx_tmp18 = ::Math_obj::abs((aValueA5 - aValueB5));
HXDLIN( 513)				result1 = (_hx_tmp18 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 513)				result1 = false;
            			}
HXDLIN( 513)			Bool _hx_tmp19 = tileSize->_weak;
HXDLIN( 513)			if (_hx_tmp19) {
HXLINE( 513)				tileSize->put();
            			}
HXLINE( 512)			_hx_tmp7 = result1;
            		}
            		else {
HXLINE( 512)			_hx_tmp7 = false;
            		}
HXDLIN( 512)		if (_hx_tmp7) {
HXLINE( 513)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this3,"_this") = this->tileSpacing;
HXDLIN( 513)			HX_VAR_NAME( Bool,result2,"result");
HXDLIN( 513)			Float aValueA6 = _this3->x;
HXDLIN( 513)			Float aValueB6 = tileSpacing->x;
HXDLIN( 513)			Float _hx_tmp20 = ::Math_obj::abs((aValueA6 - aValueB6));
HXDLIN( 513)			if ((_hx_tmp20 <= ((Float)0.0000001))) {
HXLINE( 513)				Float aValueA7 = _this3->y;
HXDLIN( 513)				Float aValueB7 = tileSpacing->y;
HXDLIN( 513)				Float _hx_tmp21 = ::Math_obj::abs((aValueA7 - aValueB7));
HXDLIN( 513)				result2 = (_hx_tmp21 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 513)				result2 = false;
            			}
HXDLIN( 513)			Bool _hx_tmp22 = tileSpacing->_weak;
HXDLIN( 513)			if (_hx_tmp22) {
HXLINE( 513)				tileSpacing->put();
            			}
HXLINE( 512)			_hx_tmp6 = result2;
            		}
            		else {
HXLINE( 512)			_hx_tmp6 = false;
            		}
HXDLIN( 512)		if (_hx_tmp6) {
HXLINE( 514)			HX_VARI_NAME(  ::flixel::math::FlxPoint,_this4,"_this") = this->border;
HXDLIN( 514)			HX_VAR_NAME( Bool,result3,"result");
HXDLIN( 514)			Float aValueA8 = _this4->x;
HXDLIN( 514)			Float aValueB8 = border->x;
HXDLIN( 514)			Float _hx_tmp23 = ::Math_obj::abs((aValueA8 - aValueB8));
HXDLIN( 514)			if ((_hx_tmp23 <= ((Float)0.0000001))) {
HXLINE( 514)				Float aValueA9 = _this4->y;
HXDLIN( 514)				Float aValueB9 = border->y;
HXDLIN( 514)				Float _hx_tmp24 = ::Math_obj::abs((aValueA9 - aValueB9));
HXDLIN( 514)				result3 = (_hx_tmp24 <= ((Float)0.0000001));
            			}
            			else {
HXLINE( 514)				result3 = false;
            			}
HXDLIN( 514)			Bool _hx_tmp25 = border->_weak;
HXDLIN( 514)			if (_hx_tmp25) {
HXLINE( 514)				border->put();
            			}
HXLINE( 512)			return result3;
            		}
            		else {
HXLINE( 512)			return false;
            		}
HXDLIN( 512)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxTileFrames_obj,equals,return )

 ::flixel::graphics::frames::FlxFramesCollection FlxTileFrames_obj::addBorder( ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","addBorder",0x145fa54e,"flixel.graphics.frames.FlxTileFrames.addBorder","flixel/graphics/frames/FlxTileFrames.hx",518,0x562d6bb0)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(border,"border")
HXLINE( 519)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 519)		point->_inPool = false;
HXDLIN( 519)		HX_VARI(  ::flixel::math::FlxPoint,resultBorder) = point->addPoint(this->border)->addPoint(border);
HXLINE( 520)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 520)		point1->_inPool = false;
HXDLIN( 520)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = this->tileSize;
HXDLIN( 520)		point1->set_x(point2->x);
HXDLIN( 520)		point1->set_y(point2->y);
HXDLIN( 520)		Bool _hx_tmp = point2->_weak;
HXDLIN( 520)		if (_hx_tmp) {
HXLINE( 520)			point2->put();
            		}
HXDLIN( 520)		Float X = ((int)2 * border->x);
HXDLIN( 520)		Float Y = ((int)2 * border->y);
HXDLIN( 520)		{
HXLINE( 520)			Float _hx_tmp1 = (point1->x - X);
HXDLIN( 520)			point1->set_x(_hx_tmp1);
            		}
HXDLIN( 520)		{
HXLINE( 520)			Float _hx_tmp2 = (point1->y - Y);
HXDLIN( 520)			point1->set_y(_hx_tmp2);
            		}
HXLINE( 521)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(this->parent,point1,this->region,this->atlasFrame,this->tileSpacing,resultBorder);
HXLINE( 522)		Bool _hx_tmp3 = hx::IsNotNull( tileFrames );
HXDLIN( 522)		if (_hx_tmp3) {
HXLINE( 524)			::flixel::util::FlxDestroyUtil_obj::put(point1);
HXLINE( 525)			return tileFrames;
            		}
HXLINE( 528)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__new(this->parent,resultBorder);
HXLINE( 529)		Float X1 = (int)0;
HXDLIN( 529)		Float Y1 = (int)0;
HXDLIN( 529)		Float Width = (int)0;
HXDLIN( 529)		Float Height = (int)0;
HXDLIN( 529)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 529)		_this->x = X1;
HXDLIN( 529)		_this->y = Y1;
HXDLIN( 529)		_this->width = Width;
HXDLIN( 529)		_this->height = Height;
HXDLIN( 529)		_this->_inPool = false;
HXDLIN( 529)		HX_VARI(  ::flixel::math::FlxRect,Rect) = this->region;
HXDLIN( 529)		_this->x = Rect->x;
HXDLIN( 529)		_this->y = Rect->y;
HXDLIN( 529)		_this->width = Rect->width;
HXDLIN( 529)		_this->height = Rect->height;
HXDLIN( 529)		Bool _hx_tmp4 = Rect->_weak;
HXDLIN( 529)		if (_hx_tmp4) {
HXLINE( 529)			Bool _hx_tmp5 = !(Rect->_inPool);
HXDLIN( 529)			if (_hx_tmp5) {
HXLINE( 529)				Rect->_inPool = true;
HXDLIN( 529)				Rect->_weak = false;
HXDLIN( 529)				::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            			}
            		}
HXDLIN( 529)		tileFrames->region = _this;
HXLINE( 530)		tileFrames->atlasFrame = this->atlasFrame;
HXLINE( 531)		tileFrames->tileSize = point1;
HXLINE( 532)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 532)		point3->_inPool = false;
HXDLIN( 532)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point4,"point") = this->tileSpacing;
HXDLIN( 532)		point3->set_x(point4->x);
HXDLIN( 532)		point3->set_y(point4->y);
HXDLIN( 532)		Bool _hx_tmp6 = point4->_weak;
HXDLIN( 532)		if (_hx_tmp6) {
HXLINE( 532)			point4->put();
            		}
HXDLIN( 532)		tileFrames->tileSpacing = point3;
HXLINE( 534)		{
HXLINE( 534)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 534)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->frames;
HXDLIN( 534)			while((_g < _g1->length)){
HXLINE( 534)				HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 534)				++_g;
HXLINE( 536)				 ::flixel::graphics::frames::FlxFrame _hx_tmp7 = frame->setBorderTo(border,null());
HXDLIN( 536)				tileFrames->pushFrame(_hx_tmp7);
            			}
            		}
HXLINE( 539)		return tileFrames;
            	}


void FlxTileFrames_obj::destroy(){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","destroy",0x9226061b,"flixel.graphics.frames.FlxTileFrames.destroy","flixel/graphics/frames/FlxTileFrames.hx",543,0x562d6bb0)
            	HX_STACK_THIS(this)
HXLINE( 544)		this->super::destroy();
HXLINE( 545)		this->atlasFrame = null();
HXLINE( 546)		this->region = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->region)) );
HXLINE( 547)		this->tileSize = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->tileSize)) );
HXLINE( 548)		this->tileSpacing = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->tileSpacing)) );
            	}


 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromBitmapAddSpacesAndBorders( ::Dynamic source, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint tileBorder, ::flixel::math::FlxRect region){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromBitmapAddSpacesAndBorders",0x637393e6,"flixel.graphics.frames.FlxTileFrames.fromBitmapAddSpacesAndBorders","flixel/graphics/frames/FlxTileFrames.hx",69,0x562d6bb0)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
            	HX_STACK_ARG(tileBorder,"tileBorder")
            	HX_STACK_ARG(region,"region")
HXLINE(  70)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(source,false,null());
HXLINE(  71)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN(  71)		if (_hx_tmp) {
HXLINE(  72)			return null();
            		}
HXLINE(  74)		HX_VARI( ::String,key) = ::flixel::FlxG_obj::bitmap->getKeyWithSpacesAndBorders(graphic->key,tileSize,tileSpacing,tileBorder,region);
HXLINE(  75)		HX_VARI(  ::flixel::graphics::FlxGraphic,result) = ::flixel::FlxG_obj::bitmap->_cache->get(key).StaticCast<  ::flixel::graphics::FlxGraphic >();
HXLINE(  76)		Bool _hx_tmp1 = hx::IsNull( result );
HXDLIN(  76)		if (_hx_tmp1) {
HXLINE(  78)			HX_VARI(  ::openfl::display::BitmapData,bitmap) = ::flixel::util::FlxBitmapDataUtil_obj::addSpacesAndBorders(graphic->bitmap,tileSize,tileSpacing,tileBorder,region);
HXLINE(  79)			result = ::flixel::FlxG_obj::bitmap->add(bitmap,false,key);
            		}
HXLINE(  82)		HX_VARI( Int,borderX) = (int)0;
HXLINE(  83)		HX_VARI( Int,borderY) = (int)0;
HXLINE(  85)		Bool _hx_tmp2 = hx::IsNotNull( tileBorder );
HXDLIN(  85)		if (_hx_tmp2) {
HXLINE(  87)			borderX = ::Std_obj::_hx_int(tileBorder->x);
HXLINE(  88)			borderY = ::Std_obj::_hx_int(tileBorder->y);
            		}
HXLINE(  92)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  92)		point->_inPool = false;
HXDLIN(  92)		HX_VARI(  ::flixel::math::FlxPoint,_this) = point->addPoint(tileSize);
HXDLIN(  92)		{
HXLINE(  92)			Float _hx_tmp3 = (_this->x + ((int)2 * borderX));
HXDLIN(  92)			_this->set_x(_hx_tmp3);
            		}
HXDLIN(  92)		{
HXLINE(  92)			Float _hx_tmp4 = (_this->y + ((int)2 * borderY));
HXDLIN(  92)			_this->set_y(_hx_tmp4);
            		}
HXLINE(  91)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(result,_this,null(),tileSpacing);
HXLINE(  94)		Bool _hx_tmp5 = hx::IsNull( tileBorder );
HXDLIN(  94)		if (_hx_tmp5) {
HXLINE(  95)			return tileFrames;
            		}
HXLINE(  97)		return Dynamic( tileFrames->addBorder(tileBorder)).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(FlxTileFrames_obj,fromBitmapAddSpacesAndBorders,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromFrameAddSpacesAndBorders( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint tileBorder){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromFrameAddSpacesAndBorders",0x8cf4341a,"flixel.graphics.frames.FlxTileFrames.fromFrameAddSpacesAndBorders","flixel/graphics/frames/FlxTileFrames.hx",113,0x562d6bb0)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
            	HX_STACK_ARG(tileBorder,"tileBorder")
HXLINE( 114)		HX_VARI(  ::openfl::display::BitmapData,bitmap) = frame->paint(null(),null(),null(),null());
HXLINE( 115)		return ::flixel::graphics::frames::FlxTileFrames_obj::fromBitmapAddSpacesAndBorders(bitmap,tileSize,tileSpacing,tileBorder,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromFrameAddSpacesAndBorders,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromFrame( ::flixel::graphics::frames::FlxFrame frame, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint tileSpacing){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromFrame",0xb32d85c4,"flixel.graphics.frames.FlxTileFrames.fromFrame","flixel/graphics/frames/FlxTileFrames.hx",130,0x562d6bb0)
            	HX_STACK_ARG(frame,"frame")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
HXLINE( 131)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = frame->parent;
HXLINE( 133)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(graphic,tileSize,null(),frame,tileSpacing,null());
HXLINE( 134)		Bool _hx_tmp = hx::IsNotNull( tileFrames );
HXDLIN( 134)		if (_hx_tmp) {
HXLINE( 135)			return tileFrames;
            		}
HXLINE( 138)		Bool _hx_tmp1 = hx::IsNotNull( tileSpacing );
HXDLIN( 138)		if (_hx_tmp1) {
HXLINE( 138)			tileSpacing = tileSpacing;
            		}
            		else {
HXLINE( 138)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 138)			point->_inPool = false;
HXDLIN( 138)			tileSpacing = point;
            		}
HXLINE( 140)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__new(graphic,null());
HXLINE( 141)		tileFrames->atlasFrame = frame;
HXLINE( 142)		tileFrames->region = frame->frame;
HXLINE( 143)		tileFrames->tileSize = tileSize;
HXLINE( 144)		tileFrames->tileSpacing = tileSpacing;
HXLINE( 146)		{
HXLINE( 146)			Int _hx_tmp2 = ::Math_obj::floor(tileSpacing->x);
HXDLIN( 146)			tileSpacing->set_x(_hx_tmp2);
HXDLIN( 146)			Int _hx_tmp3 = ::Math_obj::floor(tileSpacing->y);
HXDLIN( 146)			tileSpacing->set_y(_hx_tmp3);
            		}
HXLINE( 147)		{
HXLINE( 147)			Int _hx_tmp4 = ::Math_obj::floor(tileSize->x);
HXDLIN( 147)			tileSize->set_x(_hx_tmp4);
HXDLIN( 147)			Int _hx_tmp5 = ::Math_obj::floor(tileSize->y);
HXDLIN( 147)			tileSize->set_y(_hx_tmp5);
            		}
HXLINE( 149)		HX_VARI( Float,spacedWidth) = (tileSize->x + tileSpacing->x);
HXLINE( 150)		HX_VARI( Float,spacedHeight) = (tileSize->y + tileSpacing->y);
HXLINE( 152)		HX_VAR( Int,numRows);
HXDLIN( 152)		Bool _hx_tmp6 = (tileSize->y == (int)0);
HXDLIN( 152)		if (_hx_tmp6) {
HXLINE( 152)			numRows = (int)1;
            		}
            		else {
HXLINE( 152)			Float _hx_tmp7 = ((Float)(frame->sourceSize->y + tileSpacing->y) / (Float)spacedHeight);
HXDLIN( 152)			numRows = ::Std_obj::_hx_int(_hx_tmp7);
            		}
HXLINE( 153)		HX_VAR( Int,numCols);
HXDLIN( 153)		Bool _hx_tmp8 = (tileSize->x == (int)0);
HXDLIN( 153)		if (_hx_tmp8) {
HXLINE( 153)			numCols = (int)1;
            		}
            		else {
HXLINE( 153)			Float _hx_tmp9 = ((Float)(frame->sourceSize->x + tileSpacing->x) / (Float)spacedWidth);
HXDLIN( 153)			numCols = ::Std_obj::_hx_int(_hx_tmp9);
            		}
HXLINE( 155)		Float Width = tileSize->x;
HXDLIN( 155)		Float Height = tileSize->y;
HXDLIN( 155)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 155)		_this->x = (int)0;
HXDLIN( 155)		_this->y = (int)0;
HXDLIN( 155)		_this->width = Width;
HXDLIN( 155)		_this->height = Height;
HXDLIN( 155)		_this->_inPool = false;
HXLINE( 157)		{
HXLINE( 157)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 157)			HX_VARI( Int,_g) = numRows;
HXDLIN( 157)			while((_g1 < _g)){
HXLINE( 157)				HX_VARI( Int,j) = _g1++;
HXLINE( 159)				{
HXLINE( 159)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 159)					HX_VARI( Int,_g2) = numCols;
HXDLIN( 159)					while((_g3 < _g2)){
HXLINE( 159)						HX_VARI( Int,i) = _g3++;
HXLINE( 161)						_this->x = (spacedWidth * i);
HXLINE( 162)						_this->y = (spacedHeight * j);
HXLINE( 163)						 ::flixel::graphics::frames::FlxFrame _hx_tmp10 = frame->subFrameTo(_this,null());
HXDLIN( 163)						tileFrames->pushFrame(_hx_tmp10);
            					}
            				}
            			}
            		}
HXLINE( 167)		::flixel::util::FlxDestroyUtil_obj::put(_this);
HXLINE( 169)		tileFrames->numCols = numCols;
HXLINE( 170)		tileFrames->numRows = numRows;
HXLINE( 171)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxTileFrames_obj,fromFrame,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromFrames(::Array< ::Dynamic> Frames){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromFrames",0x14a7862f,"flixel.graphics.frames.FlxTileFrames.fromFrames","flixel/graphics/frames/FlxTileFrames.hx",183,0x562d6bb0)
            	HX_STACK_ARG(Frames,"Frames")
HXLINE( 184)		HX_VARI(  ::flixel::graphics::frames::FlxFrame,firstFrame) = Frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXLINE( 185)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = firstFrame->parent;
HXLINE( 187)		{
HXLINE( 187)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 187)			while((_g < Frames->length)){
HXLINE( 187)				HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = Frames->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 187)				++_g;
HXLINE( 189)				Bool _hx_tmp;
HXDLIN( 189)				if (hx::IsEq( frame->parent,firstFrame->parent )) {
HXLINE( 189)					HX_VARI(  ::flixel::math::FlxPoint,_this) = frame->sourceSize;
HXDLIN( 189)					HX_VARI(  ::flixel::math::FlxPoint,point) = firstFrame->sourceSize;
HXDLIN( 189)					HX_VAR( Bool,result);
HXDLIN( 189)					Float aValueA = _this->x;
HXDLIN( 189)					Float aValueB = point->x;
HXDLIN( 189)					Float _hx_tmp1 = ::Math_obj::abs((aValueA - aValueB));
HXDLIN( 189)					if ((_hx_tmp1 <= ((Float)0.0000001))) {
HXLINE( 189)						Float aValueA1 = _this->y;
HXDLIN( 189)						Float aValueB1 = point->y;
HXDLIN( 189)						Float _hx_tmp2 = ::Math_obj::abs((aValueA1 - aValueB1));
HXDLIN( 189)						result = (_hx_tmp2 <= ((Float)0.0000001));
            					}
            					else {
HXLINE( 189)						result = false;
            					}
HXDLIN( 189)					Bool _hx_tmp3 = point->_weak;
HXDLIN( 189)					if (_hx_tmp3) {
HXLINE( 189)						point->put();
            					}
HXDLIN( 189)					_hx_tmp = !(result);
            				}
            				else {
HXLINE( 189)					_hx_tmp = true;
            				}
HXDLIN( 189)				if (_hx_tmp) {
HXLINE( 192)					return null();
            				}
            			}
            		}
HXLINE( 196)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) =  ::flixel::graphics::frames::FlxTileFrames_obj::__new(graphic,null());
HXLINE( 198)		tileFrames->region = null();
HXLINE( 199)		tileFrames->atlasFrame = null();
HXLINE( 200)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 200)		point1->_inPool = false;
HXDLIN( 200)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = firstFrame->sourceSize;
HXDLIN( 200)		point1->set_x(point2->x);
HXDLIN( 200)		point1->set_y(point2->y);
HXDLIN( 200)		Bool _hx_tmp4 = point2->_weak;
HXDLIN( 200)		if (_hx_tmp4) {
HXLINE( 200)			point2->put();
            		}
HXDLIN( 200)		tileFrames->tileSize = point1;
HXLINE( 201)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 201)		point3->_inPool = false;
HXDLIN( 201)		tileFrames->tileSpacing = point3;
HXLINE( 202)		tileFrames->numCols = Frames->length;
HXLINE( 203)		tileFrames->numRows = (int)1;
HXLINE( 205)		{
HXLINE( 205)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 205)			while((_g1 < Frames->length)){
HXLINE( 205)				HX_VARI_NAME(  ::flixel::graphics::frames::FlxFrame,frame1,"frame") = Frames->__get(_g1).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 205)				++_g1;
HXLINE( 207)				tileFrames->frames->push(frame1);
HXLINE( 209)				Bool _hx_tmp5 = hx::IsNotNull( frame1->name );
HXDLIN( 209)				if (_hx_tmp5) {
HXLINE( 210)					tileFrames->framesHash->set(frame1->name,frame1);
            				}
            			}
            		}
HXLINE( 213)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxTileFrames_obj,fromFrames,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromAtlasByPrefix( ::flixel::graphics::frames::FlxAtlasFrames Frames,::String Prefix){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromAtlasByPrefix",0x9481e7cb,"flixel.graphics.frames.FlxTileFrames.fromAtlasByPrefix","flixel/graphics/frames/FlxTileFrames.hx",226,0x562d6bb0)
            	HX_STACK_ARG(Frames,"Frames")
            	HX_STACK_ARG(Prefix,"Prefix")
HXLINE( 227)		HX_VARI( ::Array< ::Dynamic>,framesToAdd) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 229)		{
HXLINE( 229)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 229)			HX_VARI( ::Array< ::Dynamic>,_g1) = Frames->frames;
HXDLIN( 229)			while((_g < _g1->length)){
HXLINE( 229)				HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = _g1->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 229)				++_g;
HXLINE( 231)				Bool _hx_tmp = ::StringTools_obj::startsWith(frame->name,Prefix);
HXDLIN( 231)				if (_hx_tmp) {
HXLINE( 232)					framesToAdd->push(frame);
            				}
            			}
            		}
HXLINE( 235)		Bool _hx_tmp1 = (framesToAdd->length > (int)0);
HXDLIN( 235)		if (_hx_tmp1) {
HXLINE( 237)			HX_VARI( ::String,name) = framesToAdd->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->name;
HXLINE( 238)			HX_VARI( Int,postIndex) = name.indexOf(HX_(".",2e,00,00,00),Prefix.length);
HXLINE( 239)			Int _hx_tmp2;
HXDLIN( 239)			if ((postIndex == (int)-1)) {
HXLINE( 239)				_hx_tmp2 = name.length;
            			}
            			else {
HXLINE( 239)				_hx_tmp2 = postIndex;
            			}
HXDLIN( 239)			HX_VARI( ::String,postFix) = name.substring(_hx_tmp2,name.length);
HXLINE( 241)			::flixel::graphics::frames::FlxFrame_obj::sort(framesToAdd,Prefix.length,postFix.length);
HXLINE( 242)			return ::flixel::graphics::frames::FlxTileFrames_obj::fromFrames(framesToAdd);
            		}
HXLINE( 245)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(FlxTileFrames_obj,fromAtlasByPrefix,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromGraphic( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::math::FlxPoint tileSpacing){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromGraphic",0x29813bff,"flixel.graphics.frames.FlxTileFrames.fromGraphic","flixel/graphics/frames/FlxTileFrames.hx",261,0x562d6bb0)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(region,"region")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
HXLINE( 263)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,tileFrames) = ::flixel::graphics::frames::FlxTileFrames_obj::findFrame(graphic,tileSize,region,null(),tileSpacing,null());
HXLINE( 264)		Bool _hx_tmp = hx::IsNotNull( tileFrames );
HXDLIN( 264)		if (_hx_tmp) {
HXLINE( 265)			return tileFrames;
            		}
HXLINE( 268)		Bool _hx_tmp1 = hx::IsNull( region );
HXDLIN( 268)		if (_hx_tmp1) {
HXLINE( 270)			Float Width = graphic->width;
HXDLIN( 270)			Float Height = graphic->height;
HXDLIN( 270)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 270)			_this->x = (int)0;
HXDLIN( 270)			_this->y = (int)0;
HXDLIN( 270)			_this->width = Width;
HXDLIN( 270)			_this->height = Height;
HXDLIN( 270)			_this->_inPool = false;
HXDLIN( 270)			region = _this;
            		}
            		else {
HXLINE( 274)			Bool _hx_tmp2 = (region->width == (int)0);
HXDLIN( 274)			if (_hx_tmp2) {
HXLINE( 275)				region->width = (graphic->width - region->x);
            			}
HXLINE( 277)			Bool _hx_tmp3 = (region->height == (int)0);
HXDLIN( 277)			if (_hx_tmp3) {
HXLINE( 278)				region->height = (graphic->height - region->y);
            			}
            		}
HXLINE( 281)		Bool _hx_tmp4 = hx::IsNotNull( tileSpacing );
HXDLIN( 281)		if (_hx_tmp4) {
HXLINE( 281)			tileSpacing = tileSpacing;
            		}
            		else {
HXLINE( 281)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 281)			point->_inPool = false;
HXDLIN( 281)			tileSpacing = point;
            		}
HXLINE( 283)		tileFrames =  ::flixel::graphics::frames::FlxTileFrames_obj::__new(graphic,null());
HXLINE( 284)		tileFrames->region = region;
HXLINE( 285)		tileFrames->atlasFrame = null();
HXLINE( 286)		tileFrames->tileSize = tileSize;
HXLINE( 287)		tileFrames->tileSpacing = tileSpacing;
HXLINE( 289)		{
HXLINE( 289)			region->x = ::Math_obj::floor(region->x);
HXDLIN( 289)			region->y = ::Math_obj::floor(region->y);
HXDLIN( 289)			region->width = ::Math_obj::floor(region->width);
HXDLIN( 289)			region->height = ::Math_obj::floor(region->height);
            		}
HXLINE( 290)		{
HXLINE( 290)			Int _hx_tmp5 = ::Math_obj::floor(tileSpacing->x);
HXDLIN( 290)			tileSpacing->set_x(_hx_tmp5);
HXDLIN( 290)			Int _hx_tmp6 = ::Math_obj::floor(tileSpacing->y);
HXDLIN( 290)			tileSpacing->set_y(_hx_tmp6);
            		}
HXLINE( 291)		{
HXLINE( 291)			Int _hx_tmp7 = ::Math_obj::floor(tileSize->x);
HXDLIN( 291)			tileSize->set_x(_hx_tmp7);
HXDLIN( 291)			Int _hx_tmp8 = ::Math_obj::floor(tileSize->y);
HXDLIN( 291)			tileSize->set_y(_hx_tmp8);
            		}
HXLINE( 293)		HX_VARI( Float,spacedWidth) = (tileSize->x + tileSpacing->x);
HXLINE( 294)		HX_VARI( Float,spacedHeight) = (tileSize->y + tileSpacing->y);
HXLINE( 296)		HX_VAR( Int,numRows);
HXDLIN( 296)		Bool _hx_tmp9 = (tileSize->y == (int)0);
HXDLIN( 296)		if (_hx_tmp9) {
HXLINE( 296)			numRows = (int)1;
            		}
            		else {
HXLINE( 296)			Float _hx_tmp10 = ((Float)(region->height + tileSpacing->y) / (Float)spacedHeight);
HXDLIN( 296)			numRows = ::Std_obj::_hx_int(_hx_tmp10);
            		}
HXLINE( 297)		HX_VAR( Int,numCols);
HXDLIN( 297)		Bool _hx_tmp11 = (tileSize->x == (int)0);
HXDLIN( 297)		if (_hx_tmp11) {
HXLINE( 297)			numCols = (int)1;
            		}
            		else {
HXLINE( 297)			Float _hx_tmp12 = ((Float)(region->width + tileSpacing->x) / (Float)spacedWidth);
HXDLIN( 297)			numCols = ::Std_obj::_hx_int(_hx_tmp12);
            		}
HXLINE( 301)		{
HXLINE( 301)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 301)			HX_VARI( Int,_g) = numRows;
HXDLIN( 301)			while((_g1 < _g)){
HXLINE( 301)				HX_VARI( Int,j) = _g1++;
HXLINE( 303)				{
HXLINE( 303)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 303)					HX_VARI( Int,_g2) = numCols;
HXDLIN( 303)					while((_g3 < _g2)){
HXLINE( 303)						HX_VARI( Int,i) = _g3++;
HXLINE( 305)						Float X = (region->x + (i * spacedWidth));
HXDLIN( 305)						Float Y = (region->y + (j * spacedHeight));
HXDLIN( 305)						Float Width1 = tileSize->x;
HXDLIN( 305)						Float Height1 = tileSize->y;
HXDLIN( 305)						HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 305)						_this1->x = X;
HXDLIN( 305)						_this1->y = Y;
HXDLIN( 305)						_this1->width = Width1;
HXDLIN( 305)						_this1->height = Height1;
HXDLIN( 305)						_this1->_inPool = false;
HXLINE( 306)						tileFrames->addSpriteSheetFrame(_this1);
            					}
            				}
            			}
            		}
HXLINE( 310)		tileFrames->numCols = numCols;
HXLINE( 311)		tileFrames->numRows = numRows;
HXLINE( 312)		return tileFrames;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromGraphic,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::fromRectangle( ::Dynamic source, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::math::FlxPoint tileSpacing){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","fromRectangle",0x8a32f946,"flixel.graphics.frames.FlxTileFrames.fromRectangle","flixel/graphics/frames/FlxTileFrames.hx",328,0x562d6bb0)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(region,"region")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
HXLINE( 329)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(source,false,null());
HXLINE( 330)		Bool _hx_tmp = hx::IsNull( graphic );
HXDLIN( 330)		if (_hx_tmp) {
HXLINE( 331)			return null();
            		}
HXLINE( 332)		return ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graphic,tileSize,region,tileSpacing);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,fromRectangle,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::combineTileSets(::Array< ::Dynamic> bitmaps, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxPoint spacing, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","combineTileSets",0x70f3189f,"flixel.graphics.frames.FlxTileFrames.combineTileSets","flixel/graphics/frames/FlxTileFrames.hx",357,0x562d6bb0)
            	HX_STACK_ARG(bitmaps,"bitmaps")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(spacing,"spacing")
            	HX_STACK_ARG(border,"border")
HXLINE( 358)		HX_VARI( ::Array< ::Dynamic>,framesCollections) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 360)		{
HXLINE( 360)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 360)			while((_g < bitmaps->length)){
HXLINE( 360)				HX_VARI(  ::openfl::display::BitmapData,bitmap) = bitmaps->__get(_g).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 360)				++_g;
HXLINE( 361)				 ::flixel::graphics::frames::FlxTileFrames _hx_tmp = ::flixel::graphics::frames::FlxTileFrames_obj::fromRectangle(bitmap,tileSize,null(),null());
HXDLIN( 361)				framesCollections->push(_hx_tmp);
            			}
            		}
HXLINE( 363)		return ::flixel::graphics::frames::FlxTileFrames_obj::combineTileFrames(framesCollections,spacing,border);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(FlxTileFrames_obj,combineTileSets,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::combineTileFrames(::Array< ::Dynamic> tileframes, ::flixel::math::FlxPoint spacing, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","combineTileFrames",0x23605534,"flixel.graphics.frames.FlxTileFrames.combineTileFrames","flixel/graphics/frames/FlxTileFrames.hx",386,0x562d6bb0)
            	HX_STACK_ARG(tileframes,"tileframes")
            	HX_STACK_ARG(spacing,"spacing")
            	HX_STACK_ARG(border,"border")
HXLINE( 388)		HX_VARI( Int,totalArea) = (int)0;
HXLINE( 389)		HX_VARI( Int,rows) = (int)0;
HXLINE( 390)		HX_VARI( Int,cols) = (int)0;
HXLINE( 392)		HX_VARI( Int,tileWidth) = ::Std_obj::_hx_int(tileframes->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >()->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x);
HXLINE( 393)		HX_VARI( Int,tileHeight) = ::Std_obj::_hx_int(tileframes->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >()->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->y);
HXLINE( 395)		HX_VARI( Int,spaceX) = (int)0;
HXLINE( 396)		HX_VARI( Int,spaceY) = (int)0;
HXLINE( 398)		Bool _hx_tmp = hx::IsNotNull( spacing );
HXDLIN( 398)		if (_hx_tmp) {
HXLINE( 400)			spaceX = ::Std_obj::_hx_int(spacing->x);
HXLINE( 401)			spaceY = ::Std_obj::_hx_int(spacing->y);
            		}
HXLINE( 404)		HX_VARI( Int,borderX) = (int)0;
HXLINE( 405)		HX_VARI( Int,borderY) = (int)0;
HXLINE( 407)		Bool _hx_tmp1 = hx::IsNotNull( border );
HXDLIN( 407)		if (_hx_tmp1) {
HXLINE( 409)			borderX = ::Std_obj::_hx_int(border->x);
HXLINE( 410)			borderY = ::Std_obj::_hx_int(border->y);
            		}
HXLINE( 413)		{
HXLINE( 413)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 413)			while((_g < tileframes->length)){
HXLINE( 413)				HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,collection) = tileframes->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 413)				++_g;
HXLINE( 415)				cols = collection->numCols;
HXLINE( 416)				rows = collection->numRows;
HXLINE( 417)				Int _hx_tmp2 = ::Std_obj::_hx_int((((cols * (tileWidth + ((int)2 * borderX))) * rows) * (tileHeight + ((int)2 * borderY))));
HXDLIN( 417)				hx::AddEq(totalArea,_hx_tmp2);
            			}
            		}
HXLINE( 420)		HX_VARI( Float,side) = ::Math_obj::sqrt(totalArea);
HXLINE( 421)		cols = ::Std_obj::_hx_int(((Float)side / (Float)(tileWidth + ((int)2 * borderX))));
HXLINE( 422)		rows = ::Math_obj::ceil(((Float)totalArea / (Float)((cols * (tileWidth + ((int)2 * borderX))) * (tileHeight + ((int)2 * borderY)))));
HXLINE( 423)		Int _hx_tmp3 = ::Std_obj::_hx_int((cols * (tileWidth + ((int)2 * borderX))));
HXDLIN( 423)		HX_VARI( Int,width) = (_hx_tmp3 + ((cols - (int)1) * spaceX));
HXLINE( 424)		Int _hx_tmp4 = ::Std_obj::_hx_int((rows * (tileHeight + ((int)2 * borderY))));
HXDLIN( 424)		HX_VARI( Int,height) = (_hx_tmp4 + ((rows - (int)1) * spaceY));
HXLINE( 427)		HX_VARI(  ::openfl::display::BitmapData,combined) =  ::openfl::display::BitmapData_obj::__new(width,height,true,(int)0);
HXLINE( 428)		HX_VARI(  ::flixel::graphics::FlxGraphic,graphic) = ::flixel::FlxG_obj::bitmap->add(combined,null(),null());
HXLINE( 429)		HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,result) =  ::flixel::graphics::frames::FlxTileFrames_obj::__new(graphic,null());
HXLINE( 430)		HX_VARI(  ::openfl::geom::Point,destPoint) =  ::openfl::geom::Point_obj::__new(borderX,borderY);
HXLINE( 432)		HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 432)		_this->x = (int)0;
HXDLIN( 432)		_this->y = (int)0;
HXDLIN( 432)		_this->width = width;
HXDLIN( 432)		_this->height = height;
HXDLIN( 432)		_this->_inPool = false;
HXDLIN( 432)		result->region = _this;
HXLINE( 433)		result->atlasFrame = null();
HXLINE( 434)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(tileWidth,tileHeight);
HXDLIN( 434)		point->_inPool = false;
HXDLIN( 434)		result->tileSize = point;
HXLINE( 435)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(spaceX,spaceY);
HXDLIN( 435)		point1->_inPool = false;
HXDLIN( 435)		result->tileSpacing = point1;
HXLINE( 436)		result->numCols = cols;
HXLINE( 437)		result->numRows = rows;
HXLINE( 439)		{
HXLINE( 439)			HX_VARI_NAME( Int,_g1,"_g") = (int)0;
HXDLIN( 439)			while((_g1 < tileframes->length)){
HXLINE( 439)				HX_VARI_NAME(  ::flixel::graphics::frames::FlxTileFrames,collection1,"collection") = tileframes->__get(_g1).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 439)				++_g1;
HXLINE( 441)				{
HXLINE( 441)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 441)					HX_VARI( ::Array< ::Dynamic>,_g2) = collection1->frames;
HXDLIN( 441)					while((_g11 < _g2->length)){
HXLINE( 441)						HX_VARI(  ::flixel::graphics::frames::FlxFrame,frame) = _g2->__get(_g11).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
HXDLIN( 441)						++_g11;
HXLINE( 443)						frame->paint(combined,destPoint,true,null());
HXLINE( 445)						Float X = destPoint->x;
HXDLIN( 445)						Float Y = destPoint->y;
HXDLIN( 445)						HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 445)						_this1->x = X;
HXDLIN( 445)						_this1->y = Y;
HXDLIN( 445)						_this1->width = tileWidth;
HXDLIN( 445)						_this1->height = tileHeight;
HXDLIN( 445)						_this1->_inPool = false;
HXLINE( 446)						HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set(tileWidth,tileHeight);
HXDLIN( 446)						point2->_inPool = false;
HXDLIN( 446)						HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 446)						point3->_inPool = false;
HXLINE( 445)						result->addAtlasFrame(_this1,point2,point3,null(),null(),null(),null());
HXLINE( 447)						hx::AddEq(destPoint->x,((tileWidth + ((int)2 * borderX)) + spaceX));
HXLINE( 449)						Bool _hx_tmp5 = (destPoint->x >= combined->width);
HXDLIN( 449)						if (_hx_tmp5) {
HXLINE( 451)							destPoint->x = borderX;
HXLINE( 452)							hx::AddEq(destPoint->y,((tileHeight + ((int)2 * borderY)) + spaceY));
            						}
            					}
            				}
            			}
            		}
HXLINE( 457)		::flixel::util::FlxBitmapDataUtil_obj::copyBorderPixels(combined,tileWidth,tileHeight,spaceX,spaceY,borderX,borderY,cols,rows);
HXLINE( 459)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(FlxTileFrames_obj,combineTileFrames,return )

 ::flixel::graphics::frames::FlxTileFrames FlxTileFrames_obj::findFrame( ::flixel::graphics::FlxGraphic graphic, ::flixel::math::FlxPoint tileSize, ::flixel::math::FlxRect region, ::flixel::graphics::frames::FlxFrame atlasFrame, ::flixel::math::FlxPoint tileSpacing, ::flixel::math::FlxPoint border){
            	HX_STACK_FRAME("flixel.graphics.frames.FlxTileFrames","findFrame",0xed9bcc95,"flixel.graphics.frames.FlxTileFrames.findFrame","flixel/graphics/frames/FlxTileFrames.hx",476,0x562d6bb0)
            	HX_STACK_ARG(graphic,"graphic")
            	HX_STACK_ARG(tileSize,"tileSize")
            	HX_STACK_ARG(region,"region")
            	HX_STACK_ARG(atlasFrame,"atlasFrame")
            	HX_STACK_ARG(tileSpacing,"tileSpacing")
            	HX_STACK_ARG(border,"border")
HXLINE( 477)		HX_VARI( ::hx::EnumBase,type) = ::flixel::graphics::frames::FlxFrameCollectionType_obj::TILES_dyn();
HXDLIN( 477)		HX_VARI( ::cpp::VirtualArray,collections) = ( (::cpp::VirtualArray)(graphic->frameCollections->get(type)) );
HXDLIN( 477)		Bool _hx_tmp = hx::IsNull( collections );
HXDLIN( 477)		if (_hx_tmp) {
HXLINE( 477)			collections = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 477)			graphic->frameCollections->set(type,collections);
            		}
HXDLIN( 477)		HX_VARI( ::Array< ::Dynamic>,tileFrames) = collections;
HXLINE( 479)		{
HXLINE( 479)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 479)			while((_g < tileFrames->length)){
HXLINE( 479)				HX_VARI(  ::flixel::graphics::frames::FlxTileFrames,sheet) = tileFrames->__get(_g).StaticCast<  ::flixel::graphics::frames::FlxTileFrames >();
HXDLIN( 479)				++_g;
HXLINE( 481)				Bool _hx_tmp1 = sheet->equals(tileSize,region,null(),tileSpacing,border);
HXDLIN( 481)				if (_hx_tmp1) {
HXLINE( 482)					return sheet;
            				}
            			}
            		}
HXLINE( 485)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxTileFrames_obj,findFrame,return )


FlxTileFrames_obj::FlxTileFrames_obj()
{
}

void FlxTileFrames_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTileFrames);
	HX_MARK_MEMBER_NAME(atlasFrame,"atlasFrame");
	HX_MARK_MEMBER_NAME(region,"region");
	HX_MARK_MEMBER_NAME(tileSize,"tileSize");
	HX_MARK_MEMBER_NAME(tileSpacing,"tileSpacing");
	HX_MARK_MEMBER_NAME(numRows,"numRows");
	HX_MARK_MEMBER_NAME(numCols,"numCols");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTileFrames_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(atlasFrame,"atlasFrame");
	HX_VISIT_MEMBER_NAME(region,"region");
	HX_VISIT_MEMBER_NAME(tileSize,"tileSize");
	HX_VISIT_MEMBER_NAME(tileSpacing,"tileSpacing");
	HX_VISIT_MEMBER_NAME(numRows,"numRows");
	HX_VISIT_MEMBER_NAME(numCols,"numCols");
	 ::flixel::graphics::frames::FlxFramesCollection_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTileFrames_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"region") ) { return hx::Val( region); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numRows") ) { return hx::Val( numRows); }
		if (HX_FIELD_EQ(inName,"numCols") ) { return hx::Val( numCols); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { return hx::Val( tileSize); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"addBorder") ) { return hx::Val( addBorder_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"atlasFrame") ) { return hx::Val( atlasFrame); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tileSpacing") ) { return hx::Val( tileSpacing); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getByTilePosition") ) { return hx::Val( getByTilePosition_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTileFrames_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromFrame") ) { outValue = fromFrame_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"findFrame") ) { outValue = findFrame_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromFrames") ) { outValue = fromFrames_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fromGraphic") ) { outValue = fromGraphic_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromRectangle") ) { outValue = fromRectangle_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"combineTileSets") ) { outValue = combineTileSets_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fromAtlasByPrefix") ) { outValue = fromAtlasByPrefix_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"combineTileFrames") ) { outValue = combineTileFrames_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"fromFrameAddSpacesAndBorders") ) { outValue = fromFrameAddSpacesAndBorders_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"fromBitmapAddSpacesAndBorders") ) { outValue = fromBitmapAddSpacesAndBorders_dyn(); return true; }
	}
	return false;
}

hx::Val FlxTileFrames_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"region") ) { region=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"numRows") ) { numRows=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numCols") ) { numCols=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tileSize") ) { tileSize=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"atlasFrame") ) { atlasFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"tileSpacing") ) { tileSpacing=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTileFrames_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("atlasFrame","\xe2","\x8a","\x40","\xe9"));
	outFields->push(HX_HCSTRING("region","\xf4","\xc0","\x8c","\x00"));
	outFields->push(HX_HCSTRING("tileSize","\x0f","\xc7","\x59","\x86"));
	outFields->push(HX_HCSTRING("tileSpacing","\xf5","\x71","\x1f","\x31"));
	outFields->push(HX_HCSTRING("numRows","\x7f","\x9a","\x2f","\x9f"));
	outFields->push(HX_HCSTRING("numCols","\x99","\x5d","\x45","\x95"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTileFrames_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxTileFrames_obj,atlasFrame),HX_HCSTRING("atlasFrame","\xe2","\x8a","\x40","\xe9")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxTileFrames_obj,region),HX_HCSTRING("region","\xf4","\xc0","\x8c","\x00")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTileFrames_obj,tileSize),HX_HCSTRING("tileSize","\x0f","\xc7","\x59","\x86")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTileFrames_obj,tileSpacing),HX_HCSTRING("tileSpacing","\xf5","\x71","\x1f","\x31")},
	{hx::fsInt,(int)offsetof(FlxTileFrames_obj,numRows),HX_HCSTRING("numRows","\x7f","\x9a","\x2f","\x9f")},
	{hx::fsInt,(int)offsetof(FlxTileFrames_obj,numCols),HX_HCSTRING("numCols","\x99","\x5d","\x45","\x95")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTileFrames_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTileFrames_obj_sMemberFields[] = {
	HX_HCSTRING("atlasFrame","\xe2","\x8a","\x40","\xe9"),
	HX_HCSTRING("region","\xf4","\xc0","\x8c","\x00"),
	HX_HCSTRING("tileSize","\x0f","\xc7","\x59","\x86"),
	HX_HCSTRING("tileSpacing","\xf5","\x71","\x1f","\x31"),
	HX_HCSTRING("numRows","\x7f","\x9a","\x2f","\x9f"),
	HX_HCSTRING("numCols","\x99","\x5d","\x45","\x95"),
	HX_HCSTRING("getByTilePosition","\xa4","\x3d","\x28","\x5c"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("addBorder","\xed","\x81","\x3e","\x1c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void FlxTileFrames_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTileFrames_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTileFrames_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTileFrames_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTileFrames_obj::__mClass;

static ::String FlxTileFrames_obj_sStaticFields[] = {
	HX_HCSTRING("fromBitmapAddSpacesAndBorders","\x05","\x1a","\xdd","\xf3"),
	HX_HCSTRING("fromFrameAddSpacesAndBorders","\xdb","\x16","\xd1","\xbd"),
	HX_HCSTRING("fromFrame","\x63","\x62","\x0c","\xbb"),
	HX_HCSTRING("fromFrames","\xb0","\xb4","\xc9","\xef"),
	HX_HCSTRING("fromAtlasByPrefix","\x6a","\xfb","\x8c","\x24"),
	HX_HCSTRING("fromGraphic","\x5e","\xbe","\x47","\x0c"),
	HX_HCSTRING("fromRectangle","\x65","\x11","\x66","\x8d"),
	HX_HCSTRING("combineTileSets","\x7e","\xb6","\x33","\xf9"),
	HX_HCSTRING("combineTileFrames","\xd3","\x68","\x6b","\xb3"),
	HX_HCSTRING("findFrame","\x34","\xa9","\x7a","\xf5"),
	::String(null())
};

void FlxTileFrames_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.graphics.frames.FlxTileFrames","\x8f","\xb0","\x85","\xcc");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTileFrames_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTileFrames_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxTileFrames_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTileFrames_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTileFrames_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTileFrames_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTileFrames_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTileFrames_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace graphics
} // end namespace frames
