// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxCallbackPoint
#include <flixel/math/FlxCallbackPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

namespace flixel{
namespace group{

void FlxTypedSpriteGroup_obj::__construct(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Int >  __o_MaxSize){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
Int MaxSize = __o_MaxSize.Default(0);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","new",0x9fa77753,"flixel.group.FlxTypedSpriteGroup.new","flixel/group/FlxSpriteGroup.hx",26,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(MaxSize,"MaxSize")
HXLINE(  52)		this->_skipTransformChildren = false;
HXLINE(  67)		super::__construct(X,Y,null());
HXLINE(  68)		this->group =  ::flixel::group::FlxTypedGroup_obj::__new(MaxSize);
HXLINE(  69)		this->_sprites = this->group->members;
            	}

Dynamic FlxTypedSpriteGroup_obj::__CreateEmpty() { return new FlxTypedSpriteGroup_obj; }

hx::ObjectPtr< FlxTypedSpriteGroup_obj > FlxTypedSpriteGroup_obj::__new(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y,hx::Null< Int >  __o_MaxSize)
{
	hx::ObjectPtr< FlxTypedSpriteGroup_obj > _hx_result = new FlxTypedSpriteGroup_obj();
	_hx_result->__construct(__o_X,__o_Y,__o_MaxSize);
	return _hx_result;
}

Dynamic FlxTypedSpriteGroup_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTypedSpriteGroup_obj > _hx_result = new FlxTypedSpriteGroup_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void FlxTypedSpriteGroup_obj::transformChildren_flixel_math_FlxRect( ::Dynamic Function, ::flixel::math::FlxRect Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_flixel_math_FlxRect",0x5a9c13e1,"flixel.group.FlxTypedSpriteGroup.transformChildren_flixel_math_FlxRect","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_flixel_math_FlxRect,(void))

void FlxTypedSpriteGroup_obj::transformChildren_openfl_display_BlendMode( ::Dynamic Function, ::Dynamic Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_openfl_display_BlendMode",0x546b9da9,"flixel.group.FlxTypedSpriteGroup.transformChildren_openfl_display_BlendMode","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_openfl_display_BlendMode,(void))

void FlxTypedSpriteGroup_obj::transformChildren_Int( ::Dynamic Function,Int Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_Int",0x8f3579ce,"flixel.group.FlxTypedSpriteGroup.transformChildren_Int","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_Int,(void))

void FlxTypedSpriteGroup_obj::transformChildren_Float( ::Dynamic Function,Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_Float",0x2758683b,"flixel.group.FlxTypedSpriteGroup.transformChildren_Float","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_Float,(void))

void FlxTypedSpriteGroup_obj::transformChildren_Bool( ::Dynamic Function,Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_Bool",0xbaf55a6b,"flixel.group.FlxTypedSpriteGroup.transformChildren_Bool","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_Bool,(void))

void FlxTypedSpriteGroup_obj::transformChildren_Array_flixel_FlxCamera( ::Dynamic Function,::Array< ::Dynamic> Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_Array_flixel_FlxCamera",0x8df728db,"flixel.group.FlxTypedSpriteGroup.transformChildren_Array_flixel_FlxCamera","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_Array_flixel_FlxCamera,(void))

void FlxTypedSpriteGroup_obj::multiTransformChildren_Float(::Array< ::Dynamic> FunctionArray,::Array< Float > ValueArray){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","multiTransformChildren_Float",0x31c44efc,"flixel.group.FlxTypedSpriteGroup.multiTransformChildren_Float","flixel/group/FlxSpriteGroup.hx",610,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(FunctionArray,"FunctionArray")
            	HX_STACK_ARG(ValueArray,"ValueArray")
HXLINE( 611)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 611)		if (_hx_tmp) {
HXLINE( 612)			return;
            		}
HXLINE( 614)		HX_VARI( Int,numProps) = FunctionArray->length;
HXLINE( 615)		if ((numProps > ValueArray->length)) {
HXLINE( 616)			return;
            		}
HXLINE( 618)		HX_VAR(  ::Dynamic,lambda);
HXLINE( 619)		{
HXLINE( 619)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 619)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 619)			while((_g < _g1->length)){
HXLINE( 619)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 619)				++_g;
HXLINE( 621)				Bool _hx_tmp1;
HXDLIN( 621)				Bool _hx_tmp2 = hx::IsNotNull( sprite );
HXDLIN( 621)				if (_hx_tmp2) {
HXLINE( 621)					_hx_tmp1 = sprite->exists;
            				}
            				else {
HXLINE( 621)					_hx_tmp1 = false;
            				}
HXDLIN( 621)				if (_hx_tmp1) {
HXLINE( 623)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 623)					while((_g3 < numProps)){
HXLINE( 623)						HX_VARI( Int,i) = _g3++;
HXLINE( 625)						lambda = FunctionArray->__get(i);
HXLINE( 626)						Float _hx_tmp3 = ValueArray->__get(i);
HXDLIN( 626)						lambda(sprite,_hx_tmp3);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,multiTransformChildren_Float,(void))

void FlxTypedSpriteGroup_obj::transformChildren_flixel_math_FlxPoint( ::Dynamic Function, ::flixel::math::FlxPoint Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","transformChildren_flixel_math_FlxPoint",0xcdc8d2f3,"flixel.group.FlxTypedSpriteGroup.transformChildren_flixel_math_FlxPoint","flixel/group/FlxSpriteGroup.hx",591,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Value,"Value")
HXLINE( 592)		Bool _hx_tmp = hx::IsNull( this->group );
HXDLIN( 592)		if (_hx_tmp) {
HXLINE( 593)			return;
            		}
HXLINE( 595)		{
HXLINE( 595)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 595)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 595)			while((_g < _g1->length)){
HXLINE( 595)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 595)				++_g;
HXLINE( 597)				Bool _hx_tmp1 = hx::IsNotNull( sprite );
HXDLIN( 597)				if (_hx_tmp1) {
HXLINE( 598)					Function(sprite,Value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,transformChildren_flixel_math_FlxPoint,(void))

void FlxTypedSpriteGroup_obj::initVars(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","initVars",0xad6ba309,"flixel.group.FlxTypedSpriteGroup.initVars","flixel/group/FlxSpriteGroup.hx",78,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE(  79)		this->flixelType = (int)4;
HXLINE(  81)		this->offset =  ::flixel::math::FlxCallbackPoint_obj::__new(this->offsetCallback_dyn(),null(),null());
HXLINE(  82)		this->origin =  ::flixel::math::FlxCallbackPoint_obj::__new(this->originCallback_dyn(),null(),null());
HXLINE(  83)		this->scale =  ::flixel::math::FlxCallbackPoint_obj::__new(this->scaleCallback_dyn(),null(),null());
HXLINE(  84)		this->scrollFactor =  ::flixel::math::FlxCallbackPoint_obj::__new(this->scrollFactorCallback_dyn(),null(),null());
HXLINE(  86)		this->scale->set((int)1,(int)1);
HXLINE(  87)		this->scrollFactor->set((int)1,(int)1);
HXLINE(  89)		{
HXLINE(  89)			HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  89)			point->_inPool = false;
HXDLIN(  89)			this->velocity = point;
HXDLIN(  89)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  89)			point1->_inPool = false;
HXDLIN(  89)			this->acceleration = point1;
HXDLIN(  89)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point2,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  89)			point2->_inPool = false;
HXDLIN(  89)			this->drag = point2;
HXDLIN(  89)			HX_VARI_NAME(  ::flixel::math::FlxPoint,point3,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)10000,(int)10000);
HXDLIN(  89)			point3->_inPool = false;
HXDLIN(  89)			this->maxVelocity = point3;
            		}
            	}


void FlxTypedSpriteGroup_obj::destroy(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","destroy",0xd803c96d,"flixel.group.FlxTypedSpriteGroup.destroy","flixel/group/FlxSpriteGroup.hx",99,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 101)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->offset)) );
HXLINE( 102)		this->origin = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->origin)) );
HXLINE( 103)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE( 104)		this->scrollFactor = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scrollFactor)) );
HXLINE( 106)		this->group = ( ( ::flixel::group::FlxTypedGroup)(::flixel::util::FlxDestroyUtil_obj::destroy(this->group)) );
HXLINE( 107)		this->_sprites = null();
HXLINE( 109)		this->super::destroy();
            	}


 ::flixel::FlxSprite FlxTypedSpriteGroup_obj::clone(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","clone",0x21249d10,"flixel.group.FlxTypedSpriteGroup.clone","flixel/group/FlxSpriteGroup.hx",118,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 119)		HX_VARI(  ::flixel::group::FlxTypedSpriteGroup,newGroup) =  ::flixel::group::FlxTypedSpriteGroup_obj::__new(this->x,this->y,this->group->maxSize);
HXLINE( 120)		{
HXLINE( 120)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 120)			HX_VARI( ::cpp::VirtualArray,_g1) = this->group->members;
HXDLIN( 120)			while((_g < _g1->get_length())){
HXLINE( 120)				HX_VARI(  ::Dynamic,sprite) = _g1->__get(_g);
HXDLIN( 120)				++_g;
HXLINE( 122)				Bool _hx_tmp = hx::IsNotNull( sprite );
HXDLIN( 122)				if (_hx_tmp) {
HXLINE( 124)					newGroup->add(( ( ::flixel::FlxSprite)(sprite) )->clone());
            				}
            			}
            		}
HXLINE( 127)		return newGroup;
            	}


Bool FlxTypedSpriteGroup_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","isOnScreen",0xe3a8b162,"flixel.group.FlxTypedSpriteGroup.isOnScreen","flixel/group/FlxSpriteGroup.hx",137,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 138)		{
HXLINE( 138)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 138)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 138)			while((_g < _g1->length)){
HXLINE( 138)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 138)				++_g;
HXLINE( 140)				Bool _hx_tmp;
HXDLIN( 140)				Bool _hx_tmp1;
HXDLIN( 140)				Bool _hx_tmp2;
HXDLIN( 140)				Bool _hx_tmp3 = hx::IsNotNull( sprite );
HXDLIN( 140)				if (_hx_tmp3) {
HXLINE( 140)					_hx_tmp2 = sprite->exists;
            				}
            				else {
HXLINE( 140)					_hx_tmp2 = false;
            				}
HXDLIN( 140)				if (_hx_tmp2) {
HXLINE( 140)					_hx_tmp1 = sprite->visible;
            				}
            				else {
HXLINE( 140)					_hx_tmp1 = false;
            				}
HXDLIN( 140)				if (_hx_tmp1) {
HXLINE( 140)					_hx_tmp = sprite->isOnScreen(Camera);
            				}
            				else {
HXLINE( 140)					_hx_tmp = false;
            				}
HXDLIN( 140)				if (_hx_tmp) {
HXLINE( 141)					return true;
            				}
            			}
            		}
HXLINE( 144)		return false;
            	}


Bool FlxTypedSpriteGroup_obj::overlapsPoint( ::flixel::math::FlxPoint point,hx::Null< Bool >  __o_InScreenSpace, ::flixel::FlxCamera Camera){
Bool InScreenSpace = __o_InScreenSpace.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","overlapsPoint",0xe77cba57,"flixel.group.FlxTypedSpriteGroup.overlapsPoint","flixel/group/FlxSpriteGroup.hx",156,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(InScreenSpace,"InScreenSpace")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 157)		HX_VARI( Bool,result) = false;
HXLINE( 158)		{
HXLINE( 158)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 158)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 158)			while((_g < _g1->length)){
HXLINE( 158)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 158)				++_g;
HXLINE( 160)				Bool _hx_tmp;
HXDLIN( 160)				Bool _hx_tmp1;
HXDLIN( 160)				Bool _hx_tmp2 = hx::IsNotNull( sprite );
HXDLIN( 160)				if (_hx_tmp2) {
HXLINE( 160)					_hx_tmp1 = sprite->exists;
            				}
            				else {
HXLINE( 160)					_hx_tmp1 = false;
            				}
HXDLIN( 160)				if (_hx_tmp1) {
HXLINE( 160)					_hx_tmp = sprite->visible;
            				}
            				else {
HXLINE( 160)					_hx_tmp = false;
            				}
HXDLIN( 160)				if (_hx_tmp) {
HXLINE( 162)					if (!(result)) {
HXLINE( 162)						result = sprite->overlapsPoint(point,InScreenSpace,Camera);
            					}
            					else {
HXLINE( 162)						result = true;
            					}
            				}
            			}
            		}
HXLINE( 166)		return result;
            	}


Bool FlxTypedSpriteGroup_obj::pixelsOverlapPoint( ::flixel::math::FlxPoint point,hx::Null< Int >  __o_Mask, ::flixel::FlxCamera Camera){
Int Mask = __o_Mask.Default(255);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","pixelsOverlapPoint",0xc3b2a483,"flixel.group.FlxTypedSpriteGroup.pixelsOverlapPoint","flixel/group/FlxSpriteGroup.hx",179,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
            	HX_STACK_ARG(Mask,"Mask")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 180)		HX_VARI( Bool,result) = false;
HXLINE( 181)		{
HXLINE( 181)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 181)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 181)			while((_g < _g1->length)){
HXLINE( 181)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 181)				++_g;
HXLINE( 183)				Bool _hx_tmp;
HXDLIN( 183)				Bool _hx_tmp1;
HXDLIN( 183)				Bool _hx_tmp2 = hx::IsNotNull( sprite );
HXDLIN( 183)				if (_hx_tmp2) {
HXLINE( 183)					_hx_tmp1 = sprite->exists;
            				}
            				else {
HXLINE( 183)					_hx_tmp1 = false;
            				}
HXDLIN( 183)				if (_hx_tmp1) {
HXLINE( 183)					_hx_tmp = sprite->visible;
            				}
            				else {
HXLINE( 183)					_hx_tmp = false;
            				}
HXDLIN( 183)				if (_hx_tmp) {
HXLINE( 185)					if (!(result)) {
HXLINE( 185)						result = sprite->pixelsOverlapPoint(point,Mask,Camera);
            					}
            					else {
HXLINE( 185)						result = true;
            					}
            				}
            			}
            		}
HXLINE( 189)		return result;
            	}


void FlxTypedSpriteGroup_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","update",0x579c78f6,"flixel.group.FlxTypedSpriteGroup.update","flixel/group/FlxSpriteGroup.hx",193,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 194)		this->group->update(elapsed);
HXLINE( 196)		Bool _hx_tmp = this->moves;
HXDLIN( 196)		if (_hx_tmp) {
HXLINE( 197)			this->updateMotion(elapsed);
            		}
            	}


void FlxTypedSpriteGroup_obj::draw(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","draw",0x0c4e99b1,"flixel.group.FlxTypedSpriteGroup.draw","flixel/group/FlxSpriteGroup.hx",202,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 202)		this->group->draw();
            	}


::Array< ::Dynamic> FlxTypedSpriteGroup_obj::replaceColor(Int _tmp_Color,Int _tmp_NewColor,hx::Null< Bool >  __o_FetchPositions){
Bool FetchPositions = __o_FetchPositions.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","replaceColor",0x6ca2bf3c,"flixel.group.FlxTypedSpriteGroup.replaceColor","flixel/group/FlxSpriteGroup.hx",220,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_Color,"_tmp_Color")
            	HX_STACK_ARG(_tmp_NewColor,"_tmp_NewColor")
            	HX_STACK_ARG(FetchPositions,"FetchPositions")
HXLINE( 221)		HX_VARI( Int,Color) = _tmp_Color;
HXDLIN( 221)		HX_VARI( Int,NewColor) = _tmp_NewColor;
HXDLIN( 221)		HX_VARI( ::Array< ::Dynamic>,positions) = null();
HXLINE( 222)		if (FetchPositions) {
HXLINE( 224)			positions = ::Array_obj< ::Dynamic>::__new();
            		}
HXLINE( 227)		HX_VAR( ::Array< ::Dynamic>,spritePositions);
HXLINE( 228)		{
HXLINE( 228)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 228)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 228)			while((_g < _g1->length)){
HXLINE( 228)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 228)				++_g;
HXLINE( 230)				Bool _hx_tmp = hx::IsNotNull( sprite );
HXDLIN( 230)				if (_hx_tmp) {
HXLINE( 232)					spritePositions = sprite->replaceColor(Color,NewColor,FetchPositions);
HXLINE( 233)					if (FetchPositions) {
HXLINE( 235)						positions = positions->concat(spritePositions);
            					}
            				}
            			}
            		}
HXLINE( 240)		return positions;
            	}


 ::Dynamic FlxTypedSpriteGroup_obj::add( ::Dynamic Sprite){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","add",0x9f9d9914,"flixel.group.FlxTypedSpriteGroup.add","flixel/group/FlxSpriteGroup.hx",250,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
HXLINE( 251)		this->preAdd(Sprite);
HXLINE( 252)		return this->group->add(Sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,add,return )

 ::Dynamic FlxTypedSpriteGroup_obj::insert(Int Position, ::Dynamic Sprite){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","insert",0x6e743626,"flixel.group.FlxTypedSpriteGroup.insert","flixel/group/FlxSpriteGroup.hx",265,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Position,"Position")
            	HX_STACK_ARG(Sprite,"Sprite")
HXLINE( 266)		this->preAdd(Sprite);
HXLINE( 267)		return this->group->insert(Position,Sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,insert,return )

void FlxTypedSpriteGroup_obj::preAdd( ::Dynamic Sprite){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","preAdd",0x7f31b4ab,"flixel.group.FlxTypedSpriteGroup.preAdd","flixel/group/FlxSpriteGroup.hx",277,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
HXLINE( 278)		HX_VARI(  ::flixel::FlxSprite,sprite) = ( ( ::flixel::FlxSprite)(Sprite) );
HXLINE( 279)		{
HXLINE( 279)			Float _hx_tmp = (sprite->x + this->x);
HXDLIN( 279)			sprite->set_x(_hx_tmp);
            		}
HXLINE( 280)		{
HXLINE( 280)			Float _hx_tmp1 = (sprite->y + this->y);
HXDLIN( 280)			sprite->set_y(_hx_tmp1);
            		}
HXLINE( 281)		{
HXLINE( 281)			Float _hx_tmp2 = (sprite->alpha * this->alpha);
HXDLIN( 281)			sprite->set_alpha(_hx_tmp2);
            		}
HXLINE( 282)		{
HXLINE( 282)			HX_VARI(  ::flixel::math::FlxPoint,_this) = sprite->scrollFactor;
HXDLIN( 282)			HX_VARI(  ::flixel::math::FlxPoint,point) = this->scrollFactor;
HXDLIN( 282)			_this->set_x(point->x);
HXDLIN( 282)			_this->set_y(point->y);
HXDLIN( 282)			Bool _hx_tmp3 = point->_weak;
HXDLIN( 282)			if (_hx_tmp3) {
HXLINE( 282)				point->put();
            			}
            		}
HXLINE( 283)		sprite->set_cameras(this->_cameras);
HXLINE( 285)		Bool _hx_tmp4 = hx::IsNotNull( this->clipRect );
HXDLIN( 285)		if (_hx_tmp4) {
HXLINE( 285)			HX_VARI(  ::flixel::math::FlxRect,ClipRect) = this->clipRect;
HXDLIN( 285)			Bool _hx_tmp5 = hx::IsNull( ClipRect );
HXDLIN( 285)			if (_hx_tmp5) {
HXLINE( 285)				sprite->set_clipRect(null());
            			}
            			else {
HXLINE( 285)				Float X = ((ClipRect->x - sprite->x) + this->x);
HXDLIN( 285)				Float Y = ((ClipRect->y - sprite->y) + this->y);
HXDLIN( 285)				Float Width = ClipRect->width;
HXDLIN( 285)				Float Height = ClipRect->height;
HXDLIN( 285)				HX_VARI_NAME(  ::flixel::math::FlxRect,_this1,"_this") = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 285)				_this1->x = X;
HXDLIN( 285)				_this1->y = Y;
HXDLIN( 285)				_this1->width = Width;
HXDLIN( 285)				_this1->height = Height;
HXDLIN( 285)				_this1->_inPool = false;
HXDLIN( 285)				sprite->set_clipRect(_this1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,preAdd,(void))

 ::Dynamic FlxTypedSpriteGroup_obj::recycle(hx::Class ObjectClass, ::Dynamic ObjectFactory,hx::Null< Bool >  __o_Force){
Bool Force = __o_Force.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","recycle",0xeb09ac86,"flixel.group.FlxTypedSpriteGroup.recycle","flixel/group/FlxSpriteGroup.hx",315,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(ObjectFactory,"ObjectFactory")
            	HX_STACK_ARG(Force,"Force")
HXLINE( 315)		return this->group->recycle(ObjectClass,ObjectFactory,Force,null());
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedSpriteGroup_obj,recycle,return )

 ::Dynamic FlxTypedSpriteGroup_obj::remove( ::Dynamic Sprite,hx::Null< Bool >  __o_Splice){
Bool Splice = __o_Splice.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","remove",0xd51f8f31,"flixel.group.FlxTypedSpriteGroup.remove","flixel/group/FlxSpriteGroup.hx",326,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Splice,"Splice")
HXLINE( 327)		HX_VARI(  ::flixel::FlxSprite,sprite) = ( ( ::flixel::FlxSprite)(Sprite) );
HXLINE( 328)		{
HXLINE( 328)			Float _hx_tmp = (sprite->x - this->x);
HXDLIN( 328)			sprite->set_x(_hx_tmp);
            		}
HXLINE( 329)		{
HXLINE( 329)			Float _hx_tmp1 = (sprite->y - this->y);
HXDLIN( 329)			sprite->set_y(_hx_tmp1);
            		}
HXLINE( 331)		sprite->set_cameras(null());
HXLINE( 332)		return this->group->remove(Sprite,Splice);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,remove,return )

 ::Dynamic FlxTypedSpriteGroup_obj::replace( ::Dynamic OldObject, ::Dynamic NewObject){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","replace",0x5ea5e4a7,"flixel.group.FlxTypedSpriteGroup.replace","flixel/group/FlxSpriteGroup.hx",344,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(OldObject,"OldObject")
            	HX_STACK_ARG(NewObject,"NewObject")
HXLINE( 344)		return this->group->replace(OldObject,NewObject);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,replace,return )

void FlxTypedSpriteGroup_obj::sort( ::Dynamic Function,hx::Null< Int >  __o_Order){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::Dynamic,f,Int,a1) HXARGC(2)
            		Int _hx_run( ::Dynamic a2, ::Dynamic a3){
            			HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","sort",0x1636950b,"flixel.group.FlxTypedSpriteGroup.sort","flixel/group/FlxSpriteGroup.hx",359,0xeb1fa7f3)
            			HX_STACK_ARG(a2,"a2")
            			HX_STACK_ARG(a3,"a3")
HXLINE( 359)			return ( (Int)(f(a1,a2,a3)) );
            		}
            		HX_END_LOCAL_FUNC2(return)

Int Order = __o_Order.Default(-1);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","sort",0x1636950b,"flixel.group.FlxTypedSpriteGroup.sort","flixel/group/FlxSpriteGroup.hx",359,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Order,"Order")
HXLINE( 359)		 ::Dynamic f = Function;
HXDLIN( 359)		Int a1 = Order;
HXDLIN( 359)		 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(f,a1));
HXDLIN( 359)		this->group->members->sort(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,sort,(void))

 ::Dynamic FlxTypedSpriteGroup_obj::getFirstAvailable(hx::Class ObjectClass,hx::Null< Bool >  __o_Force){
Bool Force = __o_Force.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","getFirstAvailable",0x44b6b4e2,"flixel.group.FlxTypedSpriteGroup.getFirstAvailable","flixel/group/FlxSpriteGroup.hx",373,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(Force,"Force")
HXLINE( 373)		return this->group->getFirstAvailable(ObjectClass,Force);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,getFirstAvailable,return )

Int FlxTypedSpriteGroup_obj::getFirstNull(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","getFirstNull",0x3deb1a0e,"flixel.group.FlxTypedSpriteGroup.getFirstNull","flixel/group/FlxSpriteGroup.hx",384,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 384)		return this->group->getFirstNull();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,getFirstNull,return )

 ::Dynamic FlxTypedSpriteGroup_obj::getFirstExisting(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","getFirstExisting",0x25cf6192,"flixel.group.FlxTypedSpriteGroup.getFirstExisting","flixel/group/FlxSpriteGroup.hx",395,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 395)		return this->group->getFirstExisting();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,getFirstExisting,return )

 ::Dynamic FlxTypedSpriteGroup_obj::getFirstAlive(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","getFirstAlive",0x6da0fe66,"flixel.group.FlxTypedSpriteGroup.getFirstAlive","flixel/group/FlxSpriteGroup.hx",406,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 406)		return this->group->getFirstAlive();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,getFirstAlive,return )

 ::Dynamic FlxTypedSpriteGroup_obj::getFirstDead(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","getFirstDead",0x3742ca2b,"flixel.group.FlxTypedSpriteGroup.getFirstDead","flixel/group/FlxSpriteGroup.hx",417,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 417)		return this->group->getFirstDead();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,getFirstDead,return )

Int FlxTypedSpriteGroup_obj::countLiving(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","countLiving",0xa01b2b4b,"flixel.group.FlxTypedSpriteGroup.countLiving","flixel/group/FlxSpriteGroup.hx",427,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 427)		return this->group->countLiving();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,countLiving,return )

Int FlxTypedSpriteGroup_obj::countDead(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","countDead",0x17fab246,"flixel.group.FlxTypedSpriteGroup.countDead","flixel/group/FlxSpriteGroup.hx",437,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 437)		return this->group->countDead();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,countDead,return )

 ::Dynamic FlxTypedSpriteGroup_obj::getRandom(hx::Null< Int >  __o_StartIndex,hx::Null< Int >  __o_Length){
Int StartIndex = __o_StartIndex.Default(0);
Int Length = __o_Length.Default(0);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","getRandom",0xf7598a6c,"flixel.group.FlxTypedSpriteGroup.getRandom","flixel/group/FlxSpriteGroup.hx",450,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(StartIndex,"StartIndex")
            	HX_STACK_ARG(Length,"Length")
HXLINE( 450)		return this->group->getRandom(StartIndex,Length);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,getRandom,return )

 ::flixel::group::FlxTypedGroupIterator FlxTypedSpriteGroup_obj::iterator( ::Dynamic filter){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","iterator",0xee05921b,"flixel.group.FlxTypedSpriteGroup.iterator","flixel/group/FlxSpriteGroup.hx",460,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
HXLINE( 460)		return  ::flixel::group::FlxTypedGroupIterator_obj::__new(this->group->members,filter);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,iterator,return )

void FlxTypedSpriteGroup_obj::forEach( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","forEach",0x783bc61d,"flixel.group.FlxTypedSpriteGroup.forEach","flixel/group/FlxSpriteGroup.hx",471,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 471)		this->group->forEach(Function,Recurse);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,forEach,(void))

void FlxTypedSpriteGroup_obj::forEachAlive( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","forEachAlive",0xc86ec470,"flixel.group.FlxTypedSpriteGroup.forEachAlive","flixel/group/FlxSpriteGroup.hx",482,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 482)		this->group->forEachAlive(Function,Recurse);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,forEachAlive,(void))

void FlxTypedSpriteGroup_obj::forEachDead( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","forEachDead",0xe8751361,"flixel.group.FlxTypedSpriteGroup.forEachDead","flixel/group/FlxSpriteGroup.hx",493,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 493)		this->group->forEachDead(Function,Recurse);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,forEachDead,(void))

void FlxTypedSpriteGroup_obj::forEachExists( ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","forEachExists",0x1ab74bd9,"flixel.group.FlxTypedSpriteGroup.forEachExists","flixel/group/FlxSpriteGroup.hx",504,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 504)		this->group->forEachExists(Function,Recurse);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,forEachExists,(void))

void FlxTypedSpriteGroup_obj::forEachOfType(hx::Class ObjectClass, ::Dynamic Function,hx::Null< Bool >  __o_Recurse){
Bool Recurse = __o_Recurse.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","forEachOfType",0xaf35856e,"flixel.group.FlxTypedSpriteGroup.forEachOfType","flixel/group/FlxSpriteGroup.hx",516,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ObjectClass,"ObjectClass")
            	HX_STACK_ARG(Function,"Function")
            	HX_STACK_ARG(Recurse,"Recurse")
HXLINE( 516)		this->group->forEachOfType(ObjectClass,Function,Recurse);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTypedSpriteGroup_obj,forEachOfType,(void))

void FlxTypedSpriteGroup_obj::clear(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","clear",0x211cfb40,"flixel.group.FlxTypedSpriteGroup.clear","flixel/group/FlxSpriteGroup.hx",525,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 525)		this->group->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,clear,(void))

void FlxTypedSpriteGroup_obj::kill(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","kill",0x10e84d4b,"flixel.group.FlxTypedSpriteGroup.kill","flixel/group/FlxSpriteGroup.hx",533,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 534)		this->super::kill();
HXLINE( 535)		this->group->kill();
            	}


void FlxTypedSpriteGroup_obj::revive(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","revive",0xdb0ded42,"flixel.group.FlxTypedSpriteGroup.revive","flixel/group/FlxSpriteGroup.hx",542,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 543)		this->super::revive();
HXLINE( 544)		this->group->revive();
            	}


void FlxTypedSpriteGroup_obj::reset(Float X,Float Y){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","reset",0xbf89d382,"flixel.group.FlxTypedSpriteGroup.reset","flixel/group/FlxSpriteGroup.hx",548,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 549)		this->revive();
HXLINE( 550)		this->setPosition(X,Y);
HXLINE( 552)		{
HXLINE( 552)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 552)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 552)			while((_g < _g1->length)){
HXLINE( 552)				HX_VARI(  ::flixel::FlxSprite,sprite) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 552)				++_g;
HXLINE( 554)				Bool _hx_tmp = hx::IsNotNull( sprite );
HXDLIN( 554)				if (_hx_tmp) {
HXLINE( 556)					sprite->reset(X,Y);
            				}
            			}
            		}
            	}


void FlxTypedSpriteGroup_obj::setPosition(hx::Null< Float >  __o_X,hx::Null< Float >  __o_Y){
Float X = __o_X.Default(0);
Float Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","setPosition",0x6aebbc5e,"flixel.group.FlxTypedSpriteGroup.setPosition","flixel/group/FlxSpriteGroup.hx",569,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 571)		HX_VARI( Float,dx) = (X - this->x);
HXLINE( 572)		HX_VARI( Float,dy) = (Y - this->y);
HXLINE( 573)		this->multiTransformChildren_Float(::Array_obj< ::Dynamic>::__new(2)->init(0,this->xTransform_dyn())->init(1,this->yTransform_dyn()),::Array_obj< Float >::__new(2)->init(0,dx)->init(1,dy));
HXLINE( 576)		this->_skipTransformChildren = true;
HXLINE( 577)		this->set_x(X);
HXLINE( 578)		this->set_y(Y);
HXLINE( 579)		this->_skipTransformChildren = false;
            	}


::Array< ::Dynamic> FlxTypedSpriteGroup_obj::set_cameras(::Array< ::Dynamic> Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_cameras",0xe3294344,"flixel.group.FlxTypedSpriteGroup.set_cameras","flixel/group/FlxSpriteGroup.hx",635,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 636)		::Array< ::Dynamic> _hx_tmp = this->get_cameras();
HXDLIN( 636)		if (hx::IsNotEq( _hx_tmp,Value )) {
HXLINE( 637)			this->transformChildren_Array_flixel_FlxCamera(this->camerasTransform_dyn(),Value);
            		}
HXLINE( 638)		return this->super::set_cameras(Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_exists(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_exists",0xf5d49986,"flixel.group.FlxTypedSpriteGroup.set_exists","flixel/group/FlxSpriteGroup.hx",642,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 643)		Bool _hx_tmp = (this->exists != Value);
HXDLIN( 643)		if (_hx_tmp) {
HXLINE( 644)			this->transformChildren_Bool(this->existsTransform_dyn(),Value);
            		}
HXLINE( 645)		return this->super::set_exists(Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_visible(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_visible",0xa31c3188,"flixel.group.FlxTypedSpriteGroup.set_visible","flixel/group/FlxSpriteGroup.hx",649,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 650)		Bool _hx_tmp;
HXDLIN( 650)		if (this->exists) {
HXLINE( 650)			_hx_tmp = (this->visible != Value);
            		}
            		else {
HXLINE( 650)			_hx_tmp = false;
            		}
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 651)			this->transformChildren_Bool(this->visibleTransform_dyn(),Value);
            		}
HXLINE( 652)		return this->super::set_visible(Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_active(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_active",0x4c3abd70,"flixel.group.FlxTypedSpriteGroup.set_active","flixel/group/FlxSpriteGroup.hx",656,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 657)		Bool _hx_tmp;
HXDLIN( 657)		if (this->exists) {
HXLINE( 657)			_hx_tmp = (this->active != Value);
            		}
            		else {
HXLINE( 657)			_hx_tmp = false;
            		}
HXDLIN( 657)		if (_hx_tmp) {
HXLINE( 658)			this->transformChildren_Bool(this->activeTransform_dyn(),Value);
            		}
HXLINE( 659)		return this->super::set_active(Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_alive(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_alive",0x0bff8b63,"flixel.group.FlxTypedSpriteGroup.set_alive","flixel/group/FlxSpriteGroup.hx",663,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 664)		Bool _hx_tmp = (this->alive != Value);
HXDLIN( 664)		if (_hx_tmp) {
HXLINE( 665)			this->transformChildren_Bool(this->aliveTransform_dyn(),Value);
            		}
HXLINE( 666)		return this->super::set_alive(Value);
            	}


Float FlxTypedSpriteGroup_obj::set_x(Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_x",0x52f1250e,"flixel.group.FlxTypedSpriteGroup.set_x","flixel/group/FlxSpriteGroup.hx",670,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 671)		Bool _hx_tmp;
HXDLIN( 671)		Bool _hx_tmp1;
HXDLIN( 671)		if (!(this->_skipTransformChildren)) {
HXLINE( 671)			_hx_tmp1 = this->exists;
            		}
            		else {
HXLINE( 671)			_hx_tmp1 = false;
            		}
HXDLIN( 671)		if (_hx_tmp1) {
HXLINE( 671)			_hx_tmp = (this->x != Value);
            		}
            		else {
HXLINE( 671)			_hx_tmp = false;
            		}
HXDLIN( 671)		if (_hx_tmp) {
HXLINE( 673)			HX_VARI( Float,offset) = (Value - this->x);
HXLINE( 674)			this->transformChildren_Float(this->xTransform_dyn(),offset);
            		}
HXLINE( 677)		return (this->x = Value);
            	}


Float FlxTypedSpriteGroup_obj::set_y(Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_y",0x52f1250f,"flixel.group.FlxTypedSpriteGroup.set_y","flixel/group/FlxSpriteGroup.hx",681,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 682)		Bool _hx_tmp;
HXDLIN( 682)		Bool _hx_tmp1;
HXDLIN( 682)		if (!(this->_skipTransformChildren)) {
HXLINE( 682)			_hx_tmp1 = this->exists;
            		}
            		else {
HXLINE( 682)			_hx_tmp1 = false;
            		}
HXDLIN( 682)		if (_hx_tmp1) {
HXLINE( 682)			_hx_tmp = (this->y != Value);
            		}
            		else {
HXLINE( 682)			_hx_tmp = false;
            		}
HXDLIN( 682)		if (_hx_tmp) {
HXLINE( 684)			HX_VARI( Float,offset) = (Value - this->y);
HXLINE( 685)			this->transformChildren_Float(this->yTransform_dyn(),offset);
            		}
HXLINE( 688)		return (this->y = Value);
            	}


Float FlxTypedSpriteGroup_obj::set_angle(Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_angle",0x0d506b69,"flixel.group.FlxTypedSpriteGroup.set_angle","flixel/group/FlxSpriteGroup.hx",692,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 693)		Bool _hx_tmp;
HXDLIN( 693)		if (this->exists) {
HXLINE( 693)			_hx_tmp = (this->angle != Value);
            		}
            		else {
HXLINE( 693)			_hx_tmp = false;
            		}
HXDLIN( 693)		if (_hx_tmp) {
HXLINE( 695)			HX_VARI( Float,offset) = (Value - this->angle);
HXLINE( 696)			this->transformChildren_Float(this->angleTransform_dyn(),offset);
            		}
HXLINE( 698)		return (this->angle = Value);
            	}


Float FlxTypedSpriteGroup_obj::set_alpha(Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_alpha",0x0c04cef4,"flixel.group.FlxTypedSpriteGroup.set_alpha","flixel/group/FlxSpriteGroup.hx",702,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 703)		HX_VAR( Float,lowerBound);
HXDLIN( 703)		if ((Value < (int)0)) {
HXLINE( 703)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 703)			lowerBound = Value;
            		}
HXDLIN( 703)		 ::Dynamic _hx_tmp;
HXDLIN( 703)		if ((lowerBound > (int)1)) {
HXLINE( 703)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE( 703)			_hx_tmp = lowerBound;
            		}
HXDLIN( 703)		Value = _hx_tmp;
HXLINE( 705)		Bool _hx_tmp1;
HXDLIN( 705)		if (this->exists) {
HXLINE( 705)			_hx_tmp1 = (this->alpha != Value);
            		}
            		else {
HXLINE( 705)			_hx_tmp1 = false;
            		}
HXDLIN( 705)		if (_hx_tmp1) {
HXLINE( 707)			HX_VAR( Float,factor);
HXDLIN( 707)			if ((this->alpha > (int)0)) {
HXLINE( 707)				factor = ((Float)Value / (Float)this->alpha);
            			}
            			else {
HXLINE( 707)				factor = (int)0;
            			}
HXLINE( 708)			this->transformChildren_Float(this->alphaTransform_dyn(),factor);
            		}
HXLINE( 710)		return (this->alpha = Value);
            	}


Int FlxTypedSpriteGroup_obj::set_facing(Int Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_facing",0x19f9bac4,"flixel.group.FlxTypedSpriteGroup.set_facing","flixel/group/FlxSpriteGroup.hx",714,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 715)		Bool _hx_tmp;
HXDLIN( 715)		if (this->exists) {
HXLINE( 715)			_hx_tmp = (this->facing != Value);
            		}
            		else {
HXLINE( 715)			_hx_tmp = false;
            		}
HXDLIN( 715)		if (_hx_tmp) {
HXLINE( 716)			this->transformChildren_Int(this->facingTransform_dyn(),Value);
            		}
HXLINE( 717)		return (this->facing = Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_flipX(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_flipX",0xed006ca1,"flixel.group.FlxTypedSpriteGroup.set_flipX","flixel/group/FlxSpriteGroup.hx",721,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 722)		Bool _hx_tmp;
HXDLIN( 722)		if (this->exists) {
HXLINE( 722)			_hx_tmp = (this->flipX != Value);
            		}
            		else {
HXLINE( 722)			_hx_tmp = false;
            		}
HXDLIN( 722)		if (_hx_tmp) {
HXLINE( 723)			this->transformChildren_Bool(this->flipXTransform_dyn(),Value);
            		}
HXLINE( 724)		return (this->flipX = Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_flipY(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_flipY",0xed006ca2,"flixel.group.FlxTypedSpriteGroup.set_flipY","flixel/group/FlxSpriteGroup.hx",728,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 729)		Bool _hx_tmp;
HXDLIN( 729)		if (this->exists) {
HXLINE( 729)			_hx_tmp = (this->flipY != Value);
            		}
            		else {
HXLINE( 729)			_hx_tmp = false;
            		}
HXDLIN( 729)		if (_hx_tmp) {
HXLINE( 730)			this->transformChildren_Bool(this->flipYTransform_dyn(),Value);
            		}
HXLINE( 731)		return (this->flipY = Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_moves(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_moves",0xf6d3f3d8,"flixel.group.FlxTypedSpriteGroup.set_moves","flixel/group/FlxSpriteGroup.hx",735,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 736)		Bool _hx_tmp;
HXDLIN( 736)		if (this->exists) {
HXLINE( 736)			_hx_tmp = (this->moves != Value);
            		}
            		else {
HXLINE( 736)			_hx_tmp = false;
            		}
HXDLIN( 736)		if (_hx_tmp) {
HXLINE( 737)			this->transformChildren_Bool(this->movesTransform_dyn(),Value);
            		}
HXLINE( 738)		return (this->moves = Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_immovable(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_immovable",0xdf98d1a0,"flixel.group.FlxTypedSpriteGroup.set_immovable","flixel/group/FlxSpriteGroup.hx",742,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 743)		Bool _hx_tmp;
HXDLIN( 743)		if (this->exists) {
HXLINE( 743)			_hx_tmp = (this->immovable != Value);
            		}
            		else {
HXLINE( 743)			_hx_tmp = false;
            		}
HXDLIN( 743)		if (_hx_tmp) {
HXLINE( 744)			this->transformChildren_Bool(this->immovableTransform_dyn(),Value);
            		}
HXLINE( 745)		return (this->immovable = Value);
            	}


Bool FlxTypedSpriteGroup_obj::set_solid(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_solid",0x6b33dbc1,"flixel.group.FlxTypedSpriteGroup.set_solid","flixel/group/FlxSpriteGroup.hx",749,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 750)		Bool _hx_tmp;
HXDLIN( 750)		if (this->exists) {
HXLINE( 750)			_hx_tmp = ((((int)this->allowCollisions & (int)(int)4369) > (int)0) != Value);
            		}
            		else {
HXLINE( 750)			_hx_tmp = false;
            		}
HXDLIN( 750)		if (_hx_tmp) {
HXLINE( 751)			this->transformChildren_Bool(this->solidTransform_dyn(),Value);
            		}
HXLINE( 752)		return this->super::set_solid(Value);
            	}


Int FlxTypedSpriteGroup_obj::set_color(Int _tmp_Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_color",0x34ca98f9,"flixel.group.FlxTypedSpriteGroup.set_color","flixel/group/FlxSpriteGroup.hx",756,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_tmp_Value,"_tmp_Value")
HXLINE( 757)		HX_VARI( Int,Value) = _tmp_Value;
HXDLIN( 757)		Bool _hx_tmp;
HXDLIN( 757)		if (this->exists) {
HXLINE( 757)			_hx_tmp = (this->color != Value);
            		}
            		else {
HXLINE( 757)			_hx_tmp = false;
            		}
HXDLIN( 757)		if (_hx_tmp) {
HXLINE( 758)			this->transformChildren_Int(this->gColorTransform_dyn(),Value);
            		}
HXLINE( 759)		return (this->color = Value);
            	}


 ::Dynamic FlxTypedSpriteGroup_obj::set_blend( ::Dynamic Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_blend",0x9f630fe7,"flixel.group.FlxTypedSpriteGroup.set_blend","flixel/group/FlxSpriteGroup.hx",763,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 764)		Bool _hx_tmp;
HXDLIN( 764)		if (this->exists) {
HXLINE( 764)			_hx_tmp = hx::IsNotEq( this->blend,Value );
            		}
            		else {
HXLINE( 764)			_hx_tmp = false;
            		}
HXDLIN( 764)		if (_hx_tmp) {
HXLINE( 765)			this->transformChildren_openfl_display_BlendMode(this->blendTransform_dyn(),Value);
            		}
HXLINE( 766)		return (this->blend = Value);
            	}


 ::flixel::math::FlxRect FlxTypedSpriteGroup_obj::set_clipRect( ::flixel::math::FlxRect rect){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_clipRect",0x5134ca3e,"flixel.group.FlxTypedSpriteGroup.set_clipRect","flixel/group/FlxSpriteGroup.hx",770,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 771)		Bool _hx_tmp = this->exists;
HXDLIN( 771)		if (_hx_tmp) {
HXLINE( 772)			this->transformChildren_flixel_math_FlxRect(this->clipRectTransform_dyn(),rect);
            		}
HXLINE( 773)		return this->super::set_clipRect(rect);
            	}


Bool FlxTypedSpriteGroup_obj::set_pixelPerfectRender(Bool Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_pixelPerfectRender",0x5163ac87,"flixel.group.FlxTypedSpriteGroup.set_pixelPerfectRender","flixel/group/FlxSpriteGroup.hx",777,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 778)		Bool _hx_tmp;
HXDLIN( 778)		if (this->exists) {
HXLINE( 778)			_hx_tmp = hx::IsNotEq( this->pixelPerfectRender,Value );
            		}
            		else {
HXLINE( 778)			_hx_tmp = false;
            		}
HXDLIN( 778)		if (_hx_tmp) {
HXLINE( 779)			this->transformChildren_Bool(this->pixelPerfectTransform_dyn(),Value);
            		}
HXLINE( 780)		return this->super::set_pixelPerfectRender(Value);
            	}


Float FlxTypedSpriteGroup_obj::set_width(Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_width",0xb4d0dd9c,"flixel.group.FlxTypedSpriteGroup.set_width","flixel/group/FlxSpriteGroup.hx",788,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 788)		return Value;
            	}


Float FlxTypedSpriteGroup_obj::get_width(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","get_width",0xd17ff190,"flixel.group.FlxTypedSpriteGroup.get_width","flixel/group/FlxSpriteGroup.hx",792,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 793)		if ((this->group->length == (int)0)) {
HXLINE( 794)			return (int)0;
            		}
HXLINE( 796)		HX_VARI( Float,minX) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 797)		HX_VARI( Float,maxX) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 799)		{
HXLINE( 799)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 799)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 799)			while((_g < _g1->length)){
HXLINE( 799)				HX_VARI(  ::flixel::FlxSprite,member) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 799)				++_g;
HXLINE( 801)				Bool _hx_tmp = hx::IsNull( member );
HXDLIN( 801)				if (_hx_tmp) {
HXLINE( 801)					continue;
            				}
HXLINE( 802)				HX_VARI( Float,minMemberX) = member->x;
HXLINE( 803)				Float _hx_tmp1 = member->get_width();
HXDLIN( 803)				HX_VARI( Float,maxMemberX) = (minMemberX + _hx_tmp1);
HXLINE( 805)				Bool _hx_tmp2 = (maxMemberX > maxX);
HXDLIN( 805)				if (_hx_tmp2) {
HXLINE( 806)					maxX = maxMemberX;
            				}
HXLINE( 807)				Bool _hx_tmp3 = (minMemberX < minX);
HXDLIN( 807)				if (_hx_tmp3) {
HXLINE( 808)					minX = minMemberX;
            				}
            			}
            		}
HXLINE( 810)		return (maxX - minX);
            	}


Float FlxTypedSpriteGroup_obj::set_height(Float Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_height",0x38408391,"flixel.group.FlxTypedSpriteGroup.set_height","flixel/group/FlxSpriteGroup.hx",818,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 818)		return Value;
            	}


Float FlxTypedSpriteGroup_obj::get_height(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","get_height",0x34c2e51d,"flixel.group.FlxTypedSpriteGroup.get_height","flixel/group/FlxSpriteGroup.hx",822,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 823)		if ((this->group->length == (int)0)) {
HXLINE( 825)			return (int)0;
            		}
HXLINE( 828)		HX_VARI( Float,minY) = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 829)		HX_VARI( Float,maxY) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 831)		{
HXLINE( 831)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 831)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_sprites;
HXDLIN( 831)			while((_g < _g1->length)){
HXLINE( 831)				HX_VARI(  ::flixel::FlxSprite,member) = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 831)				++_g;
HXLINE( 833)				Bool _hx_tmp = hx::IsNull( member );
HXDLIN( 833)				if (_hx_tmp) {
HXLINE( 833)					continue;
            				}
HXLINE( 834)				HX_VARI( Float,minMemberY) = member->y;
HXLINE( 835)				Float _hx_tmp1 = member->get_height();
HXDLIN( 835)				HX_VARI( Float,maxMemberY) = (minMemberY + _hx_tmp1);
HXLINE( 837)				Bool _hx_tmp2 = (maxMemberY > maxY);
HXDLIN( 837)				if (_hx_tmp2) {
HXLINE( 838)					maxY = maxMemberY;
            				}
HXLINE( 839)				Bool _hx_tmp3 = (minMemberY < minY);
HXDLIN( 839)				if (_hx_tmp3) {
HXLINE( 840)					minY = minMemberY;
            				}
            			}
            		}
HXLINE( 842)		return (maxY - minY);
            	}


Int FlxTypedSpriteGroup_obj::get_length(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","get_length",0xd17e721c,"flixel.group.FlxTypedSpriteGroup.get_length","flixel/group/FlxSpriteGroup.hx",849,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 849)		return this->group->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,get_length,return )

Int FlxTypedSpriteGroup_obj::get_maxSize(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","get_maxSize",0xc20eab8f,"flixel.group.FlxTypedSpriteGroup.get_maxSize","flixel/group/FlxSpriteGroup.hx",854,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 854)		return this->group->maxSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,get_maxSize,return )

Int FlxTypedSpriteGroup_obj::set_maxSize(Int Size){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_maxSize",0xcc7bb29b,"flixel.group.FlxTypedSpriteGroup.set_maxSize","flixel/group/FlxSpriteGroup.hx",859,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Size,"Size")
HXLINE( 859)		return this->group->set_maxSize(Size);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,set_maxSize,return )

::cpp::VirtualArray FlxTypedSpriteGroup_obj::get_members(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","get_members",0x0ffadee3,"flixel.group.FlxTypedSpriteGroup.get_members","flixel/group/FlxSpriteGroup.hx",864,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 864)		return this->group->members;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTypedSpriteGroup_obj,get_members,return )

void FlxTypedSpriteGroup_obj::xTransform( ::flixel::FlxSprite Sprite,Float X){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","xTransform",0x4c3dab41,"flixel.group.FlxTypedSpriteGroup.xTransform","flixel/group/FlxSpriteGroup.hx",869,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(X,"X")
HXLINE( 869)		Float _hx_tmp = (Sprite->x + X);
HXDLIN( 869)		Sprite->set_x(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,xTransform,(void))

void FlxTypedSpriteGroup_obj::yTransform( ::flixel::FlxSprite Sprite,Float Y){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","yTransform",0x0c882320,"flixel.group.FlxTypedSpriteGroup.yTransform","flixel/group/FlxSpriteGroup.hx",870,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 870)		Float _hx_tmp = (Sprite->y + Y);
HXDLIN( 870)		Sprite->set_y(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,yTransform,(void))

void FlxTypedSpriteGroup_obj::angleTransform( ::flixel::FlxSprite Sprite,Float Angle){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","angleTransform",0x285b5f06,"flixel.group.FlxTypedSpriteGroup.angleTransform","flixel/group/FlxSpriteGroup.hx",871,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Angle,"Angle")
HXLINE( 871)		Float _hx_tmp = (Sprite->angle + Angle);
HXDLIN( 871)		Sprite->set_angle(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,angleTransform,(void))

void FlxTypedSpriteGroup_obj::alphaTransform( ::flixel::FlxSprite Sprite,Float Alpha){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","alphaTransform",0xe7f1b21b,"flixel.group.FlxTypedSpriteGroup.alphaTransform","flixel/group/FlxSpriteGroup.hx",872,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Alpha,"Alpha")
HXLINE( 872)		Float _hx_tmp = (Sprite->alpha * Alpha);
HXDLIN( 872)		Sprite->set_alpha(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,alphaTransform,(void))

void FlxTypedSpriteGroup_obj::facingTransform( ::flixel::FlxSprite Sprite,Int Facing){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","facingTransform",0x8cbce265,"flixel.group.FlxTypedSpriteGroup.facingTransform","flixel/group/FlxSpriteGroup.hx",873,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Facing,"Facing")
HXLINE( 873)		Sprite->set_facing(Facing);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,facingTransform,(void))

void FlxTypedSpriteGroup_obj::flipXTransform( ::flixel::FlxSprite Sprite,Bool FlipX){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","flipXTransform",0x2d6d76ce,"flixel.group.FlxTypedSpriteGroup.flipXTransform","flixel/group/FlxSpriteGroup.hx",874,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(FlipX,"FlipX")
HXLINE( 874)		Sprite->set_flipX(FlipX);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,flipXTransform,(void))

void FlxTypedSpriteGroup_obj::flipYTransform( ::flixel::FlxSprite Sprite,Bool FlipY){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","flipYTransform",0xedb7eead,"flixel.group.FlxTypedSpriteGroup.flipYTransform","flixel/group/FlxSpriteGroup.hx",875,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(FlipY,"FlipY")
HXLINE( 875)		Sprite->set_flipY(FlipY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,flipYTransform,(void))

void FlxTypedSpriteGroup_obj::movesTransform( ::flixel::FlxSprite Sprite,Bool Moves){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","movesTransform",0x6670d0b7,"flixel.group.FlxTypedSpriteGroup.movesTransform","flixel/group/FlxSpriteGroup.hx",876,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Moves,"Moves")
HXLINE( 876)		Sprite->set_moves(Moves);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,movesTransform,(void))

void FlxTypedSpriteGroup_obj::pixelPerfectTransform( ::flixel::FlxSprite Sprite,Bool PixelPerfect){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","pixelPerfectTransform",0x21312cf8,"flixel.group.FlxTypedSpriteGroup.pixelPerfectTransform","flixel/group/FlxSpriteGroup.hx",877,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(PixelPerfect,"PixelPerfect")
HXLINE( 877)		Sprite->set_pixelPerfectRender(PixelPerfect);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,pixelPerfectTransform,(void))

void FlxTypedSpriteGroup_obj::gColorTransform( ::flixel::FlxSprite Sprite,Int Color){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","gColorTransform",0x1fbe79c3,"flixel.group.FlxTypedSpriteGroup.gColorTransform","flixel/group/FlxSpriteGroup.hx",878,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Color,"Color")
HXLINE( 878)		Sprite->set_color(Color);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,gColorTransform,(void))

void FlxTypedSpriteGroup_obj::blendTransform( ::flixel::FlxSprite Sprite, ::Dynamic Blend){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","blendTransform",0x1d7b3ac8,"flixel.group.FlxTypedSpriteGroup.blendTransform","flixel/group/FlxSpriteGroup.hx",879,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Blend,"Blend")
HXLINE( 879)		Sprite->set_blend(Blend);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,blendTransform,(void))

void FlxTypedSpriteGroup_obj::immovableTransform( ::flixel::FlxSprite Sprite,Bool Immovable){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","immovableTransform",0x108fd76f,"flixel.group.FlxTypedSpriteGroup.immovableTransform","flixel/group/FlxSpriteGroup.hx",880,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Immovable,"Immovable")
HXLINE( 880)		Sprite->set_immovable(Immovable);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,immovableTransform,(void))

void FlxTypedSpriteGroup_obj::visibleTransform( ::flixel::FlxSprite Sprite,Bool Visible){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","visibleTransform",0x807eb3c7,"flixel.group.FlxTypedSpriteGroup.visibleTransform","flixel/group/FlxSpriteGroup.hx",881,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Visible,"Visible")
HXLINE( 881)		Sprite->set_visible(Visible);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,visibleTransform,(void))

void FlxTypedSpriteGroup_obj::activeTransform( ::flixel::FlxSprite Sprite,Bool Active){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","activeTransform",0x51542a39,"flixel.group.FlxTypedSpriteGroup.activeTransform","flixel/group/FlxSpriteGroup.hx",882,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Active,"Active")
HXLINE( 882)		Sprite->set_active(Active);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,activeTransform,(void))

void FlxTypedSpriteGroup_obj::solidTransform( ::flixel::FlxSprite Sprite,Bool Solid){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","solidTransform",0x242323ae,"flixel.group.FlxTypedSpriteGroup.solidTransform","flixel/group/FlxSpriteGroup.hx",883,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Solid,"Solid")
HXLINE( 883)		Sprite->set_solid(Solid);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,solidTransform,(void))

void FlxTypedSpriteGroup_obj::aliveTransform( ::flixel::FlxSprite Sprite,Bool Alive){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","aliveTransform",0x29096fcc,"flixel.group.FlxTypedSpriteGroup.aliveTransform","flixel/group/FlxSpriteGroup.hx",884,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Alive,"Alive")
HXLINE( 884)		Sprite->set_alive(Alive);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,aliveTransform,(void))

void FlxTypedSpriteGroup_obj::existsTransform( ::flixel::FlxSprite Sprite,Bool Exists){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","existsTransform",0xb2051b63,"flixel.group.FlxTypedSpriteGroup.existsTransform","flixel/group/FlxSpriteGroup.hx",885,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Exists,"Exists")
HXLINE( 885)		Sprite->set_exists(Exists);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,existsTransform,(void))

void FlxTypedSpriteGroup_obj::camerasTransform( ::flixel::FlxSprite Sprite,::Array< ::Dynamic> Cameras){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","camerasTransform",0x7f778a8b,"flixel.group.FlxTypedSpriteGroup.camerasTransform","flixel/group/FlxSpriteGroup.hx",886,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Cameras,"Cameras")
HXLINE( 886)		Sprite->set_cameras(Cameras);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,camerasTransform,(void))

void FlxTypedSpriteGroup_obj::offsetTransform( ::flixel::FlxSprite Sprite, ::flixel::math::FlxPoint Offset){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","offsetTransform",0x35aa32cc,"flixel.group.FlxTypedSpriteGroup.offsetTransform","flixel/group/FlxSpriteGroup.hx",888,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Offset,"Offset")
HXLINE( 888)		HX_VARI(  ::flixel::math::FlxPoint,_this) = Sprite->offset;
HXDLIN( 888)		_this->set_x(Offset->x);
HXDLIN( 888)		_this->set_y(Offset->y);
HXDLIN( 888)		Bool _hx_tmp = Offset->_weak;
HXDLIN( 888)		if (_hx_tmp) {
HXLINE( 888)			Offset->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,offsetTransform,(void))

void FlxTypedSpriteGroup_obj::originTransform( ::flixel::FlxSprite Sprite, ::flixel::math::FlxPoint Origin){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","originTransform",0x93cd4e19,"flixel.group.FlxTypedSpriteGroup.originTransform","flixel/group/FlxSpriteGroup.hx",889,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Origin,"Origin")
HXLINE( 889)		HX_VARI(  ::flixel::math::FlxPoint,_this) = Sprite->origin;
HXDLIN( 889)		_this->set_x(Origin->x);
HXDLIN( 889)		_this->set_y(Origin->y);
HXDLIN( 889)		Bool _hx_tmp = Origin->_weak;
HXDLIN( 889)		if (_hx_tmp) {
HXLINE( 889)			Origin->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,originTransform,(void))

void FlxTypedSpriteGroup_obj::scaleTransform( ::flixel::FlxSprite Sprite, ::flixel::math::FlxPoint Scale){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","scaleTransform",0x4ec9456f,"flixel.group.FlxTypedSpriteGroup.scaleTransform","flixel/group/FlxSpriteGroup.hx",890,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(Scale,"Scale")
HXLINE( 890)		HX_VARI(  ::flixel::math::FlxPoint,_this) = Sprite->scale;
HXDLIN( 890)		_this->set_x(Scale->x);
HXDLIN( 890)		_this->set_y(Scale->y);
HXDLIN( 890)		Bool _hx_tmp = Scale->_weak;
HXDLIN( 890)		if (_hx_tmp) {
HXLINE( 890)			Scale->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,scaleTransform,(void))

void FlxTypedSpriteGroup_obj::scrollFactorTransform( ::flixel::FlxSprite Sprite, ::flixel::math::FlxPoint ScrollFactor){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","scrollFactorTransform",0x4d8808c3,"flixel.group.FlxTypedSpriteGroup.scrollFactorTransform","flixel/group/FlxSpriteGroup.hx",891,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(ScrollFactor,"ScrollFactor")
HXLINE( 891)		HX_VARI(  ::flixel::math::FlxPoint,_this) = Sprite->scrollFactor;
HXDLIN( 891)		_this->set_x(ScrollFactor->x);
HXDLIN( 891)		_this->set_y(ScrollFactor->y);
HXDLIN( 891)		Bool _hx_tmp = ScrollFactor->_weak;
HXDLIN( 891)		if (_hx_tmp) {
HXLINE( 891)			ScrollFactor->put();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,scrollFactorTransform,(void))

void FlxTypedSpriteGroup_obj::clipRectTransform( ::flixel::FlxSprite Sprite, ::flixel::math::FlxRect ClipRect){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","clipRectTransform",0x59fda4eb,"flixel.group.FlxTypedSpriteGroup.clipRectTransform","flixel/group/FlxSpriteGroup.hx",895,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
            	HX_STACK_ARG(ClipRect,"ClipRect")
HXLINE( 895)		Bool _hx_tmp = hx::IsNull( ClipRect );
HXDLIN( 895)		if (_hx_tmp) {
HXLINE( 895)			Sprite->set_clipRect(null());
            		}
            		else {
HXLINE( 896)			Float X = ((ClipRect->x - Sprite->x) + this->x);
HXDLIN( 896)			Float Y = ((ClipRect->y - Sprite->y) + this->y);
HXDLIN( 896)			Float Width = ClipRect->width;
HXDLIN( 896)			Float Height = ClipRect->height;
HXDLIN( 896)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 896)			_this->x = X;
HXDLIN( 896)			_this->y = Y;
HXDLIN( 896)			_this->width = Width;
HXDLIN( 896)			_this->height = Height;
HXDLIN( 896)			_this->_inPool = false;
HXDLIN( 896)			Sprite->set_clipRect(_this);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTypedSpriteGroup_obj,clipRectTransform,(void))

void FlxTypedSpriteGroup_obj::offsetCallback( ::flixel::math::FlxPoint Offset){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","offsetCallback",0xeadd6065,"flixel.group.FlxTypedSpriteGroup.offsetCallback","flixel/group/FlxSpriteGroup.hx",900,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Offset,"Offset")
HXLINE( 900)		this->transformChildren_flixel_math_FlxPoint(this->offsetTransform_dyn(),Offset);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,offsetCallback,(void))

void FlxTypedSpriteGroup_obj::originCallback( ::flixel::math::FlxPoint Origin){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","originCallback",0xfa35edb8,"flixel.group.FlxTypedSpriteGroup.originCallback","flixel/group/FlxSpriteGroup.hx",901,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Origin,"Origin")
HXLINE( 901)		this->transformChildren_flixel_math_FlxPoint(this->originTransform_dyn(),Origin);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,originCallback,(void))

void FlxTypedSpriteGroup_obj::scaleCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","scaleCallback",0xf9e6b322,"flixel.group.FlxTypedSpriteGroup.scaleCallback","flixel/group/FlxSpriteGroup.hx",902,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Scale,"Scale")
HXLINE( 902)		this->transformChildren_flixel_math_FlxPoint(this->scaleTransform_dyn(),Scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,scaleCallback,(void))

void FlxTypedSpriteGroup_obj::scrollFactorCallback( ::flixel::math::FlxPoint ScrollFactor){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","scrollFactorCallback",0x26aab64e,"flixel.group.FlxTypedSpriteGroup.scrollFactorCallback","flixel/group/FlxSpriteGroup.hx",903,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(ScrollFactor,"ScrollFactor")
HXLINE( 903)		this->transformChildren_flixel_math_FlxPoint(this->scrollFactorTransform_dyn(),ScrollFactor);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTypedSpriteGroup_obj,scrollFactorCallback,(void))

 ::flixel::FlxSprite FlxTypedSpriteGroup_obj::loadGraphicFromSprite( ::flixel::FlxSprite Sprite){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","loadGraphicFromSprite",0x6f12dc84,"flixel.group.FlxTypedSpriteGroup.loadGraphicFromSprite","flixel/group/FlxSpriteGroup.hx",917,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Sprite,"Sprite")
HXLINE( 917)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::FlxSprite FlxTypedSpriteGroup_obj::loadGraphic( ::Dynamic Graphic,hx::Null< Bool >  __o_Animated,hx::Null< Int >  __o_Width,hx::Null< Int >  __o_Height,hx::Null< Bool >  __o_Unique,::String Key){
Bool Animated = __o_Animated.Default(false);
Int Width = __o_Width.Default(0);
Int Height = __o_Height.Default(0);
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","loadGraphic",0xb4356b15,"flixel.group.FlxTypedSpriteGroup.loadGraphic","flixel/group/FlxSpriteGroup.hx",927,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Graphic,"Graphic")
            	HX_STACK_ARG(Animated,"Animated")
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 927)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::FlxSprite FlxTypedSpriteGroup_obj::loadRotatedGraphic( ::Dynamic Graphic,hx::Null< Int >  __o_Rotations,hx::Null< Int >  __o_Frame,hx::Null< Bool >  __o_AntiAliasing,hx::Null< Bool >  __o_AutoBuffer,::String Key){
Int Rotations = __o_Rotations.Default(16);
Int Frame = __o_Frame.Default(-1);
Bool AntiAliasing = __o_AntiAliasing.Default(false);
Bool AutoBuffer = __o_AutoBuffer.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","loadRotatedGraphic",0x45e23732,"flixel.group.FlxTypedSpriteGroup.loadRotatedGraphic","flixel/group/FlxSpriteGroup.hx",940,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Graphic,"Graphic")
            	HX_STACK_ARG(Rotations,"Rotations")
            	HX_STACK_ARG(Frame,"Frame")
            	HX_STACK_ARG(AntiAliasing,"AntiAliasing")
            	HX_STACK_ARG(AutoBuffer,"AutoBuffer")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 940)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::flixel::FlxSprite FlxTypedSpriteGroup_obj::makeGraphic(Int Width,Int Height,hx::Null< Int >  __o__tmp_Color,hx::Null< Bool >  __o_Unique,::String Key){
Int _tmp_Color = __o__tmp_Color.Default(-1);
Bool Unique = __o_Unique.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","makeGraphic",0x27a1d44d,"flixel.group.FlxTypedSpriteGroup.makeGraphic","flixel/group/FlxSpriteGroup.hx",953,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Width,"Width")
            	HX_STACK_ARG(Height,"Height")
            	HX_STACK_ARG(_tmp_Color,"_tmp_Color")
            	HX_STACK_ARG(Unique,"Unique")
            	HX_STACK_ARG(Key,"Key")
HXLINE( 953)		HX_VARI( Int,Color) = _tmp_Color;
HXDLIN( 953)		return hx::ObjectPtr<OBJ_>(this);
            	}


 ::openfl::display::BitmapData FlxTypedSpriteGroup_obj::set_pixels( ::openfl::display::BitmapData Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_pixels",0xc29e6ad7,"flixel.group.FlxTypedSpriteGroup.set_pixels","flixel/group/FlxSpriteGroup.hx",958,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 958)		return Value;
            	}


 ::flixel::graphics::frames::FlxFrame FlxTypedSpriteGroup_obj::set_frame( ::flixel::graphics::frames::FlxFrame Value){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_frame",0xf0f19fc3,"flixel.group.FlxTypedSpriteGroup.set_frame","flixel/group/FlxSpriteGroup.hx",963,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE( 963)		return Value;
            	}


 ::openfl::display::BitmapData FlxTypedSpriteGroup_obj::get_pixels(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","get_pixels",0xbf20cc63,"flixel.group.FlxTypedSpriteGroup.get_pixels","flixel/group/FlxSpriteGroup.hx",968,0xeb1fa7f3)
            	HX_STACK_THIS(this)
HXLINE( 968)		return null();
            	}


void FlxTypedSpriteGroup_obj::calcFrame(hx::Null< Bool >  __o_RunOnCpp){
Bool RunOnCpp = __o_RunOnCpp.Default(false);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","calcFrame",0xbd00728b,"flixel.group.FlxTypedSpriteGroup.calcFrame","flixel/group/FlxSpriteGroup.hx",977,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(RunOnCpp,"RunOnCpp")
            	}


void FlxTypedSpriteGroup_obj::resetHelpers(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","resetHelpers",0x60f4ebe3,"flixel.group.FlxTypedSpriteGroup.resetHelpers","flixel/group/FlxSpriteGroup.hx",984,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	}


void FlxTypedSpriteGroup_obj::stamp( ::flixel::FlxSprite Brush,hx::Null< Int >  __o_X,hx::Null< Int >  __o_Y){
Int X = __o_X.Default(0);
Int Y = __o_Y.Default(0);
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","stamp",0x5cccf9b6,"flixel.group.FlxTypedSpriteGroup.stamp","flixel/group/FlxSpriteGroup.hx",989,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Brush,"Brush")
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	}


 ::flixel::graphics::frames::FlxFramesCollection FlxTypedSpriteGroup_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection Frames){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","set_frames",0xe27a2b50,"flixel.group.FlxTypedSpriteGroup.set_frames","flixel/group/FlxSpriteGroup.hx",993,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Frames,"Frames")
HXLINE( 993)		return Frames;
            	}


void FlxTypedSpriteGroup_obj::updateColorTransform(){
            	HX_STACK_FRAME("flixel.group.FlxTypedSpriteGroup","updateColorTransform",0x64df671f,"flixel.group.FlxTypedSpriteGroup.updateColorTransform","flixel/group/FlxSpriteGroup.hx",999,0xeb1fa7f3)
            	HX_STACK_THIS(this)
            	}



FlxTypedSpriteGroup_obj::FlxTypedSpriteGroup_obj()
{
}

void FlxTypedSpriteGroup_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTypedSpriteGroup);
	HX_MARK_MEMBER_NAME(group,"group");
	HX_MARK_MEMBER_NAME(members,"members");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(_skipTransformChildren,"_skipTransformChildren");
	HX_MARK_MEMBER_NAME(_sprites,"_sprites");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(group,"group");
	HX_VISIT_MEMBER_NAME(members,"members");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(_skipTransformChildren,"_skipTransformChildren");
	HX_VISIT_MEMBER_NAME(_sprites,"_sprites");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTypedSpriteGroup_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"sort") ) { return hx::Val( sort_dyn()); }
		if (HX_FIELD_EQ(inName,"kill") ) { return hx::Val( kill_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"group") ) { return hx::Val( group); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		if (HX_FIELD_EQ(inName,"stamp") ) { return hx::Val( stamp_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn()); }
		if (HX_FIELD_EQ(inName,"preAdd") ) { return hx::Val( preAdd_dyn()); }
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn()); }
		if (HX_FIELD_EQ(inName,"revive") ) { return hx::Val( revive_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { return hx::Val( inCallProp == hx::paccAlways ? get_members() : members); }
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxSize()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"recycle") ) { return hx::Val( recycle_dyn()); }
		if (HX_FIELD_EQ(inName,"replace") ) { return hx::Val( replace_dyn()); }
		if (HX_FIELD_EQ(inName,"forEach") ) { return hx::Val( forEach_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprites") ) { return hx::Val( _sprites); }
		if (HX_FIELD_EQ(inName,"initVars") ) { return hx::Val( initVars_dyn()); }
		if (HX_FIELD_EQ(inName,"iterator") ) { return hx::Val( iterator_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"countDead") ) { return hx::Val( countDead_dyn()); }
		if (HX_FIELD_EQ(inName,"getRandom") ) { return hx::Val( getRandom_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alive") ) { return hx::Val( set_alive_dyn()); }
		if (HX_FIELD_EQ(inName,"set_angle") ) { return hx::Val( set_angle_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_flipX") ) { return hx::Val( set_flipX_dyn()); }
		if (HX_FIELD_EQ(inName,"set_flipY") ) { return hx::Val( set_flipY_dyn()); }
		if (HX_FIELD_EQ(inName,"set_moves") ) { return hx::Val( set_moves_dyn()); }
		if (HX_FIELD_EQ(inName,"set_solid") ) { return hx::Val( set_solid_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return hx::Val( set_blend_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_frame") ) { return hx::Val( set_frame_dyn()); }
		if (HX_FIELD_EQ(inName,"calcFrame") ) { return hx::Val( calcFrame_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn()); }
		if (HX_FIELD_EQ(inName,"set_exists") ) { return hx::Val( set_exists_dyn()); }
		if (HX_FIELD_EQ(inName,"set_active") ) { return hx::Val( set_active_dyn()); }
		if (HX_FIELD_EQ(inName,"set_facing") ) { return hx::Val( set_facing_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		if (HX_FIELD_EQ(inName,"xTransform") ) { return hx::Val( xTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"yTransform") ) { return hx::Val( yTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"set_pixels") ) { return hx::Val( set_pixels_dyn()); }
		if (HX_FIELD_EQ(inName,"get_pixels") ) { return hx::Val( get_pixels_dyn()); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"countLiving") ) { return hx::Val( countLiving_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachDead") ) { return hx::Val( forEachDead_dyn()); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return hx::Val( setPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cameras") ) { return hx::Val( set_cameras_dyn()); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxSize") ) { return hx::Val( get_maxSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxSize") ) { return hx::Val( set_maxSize_dyn()); }
		if (HX_FIELD_EQ(inName,"get_members") ) { return hx::Val( get_members_dyn()); }
		if (HX_FIELD_EQ(inName,"loadGraphic") ) { return hx::Val( loadGraphic_dyn()); }
		if (HX_FIELD_EQ(inName,"makeGraphic") ) { return hx::Val( makeGraphic_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"replaceColor") ) { return hx::Val( replaceColor_dyn()); }
		if (HX_FIELD_EQ(inName,"getFirstNull") ) { return hx::Val( getFirstNull_dyn()); }
		if (HX_FIELD_EQ(inName,"getFirstDead") ) { return hx::Val( getFirstDead_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachAlive") ) { return hx::Val( forEachAlive_dyn()); }
		if (HX_FIELD_EQ(inName,"set_clipRect") ) { return hx::Val( set_clipRect_dyn()); }
		if (HX_FIELD_EQ(inName,"resetHelpers") ) { return hx::Val( resetHelpers_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"overlapsPoint") ) { return hx::Val( overlapsPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getFirstAlive") ) { return hx::Val( getFirstAlive_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachExists") ) { return hx::Val( forEachExists_dyn()); }
		if (HX_FIELD_EQ(inName,"forEachOfType") ) { return hx::Val( forEachOfType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_immovable") ) { return hx::Val( set_immovable_dyn()); }
		if (HX_FIELD_EQ(inName,"scaleCallback") ) { return hx::Val( scaleCallback_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"angleTransform") ) { return hx::Val( angleTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"alphaTransform") ) { return hx::Val( alphaTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"flipXTransform") ) { return hx::Val( flipXTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"flipYTransform") ) { return hx::Val( flipYTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"movesTransform") ) { return hx::Val( movesTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"blendTransform") ) { return hx::Val( blendTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"solidTransform") ) { return hx::Val( solidTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"aliveTransform") ) { return hx::Val( aliveTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"scaleTransform") ) { return hx::Val( scaleTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"offsetCallback") ) { return hx::Val( offsetCallback_dyn()); }
		if (HX_FIELD_EQ(inName,"originCallback") ) { return hx::Val( originCallback_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"facingTransform") ) { return hx::Val( facingTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"gColorTransform") ) { return hx::Val( gColorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"activeTransform") ) { return hx::Val( activeTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"existsTransform") ) { return hx::Val( existsTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"offsetTransform") ) { return hx::Val( offsetTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"originTransform") ) { return hx::Val( originTransform_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getFirstExisting") ) { return hx::Val( getFirstExisting_dyn()); }
		if (HX_FIELD_EQ(inName,"visibleTransform") ) { return hx::Val( visibleTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"camerasTransform") ) { return hx::Val( camerasTransform_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getFirstAvailable") ) { return hx::Val( getFirstAvailable_dyn()); }
		if (HX_FIELD_EQ(inName,"clipRectTransform") ) { return hx::Val( clipRectTransform_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pixelsOverlapPoint") ) { return hx::Val( pixelsOverlapPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"immovableTransform") ) { return hx::Val( immovableTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"loadRotatedGraphic") ) { return hx::Val( loadRotatedGraphic_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"scrollFactorCallback") ) { return hx::Val( scrollFactorCallback_dyn()); }
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"transformChildren_Int") ) { return hx::Val( transformChildren_Int_dyn()); }
		if (HX_FIELD_EQ(inName,"pixelPerfectTransform") ) { return hx::Val( pixelPerfectTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"scrollFactorTransform") ) { return hx::Val( scrollFactorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"loadGraphicFromSprite") ) { return hx::Val( loadGraphicFromSprite_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"transformChildren_Bool") ) { return hx::Val( transformChildren_Bool_dyn()); }
		if (HX_FIELD_EQ(inName,"_skipTransformChildren") ) { return hx::Val( _skipTransformChildren); }
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return hx::Val( set_pixelPerfectRender_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"transformChildren_Float") ) { return hx::Val( transformChildren_Float_dyn()); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"multiTransformChildren_Float") ) { return hx::Val( multiTransformChildren_Float_dyn()); }
		break;
	case 37:
		if (HX_FIELD_EQ(inName,"transformChildren_flixel_math_FlxRect") ) { return hx::Val( transformChildren_flixel_math_FlxRect_dyn()); }
		break;
	case 38:
		if (HX_FIELD_EQ(inName,"transformChildren_flixel_math_FlxPoint") ) { return hx::Val( transformChildren_flixel_math_FlxPoint_dyn()); }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"transformChildren_Array_flixel_FlxCamera") ) { return hx::Val( transformChildren_Array_flixel_FlxCamera_dyn()); }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"transformChildren_openfl_display_BlendMode") ) { return hx::Val( transformChildren_openfl_display_BlendMode_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTypedSpriteGroup_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"group") ) { group=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"members") ) { members=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxSize(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprites") ) { _sprites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_skipTransformChildren") ) { _skipTransformChildren=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTypedSpriteGroup_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"));
	outFields->push(HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxSize","\x85","\xf9","\x83","\xcc"));
	outFields->push(HX_HCSTRING("_skipTransformChildren","\x8d","\x52","\xb5","\x7c"));
	outFields->push(HX_HCSTRING("_sprites","\x4f","\x02","\x43","\x99"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTypedSpriteGroup_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(FlxTypedSpriteGroup_obj,group),HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FlxTypedSpriteGroup_obj,members),HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a")},
	{hx::fsInt,(int)offsetof(FlxTypedSpriteGroup_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsBool,(int)offsetof(FlxTypedSpriteGroup_obj,_skipTransformChildren),HX_HCSTRING("_skipTransformChildren","\x8d","\x52","\xb5","\x7c")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTypedSpriteGroup_obj,_sprites),HX_HCSTRING("_sprites","\x4f","\x02","\x43","\x99")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTypedSpriteGroup_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTypedSpriteGroup_obj_sMemberFields[] = {
	HX_HCSTRING("transformChildren_flixel_math_FlxRect","\x2e","\xde","\x92","\xaa"),
	HX_HCSTRING("transformChildren_openfl_display_BlendMode","\x3c","\x5c","\x13","\x49"),
	HX_HCSTRING("transformChildren_Int","\x1b","\x1a","\x96","\x58"),
	HX_HCSTRING("transformChildren_Float","\xc8","\x75","\x5b","\x82"),
	HX_HCSTRING("transformChildren_Bool","\x7e","\xfd","\x20","\x26"),
	HX_HCSTRING("transformChildren_Array_flixel_FlxCamera","\xae","\x0c","\xc0","\xd3"),
	HX_HCSTRING("multiTransformChildren_Float","\x4f","\x02","\xe4","\x0f"),
	HX_HCSTRING("transformChildren_flixel_math_FlxPoint","\x06","\x0c","\xc3","\x75"),
	HX_HCSTRING("group","\x3f","\xb3","\xf4","\x99"),
	HX_HCSTRING("members","\xd9","\x2c","\x70","\x1a"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("_skipTransformChildren","\x8d","\x52","\xb5","\x7c"),
	HX_HCSTRING("_sprites","\x4f","\x02","\x43","\x99"),
	HX_HCSTRING("initVars","\xdc","\x5a","\x00","\x53"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("overlapsPoint","\xa4","\xc5","\xbd","\x35"),
	HX_HCSTRING("pixelsOverlapPoint","\x16","\x82","\x44","\xe0"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("replaceColor","\x8f","\x5c","\xeb","\x3d"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("preAdd","\xbe","\xc1","\x9a","\xae"),
	HX_HCSTRING("recycle","\x13","\x10","\x8c","\x37"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("sort","\x5e","\x27","\x58","\x4c"),
	HX_HCSTRING("getFirstAvailable","\xaf","\xea","\xb3","\x05"),
	HX_HCSTRING("getFirstNull","\x61","\xb7","\x33","\x0f"),
	HX_HCSTRING("getFirstExisting","\x65","\xa4","\x6c","\xee"),
	HX_HCSTRING("getFirstAlive","\xb3","\x09","\xe2","\xbb"),
	HX_HCSTRING("getFirstDead","\x7e","\x67","\x8b","\x08"),
	HX_HCSTRING("countLiving","\x58","\xd9","\x8a","\x30"),
	HX_HCSTRING("countDead","\x13","\xd3","\x86","\x54"),
	HX_HCSTRING("getRandom","\x39","\xab","\xe5","\x33"),
	HX_HCSTRING("iterator","\xee","\x49","\x9a","\x93"),
	HX_HCSTRING("forEach","\xaa","\x29","\xbe","\xc4"),
	HX_HCSTRING("forEachAlive","\xc3","\x61","\xb7","\x99"),
	HX_HCSTRING("forEachDead","\x6e","\xc1","\xe4","\x78"),
	HX_HCSTRING("forEachExists","\x26","\x57","\xf8","\x68"),
	HX_HCSTRING("forEachOfType","\xbb","\x90","\x76","\xfd"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("kill","\x9e","\xdf","\x09","\x47"),
	HX_HCSTRING("revive","\x55","\xfa","\x76","\x0a"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("setPosition","\x6b","\x6a","\x5b","\xfb"),
	HX_HCSTRING("set_cameras","\x51","\xf1","\x98","\x73"),
	HX_HCSTRING("set_exists","\x19","\x2c","\xe5","\xb3"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("set_active","\x03","\x50","\x4b","\x0a"),
	HX_HCSTRING("set_alive","\x30","\xac","\x8b","\x48"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	HX_HCSTRING("set_angle","\x36","\x8c","\xdc","\x49"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_facing","\x57","\x4d","\x0a","\xd8"),
	HX_HCSTRING("set_flipX","\x6e","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_flipY","\x6f","\x8d","\x8c","\x29"),
	HX_HCSTRING("set_moves","\xa5","\x14","\x60","\x33"),
	HX_HCSTRING("set_immovable","\xed","\xdc","\xd9","\x2d"),
	HX_HCSTRING("set_solid","\x8e","\xfc","\xbf","\xa7"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("set_blend","\xb4","\x30","\xef","\xdb"),
	HX_HCSTRING("set_clipRect","\x91","\x67","\x7d","\x22"),
	HX_HCSTRING("set_pixelPerfectRender","\x9a","\x4f","\x8f","\xbc"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxSize","\x9c","\x59","\x7e","\x52"),
	HX_HCSTRING("set_maxSize","\xa8","\x60","\xeb","\x5c"),
	HX_HCSTRING("get_members","\xf0","\x8c","\x6a","\xa0"),
	HX_HCSTRING("xTransform","\xd4","\x3d","\x4e","\x0a"),
	HX_HCSTRING("yTransform","\xb3","\xb5","\x98","\xca"),
	HX_HCSTRING("angleTransform","\x19","\x37","\x04","\x53"),
	HX_HCSTRING("alphaTransform","\x2e","\x8a","\x9a","\x12"),
	HX_HCSTRING("facingTransform","\xf2","\x1a","\xd1","\xb5"),
	HX_HCSTRING("flipXTransform","\xe1","\x4e","\x16","\x58"),
	HX_HCSTRING("flipYTransform","\xc0","\xc6","\x60","\x18"),
	HX_HCSTRING("movesTransform","\xca","\xa8","\x19","\x91"),
	HX_HCSTRING("pixelPerfectTransform","\x45","\xcd","\x91","\xea"),
	HX_HCSTRING("gColorTransform","\x50","\xb2","\xd2","\x48"),
	HX_HCSTRING("blendTransform","\xdb","\x12","\x24","\x48"),
	HX_HCSTRING("immovableTransform","\x02","\xb5","\x21","\x2d"),
	HX_HCSTRING("visibleTransform","\x9a","\xf6","\x1b","\x49"),
	HX_HCSTRING("activeTransform","\xc6","\x62","\x68","\x7a"),
	HX_HCSTRING("solidTransform","\xc1","\xfb","\xcb","\x4e"),
	HX_HCSTRING("aliveTransform","\xdf","\x47","\xb2","\x53"),
	HX_HCSTRING("existsTransform","\xf0","\x53","\x19","\xdb"),
	HX_HCSTRING("camerasTransform","\x5e","\xcd","\x14","\x48"),
	HX_HCSTRING("offsetTransform","\x59","\x6b","\xbe","\x5e"),
	HX_HCSTRING("originTransform","\xa6","\x86","\xe1","\xbc"),
	HX_HCSTRING("scaleTransform","\x82","\x1d","\x72","\x79"),
	HX_HCSTRING("scrollFactorTransform","\x10","\xa9","\xe8","\x16"),
	HX_HCSTRING("clipRectTransform","\xb8","\xda","\xfa","\x1a"),
	HX_HCSTRING("offsetCallback","\x78","\x38","\x86","\x15"),
	HX_HCSTRING("originCallback","\xcb","\xc5","\xde","\x24"),
	HX_HCSTRING("scaleCallback","\x6f","\xbe","\x27","\x48"),
	HX_HCSTRING("scrollFactorCallback","\xa1","\x5e","\x9d","\xf1"),
	HX_HCSTRING("loadGraphicFromSprite","\xd1","\x7c","\x73","\x38"),
	HX_HCSTRING("loadGraphic","\x22","\x19","\xa5","\x44"),
	HX_HCSTRING("loadRotatedGraphic","\xc5","\x14","\x74","\x62"),
	HX_HCSTRING("makeGraphic","\x5a","\x82","\x11","\xb8"),
	HX_HCSTRING("set_pixels","\x6a","\xfd","\xae","\x80"),
	HX_HCSTRING("set_frame","\x90","\xc0","\x7d","\x2d"),
	HX_HCSTRING("get_pixels","\xf6","\x5e","\x31","\x7d"),
	HX_HCSTRING("calcFrame","\x58","\x93","\x8c","\xf9"),
	HX_HCSTRING("resetHelpers","\x36","\x89","\x3d","\x32"),
	HX_HCSTRING("stamp","\x03","\x70","\x0b","\x84"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	HX_HCSTRING("updateColorTransform","\x72","\x0f","\xd2","\x2f"),
	::String(null()) };

static void FlxTypedSpriteGroup_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTypedSpriteGroup_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTypedSpriteGroup_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTypedSpriteGroup_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTypedSpriteGroup_obj::__mClass;

void FlxTypedSpriteGroup_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.group.FlxTypedSpriteGroup","\xe1","\xd1","\x86","\xf9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTypedSpriteGroup_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTypedSpriteGroup_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTypedSpriteGroup_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTypedSpriteGroup_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTypedSpriteGroup_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTypedSpriteGroup_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace group
