// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_NMEPreloader
#include <NMEPreloader.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_FlxBasePreloader
#include <flixel/system/FlxBasePreloader.h>
#endif
#ifndef INCLUDED_flixel_system_FlxPreloader
#include <flixel/system/FlxPreloader.h>
#endif
#ifndef INCLUDED_flixel_system_FlxVersion
#include <flixel/system/FlxVersion.h>
#endif
#ifndef INCLUDED_flixel_system__FlxPreloader_GraphicLogoCorners
#include <flixel/system/_FlxPreloader/GraphicLogoCorners.h>
#endif
#ifndef INCLUDED_flixel_system__FlxPreloader_GraphicLogoLight
#include <flixel/system/_FlxPreloader/GraphicLogoLight.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

namespace flixel{
namespace _hx_system{

void FlxPreloader_obj::__construct(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs){
Float MinDisplayTime = __o_MinDisplayTime.Default(0);
            	HX_STACK_FRAME("flixel.system.FlxPreloader","new",0x2ee42503,"flixel.system.FlxPreloader.new","flixel/system/FlxPreloader.hx",41,0xf0599dad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(MinDisplayTime,"MinDisplayTime")
            	HX_STACK_ARG(AllowedURLs,"AllowedURLs")
HXLINE(  41)		super::__construct(MinDisplayTime,AllowedURLs);
            	}

Dynamic FlxPreloader_obj::__CreateEmpty() { return new FlxPreloader_obj; }

hx::ObjectPtr< FlxPreloader_obj > FlxPreloader_obj::__new(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs)
{
	hx::ObjectPtr< FlxPreloader_obj > _hx_result = new FlxPreloader_obj();
	_hx_result->__construct(__o_MinDisplayTime,AllowedURLs);
	return _hx_result;
}

Dynamic FlxPreloader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxPreloader_obj > _hx_result = new FlxPreloader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void FlxPreloader_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::flixel::_hx_system::FlxPreloader,_gthis) HXARGC(1)
            		void _hx_run( ::openfl::display::Bitmap logoLight1){
            			HX_STACK_FRAME("flixel.system.FlxPreloader","create",0xb9295a39,"flixel.system.FlxPreloader.create","flixel/system/FlxPreloader.hx",59,0xf0599dad)
            			HX_STACK_ARG(logoLight1,"logoLight1")
HXLINE(  60)			Float _hx_tmp5 = logoLight1->set_height(_gthis->_height);
HXDLIN(  60)			logoLight1->set_width(_hx_tmp5);
HXLINE(  61)			Int _hx_tmp6 = _gthis->_width;
HXDLIN(  61)			Float _hx_tmp7 = logoLight1->get_width();
HXDLIN(  61)			logoLight1->set_x(((Float)(_hx_tmp6 - _hx_tmp7) / (Float)(int)2));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_1, ::flixel::_hx_system::FlxPreloader,_gthis) HXARGC(1)
            		void _hx_run( ::openfl::display::Bitmap corners1){
            			HX_STACK_FRAME("flixel.system.FlxPreloader","create",0xb9295a39,"flixel.system.FlxPreloader.create","flixel/system/FlxPreloader.hx",94,0xf0599dad)
            			HX_STACK_ARG(corners1,"corners1")
HXLINE(  95)			corners1->set_width(_gthis->_width);
HXLINE(  96)			Float _hx_tmp24 = _gthis->get_height();
HXDLIN(  96)			corners1->set_height(_hx_tmp24);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("flixel.system.FlxPreloader","create",0xb9295a39,"flixel.system.FlxPreloader.create","flixel/system/FlxPreloader.hx",50,0xf0599dad)
            	HX_STACK_THIS(this)
HXLINE(  49)		HX_VARI(  ::flixel::_hx_system::FlxPreloader,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		this->_buffer =  ::openfl::display::Sprite_obj::__new();
HXLINE(  52)		Float _hx_tmp = this->_buffer->set_scaleY((int)2);
HXDLIN(  52)		this->_buffer->set_scaleX(_hx_tmp);
HXLINE(  53)		this->addChild(this->_buffer);
HXLINE(  54)		Int _hx_tmp1 = ::openfl::Lib_obj::current->stage->stageWidth;
HXDLIN(  54)		Float _hx_tmp2 = this->_buffer->get_scaleX();
HXDLIN(  54)		this->_width = ::Std_obj::_hx_int(((Float)_hx_tmp1 / (Float)_hx_tmp2));
HXLINE(  55)		Int _hx_tmp3 = ::openfl::Lib_obj::current->stage->stageHeight;
HXDLIN(  55)		Float _hx_tmp4 = this->_buffer->get_scaleY();
HXDLIN(  55)		this->_height = ::Std_obj::_hx_int(((Float)_hx_tmp3 / (Float)_hx_tmp4));
HXLINE(  56)		this->_buffer->addChild( ::openfl::display::Bitmap_obj::__new( ::openfl::display::BitmapData_obj::__new(this->_width,this->_height,false,(int)13406),null(),null()));
HXLINE(  58)		HX_VARI(  ::openfl::display::Bitmap,logoLight) = this->createBitmap(hx::ClassOf< ::flixel::_hx_system::_FlxPreloader::GraphicLogoLight >(), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE(  63)		logoLight->smoothing = true;
HXLINE(  64)		this->_buffer->addChild(logoLight);
HXLINE(  65)		this->_bmpBar =  ::openfl::display::Bitmap_obj::__new( ::openfl::display::BitmapData_obj::__new((int)1,(int)7,false,(int)6253311),null(),null());
HXLINE(  66)		this->_bmpBar->set_x((int)4);
HXLINE(  67)		Int _hx_tmp8 = (this->_height - (int)11);
HXDLIN(  67)		this->_bmpBar->set_y(_hx_tmp8);
HXLINE(  68)		this->_buffer->addChild(this->_bmpBar);
HXLINE(  70)		this->_text =  ::openfl::text::TextField_obj::__new();
HXLINE(  71)		this->_text->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__new(::flixel::_hx_system::FlxAssets_obj::FONT_DEFAULT,(int)8,(int)6253311,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  72)		this->_text->set_embedFonts(true);
HXLINE(  73)		this->_text->set_selectable(false);
HXLINE(  74)		this->_text->set_multiline(false);
HXLINE(  75)		this->_text->set_x((int)2);
HXLINE(  76)		Float _hx_tmp9 = this->_bmpBar->get_y();
HXDLIN(  76)		this->_text->set_y((_hx_tmp9 - (int)11));
HXLINE(  77)		this->_text->set_width((int)200);
HXLINE(  78)		this->_buffer->addChild(this->_text);
HXLINE(  80)		this->_logo =  ::openfl::display::Sprite_obj::__new();
HXLINE(  81)		 ::openfl::display::Graphics _hx_tmp10 = this->_logo->get_graphics();
HXDLIN(  81)		::flixel::_hx_system::FlxAssets_obj::drawLogo(_hx_tmp10);
HXLINE(  82)		Float _hx_tmp11 = (((Float)this->_height / (Float)(int)8) * ((Float)0.04));
HXDLIN(  82)		Float _hx_tmp12 = this->_logo->set_scaleY(_hx_tmp11);
HXDLIN(  82)		this->_logo->set_scaleX(_hx_tmp12);
HXLINE(  83)		Int _hx_tmp13 = this->_width;
HXDLIN(  83)		Float _hx_tmp14 = this->_logo->get_width();
HXDLIN(  83)		this->_logo->set_x(((Float)(_hx_tmp13 - _hx_tmp14) / (Float)(int)2));
HXLINE(  84)		Int _hx_tmp15 = this->_height;
HXDLIN(  84)		Float _hx_tmp16 = this->_logo->get_height();
HXDLIN(  84)		this->_logo->set_y(((Float)(_hx_tmp15 - _hx_tmp16) / (Float)(int)2));
HXLINE(  85)		this->_buffer->addChild(this->_logo);
HXLINE(  86)		this->_logoGlow =  ::openfl::display::Sprite_obj::__new();
HXLINE(  87)		 ::openfl::display::Graphics _hx_tmp17 = this->_logoGlow->get_graphics();
HXDLIN(  87)		::flixel::_hx_system::FlxAssets_obj::drawLogo(_hx_tmp17);
HXLINE(  88)		this->_logoGlow->set_blendMode((int)12);
HXLINE(  89)		Float _hx_tmp18 = (((Float)this->_height / (Float)(int)8) * ((Float)0.04));
HXDLIN(  89)		Float _hx_tmp19 = this->_logoGlow->set_scaleY(_hx_tmp18);
HXDLIN(  89)		this->_logoGlow->set_scaleX(_hx_tmp19);
HXLINE(  90)		Int _hx_tmp20 = this->_width;
HXDLIN(  90)		Float _hx_tmp21 = this->_logoGlow->get_width();
HXDLIN(  90)		this->_logoGlow->set_x(((Float)(_hx_tmp20 - _hx_tmp21) / (Float)(int)2));
HXLINE(  91)		Int _hx_tmp22 = this->_height;
HXDLIN(  91)		Float _hx_tmp23 = this->_logoGlow->get_height();
HXDLIN(  91)		this->_logoGlow->set_y(((Float)(_hx_tmp22 - _hx_tmp23) / (Float)(int)2));
HXLINE(  92)		this->_buffer->addChild(this->_logoGlow);
HXLINE(  93)		HX_VARI(  ::openfl::display::Bitmap,corners) = this->createBitmap(hx::ClassOf< ::flixel::_hx_system::_FlxPreloader::GraphicLogoCorners >(), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(  98)		corners->smoothing = true;
HXLINE(  99)		this->_buffer->addChild(corners);
HXLINE( 101)		HX_VARI(  ::openfl::display::Bitmap,bitmap) =  ::openfl::display::Bitmap_obj::__new( ::openfl::display::BitmapData_obj::__new(this->_width,this->_height,false,(int)16777215),null(),null());
HXLINE( 102)		HX_VARI( Int,i) = (int)0;
HXLINE( 103)		HX_VARI( Int,j) = (int)0;
HXLINE( 104)		while((i < this->_height)){
HXLINE( 106)			j = (int)0;
HXLINE( 107)			while((j < this->_width)){
HXLINE( 109)				Int _hx_tmp25 = j++;
HXDLIN( 109)				bitmap->bitmapData->setPixel(_hx_tmp25,i,(int)0);
            			}
HXLINE( 111)			hx::AddEq(i,(int)2);
            		}
HXLINE( 113)		bitmap->set_blendMode((int)11);
HXLINE( 114)		bitmap->set_alpha(((Float)0.25));
HXLINE( 115)		this->_buffer->addChild(bitmap);
HXLINE( 117)		this->super::create();
            	}


void FlxPreloader_obj::destroy(){
            	HX_STACK_FRAME("flixel.system.FlxPreloader","destroy",0x5e210f1d,"flixel.system.FlxPreloader.destroy","flixel/system/FlxPreloader.hx",125,0xf0599dad)
            	HX_STACK_THIS(this)
HXLINE( 126)		Bool _hx_tmp = hx::IsNotNull( this->_buffer );
HXDLIN( 126)		if (_hx_tmp) {
HXLINE( 128)			this->removeChild(this->_buffer);
            		}
HXLINE( 130)		this->_buffer = null();
HXLINE( 131)		this->_bmpBar = null();
HXLINE( 132)		this->_text = null();
HXLINE( 133)		this->_logo = null();
HXLINE( 134)		this->_logoGlow = null();
HXLINE( 135)		this->super::destroy();
            	}


void FlxPreloader_obj::update(Float Percent){
            	HX_STACK_FRAME("flixel.system.FlxPreloader","update",0xc41f7946,"flixel.system.FlxPreloader.update","flixel/system/FlxPreloader.hx",143,0xf0599dad)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Percent,"Percent")
HXLINE( 144)		Float _hx_tmp = (Percent * (this->_width - (int)8));
HXDLIN( 144)		this->_bmpBar->set_scaleX(_hx_tmp);
HXLINE( 145)		::String _hx_tmp1 = ::Std_obj::string(::flixel::FlxG_obj::VERSION);
HXDLIN( 145)		::String _hx_tmp2 = (_hx_tmp1 + HX_(" ",20,00,00,00));
HXDLIN( 145)		Int _hx_tmp3 = ::Std_obj::_hx_int((Percent * (int)100));
HXDLIN( 145)		this->_text->set_text(((_hx_tmp2 + _hx_tmp3) + HX_("%",25,00,00,00)));
HXLINE( 147)		if ((Percent < ((Float)0.1))) {
HXLINE( 149)			this->_logoGlow->set_alpha((int)0);
HXLINE( 150)			this->_logo->set_alpha((int)0);
            		}
            		else {
HXLINE( 152)			if ((Percent < ((Float)0.15))) {
HXLINE( 154)				Float _hx_tmp4 = ::Math_obj::random();
HXDLIN( 154)				this->_logoGlow->set_alpha(_hx_tmp4);
HXLINE( 155)				this->_logo->set_alpha((int)0);
            			}
            			else {
HXLINE( 157)				if ((Percent < ((Float)0.2))) {
HXLINE( 159)					this->_logoGlow->set_alpha((int)0);
HXLINE( 160)					this->_logo->set_alpha((int)0);
            				}
            				else {
HXLINE( 162)					if ((Percent < ((Float)0.25))) {
HXLINE( 164)						this->_logoGlow->set_alpha((int)0);
HXLINE( 165)						Float _hx_tmp5 = ::Math_obj::random();
HXDLIN( 165)						this->_logo->set_alpha(_hx_tmp5);
            					}
            					else {
HXLINE( 167)						if ((Percent < ((Float)0.7))) {
HXLINE( 169)							this->_logoGlow->set_alpha(((Float)(Percent - ((Float)0.45)) / (Float)((Float)0.45)));
HXLINE( 170)							this->_logo->set_alpha((int)1);
            						}
            						else {
HXLINE( 172)							Bool _hx_tmp6;
HXDLIN( 172)							if ((Percent > ((Float)0.8))) {
HXLINE( 172)								_hx_tmp6 = (Percent < ((Float)0.9));
            							}
            							else {
HXLINE( 172)								_hx_tmp6 = false;
            							}
HXDLIN( 172)							if (_hx_tmp6) {
HXLINE( 174)								this->_logoGlow->set_alpha(((int)1 - ((Float)(Percent - ((Float)0.8)) / (Float)((Float)0.1))));
HXLINE( 175)								this->_logo->set_alpha((int)0);
            							}
            							else {
HXLINE( 177)								if ((Percent > ((Float)0.9))) {
HXLINE( 179)									this->_buffer->set_alpha(((int)1 - ((Float)(Percent - ((Float)0.9)) / (Float)((Float)0.1))));
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}



FlxPreloader_obj::FlxPreloader_obj()
{
}

void FlxPreloader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxPreloader);
	HX_MARK_MEMBER_NAME(_buffer,"_buffer");
	HX_MARK_MEMBER_NAME(_bmpBar,"_bmpBar");
	HX_MARK_MEMBER_NAME(_text,"_text");
	HX_MARK_MEMBER_NAME(_logo,"_logo");
	HX_MARK_MEMBER_NAME(_logoGlow,"_logoGlow");
	 ::flixel::_hx_system::FlxBasePreloader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxPreloader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_buffer,"_buffer");
	HX_VISIT_MEMBER_NAME(_bmpBar,"_bmpBar");
	HX_VISIT_MEMBER_NAME(_text,"_text");
	HX_VISIT_MEMBER_NAME(_logo,"_logo");
	HX_VISIT_MEMBER_NAME(_logoGlow,"_logoGlow");
	 ::flixel::_hx_system::FlxBasePreloader_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxPreloader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { return hx::Val( _text); }
		if (HX_FIELD_EQ(inName,"_logo") ) { return hx::Val( _logo); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_buffer") ) { return hx::Val( _buffer); }
		if (HX_FIELD_EQ(inName,"_bmpBar") ) { return hx::Val( _bmpBar); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_logoGlow") ) { return hx::Val( _logoGlow); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxPreloader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_text") ) { _text=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_logo") ) { _logo=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_buffer") ) { _buffer=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bmpBar") ) { _bmpBar=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_logoGlow") ) { _logoGlow=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxPreloader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_buffer","\x9f","\xce","\x0b","\x3f"));
	outFields->push(HX_HCSTRING("_bmpBar","\x2d","\xf8","\x57","\xaa"));
	outFields->push(HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"));
	outFields->push(HX_HCSTRING("_logo","\x4a","\xbb","\xc8","\xfa"));
	outFields->push(HX_HCSTRING("_logoGlow","\xf7","\xa2","\x29","\xb8"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxPreloader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(FlxPreloader_obj,_buffer),HX_HCSTRING("_buffer","\x9f","\xce","\x0b","\x3f")},
	{hx::fsObject /*::openfl::display::Bitmap*/ ,(int)offsetof(FlxPreloader_obj,_bmpBar),HX_HCSTRING("_bmpBar","\x2d","\xf8","\x57","\xaa")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(FlxPreloader_obj,_text),HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(FlxPreloader_obj,_logo),HX_HCSTRING("_logo","\x4a","\xbb","\xc8","\xfa")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(FlxPreloader_obj,_logoGlow),HX_HCSTRING("_logoGlow","\xf7","\xa2","\x29","\xb8")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxPreloader_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxPreloader_obj_sMemberFields[] = {
	HX_HCSTRING("_buffer","\x9f","\xce","\x0b","\x3f"),
	HX_HCSTRING("_bmpBar","\x2d","\xf8","\x57","\xaa"),
	HX_HCSTRING("_text","\x8c","\xe8","\x0a","\x00"),
	HX_HCSTRING("_logo","\x4a","\xbb","\xc8","\xfa"),
	HX_HCSTRING("_logoGlow","\xf7","\xa2","\x29","\xb8"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void FlxPreloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxPreloader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxPreloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxPreloader_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxPreloader_obj::__mClass;

void FlxPreloader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.FlxPreloader","\x91","\xe7","\x0e","\xe4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxPreloader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxPreloader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxPreloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxPreloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxPreloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxPreloader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
