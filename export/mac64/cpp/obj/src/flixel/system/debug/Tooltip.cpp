// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_flixel_system_debug_Tooltip
#include <flixel/system/debug/Tooltip.h>
#endif
#ifndef INCLUDED_flixel_system_debug_TooltipOverlay
#include <flixel/system/debug/TooltipOverlay.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace flixel{
namespace _hx_system{
namespace debug{

void Tooltip_obj::__construct() { }

Dynamic Tooltip_obj::__CreateEmpty() { return new Tooltip_obj; }

hx::ObjectPtr< Tooltip_obj > Tooltip_obj::__new()
{
	hx::ObjectPtr< Tooltip_obj > _hx_result = new Tooltip_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Tooltip_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tooltip_obj > _hx_result = new Tooltip_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::Dynamic> Tooltip_obj::_tooltips;

 ::openfl::display::Sprite Tooltip_obj::_container;

void Tooltip_obj::init( ::openfl::display::Sprite container){
            	HX_STACK_FRAME("flixel.system.debug.Tooltip","init",0xd1581303,"flixel.system.debug.Tooltip.init","flixel/system/debug/Tooltip.hx",23,0x5d425da4)
            	HX_STACK_ARG(container,"container")
HXLINE(  23)		::flixel::_hx_system::debug::Tooltip_obj::_container = container;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tooltip_obj,init,(void))

void Tooltip_obj::add( ::openfl::display::Sprite element,::String text){
            	HX_STACK_FRAME("flixel.system.debug.Tooltip","add",0xdf9f998e,"flixel.system.debug.Tooltip.add","flixel/system/debug/Tooltip.hx",27,0x5d425da4)
            	HX_STACK_ARG(element,"element")
            	HX_STACK_ARG(text,"text")
HXLINE(  28)		HX_VARI(  ::flixel::_hx_system::debug::TooltipOverlay,tooltip) =  ::flixel::_hx_system::debug::TooltipOverlay_obj::__new(element,text,null(),null());
HXLINE(  30)		::flixel::_hx_system::debug::Tooltip_obj::_container->addChild(tooltip);
HXLINE(  31)		::flixel::_hx_system::debug::Tooltip_obj::_tooltips->push(tooltip);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Tooltip_obj,add,(void))

Bool Tooltip_obj::remove( ::openfl::display::Sprite element){
            	HX_STACK_FRAME("flixel.system.debug.Tooltip","remove",0x530196f7,"flixel.system.debug.Tooltip.remove","flixel/system/debug/Tooltip.hx",35,0x5d425da4)
            	HX_STACK_ARG(element,"element")
HXLINE(  36)		HX_VARI( Bool,removed) = false;
HXLINE(  38)		{
HXLINE(  38)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  38)			HX_VARI( Int,_g) = ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->length;
HXDLIN(  38)			while((_g1 < _g)){
HXLINE(  38)				HX_VARI( Int,i) = _g1++;
HXLINE(  40)				Bool _hx_tmp;
HXDLIN(  40)				Bool _hx_tmp1 = hx::IsNotNull( ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->__get(i).StaticCast<  ::flixel::_hx_system::debug::TooltipOverlay >() );
HXDLIN(  40)				if (_hx_tmp1) {
HXLINE(  40)					_hx_tmp = hx::IsEq( ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->__get(i).StaticCast<  ::flixel::_hx_system::debug::TooltipOverlay >()->owner,element );
            				}
            				else {
HXLINE(  40)					_hx_tmp = false;
            				}
HXDLIN(  40)				if (_hx_tmp) {
HXLINE(  42)					::Array< ::Dynamic> _hx_tmp2 = ::flixel::_hx_system::debug::Tooltip_obj::_tooltips->splice(i,(int)1);
HXDLIN(  42)					HX_VARI(  ::flixel::_hx_system::debug::TooltipOverlay,tooltip) = _hx_tmp2->__get((int)0).StaticCast<  ::flixel::_hx_system::debug::TooltipOverlay >();
HXLINE(  43)					tooltip->destroy();
HXLINE(  44)					removed = true;
HXLINE(  45)					goto _hx_goto_0;
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE(  49)		return removed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tooltip_obj,remove,return )


Tooltip_obj::Tooltip_obj()
{
}

bool Tooltip_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_tooltips") ) { outValue = _tooltips; return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_container") ) { outValue = _container; return true; }
	}
	return false;
}

bool Tooltip_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_tooltips") ) { _tooltips=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_container") ) { _container=ioValue.Cast<  ::openfl::display::Sprite >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Tooltip_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Tooltip_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &Tooltip_obj::_tooltips,HX_HCSTRING("_tooltips","\x6f","\xad","\x20","\x18")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(void *) &Tooltip_obj::_container,HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Tooltip_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tooltip_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Tooltip_obj::_tooltips,"_tooltips");
	HX_MARK_MEMBER_NAME(Tooltip_obj::_container,"_container");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tooltip_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tooltip_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Tooltip_obj::_tooltips,"_tooltips");
	HX_VISIT_MEMBER_NAME(Tooltip_obj::_container,"_container");
};

#endif

hx::Class Tooltip_obj::__mClass;

static ::String Tooltip_obj_sStaticFields[] = {
	HX_HCSTRING("_tooltips","\x6f","\xad","\x20","\x18"),
	HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	::String(null())
};

void Tooltip_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.Tooltip","\x5b","\x8d","\xac","\x95");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tooltip_obj::__GetStatic;
	__mClass->mSetStaticField = &Tooltip_obj::__SetStatic;
	__mClass->mMarkFunc = Tooltip_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Tooltip_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Tooltip_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tooltip_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tooltip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tooltip_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Tooltip_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.system.debug.Tooltip","boot",0xccb85c25,"flixel.system.debug.Tooltip.boot","flixel/system/debug/Tooltip.hx",18,0x5d425da4)
HXLINE(  18)		_tooltips = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
