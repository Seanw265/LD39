// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxAssets
#include <flixel/system/FlxAssets.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicConsole
#include <flixel/system/debug/GraphicConsole.h>
#endif
#ifndef INCLUDED_flixel_system_debug_VCR
#include <flixel/system/debug/VCR.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_completion_CompletionHandler
#include <flixel/system/debug/completion/CompletionHandler.h>
#endif
#ifndef INCLUDED_flixel_system_debug_completion_CompletionList
#include <flixel/system/debug/completion/CompletionList.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console_Console
#include <flixel/system/debug/console/Console.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console_ConsoleCommands
#include <flixel/system/debug/console/ConsoleCommands.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console_ConsoleHistory
#include <flixel/system/debug/console/ConsoleHistory.h>
#endif
#ifndef INCLUDED_flixel_system_debug_console_ConsoleUtil
#include <flixel/system/debug/console/ConsoleUtil.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_ConsoleFrontEnd
#include <flixel/system/frontEnds/ConsoleFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif

namespace flixel{
namespace _hx_system{
namespace debug{
namespace console{

void Console_obj::__construct( ::flixel::_hx_system::debug::completion::CompletionList completionList){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","new",0x900a6c8a,"flixel.system.debug.console.Console.new","flixel/system/debug/console/Console.hx",30,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(completionList,"completionList")
HXLINE(  55)		this->objectStack = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  50)		this->registeredHelp =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  46)		this->registeredFunctions =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  42)		this->registeredObjects =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  76)		super::__construct(HX_("Console",37,13,27,e6), ::flixel::_hx_system::debug::GraphicConsole_obj::__new((int)0,(int)0,null(),null()),(int)0,(int)0,false,null(),null());
HXLINE(  77)		this->completionList = completionList;
HXLINE(  78)		Float _hx_tmp = this->get_y();
HXDLIN(  78)		completionList->setY((_hx_tmp + (int)15));
HXLINE(  81)		::flixel::_hx_system::debug::console::ConsoleUtil_obj::init();
HXLINE(  84)		this->history =  ::flixel::_hx_system::debug::console::ConsoleHistory_obj::__new();
HXLINE(  85)		this->createInputTextField();
HXLINE(  86)		 ::flixel::_hx_system::debug::completion::CompletionHandler_obj::__new(completionList,this->input);
HXLINE(  87)		this->registerEventListeners();
HXLINE(  91)		 ::flixel::_hx_system::debug::console::ConsoleCommands_obj::__new(hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic Console_obj::__CreateEmpty() { return new Console_obj; }

hx::ObjectPtr< Console_obj > Console_obj::__new( ::flixel::_hx_system::debug::completion::CompletionList completionList)
{
	hx::ObjectPtr< Console_obj > _hx_result = new Console_obj();
	_hx_result->__construct(completionList);
	return _hx_result;
}

Dynamic Console_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Console_obj > _hx_result = new Console_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Console_obj::createInputTextField(){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","createInputTextField",0x91c24015,"flixel.system.debug.console.Console.createInputTextField","flixel/system/debug/console/Console.hx",96,0x367943c8)
            	HX_STACK_THIS(this)
HXLINE(  98)		this->input =  ::openfl::text::TextField_obj::__new();
HXLINE(  99)		this->input->set_embedFonts(true);
HXLINE( 100)		this->input->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__new(::flixel::_hx_system::FlxAssets_obj::FONT_DEBUGGER,(int)12,(int)16777215,false,false,false,null(),null(),null(),null(),null(),null(),null()));
HXLINE( 102)		this->input->set_text(HX_("(Click here / press [Tab] to enter command. Type 'help' for help.)",f9,4e,c0,26));
HXLINE( 103)		Int _hx_tmp = (this->_width - (int)4);
HXDLIN( 103)		this->input->set_width(_hx_tmp);
HXLINE( 104)		Int _hx_tmp1 = (this->_height - (int)15);
HXDLIN( 104)		this->input->set_height(_hx_tmp1);
HXLINE( 105)		this->input->set_x((int)2);
HXLINE( 106)		this->input->set_y((int)15);
HXLINE( 107)		this->addChild(this->input);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Console_obj,createInputTextField,(void))

void Console_obj::registerEventListeners(){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","registerEventListeners",0x714c11de,"flixel.system.debug.console.Console.registerEventListeners","flixel/system/debug/console/Console.hx",111,0x367943c8)
            	HX_STACK_THIS(this)
HXLINE( 113)		this->input->set_type((int)1);
HXLINE( 114)		this->input->addEventListener(HX_("focusIn",dd,45,83,41),this->onFocus_dyn(),null(),null(),null());
HXLINE( 115)		this->input->addEventListener(HX_("focusOut",96,6f,5e,11),this->onFocusLost_dyn(),null(),null(),null());
HXLINE( 116)		this->input->addEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Console_obj,registerEventListeners,(void))

void Console_obj::onFocus( ::Dynamic _){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","onFocus",0xeecff763,"flixel.system.debug.console.Console.onFocus","flixel/system/debug/console/Console.hx",151,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 153)		if (!(::flixel::FlxG_obj::game->_lostFocus)) {
HXLINE( 154)			return;
            		}
HXLINE( 159)		Bool _hx_tmp = ::flixel::FlxG_obj::console->autoPause;
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 160)			::flixel::FlxG_obj::vcr->pause();
            		}
HXLINE( 164)		::flixel::FlxG_obj::keys->enabled = false;
HXLINE( 167)		::String _hx_tmp1 = this->input->get_text();
HXDLIN( 167)		if ((_hx_tmp1 == HX_("(Click here / press [Tab] to enter command. Type 'help' for help.)",f9,4e,c0,26))) {
HXLINE( 168)			this->input->set_text(HX_("",00,00,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Console_obj,onFocus,(void))

void Console_obj::onFocusLost( ::Dynamic _){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","onFocusLost",0x2ed3bae7,"flixel.system.debug.console.Console.onFocusLost","flixel/system/debug/console/Console.hx",174,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 176)		if (::flixel::FlxG_obj::game->_lostFocus) {
HXLINE( 177)			return;
            		}
HXLINE( 182)		Bool _hx_tmp;
HXDLIN( 182)		if (::flixel::FlxG_obj::console->autoPause) {
HXLINE( 182)			_hx_tmp = !(::flixel::FlxG_obj::game->debugger->vcr->manualPause);
            		}
            		else {
HXLINE( 182)			_hx_tmp = false;
            		}
HXDLIN( 182)		if (_hx_tmp) {
HXLINE( 183)			::flixel::FlxG_obj::vcr->resume();
            		}
HXLINE( 187)		::flixel::FlxG_obj::keys->enabled = true;
HXLINE( 190)		::String _hx_tmp1 = this->input->get_text();
HXDLIN( 190)		if ((_hx_tmp1 == HX_("",00,00,00,00))) {
HXLINE( 191)			this->input->set_text(HX_("(Click here / press [Tab] to enter command. Type 'help' for help.)",f9,4e,c0,26));
            		}
HXLINE( 194)		this->completionList->close();
HXLINE( 195)		::flixel::FlxG_obj::game->debugger->onMouseFocusLost();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Console_obj,onFocusLost,(void))

void Console_obj::onKeyDown( ::openfl::events::KeyboardEvent e){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","onKeyDown",0x970b39ec,"flixel.system.debug.console.Console.onKeyDown","flixel/system/debug/console/Console.hx",200,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 201)		Bool _hx_tmp = this->completionList->get_visible();
HXDLIN( 201)		if (_hx_tmp) {
HXLINE( 202)			return;
            		}
HXLINE( 204)		{
HXLINE( 204)			HX_VARI( Int,_g) = e->keyCode;
HXDLIN( 204)			switch((int)(_g)){
            				case (int)13: {
HXLINE( 207)					::String _hx_tmp1 = this->input->get_text();
HXDLIN( 207)					if ((_hx_tmp1 != HX_("",00,00,00,00))) {
HXLINE( 208)						this->processCommand();
            					}
            				}
            				break;
            				case (int)27: {
HXLINE( 211)					::openfl::Lib_obj::current->stage->set_focus(null());
            				}
            				break;
            				case (int)38: {
HXLINE( 217)					Bool _hx_tmp2 = !(this->history->get_isEmpty());
HXDLIN( 217)					if (_hx_tmp2) {
HXLINE( 218)						::String _hx_tmp3 = this->history->getPreviousCommand();
HXDLIN( 218)						this->setText(_hx_tmp3);
            					}
            				}
            				break;
            				case (int)40: {
HXLINE( 221)					Bool _hx_tmp4 = !(this->history->get_isEmpty());
HXDLIN( 221)					if (_hx_tmp4) {
HXLINE( 222)						::String _hx_tmp5 = this->history->getNextCommand();
HXDLIN( 222)						this->setText(_hx_tmp5);
            					}
            				}
            				break;
            				case (int)46: {
HXLINE( 214)					this->input->set_text(HX_("",00,00,00,00));
            				}
            				break;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Console_obj,onKeyDown,(void))

void Console_obj::setText(::String text){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","setText",0x66870699,"flixel.system.debug.console.Console.setText","flixel/system/debug/console/Console.hx",227,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
HXLINE( 228)		this->input->set_text(text);
HXLINE( 230)		this->input->setSelection(text.length,text.length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Console_obj,setText,(void))

void Console_obj::processCommand(){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","processCommand",0x640a92b2,"flixel.system.debug.console.Console.processCommand","flixel/system/debug/console/Console.hx",235,0x367943c8)
            	HX_STACK_THIS(this)
HXLINE( 235)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 237)			::String _hx_tmp = this->input->get_text();
HXDLIN( 237)			HX_VARI( ::String,text) = ::StringTools_obj::trim(_hx_tmp);
HXLINE( 241)			Bool _hx_tmp1 = hx::IsNotNull( this->registeredFunctions->get(text) );
HXDLIN( 241)			if (_hx_tmp1) {
HXLINE( 242)				hx::AddEq(text,HX_("()",01,23,00,00));
            			}
HXLINE( 245)			HX_VARI(  ::Dynamic,output) = ::flixel::_hx_system::debug::console::ConsoleUtil_obj::runCommand(text);
HXLINE( 246)			Bool _hx_tmp2 = hx::IsNotNull( output );
HXDLIN( 246)			if (_hx_tmp2) {
HXLINE( 247)				::flixel::FlxG_obj::log->advanced(::cpp::VirtualArray_obj::__new(1)->init(0,output),::flixel::_hx_system::debug::log::LogStyle_obj::CONSOLE,null());
            			}
HXLINE( 249)			::String _hx_tmp3 = this->input->get_text();
HXDLIN( 249)			this->history->addCommand(_hx_tmp3);
HXLINE( 253)			Bool _hx_tmp4;
HXDLIN( 253)			if (::flixel::FlxG_obj::vcr->paused) {
HXLINE( 253)				_hx_tmp4 = ::flixel::FlxG_obj::console->stepAfterCommand;
            			}
            			else {
HXLINE( 253)				_hx_tmp4 = false;
            			}
HXDLIN( 253)			if (_hx_tmp4) {
HXLINE( 254)				::flixel::FlxG_obj::game->debugger->vcr->onStep();
            			}
HXLINE( 257)			this->input->set_text(HX_("",00,00,00,00));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 262)				::String _hx_tmp5 = ::Std_obj::string(e);
HXDLIN( 262)				::flixel::FlxG_obj::log->advanced(((HX_("Console: Invalid syntax: '",78,2b,94,2e) + _hx_tmp5) + HX_("'",27,00,00,00)),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Console_obj,processCommand,(void))

void Console_obj::reposition(Float X,Float Y){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","reposition",0x383e0c72,"flixel.system.debug.console.Console.reposition","flixel/system/debug/console/Console.hx",267,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
HXLINE( 268)		this->super::reposition(X,Y);
HXLINE( 269)		Float _hx_tmp = this->get_y();
HXDLIN( 269)		this->completionList->setY((_hx_tmp + (int)15));
HXLINE( 270)		this->completionList->close();
            	}


void Console_obj::registerFunction(::String functionAlias, ::Dynamic func,::String helpText){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","registerFunction",0xf8dd3a31,"flixel.system.debug.console.Console.registerFunction","flixel/system/debug/console/Console.hx",282,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(functionAlias,"functionAlias")
            	HX_STACK_ARG(func,"func")
            	HX_STACK_ARG(helpText,"helpText")
HXLINE( 283)		this->registeredFunctions->set(functionAlias,func);
HXLINE( 285)		::flixel::_hx_system::debug::console::ConsoleUtil_obj::registerFunction(functionAlias,func);
HXLINE( 288)		Bool _hx_tmp = hx::IsNotNull( helpText );
HXDLIN( 288)		if (_hx_tmp) {
HXLINE( 289)			this->registeredHelp->set(functionAlias,helpText);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Console_obj,registerFunction,(void))

void Console_obj::registerObject(::String objectAlias, ::Dynamic anyObject){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","registerObject",0x0bbfe598,"flixel.system.debug.console.Console.registerObject","flixel/system/debug/console/Console.hx",299,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(objectAlias,"objectAlias")
            	HX_STACK_ARG(anyObject,"anyObject")
HXLINE( 300)		this->registeredObjects->set(objectAlias,anyObject);
HXLINE( 302)		::flixel::_hx_system::debug::console::ConsoleUtil_obj::registerObject(objectAlias,anyObject);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Console_obj,registerObject,(void))

void Console_obj::registerClass(hx::Class cl){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","registerClass",0x7ad06f7f,"flixel.system.debug.console.Console.registerClass","flixel/system/debug/console/Console.hx",313,0x367943c8)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(cl,"cl")
HXLINE( 313)		HX_VARI( ::String,objectAlias) = ::flixel::util::FlxStringUtil_obj::getClassName(cl,true);
HXDLIN( 313)		this->registeredObjects->set(objectAlias,cl);
HXDLIN( 313)		::flixel::_hx_system::debug::console::ConsoleUtil_obj::registerObject(objectAlias,cl);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Console_obj,registerClass,(void))

void Console_obj::destroy(){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","destroy",0x788f2624,"flixel.system.debug.console.Console.destroy","flixel/system/debug/console/Console.hx",317,0x367943c8)
            	HX_STACK_THIS(this)
HXLINE( 318)		this->super::destroy();
HXLINE( 321)		this->input->removeEventListener(HX_("focusIn",dd,45,83,41),this->onFocus_dyn(),null());
HXLINE( 322)		this->input->removeEventListener(HX_("focusOut",96,6f,5e,11),this->onFocusLost_dyn(),null());
HXLINE( 323)		this->input->removeEventListener(HX_("keyDown",a1,69,47,9c),this->onKeyDown_dyn(),null());
HXLINE( 326)		Bool _hx_tmp = hx::IsNotNull( this->input );
HXDLIN( 326)		if (_hx_tmp) {
HXLINE( 328)			this->removeChild(this->input);
HXLINE( 329)			this->input = null();
            		}
HXLINE( 332)		this->registeredObjects = null();
HXLINE( 333)		this->registeredFunctions = null();
HXLINE( 334)		this->registeredHelp = null();
HXLINE( 336)		this->objectStack = null();
            	}


void Console_obj::updateSize(){
            	HX_STACK_FRAME("flixel.system.debug.console.Console","updateSize",0x97e42880,"flixel.system.debug.console.Console.updateSize","flixel/system/debug/console/Console.hx",343,0x367943c8)
            	HX_STACK_THIS(this)
HXLINE( 344)		this->super::updateSize();
HXLINE( 346)		Int _hx_tmp = (this->_width - (int)4);
HXDLIN( 346)		this->input->set_width(_hx_tmp);
HXLINE( 347)		Int _hx_tmp1 = (this->_height - (int)15);
HXDLIN( 347)		this->input->set_height(_hx_tmp1);
            	}


::String Console_obj::DEFAULT_TEXT;


Console_obj::Console_obj()
{
}

void Console_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Console);
	HX_MARK_MEMBER_NAME(registeredObjects,"registeredObjects");
	HX_MARK_MEMBER_NAME(registeredFunctions,"registeredFunctions");
	HX_MARK_MEMBER_NAME(registeredHelp,"registeredHelp");
	HX_MARK_MEMBER_NAME(objectStack,"objectStack");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(history,"history");
	HX_MARK_MEMBER_NAME(completionList,"completionList");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Console_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(registeredObjects,"registeredObjects");
	HX_VISIT_MEMBER_NAME(registeredFunctions,"registeredFunctions");
	HX_VISIT_MEMBER_NAME(registeredHelp,"registeredHelp");
	HX_VISIT_MEMBER_NAME(objectStack,"objectStack");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(history,"history");
	HX_VISIT_MEMBER_NAME(completionList,"completionList");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Console_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"history") ) { return hx::Val( history); }
		if (HX_FIELD_EQ(inName,"onFocus") ) { return hx::Val( onFocus_dyn()); }
		if (HX_FIELD_EQ(inName,"setText") ) { return hx::Val( setText_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"onKeyDown") ) { return hx::Val( onKeyDown_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"reposition") ) { return hx::Val( reposition_dyn()); }
		if (HX_FIELD_EQ(inName,"updateSize") ) { return hx::Val( updateSize_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"objectStack") ) { return hx::Val( objectStack); }
		if (HX_FIELD_EQ(inName,"onFocusLost") ) { return hx::Val( onFocusLost_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"registerClass") ) { return hx::Val( registerClass_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"registeredHelp") ) { return hx::Val( registeredHelp); }
		if (HX_FIELD_EQ(inName,"completionList") ) { return hx::Val( completionList); }
		if (HX_FIELD_EQ(inName,"processCommand") ) { return hx::Val( processCommand_dyn()); }
		if (HX_FIELD_EQ(inName,"registerObject") ) { return hx::Val( registerObject_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"registerFunction") ) { return hx::Val( registerFunction_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registeredObjects") ) { return hx::Val( registeredObjects); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"registeredFunctions") ) { return hx::Val( registeredFunctions); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createInputTextField") ) { return hx::Val( createInputTextField_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"registerEventListeners") ) { return hx::Val( registerEventListeners_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Console_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::openfl::text::TextField >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"history") ) { history=inValue.Cast<  ::flixel::_hx_system::debug::console::ConsoleHistory >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"objectStack") ) { objectStack=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"registeredHelp") ) { registeredHelp=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"completionList") ) { completionList=inValue.Cast<  ::flixel::_hx_system::debug::completion::CompletionList >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registeredObjects") ) { registeredObjects=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"registeredFunctions") ) { registeredFunctions=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Console_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("registeredObjects","\x72","\x87","\x9b","\x2a"));
	outFields->push(HX_HCSTRING("registeredFunctions","\x79","\x8c","\x8a","\x1e"));
	outFields->push(HX_HCSTRING("registeredHelp","\x63","\xe5","\xae","\xb7"));
	outFields->push(HX_HCSTRING("objectStack","\x09","\x84","\x3a","\xf3"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("history","\x54","\x35","\x47","\x64"));
	outFields->push(HX_HCSTRING("completionList","\x9a","\xd1","\x5d","\x23"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Console_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Console_obj,registeredObjects),HX_HCSTRING("registeredObjects","\x72","\x87","\x9b","\x2a")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Console_obj,registeredFunctions),HX_HCSTRING("registeredFunctions","\x79","\x8c","\x8a","\x1e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Console_obj,registeredHelp),HX_HCSTRING("registeredHelp","\x63","\xe5","\xae","\xb7")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Console_obj,objectStack),HX_HCSTRING("objectStack","\x09","\x84","\x3a","\xf3")},
	{hx::fsObject /*::openfl::text::TextField*/ ,(int)offsetof(Console_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsObject /*::flixel::_hx_system::debug::console::ConsoleHistory*/ ,(int)offsetof(Console_obj,history),HX_HCSTRING("history","\x54","\x35","\x47","\x64")},
	{hx::fsObject /*::flixel::_hx_system::debug::completion::CompletionList*/ ,(int)offsetof(Console_obj,completionList),HX_HCSTRING("completionList","\x9a","\xd1","\x5d","\x23")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Console_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Console_obj::DEFAULT_TEXT,HX_HCSTRING("DEFAULT_TEXT","\x4b","\x9c","\x59","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Console_obj_sMemberFields[] = {
	HX_HCSTRING("registeredObjects","\x72","\x87","\x9b","\x2a"),
	HX_HCSTRING("registeredFunctions","\x79","\x8c","\x8a","\x1e"),
	HX_HCSTRING("registeredHelp","\x63","\xe5","\xae","\xb7"),
	HX_HCSTRING("objectStack","\x09","\x84","\x3a","\xf3"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("history","\x54","\x35","\x47","\x64"),
	HX_HCSTRING("completionList","\x9a","\xd1","\x5d","\x23"),
	HX_HCSTRING("createInputTextField","\x7f","\x2b","\x43","\x44"),
	HX_HCSTRING("registerEventListeners","\xc8","\x2b","\x6e","\x76"),
	HX_HCSTRING("onFocus","\x39","\xfe","\xc6","\x9a"),
	HX_HCSTRING("onFocusLost","\xbd","\xe4","\x85","\x41"),
	HX_HCSTRING("onKeyDown","\x42","\x22","\xf2","\x73"),
	HX_HCSTRING("setText","\x6f","\x0d","\x7e","\x12"),
	HX_HCSTRING("processCommand","\x9c","\xb2","\xcb","\x33"),
	HX_HCSTRING("reposition","\x5c","\x6f","\x62","\xa5"),
	HX_HCSTRING("registerFunction","\x9b","\xa8","\x15","\x13"),
	HX_HCSTRING("registerObject","\x82","\x05","\x81","\xdb"),
	HX_HCSTRING("registerClass","\xd5","\x3a","\xc1","\x3d"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("updateSize","\x6a","\x8b","\x08","\x05"),
	::String(null()) };

static void Console_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Console_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Console_obj::DEFAULT_TEXT,"DEFAULT_TEXT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Console_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Console_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Console_obj::DEFAULT_TEXT,"DEFAULT_TEXT");
};

#endif

hx::Class Console_obj::__mClass;

static ::String Console_obj_sStaticFields[] = {
	HX_HCSTRING("DEFAULT_TEXT","\x4b","\x9c","\x59","\x2d"),
	::String(null())
};

void Console_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.console.Console","\x98","\x1f","\xeb","\x2e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Console_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Console_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Console_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Console_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Console_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Console_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Console_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Console_obj::__boot()
{
{
            	HX_STACK_FRAME("flixel.system.debug.console.Console","boot",0x712d8cc8,"flixel.system.debug.console.Console.boot","flixel/system/debug/console/Console.hx",36,0x367943c8)
HXLINE(  36)		DEFAULT_TEXT = HX_("(Click here / press [Tab] to enter command. Type 'help' for help.)",f9,4e,c0,26);
            	}
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace console
