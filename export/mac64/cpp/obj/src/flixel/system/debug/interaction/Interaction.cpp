// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_GraphicInteractive
#include <flixel/system/debug/GraphicInteractive.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Eraser
#include <flixel/system/debug/interaction/tools/Eraser.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover
#include <flixel/system/debug/interaction/tools/Mover.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer
#include <flixel/system/debug/interaction/tools/Pointer.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_scaleModes_BaseScaleMode
#include <flixel/system/scaleModes/BaseScaleMode.h>
#endif
#ifndef INCLUDED_flixel_system_ui_FlxSystemButton
#include <flixel/system/ui/FlxSystemButton.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{

void Interaction_obj::__construct( ::openfl::display::Sprite container){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","new",0xfa21d580,"flixel.system.debug.interaction.Interaction.new","flixel/system/debug/interaction/Interaction.hx",34,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(container,"container")
HXLINE(  53)		this->_flixelPointer =  ::flixel::input::FlxPointer_obj::__new();
HXLINE(  52)		this->_debuggerInteraction = false;
HXLINE(  49)		this->_keysUp =  ::haxe::ds::IntMap_obj::__new();
HXLINE(  48)		this->_keysDown =  ::haxe::ds::IntMap_obj::__new();
HXLINE(  47)		this->_turn = (int)2;
HXLINE(  46)		this->_tools = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  42)		this->pointerPressed = false;
HXLINE(  41)		this->pointerJustReleased = false;
HXLINE(  40)		this->pointerJustPressed = false;
HXLINE(  39)		this->flixelPointer =  ::flixel::math::FlxPoint_obj::__new(null(),null());
HXLINE(  37)		this->selectedItems =  ::flixel::group::FlxTypedGroup_obj::__new(null());
HXLINE(  57)		super::__construct(HX_("Tools",fb,01,5c,a7), ::flixel::_hx_system::debug::GraphicInteractive_obj::__new((int)0,(int)0,null(),null()),(int)40,(int)25,false,null(),null());
HXLINE(  58)		this->reposition((int)2,(int)100);
HXLINE(  59)		this->_container = container;
HXLINE(  61)		this->_customCursor =  ::openfl::display::Sprite_obj::__new();
HXLINE(  62)		this->_customCursor->mouseEnabled = false;
HXLINE(  63)		this->_container->addChild(this->_customCursor);
HXLINE(  66)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Pointer_obj::__new());
HXLINE(  67)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Mover_obj::__new());
HXLINE(  68)		this->addTool( ::flixel::_hx_system::debug::interaction::tools::Eraser_obj::__new());
HXLINE(  70)		::flixel::FlxG_obj::signals->postDraw->add(this->postDraw_dyn());
HXLINE(  71)		::flixel::FlxG_obj::debugger->visibilityChanged->add(this->handleDebuggerVisibilityChanged_dyn());
HXLINE(  73)		::openfl::Lib_obj::current->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null(),null(),null());
HXLINE(  74)		::openfl::Lib_obj::current->stage->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE(  75)		::openfl::Lib_obj::current->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null(),null(),null());
HXLINE(  76)		::openfl::Lib_obj::current->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE(  77)		::openfl::Lib_obj::current->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null(),null(),null());
HXLINE(  79)		this->_container->addEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null(),null(),null());
HXLINE(  80)		this->_container->addEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null(),null(),null());
            	}

Dynamic Interaction_obj::__CreateEmpty() { return new Interaction_obj; }

hx::ObjectPtr< Interaction_obj > Interaction_obj::__new( ::openfl::display::Sprite container)
{
	hx::ObjectPtr< Interaction_obj > _hx_result = new Interaction_obj();
	_hx_result->__construct(container);
	return _hx_result;
}

Dynamic Interaction_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Interaction_obj > _hx_result = new Interaction_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Interaction_obj::handleDebuggerVisibilityChanged(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","handleDebuggerVisibilityChanged",0x3dea5c39,"flixel.system.debug.interaction.Interaction.handleDebuggerVisibilityChanged","flixel/system/debug/interaction/Interaction.hx",85,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE(  85)		Bool _hx_tmp = ::flixel::FlxG_obj::debugger->visible;
HXDLIN(  85)		if (_hx_tmp) {
HXLINE(  86)			this->saveSystemCursorInfo();
            		}
            		else {
HXLINE(  88)			this->restoreSystemCursor();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,handleDebuggerVisibilityChanged,(void))

void Interaction_obj::updateMouse( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","updateMouse",0x7f05a47c,"flixel.system.debug.interaction.Interaction.updateMouse","flixel/system/debug/interaction/Interaction.hx",92,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(  98)		HX_VARI( Float,offsetX) = ((Float)0.0);
HXLINE(  99)		HX_VARI( Float,offsetY) = ((Float)0.0);
HXLINE( 103)		Bool _hx_tmp = hx::IsNotNull( this->activeTool );
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 105)			HX_VARI(  ::openfl::display::BitmapData,cursorIcon) = this->activeTool->cursor;
HXLINE( 106)			Bool _hx_tmp1 = hx::IsNotNull( cursorIcon );
HXDLIN( 106)			if (_hx_tmp1) {
HXLINE( 108)				offsetX = ((Float)((Float)cursorIcon->width / (Float)::flixel::FlxG_obj::scaleMode->scale->x) / (Float)(int)2);
HXLINE( 109)				offsetY = ((Float)((Float)cursorIcon->height / (Float)::flixel::FlxG_obj::scaleMode->scale->y) / (Float)(int)2);
            			}
            		}
HXLINE( 113)		Float _hx_tmp2 = (event->stageX + offsetX);
HXDLIN( 113)		this->_customCursor->set_x(_hx_tmp2);
HXLINE( 114)		Float _hx_tmp3 = (event->stageY + offsetY);
HXDLIN( 114)		this->_customCursor->set_y(_hx_tmp3);
HXLINE( 118)		{
HXLINE( 118)			HX_VARI(  ::flixel::input::FlxPointer,_this) = this->_flixelPointer;
HXDLIN( 118)			Float newX = event->stageX;
HXDLIN( 118)			Float newY = event->stageY;
HXDLIN( 118)			Float _hx_tmp4 = ((Float)newX / (Float)::flixel::FlxG_obj::scaleMode->scale->x);
HXDLIN( 118)			_this->_globalScreenX = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 118)			Float _hx_tmp5 = ((Float)newY / (Float)::flixel::FlxG_obj::scaleMode->scale->y);
HXDLIN( 118)			_this->_globalScreenY = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN( 118)			_this->updatePositions();
            		}
HXLINE( 122)		Float _hx_tmp6 = (this->_flixelPointer->x + offsetX);
HXDLIN( 122)		this->flixelPointer->set_x(_hx_tmp6);
HXLINE( 123)		Float _hx_tmp7 = (this->_flixelPointer->y + offsetY);
HXDLIN( 123)		this->flixelPointer->set_y(_hx_tmp7);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,updateMouse,(void))

void Interaction_obj::handleMouseClick( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","handleMouseClick",0x6baf608b,"flixel.system.debug.interaction.Interaction.handleMouseClick","flixel/system/debug/interaction/Interaction.hx",128,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 131)		Bool _hx_tmp;
HXDLIN( 131)		if ((event->type == HX_("mouseDown",27,b1,c2,ee))) {
HXLINE( 131)			_hx_tmp = this->belongsToDebugger(event->target);
            		}
            		else {
HXLINE( 131)			_hx_tmp = false;
            		}
HXDLIN( 131)		if (_hx_tmp) {
HXLINE( 132)			return;
            		}
HXLINE( 134)		this->pointerJustPressed = (event->type == HX_("mouseDown",27,b1,c2,ee));
HXLINE( 135)		this->pointerJustReleased = (event->type == HX_("mouseUp",e0,f3,72,c0));
HXLINE( 137)		Bool _hx_tmp1 = this->pointerJustPressed;
HXDLIN( 137)		if (_hx_tmp1) {
HXLINE( 138)			this->pointerPressed = true;
            		}
            		else {
HXLINE( 139)			Bool _hx_tmp2 = this->pointerJustReleased;
HXDLIN( 139)			if (_hx_tmp2) {
HXLINE( 140)				this->pointerPressed = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseClick,(void))

Bool Interaction_obj::belongsToDebugger( ::openfl::display::DisplayObject object){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","belongsToDebugger",0x14e3d9d0,"flixel.system.debug.interaction.Interaction.belongsToDebugger","flixel/system/debug/interaction/Interaction.hx",144,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(object,"object")
HXLINE( 145)		Bool _hx_tmp = hx::IsNull( object );
HXDLIN( 145)		if (_hx_tmp) {
HXLINE( 146)			return false;
            		}
            		else {
HXLINE( 147)			Bool _hx_tmp1 = ::Std_obj::is(object,hx::ClassOf< ::flixel::_hx_system::debug::FlxDebugger >());
HXDLIN( 147)			if (_hx_tmp1) {
HXLINE( 148)				return true;
            			}
            		}
HXLINE( 149)		return this->belongsToDebugger(object->parent);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,belongsToDebugger,return )

void Interaction_obj::handleMouseInDebugger( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","handleMouseInDebugger",0xefc0f203,"flixel.system.debug.interaction.Interaction.handleMouseInDebugger","flixel/system/debug/interaction/Interaction.hx",153,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 156)		Bool _hx_tmp = !(this->isActive());
HXDLIN( 156)		if (_hx_tmp) {
HXLINE( 157)			return;
            		}
HXLINE( 159)		if ((event->type == HX_("mouseOver",19,4a,0d,f6))) {
HXLINE( 160)			this->_debuggerInteraction = true;
            		}
            		else {
HXLINE( 161)			if ((event->type == HX_("mouseOut",69,e7,1d,a4))) {
HXLINE( 162)				this->_debuggerInteraction = false;
            			}
            		}
HXLINE( 164)		event->stopPropagation();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleMouseInDebugger,(void))

void Interaction_obj::handleKeyEvent( ::openfl::events::KeyboardEvent event){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","handleKeyEvent",0xda0964a3,"flixel.system.debug.interaction.Interaction.handleKeyEvent","flixel/system/debug/interaction/Interaction.hx",169,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 169)		if ((event->type == HX_("keyDown",a1,69,47,9c))) {
HXLINE( 170)			Int key = event->keyCode;
HXDLIN( 170)			this->_keysDown->set(key,true);
            		}
            		else {
HXLINE( 171)			if ((event->type == HX_("keyUp",da,b9,fe,de))) {
HXLINE( 173)				{
HXLINE( 173)					Int key1 = event->keyCode;
HXDLIN( 173)					this->_keysDown->set(key1,false);
            				}
HXLINE( 174)				{
HXLINE( 174)					Int key2 = event->keyCode;
HXDLIN( 174)					Int value = this->_turn;
HXDLIN( 174)					this->_keysUp->set(key2,value);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,handleKeyEvent,(void))

void Interaction_obj::addTool( ::flixel::_hx_system::debug::interaction::tools::Tool tool){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","addTool",0xefc5b339,"flixel.system.debug.interaction.Interaction.addTool","flixel/system/debug/interaction/Interaction.hx",179,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tool,"tool")
HXLINE( 180)		tool->init(hx::ObjectPtr<OBJ_>(this));
HXLINE( 181)		this->_tools->push(tool);
HXLINE( 184)		HX_VARI(  ::flixel::_hx_system::ui::FlxSystemButton,button) = tool->button;
HXLINE( 185)		Bool _hx_tmp = hx::IsNull( button );
HXDLIN( 185)		if (_hx_tmp) {
HXLINE( 186)			return;
            		}
HXLINE( 188)		Int _hx_tmp1 = ((int)-10 + (this->_tools->length * (int)20));
HXDLIN( 188)		button->set_x(_hx_tmp1);
HXLINE( 189)		button->set_y((int)20);
HXLINE( 190)		this->addChild(button);
HXLINE( 192)		Int _hx_tmp2 = (this->_tools->length * (int)20);
HXDLIN( 192)		Float _hx_tmp3 = ::Math_obj::max(_hx_tmp2,(int)55);
HXDLIN( 192)		this->resize(_hx_tmp3,(int)35);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,addTool,(void))

void Interaction_obj::destroy(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","destroy",0x8b0d421a,"flixel.system.debug.interaction.Interaction.destroy","flixel/system/debug/interaction/Interaction.hx",199,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 200)		::flixel::FlxG_obj::signals->postDraw->remove(this->postDraw_dyn());
HXLINE( 201)		::flixel::FlxG_obj::debugger->visibilityChanged->remove(this->handleDebuggerVisibilityChanged_dyn());
HXLINE( 203)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->updateMouse_dyn(),null());
HXLINE( 204)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("mouseDown",27,b1,c2,ee),this->handleMouseClick_dyn(),null());
HXLINE( 205)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->handleMouseClick_dyn(),null());
HXLINE( 206)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleKeyEvent_dyn(),null());
HXLINE( 207)		::openfl::Lib_obj::current->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->handleKeyEvent_dyn(),null());
HXLINE( 209)		Bool _hx_tmp = hx::IsNotNull( this->_container );
HXDLIN( 209)		if (_hx_tmp) {
HXLINE( 211)			this->_container->removeEventListener(HX_("mouseOver",19,4a,0d,f6),this->handleMouseInDebugger_dyn(),null());
HXLINE( 212)			this->_container->removeEventListener(HX_("mouseOut",69,e7,1d,a4),this->handleMouseInDebugger_dyn(),null());
            		}
HXLINE( 215)		Bool _hx_tmp1 = hx::IsNotNull( this->_customCursor );
HXDLIN( 215)		if (_hx_tmp1) {
HXLINE( 217)			this->_customCursor->parent->removeChild(this->_customCursor);
HXLINE( 218)			this->_customCursor = null();
            		}
HXLINE( 221)		this->_tools = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tools);
HXLINE( 222)		this->selectedItems = ( ( ::flixel::group::FlxTypedGroup)(::flixel::util::FlxDestroyUtil_obj::destroy(this->selectedItems)) );
HXLINE( 223)		this->flixelPointer = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->flixelPointer)) );
HXLINE( 225)		this->_keysDown = null();
HXLINE( 226)		this->_keysUp = null();
            	}


Bool Interaction_obj::isActive(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","isActive",0xbe5b4430,"flixel.system.debug.interaction.Interaction.isActive","flixel/system/debug/interaction/Interaction.hx",231,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 231)		Bool _hx_tmp = ::flixel::FlxG_obj::debugger->visible;
HXDLIN( 231)		if (_hx_tmp) {
HXLINE( 231)			return this->get_visible();
            		}
            		else {
HXLINE( 231)			return false;
            		}
HXDLIN( 231)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,isActive,return )

void Interaction_obj::update(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","update",0x852f74e9,"flixel.system.debug.interaction.Interaction.update","flixel/system/debug/interaction/Interaction.hx",235,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 236)		Bool _hx_tmp = !(this->isActive());
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 237)			return;
            		}
HXLINE( 239)		this->updateCustomCursors();
HXLINE( 241)		{
HXLINE( 241)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 241)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tools;
HXDLIN( 241)			while((_g < _g1->length)){
HXLINE( 241)				HX_VARI(  ::flixel::_hx_system::debug::interaction::tools::Tool,tool) = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 241)				++_g;
HXLINE( 242)				tool->update();
            			}
            		}
HXLINE( 244)		this->pointerJustPressed = false;
HXLINE( 245)		this->pointerJustReleased = false;
HXLINE( 246)		this->_turn++;
            	}


void Interaction_obj::postDraw(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","postDraw",0x505af364,"flixel.system.debug.interaction.Interaction.postDraw","flixel/system/debug/interaction/Interaction.hx",253,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 254)		Bool _hx_tmp = !(this->isActive());
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 255)			return;
            		}
HXLINE( 257)		{
HXLINE( 257)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 257)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tools;
HXDLIN( 257)			while((_g < _g1->length)){
HXLINE( 257)				HX_VARI(  ::flixel::_hx_system::debug::interaction::tools::Tool,tool) = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 257)				++_g;
HXLINE( 258)				tool->draw();
            			}
            		}
HXLINE( 260)		this->drawItemsSelection();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,postDraw,(void))

 ::openfl::display::Graphics Interaction_obj::getDebugGraphics(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","getDebugGraphics",0xd1fe02a8,"flixel.system.debug.interaction.Interaction.getDebugGraphics","flixel/system/debug/interaction/Interaction.hx",264,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 265)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 265)		if (_hx_tmp) {
HXLINE( 267)			::flixel::util::FlxSpriteUtil_obj::flashGfx->clear();
HXLINE( 268)			return ::flixel::util::FlxSpriteUtil_obj::flashGfx;
            		}
HXLINE( 275)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,getDebugGraphics,return )

void Interaction_obj::drawItemsSelection(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","drawItemsSelection",0xcdd9aa30,"flixel.system.debug.interaction.Interaction.drawItemsSelection","flixel/system/debug/interaction/Interaction.hx",279,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 280)		HX_VARI(  ::openfl::display::Graphics,gfx) = this->getDebugGraphics();
HXLINE( 281)		Bool _hx_tmp = hx::IsNull( gfx );
HXDLIN( 281)		if (_hx_tmp) {
HXLINE( 282)			return;
            		}
HXLINE( 284)		{
HXLINE( 284)			HX_VARI(  ::flixel::group::FlxTypedGroupIterator,tmp) =  ::flixel::group::FlxTypedGroupIterator_obj::__new(this->selectedItems->members,null());
HXDLIN( 284)			while(true){
HXLINE( 284)				Bool _hx_tmp1 = !(tmp->hasNext());
HXDLIN( 284)				if (_hx_tmp1) {
HXLINE( 284)					goto _hx_goto_2;
            				}
HXDLIN( 284)				HX_VARI(  ::flixel::FlxObject,member) = tmp->next().StaticCast<  ::flixel::FlxObject >();
HXLINE( 286)				Bool _hx_tmp2;
HXDLIN( 286)				Bool _hx_tmp3;
HXDLIN( 286)				Bool _hx_tmp4 = hx::IsNotNull( member );
HXDLIN( 286)				if (_hx_tmp4) {
HXLINE( 286)					_hx_tmp3 = hx::IsNotNull( member->scrollFactor );
            				}
            				else {
HXLINE( 286)					_hx_tmp3 = false;
            				}
HXDLIN( 286)				if (_hx_tmp3) {
HXLINE( 286)					_hx_tmp2 = member->isOnScreen(null());
            				}
            				else {
HXLINE( 286)					_hx_tmp2 = false;
            				}
HXDLIN( 286)				if (_hx_tmp2) {
HXLINE( 289)					gfx->lineStyle(((Float)0.9),(int)16711680,null(),null(),null(),null(),null(),null());
HXLINE( 290)					Float _hx_tmp5 = (member->x - ::flixel::FlxG_obj::camera->scroll->x);
HXLINE( 291)					Float _hx_tmp6 = (member->y - ::flixel::FlxG_obj::camera->scroll->y);
HXLINE( 292)					Float _hx_tmp7 = member->get_width();
HXDLIN( 292)					Float _hx_tmp8 = member->get_height();
HXLINE( 290)					gfx->drawRect(_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
            				}
            			}
            			_hx_goto_2:;
            		}
HXLINE( 297)		Bool _hx_tmp9 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 297)		if (_hx_tmp9) {
HXLINE( 298)			::flixel::FlxG_obj::camera->buffer->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,drawItemsSelection,(void))

 ::flixel::_hx_system::debug::interaction::tools::Tool Interaction_obj::getTool(hx::Class className){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","getTool",0x860b202e,"flixel.system.debug.interaction.Interaction.getTool","flixel/system/debug/interaction/Interaction.hx",302,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(className,"className")
HXLINE( 303)		{
HXLINE( 303)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 303)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tools;
HXDLIN( 303)			while((_g < _g1->length)){
HXLINE( 303)				HX_VARI(  ::flixel::_hx_system::debug::interaction::tools::Tool,tool) = _g1->__get(_g).StaticCast<  ::flixel::_hx_system::debug::interaction::tools::Tool >();
HXDLIN( 303)				++_g;
HXLINE( 304)				Bool _hx_tmp = ::Std_obj::is(tool,className);
HXDLIN( 304)				if (_hx_tmp) {
HXLINE( 305)					return tool;
            				}
            			}
            		}
HXLINE( 306)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,getTool,return )

void Interaction_obj::toggleVisible(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","toggleVisible",0x4f15685e,"flixel.system.debug.interaction.Interaction.toggleVisible","flixel/system/debug/interaction/Interaction.hx",310,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 311)		this->super::toggleVisible();
HXLINE( 313)		Bool _hx_tmp = !(this->get_visible());
HXDLIN( 313)		if (_hx_tmp) {
HXLINE( 316)			this->setActiveTool(null());
HXLINE( 317)			this->restoreSystemCursor();
            		}
            	}


void Interaction_obj::registerCustomCursor(::String name, ::openfl::display::BitmapData icon){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","registerCustomCursor",0xf323974a,"flixel.system.debug.interaction.Interaction.registerCustomCursor","flixel/system/debug/interaction/Interaction.hx",322,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(icon,"icon")
HXLINE( 323)		Bool _hx_tmp = hx::IsNull( icon );
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 324)			return;
            		}
HXLINE( 329)		HX_VARI(  ::openfl::display::Sprite,sprite) =  ::openfl::display::Sprite_obj::__new();
HXLINE( 330)		sprite->set_visible(false);
HXLINE( 331)		sprite->set_name(name);
HXLINE( 332)		sprite->addChild( ::openfl::display::Bitmap_obj::__new(icon,null(),null()));
HXLINE( 333)		this->_customCursor->addChild(sprite);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Interaction_obj,registerCustomCursor,(void))

void Interaction_obj::updateCustomCursors(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","updateCustomCursors",0x218c1283,"flixel.system.debug.interaction.Interaction.updateCustomCursors","flixel/system/debug/interaction/Interaction.hx",343,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 343)		Bool _hx_tmp;
HXDLIN( 343)		Bool _hx_tmp1 = hx::IsNotNull( this->activeTool );
HXDLIN( 343)		if (_hx_tmp1) {
HXLINE( 343)			_hx_tmp = !(this->_debuggerInteraction);
            		}
            		else {
HXLINE( 343)			_hx_tmp = false;
            		}
HXDLIN( 343)		if (_hx_tmp) {
HXLINE( 346)			Bool _hx_tmp2 = hx::IsNotNull( this->activeTool->cursor );
HXDLIN( 346)			if (_hx_tmp2) {
HXLINE( 356)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 356)				HX_VARI( Int,_g) = this->_customCursor->get_numChildren();
HXDLIN( 356)				while((_g1 < _g)){
HXLINE( 356)					HX_VARI( Int,i) = _g1++;
HXLINE( 358)					HX_VARI(  ::openfl::display::DisplayObject,sprite) = this->_customCursor->getChildAt(i);
HXLINE( 359)					::String _hx_tmp3 = sprite->get_name();
HXDLIN( 359)					::String _hx_tmp4 = this->activeTool->get_name();
HXDLIN( 359)					sprite->set_visible((_hx_tmp3 == _hx_tmp4));
            				}
            			}
            			else {
HXLINE( 367)				::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            			}
            		}
            		else {
HXLINE( 374)			::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,updateCustomCursors,(void))

void Interaction_obj::saveSystemCursorInfo(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","saveSystemCursorInfo",0x622efa70,"flixel.system.debug.interaction.Interaction.saveSystemCursorInfo","flixel/system/debug/interaction/Interaction.hx",380,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 382)		this->_wasMouseVisible = ::flixel::FlxG_obj::mouse->visible;
HXLINE( 383)		this->_wasUsingSystemCursor = ::flixel::FlxG_obj::mouse->useSystemCursor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,saveSystemCursorInfo,(void))

void Interaction_obj::restoreSystemCursor(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","restoreSystemCursor",0x6747acb3,"flixel.system.debug.interaction.Interaction.restoreSystemCursor","flixel/system/debug/interaction/Interaction.hx",388,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 390)		::flixel::FlxG_obj::mouse->set_useSystemCursor(this->_wasUsingSystemCursor);
HXLINE( 391)		::flixel::FlxG_obj::mouse->set_visible(this->_wasMouseVisible);
HXLINE( 392)		this->_customCursor->set_visible(false);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,restoreSystemCursor,(void))

void Interaction_obj::setActiveTool( ::flixel::_hx_system::debug::interaction::tools::Tool value){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","setActiveTool",0x92d80fa0,"flixel.system.debug.interaction.Interaction.setActiveTool","flixel/system/debug/interaction/Interaction.hx",397,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 398)		Bool _hx_tmp = hx::IsNotNull( this->activeTool );
HXDLIN( 398)		if (_hx_tmp) {
HXLINE( 400)			this->activeTool->deactivate();
HXLINE( 401)			this->activeTool->button->set_toggled(true);
            		}
HXLINE( 404)		Bool _hx_tmp1 = hx::IsEq( this->activeTool,value );
HXDLIN( 404)		if (_hx_tmp1) {
HXLINE( 405)			value = null();
            		}
HXLINE( 407)		this->activeTool = value;
HXLINE( 409)		Bool _hx_tmp2 = hx::IsNotNull( this->activeTool );
HXDLIN( 409)		if (_hx_tmp2) {
HXLINE( 412)			this->setToolsCursorVisibility(true);
HXLINE( 414)			this->activeTool->button->set_toggled(false);
HXLINE( 415)			this->activeTool->activate();
HXLINE( 416)			this->updateCustomCursors();
            		}
            		else {
HXLINE( 422)			this->setSystemCursorVisibility(true);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setActiveTool,(void))

void Interaction_obj::setSystemCursorVisibility(Bool status){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","setSystemCursorVisibility",0x3bad5fb9,"flixel.system.debug.interaction.Interaction.setSystemCursorVisibility","flixel/system/debug/interaction/Interaction.hx",427,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(status,"status")
HXLINE( 429)		::flixel::FlxG_obj::mouse->set_useSystemCursor(status);
HXLINE( 431)		this->_customCursor->set_visible(!(status));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setSystemCursorVisibility,(void))

void Interaction_obj::setToolsCursorVisibility(Bool status){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","setToolsCursorVisibility",0x9dd4e861,"flixel.system.debug.interaction.Interaction.setToolsCursorVisibility","flixel/system/debug/interaction/Interaction.hx",435,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(status,"status")
HXLINE( 437)		::flixel::FlxG_obj::mouse->set_useSystemCursor(false);
HXLINE( 439)		this->_customCursor->set_visible(status);
HXLINE( 441)		if (status) {
HXLINE( 442)			return;
            		}
HXLINE( 447)		{
HXLINE( 447)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 447)			HX_VARI( Int,_g) = this->_customCursor->get_numChildren();
HXDLIN( 447)			while((_g1 < _g)){
HXLINE( 447)				HX_VARI( Int,i) = _g1++;
HXLINE( 448)				this->_customCursor->getChildAt(i)->set_visible(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,setToolsCursorVisibility,(void))

void Interaction_obj::clearSelection(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","clearSelection",0x1e241bdf,"flixel.system.debug.interaction.Interaction.clearSelection","flixel/system/debug/interaction/Interaction.hx",453,0x4548a912)
            	HX_STACK_THIS(this)
HXLINE( 453)		this->selectedItems->clear();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Interaction_obj,clearSelection,(void))

Bool Interaction_obj::keyPressed(Int key){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","keyPressed",0xc6e951a3,"flixel.system.debug.interaction.Interaction.keyPressed","flixel/system/debug/interaction/Interaction.hx",458,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 458)		return this->_keysDown->get(key);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyPressed,return )

Bool Interaction_obj::keyJustPressed(Int key){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","keyJustPressed",0x9fbba157,"flixel.system.debug.interaction.Interaction.keyJustPressed","flixel/system/debug/interaction/Interaction.hx",462,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
HXLINE( 463)		HX_VAR( Int,value);
HXDLIN( 463)		Bool _hx_tmp = hx::IsNull( this->_keysUp->get(key) );
HXDLIN( 463)		if (_hx_tmp) {
HXLINE( 463)			value = (int)0;
            		}
            		else {
HXLINE( 463)			value = this->_keysUp->get(key);
            		}
HXLINE( 464)		return ((this->_turn - value) == (int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Interaction_obj,keyJustPressed,return )

void Interaction_obj::findItemsWithinState(::Array< ::Dynamic> items, ::flixel::FlxState state, ::flixel::math::FlxRect area){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","findItemsWithinState",0x412153bf,"flixel.system.debug.interaction.Interaction.findItemsWithinState","flixel/system/debug/interaction/Interaction.hx",468,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(items,"items")
            	HX_STACK_ARG(state,"state")
            	HX_STACK_ARG(area,"area")
HXLINE( 469)		this->findItemsWithinArea(items,state->members,area);
HXLINE( 470)		Bool _hx_tmp = hx::IsNotNull( state->subState );
HXDLIN( 470)		if (_hx_tmp) {
HXLINE( 471)			this->findItemsWithinState(items,state->subState,area);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,findItemsWithinState,(void))

void Interaction_obj::findItemsWithinArea(::Array< ::Dynamic> items,::Array< ::Dynamic> members, ::flixel::math::FlxRect area){
            	HX_STACK_FRAME("flixel.system.debug.interaction.Interaction","findItemsWithinArea",0xfd927d9f,"flixel.system.debug.interaction.Interaction.findItemsWithinArea","flixel/system/debug/interaction/Interaction.hx",486,0x4548a912)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(items,"items")
            	HX_STACK_ARG(members,"members")
            	HX_STACK_ARG(area,"area")
HXLINE( 488)		HX_VARI( Int,i) = members->length;
HXLINE( 489)		while(true){
HXLINE( 489)			Int _hx_tmp = i--;
HXDLIN( 489)			if (!((_hx_tmp > (int)0))) {
HXLINE( 489)				goto _hx_goto_6;
            			}
HXLINE( 491)			HX_VARI(  ::flixel::FlxBasic,member) = members->__get(i).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 493)			Bool _hx_tmp1;
HXDLIN( 493)			Bool _hx_tmp2;
HXDLIN( 493)			Bool _hx_tmp3 = hx::IsNotNull( member );
HXDLIN( 493)			if (_hx_tmp3) {
HXLINE( 493)				_hx_tmp2 = !(member->visible);
            			}
            			else {
HXLINE( 493)				_hx_tmp2 = true;
            			}
HXDLIN( 493)			if (!(_hx_tmp2)) {
HXLINE( 493)				_hx_tmp1 = !(member->exists);
            			}
            			else {
HXLINE( 493)				_hx_tmp1 = true;
            			}
HXDLIN( 493)			if (_hx_tmp1) {
HXLINE( 494)				continue;
            			}
HXLINE( 496)			HX_VARI(  ::flixel::group::FlxTypedGroup,group) = ::flixel::group::FlxTypedGroup_obj::resolveGroup(member);
HXLINE( 497)			Bool _hx_tmp4 = hx::IsNotNull( group );
HXDLIN( 497)			if (_hx_tmp4) {
HXLINE( 498)				this->findItemsWithinArea(items,group->members,area);
            			}
            			else {
HXLINE( 499)				Bool _hx_tmp5;
HXDLIN( 499)				Bool _hx_tmp6 = ::Std_obj::is(member,hx::ClassOf< ::flixel::FlxSprite >());
HXDLIN( 499)				if (_hx_tmp6) {
HXLINE( 500)					HX_VARI(  ::flixel::math::FlxRect,Rect) = hx::TCast<  ::flixel::FlxObject >::cast(member)->getHitbox(null());
HXDLIN( 500)					HX_VAR( Bool,result);
HXDLIN( 500)					Bool _hx_tmp7;
HXDLIN( 500)					Bool _hx_tmp8;
HXDLIN( 500)					if (((Rect->x + Rect->width) > area->x)) {
HXLINE( 500)						_hx_tmp8 = (Rect->x < (area->x + area->width));
            					}
            					else {
HXLINE( 500)						_hx_tmp8 = false;
            					}
HXDLIN( 500)					if (_hx_tmp8) {
HXLINE( 500)						_hx_tmp7 = ((Rect->y + Rect->height) > area->y);
            					}
            					else {
HXLINE( 500)						_hx_tmp7 = false;
            					}
HXDLIN( 500)					if (_hx_tmp7) {
HXLINE( 500)						result = (Rect->y < (area->y + area->height));
            					}
            					else {
HXLINE( 500)						result = false;
            					}
HXDLIN( 500)					Bool _hx_tmp9 = Rect->_weak;
HXDLIN( 500)					if (_hx_tmp9) {
HXLINE( 500)						Bool _hx_tmp10 = !(Rect->_inPool);
HXDLIN( 500)						if (_hx_tmp10) {
HXLINE( 500)							Rect->_inPool = true;
HXDLIN( 500)							Rect->_weak = false;
HXDLIN( 500)							::flixel::math::FlxRect_obj::_pool->putUnsafe(Rect);
            						}
            					}
HXLINE( 499)					_hx_tmp5 = result;
            				}
            				else {
HXLINE( 499)					_hx_tmp5 = false;
            				}
HXDLIN( 499)				if (_hx_tmp5) {
HXLINE( 501)					items->push(member);
            				}
            			}
            		}
            		_hx_goto_6:;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Interaction_obj,findItemsWithinArea,(void))


Interaction_obj::Interaction_obj()
{
}

void Interaction_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Interaction);
	HX_MARK_MEMBER_NAME(activeTool,"activeTool");
	HX_MARK_MEMBER_NAME(selectedItems,"selectedItems");
	HX_MARK_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_MARK_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_MARK_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_MARK_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_MARK_MEMBER_NAME(_container,"_container");
	HX_MARK_MEMBER_NAME(_customCursor,"_customCursor");
	HX_MARK_MEMBER_NAME(_tools,"_tools");
	HX_MARK_MEMBER_NAME(_turn,"_turn");
	HX_MARK_MEMBER_NAME(_keysDown,"_keysDown");
	HX_MARK_MEMBER_NAME(_keysUp,"_keysUp");
	HX_MARK_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_MARK_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_MARK_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_MARK_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Interaction_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(activeTool,"activeTool");
	HX_VISIT_MEMBER_NAME(selectedItems,"selectedItems");
	HX_VISIT_MEMBER_NAME(flixelPointer,"flixelPointer");
	HX_VISIT_MEMBER_NAME(pointerJustPressed,"pointerJustPressed");
	HX_VISIT_MEMBER_NAME(pointerJustReleased,"pointerJustReleased");
	HX_VISIT_MEMBER_NAME(pointerPressed,"pointerPressed");
	HX_VISIT_MEMBER_NAME(_container,"_container");
	HX_VISIT_MEMBER_NAME(_customCursor,"_customCursor");
	HX_VISIT_MEMBER_NAME(_tools,"_tools");
	HX_VISIT_MEMBER_NAME(_turn,"_turn");
	HX_VISIT_MEMBER_NAME(_keysDown,"_keysDown");
	HX_VISIT_MEMBER_NAME(_keysUp,"_keysUp");
	HX_VISIT_MEMBER_NAME(_wasMouseVisible,"_wasMouseVisible");
	HX_VISIT_MEMBER_NAME(_wasUsingSystemCursor,"_wasUsingSystemCursor");
	HX_VISIT_MEMBER_NAME(_debuggerInteraction,"_debuggerInteraction");
	HX_VISIT_MEMBER_NAME(_flixelPointer,"_flixelPointer");
	 ::flixel::_hx_system::debug::Window_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Interaction_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { return hx::Val( _turn); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { return hx::Val( _tools); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { return hx::Val( _keysUp); }
		if (HX_FIELD_EQ(inName,"addTool") ) { return hx::Val( addTool_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"getTool") ) { return hx::Val( getTool_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( isActive_dyn()); }
		if (HX_FIELD_EQ(inName,"postDraw") ) { return hx::Val( postDraw_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { return hx::Val( _keysDown); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { return hx::Val( activeTool); }
		if (HX_FIELD_EQ(inName,"_container") ) { return hx::Val( _container); }
		if (HX_FIELD_EQ(inName,"keyPressed") ) { return hx::Val( keyPressed_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"updateMouse") ) { return hx::Val( updateMouse_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { return hx::Val( selectedItems); }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { return hx::Val( flixelPointer); }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { return hx::Val( _customCursor); }
		if (HX_FIELD_EQ(inName,"toggleVisible") ) { return hx::Val( toggleVisible_dyn()); }
		if (HX_FIELD_EQ(inName,"setActiveTool") ) { return hx::Val( setActiveTool_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { return hx::Val( pointerPressed); }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { return hx::Val( _flixelPointer); }
		if (HX_FIELD_EQ(inName,"handleKeyEvent") ) { return hx::Val( handleKeyEvent_dyn()); }
		if (HX_FIELD_EQ(inName,"clearSelection") ) { return hx::Val( clearSelection_dyn()); }
		if (HX_FIELD_EQ(inName,"keyJustPressed") ) { return hx::Val( keyJustPressed_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { return hx::Val( _wasMouseVisible); }
		if (HX_FIELD_EQ(inName,"handleMouseClick") ) { return hx::Val( handleMouseClick_dyn()); }
		if (HX_FIELD_EQ(inName,"getDebugGraphics") ) { return hx::Val( getDebugGraphics_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"belongsToDebugger") ) { return hx::Val( belongsToDebugger_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { return hx::Val( pointerJustPressed); }
		if (HX_FIELD_EQ(inName,"drawItemsSelection") ) { return hx::Val( drawItemsSelection_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { return hx::Val( pointerJustReleased); }
		if (HX_FIELD_EQ(inName,"updateCustomCursors") ) { return hx::Val( updateCustomCursors_dyn()); }
		if (HX_FIELD_EQ(inName,"restoreSystemCursor") ) { return hx::Val( restoreSystemCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"findItemsWithinArea") ) { return hx::Val( findItemsWithinArea_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { return hx::Val( _debuggerInteraction); }
		if (HX_FIELD_EQ(inName,"registerCustomCursor") ) { return hx::Val( registerCustomCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"saveSystemCursorInfo") ) { return hx::Val( saveSystemCursorInfo_dyn()); }
		if (HX_FIELD_EQ(inName,"findItemsWithinState") ) { return hx::Val( findItemsWithinState_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { return hx::Val( _wasUsingSystemCursor); }
		if (HX_FIELD_EQ(inName,"handleMouseInDebugger") ) { return hx::Val( handleMouseInDebugger_dyn()); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setToolsCursorVisibility") ) { return hx::Val( setToolsCursorVisibility_dyn()); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"setSystemCursorVisibility") ) { return hx::Val( setSystemCursorVisibility_dyn()); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"handleDebuggerVisibilityChanged") ) { return hx::Val( handleDebuggerVisibilityChanged_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Interaction_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_turn") ) { _turn=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_tools") ) { _tools=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_keysUp") ) { _keysUp=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_keysDown") ) { _keysDown=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"activeTool") ) { activeTool=inValue.Cast<  ::flixel::_hx_system::debug::interaction::tools::Tool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_container") ) { _container=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectedItems") ) { selectedItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"flixelPointer") ) { flixelPointer=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_customCursor") ) { _customCursor=inValue.Cast<  ::openfl::display::Sprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"pointerPressed") ) { pointerPressed=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flixelPointer") ) { _flixelPointer=inValue.Cast<  ::flixel::input::FlxPointer >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_wasMouseVisible") ) { _wasMouseVisible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"pointerJustPressed") ) { pointerJustPressed=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"pointerJustReleased") ) { pointerJustReleased=inValue.Cast< Bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_debuggerInteraction") ) { _debuggerInteraction=inValue.Cast< Bool >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"_wasUsingSystemCursor") ) { _wasUsingSystemCursor=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Interaction_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("activeTool","\x3e","\x24","\x2c","\xf6"));
	outFields->push(HX_HCSTRING("selectedItems","\xa5","\x87","\x4e","\xb8"));
	outFields->push(HX_HCSTRING("flixelPointer","\xc1","\xe9","\x8f","\xfe"));
	outFields->push(HX_HCSTRING("pointerJustPressed","\x19","\xd4","\xe3","\x63"));
	outFields->push(HX_HCSTRING("pointerJustReleased","\x66","\xcf","\x4b","\x0a"));
	outFields->push(HX_HCSTRING("pointerPressed","\x65","\x7b","\x0c","\x9c"));
	outFields->push(HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b"));
	outFields->push(HX_HCSTRING("_customCursor","\x46","\x78","\xf4","\x20"));
	outFields->push(HX_HCSTRING("_tools","\x5c","\xd9","\x15","\x10"));
	outFields->push(HX_HCSTRING("_turn","\x5c","\x07","\x17","\x00"));
	outFields->push(HX_HCSTRING("_keysDown","\xd5","\x07","\x2e","\x5d"));
	outFields->push(HX_HCSTRING("_keysUp","\x0e","\xa3","\x71","\xae"));
	outFields->push(HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91"));
	outFields->push(HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6"));
	outFields->push(HX_HCSTRING("_debuggerInteraction","\x32","\x64","\xf1","\x95"));
	outFields->push(HX_HCSTRING("_flixelPointer","\x02","\xda","\xe1","\x3c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Interaction_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::_hx_system::debug::interaction::tools::Tool*/ ,(int)offsetof(Interaction_obj,activeTool),HX_HCSTRING("activeTool","\x3e","\x24","\x2c","\xf6")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(Interaction_obj,selectedItems),HX_HCSTRING("selectedItems","\xa5","\x87","\x4e","\xb8")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Interaction_obj,flixelPointer),HX_HCSTRING("flixelPointer","\xc1","\xe9","\x8f","\xfe")},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerJustPressed),HX_HCSTRING("pointerJustPressed","\x19","\xd4","\xe3","\x63")},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerJustReleased),HX_HCSTRING("pointerJustReleased","\x66","\xcf","\x4b","\x0a")},
	{hx::fsBool,(int)offsetof(Interaction_obj,pointerPressed),HX_HCSTRING("pointerPressed","\x65","\x7b","\x0c","\x9c")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Interaction_obj,_container),HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b")},
	{hx::fsObject /*::openfl::display::Sprite*/ ,(int)offsetof(Interaction_obj,_customCursor),HX_HCSTRING("_customCursor","\x46","\x78","\xf4","\x20")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Interaction_obj,_tools),HX_HCSTRING("_tools","\x5c","\xd9","\x15","\x10")},
	{hx::fsInt,(int)offsetof(Interaction_obj,_turn),HX_HCSTRING("_turn","\x5c","\x07","\x17","\x00")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Interaction_obj,_keysDown),HX_HCSTRING("_keysDown","\xd5","\x07","\x2e","\x5d")},
	{hx::fsObject /*::haxe::ds::IntMap*/ ,(int)offsetof(Interaction_obj,_keysUp),HX_HCSTRING("_keysUp","\x0e","\xa3","\x71","\xae")},
	{hx::fsBool,(int)offsetof(Interaction_obj,_wasMouseVisible),HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91")},
	{hx::fsBool,(int)offsetof(Interaction_obj,_wasUsingSystemCursor),HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6")},
	{hx::fsBool,(int)offsetof(Interaction_obj,_debuggerInteraction),HX_HCSTRING("_debuggerInteraction","\x32","\x64","\xf1","\x95")},
	{hx::fsObject /*::flixel::input::FlxPointer*/ ,(int)offsetof(Interaction_obj,_flixelPointer),HX_HCSTRING("_flixelPointer","\x02","\xda","\xe1","\x3c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Interaction_obj_sStaticStorageInfo = 0;
#endif

static ::String Interaction_obj_sMemberFields[] = {
	HX_HCSTRING("activeTool","\x3e","\x24","\x2c","\xf6"),
	HX_HCSTRING("selectedItems","\xa5","\x87","\x4e","\xb8"),
	HX_HCSTRING("flixelPointer","\xc1","\xe9","\x8f","\xfe"),
	HX_HCSTRING("pointerJustPressed","\x19","\xd4","\xe3","\x63"),
	HX_HCSTRING("pointerJustReleased","\x66","\xcf","\x4b","\x0a"),
	HX_HCSTRING("pointerPressed","\x65","\x7b","\x0c","\x9c"),
	HX_HCSTRING("_container","\x02","\xf1","\x15","\x1b"),
	HX_HCSTRING("_customCursor","\x46","\x78","\xf4","\x20"),
	HX_HCSTRING("_tools","\x5c","\xd9","\x15","\x10"),
	HX_HCSTRING("_turn","\x5c","\x07","\x17","\x00"),
	HX_HCSTRING("_keysDown","\xd5","\x07","\x2e","\x5d"),
	HX_HCSTRING("_keysUp","\x0e","\xa3","\x71","\xae"),
	HX_HCSTRING("_wasMouseVisible","\x17","\x92","\xd7","\x91"),
	HX_HCSTRING("_wasUsingSystemCursor","\xff","\xd8","\x04","\xe6"),
	HX_HCSTRING("_debuggerInteraction","\x32","\x64","\xf1","\x95"),
	HX_HCSTRING("_flixelPointer","\x02","\xda","\xe1","\x3c"),
	HX_HCSTRING("handleDebuggerVisibilityChanged","\x19","\xe7","\xa4","\x01"),
	HX_HCSTRING("updateMouse","\x5c","\x7f","\xfd","\xf1"),
	HX_HCSTRING("handleMouseClick","\xab","\x19","\xf2","\x35"),
	HX_HCSTRING("belongsToDebugger","\xb0","\x1c","\x03","\x45"),
	HX_HCSTRING("handleMouseInDebugger","\xe3","\x24","\x6b","\x87"),
	HX_HCSTRING("handleKeyEvent","\xc3","\x95","\x05","\x08"),
	HX_HCSTRING("addTool","\x19","\x9e","\x3e","\x89"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("isActive","\x50","\xdd","\xaf","\x6e"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("postDraw","\x84","\x8c","\xaf","\x00"),
	HX_HCSTRING("getDebugGraphics","\xc8","\xbb","\x40","\x9c"),
	HX_HCSTRING("drawItemsSelection","\x50","\xeb","\x14","\xb9"),
	HX_HCSTRING("getTool","\x0e","\x0b","\x84","\x1f"),
	HX_HCSTRING("toggleVisible","\x3e","\xbb","\xe1","\x53"),
	HX_HCSTRING("registerCustomCursor","\x6a","\x60","\x89","\x94"),
	HX_HCSTRING("updateCustomCursors","\x63","\xcd","\x29","\x0a"),
	HX_HCSTRING("saveSystemCursorInfo","\x90","\xc3","\x94","\x03"),
	HX_HCSTRING("restoreSystemCursor","\x93","\x67","\xe5","\x4f"),
	HX_HCSTRING("setActiveTool","\x80","\x62","\xa4","\x97"),
	HX_HCSTRING("setSystemCursorVisibility","\x99","\x82","\x1a","\xf3"),
	HX_HCSTRING("setToolsCursorVisibility","\x81","\xc1","\x25","\x4d"),
	HX_HCSTRING("clearSelection","\xff","\x4c","\x20","\x4c"),
	HX_HCSTRING("keyPressed","\xc3","\x72","\x6e","\xa8"),
	HX_HCSTRING("keyJustPressed","\x77","\xd2","\xb7","\xcd"),
	HX_HCSTRING("findItemsWithinState","\xdf","\x1c","\x87","\xe2"),
	HX_HCSTRING("findItemsWithinArea","\x7f","\x38","\x30","\xe6"),
	::String(null()) };

static void Interaction_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Interaction_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Interaction_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Interaction_obj::__mClass,"__mClass");
};

#endif

hx::Class Interaction_obj::__mClass;

void Interaction_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.interaction.Interaction","\x8e","\x55","\xb1","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Interaction_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Interaction_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Interaction_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Interaction_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Interaction_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Interaction_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
