// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_Interaction
#include <flixel/system/debug/interaction/Interaction.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_GraphicMoverTool
#include <flixel/system/debug/interaction/tools/GraphicMoverTool.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Mover
#include <flixel/system/debug/interaction/tools/Mover.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Pointer
#include <flixel/system/debug/interaction/tools/Pointer.h>
#endif
#ifndef INCLUDED_flixel_system_debug_interaction_tools_Tool
#include <flixel/system/debug/interaction/tools/Tool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

namespace flixel{
namespace _hx_system{
namespace debug{
namespace interaction{
namespace tools{

void Mover_obj::__construct(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.tools.Mover","new",0x9079915c,"flixel.system.debug.interaction.tools.Mover.new","flixel/system/debug/interaction/tools/Mover.hx",17,0xc1a785b7)
            	HX_STACK_THIS(this)
HXLINE(  19)		this->_dragging = false;
HXLINE(  17)		super::__construct();
            	}

Dynamic Mover_obj::__CreateEmpty() { return new Mover_obj; }

hx::ObjectPtr< Mover_obj > Mover_obj::__new()
{
	hx::ObjectPtr< Mover_obj > _hx_result = new Mover_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Mover_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Mover_obj > _hx_result = new Mover_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::flixel::_hx_system::debug::interaction::tools::Tool Mover_obj::init( ::flixel::_hx_system::debug::interaction::Interaction brain){
            	HX_STACK_FRAME("flixel.system.debug.interaction.tools.Mover","init",0xd69e5694,"flixel.system.debug.interaction.tools.Mover.init","flixel/system/debug/interaction/tools/Mover.hx",23,0xc1a785b7)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(brain,"brain")
HXLINE(  24)		this->super::init(brain);
HXLINE(  25)		this->_lastCursorPosition =  ::flixel::math::FlxPoint_obj::__new(brain->flixelPointer->x,brain->flixelPointer->x);
HXLINE(  27)		this->_name = HX_("Mover",21,3c,93,9f);
HXLINE(  28)		this->_shortcut = HX_("Shift",62,5c,50,0f);
HXLINE(  29)		this->setButton(hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool >());
HXLINE(  30)		this->setCursor( ::flixel::_hx_system::debug::interaction::tools::GraphicMoverTool_obj::__new((int)0,(int)0,null(),null()));
HXLINE(  32)		return hx::ObjectPtr<OBJ_>(this);
            	}


void Mover_obj::update(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.tools.Mover","update",0x6b898a8d,"flixel.system.debug.interaction.tools.Mover.update","flixel/system/debug/interaction/tools/Mover.hx",36,0xc1a785b7)
            	HX_STACK_THIS(this)
HXLINE(  38)		Bool _hx_tmp;
HXDLIN(  38)		Bool _hx_tmp1 = !(this->isActive());
HXDLIN(  38)		if (_hx_tmp1) {
HXLINE(  38)			_hx_tmp = !(this->_brain->keyPressed((int)16));
            		}
            		else {
HXLINE(  38)			_hx_tmp = false;
            		}
HXDLIN(  38)		if (_hx_tmp) {
HXLINE(  39)			return;
            		}
HXLINE(  41)		Bool _hx_tmp2;
HXDLIN(  41)		if (this->_brain->pointerPressed) {
HXLINE(  41)			_hx_tmp2 = !(this->_dragging);
            		}
            		else {
HXLINE(  41)			_hx_tmp2 = false;
            		}
HXDLIN(  41)		if (_hx_tmp2) {
HXLINE(  42)			this->startDragging();
            		}
            		else {
HXLINE(  43)			Bool _hx_tmp3;
HXDLIN(  43)			if (this->_brain->pointerPressed) {
HXLINE(  43)				_hx_tmp3 = this->_dragging;
            			}
            			else {
HXLINE(  43)				_hx_tmp3 = false;
            			}
HXDLIN(  43)			if (_hx_tmp3) {
HXLINE(  44)				this->doDragging();
            			}
            			else {
HXLINE(  45)				Bool _hx_tmp4 = this->_brain->pointerJustReleased;
HXDLIN(  45)				if (_hx_tmp4) {
HXLINE(  46)					this->stopDragging();
            				}
            			}
            		}
HXLINE(  48)		this->_lastCursorPosition->set_x(this->_brain->flixelPointer->x);
HXLINE(  49)		this->_lastCursorPosition->set_y(this->_brain->flixelPointer->y);
            	}


void Mover_obj::stopDragging(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.tools.Mover","stopDragging",0x8f5cfa75,"flixel.system.debug.interaction.tools.Mover.stopDragging","flixel/system/debug/interaction/tools/Mover.hx",54,0xc1a785b7)
            	HX_STACK_THIS(this)
HXLINE(  54)		this->_dragging = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mover_obj,stopDragging,(void))

void Mover_obj::startDragging(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.tools.Mover","startDragging",0xf80ef34d,"flixel.system.debug.interaction.tools.Mover.startDragging","flixel/system/debug/interaction/tools/Mover.hx",58,0xc1a785b7)
            	HX_STACK_THIS(this)
HXLINE(  59)		if (this->_dragging) {
HXLINE(  60)			return;
            		}
HXLINE(  62)		this->_dragging = true;
HXLINE(  67)		Bool _hx_tmp;
HXDLIN(  67)		Bool _hx_tmp1 = !(this->isActive());
HXDLIN(  67)		if (_hx_tmp1) {
HXLINE(  67)			_hx_tmp = ::Std_obj::is(this->_brain->activeTool,hx::ClassOf< ::flixel::_hx_system::debug::interaction::tools::Pointer >());
            		}
            		else {
HXLINE(  67)			_hx_tmp = false;
            		}
HXDLIN(  67)		if (_hx_tmp) {
HXLINE(  68)			hx::TCast<  ::flixel::_hx_system::debug::interaction::tools::Pointer >::cast(this->_brain->activeTool)->cancelSelection();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mover_obj,startDragging,(void))

void Mover_obj::doDragging(){
            	HX_STACK_FRAME("flixel.system.debug.interaction.tools.Mover","doDragging",0xb6bbe9fe,"flixel.system.debug.interaction.tools.Mover.doDragging","flixel/system/debug/interaction/tools/Mover.hx",72,0xc1a785b7)
            	HX_STACK_THIS(this)
HXLINE(  73)		HX_VARI( Float,dx) = (this->_brain->flixelPointer->x - this->_lastCursorPosition->x);
HXLINE(  74)		HX_VARI( Float,dy) = (this->_brain->flixelPointer->y - this->_lastCursorPosition->y);
HXLINE(  76)		{
HXLINE(  76)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  76)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_brain->selectedItems->members;
HXDLIN(  76)			while((_g < _g1->length)){
HXLINE(  76)				HX_VARI(  ::flixel::FlxObject,member) = _g1->__get(_g).StaticCast<  ::flixel::FlxObject >();
HXDLIN(  76)				++_g;
HXLINE(  78)				Bool _hx_tmp = !(::Std_obj::is(member,hx::ClassOf< ::flixel::FlxObject >()));
HXDLIN(  78)				if (_hx_tmp) {
HXLINE(  79)					continue;
            				}
HXLINE(  82)				Bool _hx_tmp1 = hx::IsNotNull( member );
HXDLIN(  82)				if (_hx_tmp1) {
HXLINE(  84)					{
HXLINE(  84)						Float _hx_tmp2 = (member->x + dx);
HXDLIN(  84)						member->set_x(_hx_tmp2);
            					}
HXLINE(  85)					{
HXLINE(  85)						Float _hx_tmp3 = (member->y + dy);
HXDLIN(  85)						member->set_y(_hx_tmp3);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Mover_obj,doDragging,(void))


Mover_obj::Mover_obj()
{
}

void Mover_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Mover);
	HX_MARK_MEMBER_NAME(_dragging,"_dragging");
	HX_MARK_MEMBER_NAME(_lastCursorPosition,"_lastCursorPosition");
	 ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Mover_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_dragging,"_dragging");
	HX_VISIT_MEMBER_NAME(_lastCursorPosition,"_lastCursorPosition");
	 ::flixel::_hx_system::debug::interaction::tools::Tool_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Mover_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_dragging") ) { return hx::Val( _dragging); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doDragging") ) { return hx::Val( doDragging_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stopDragging") ) { return hx::Val( stopDragging_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"startDragging") ) { return hx::Val( startDragging_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastCursorPosition") ) { return hx::Val( _lastCursorPosition); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Mover_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"_dragging") ) { _dragging=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_lastCursorPosition") ) { _lastCursorPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mover_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_dragging","\x2e","\x34","\x22","\x7f"));
	outFields->push(HX_HCSTRING("_lastCursorPosition","\xb4","\xfe","\x02","\x31"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Mover_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Mover_obj,_dragging),HX_HCSTRING("_dragging","\x2e","\x34","\x22","\x7f")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Mover_obj,_lastCursorPosition),HX_HCSTRING("_lastCursorPosition","\xb4","\xfe","\x02","\x31")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Mover_obj_sStaticStorageInfo = 0;
#endif

static ::String Mover_obj_sMemberFields[] = {
	HX_HCSTRING("_dragging","\x2e","\x34","\x22","\x7f"),
	HX_HCSTRING("_lastCursorPosition","\xb4","\xfe","\x02","\x31"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("stopDragging","\xf1","\xba","\xec","\xa8"),
	HX_HCSTRING("startDragging","\x51","\x9f","\x47","\x3c"),
	HX_HCSTRING("doDragging","\x7a","\x53","\x01","\xa5"),
	::String(null()) };

static void Mover_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Mover_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Mover_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Mover_obj::__mClass,"__mClass");
};

#endif

hx::Class Mover_obj::__mClass;

void Mover_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.system.debug.interaction.tools.Mover","\x6a","\xf3","\x4e","\x4b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Mover_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Mover_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Mover_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Mover_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mover_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mover_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace debug
} // end namespace interaction
} // end namespace tools
