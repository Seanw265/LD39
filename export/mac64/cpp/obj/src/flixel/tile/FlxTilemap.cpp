// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawTilesItem
#include <flixel/graphics/tile/FlxDrawTilesItem.h>
#endif
#ifndef INCLUDED_flixel_math_FlxCallbackPoint
#include <flixel/math/FlxCallbackPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTile
#include <flixel/tile/FlxTile.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapBuffer
#include <flixel/tile/FlxTilemapBuffer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace flixel{
namespace tile{

void FlxTilemap_obj::__construct(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","new",0xbe02531c,"flixel.tile.FlxTilemap.new","flixel/tile/FlxTilemap.hx",43,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 146)		this->_checkBufferChanges = false;
HXLINE( 124)		this->_scaledTileHeight = ((Float)0);
HXLINE( 123)		this->_scaledTileWidth = ((Float)0);
HXLINE( 121)		this->_tileHeight = (int)0;
HXLINE( 117)		this->_tileWidth = (int)0;
HXLINE( 113)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 109)		this->_flashRect =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 105)		this->_flashPoint =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE(  92)		this->blend = null();
HXLINE(  87)		this->colorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  85)		this->alpha = ((Float)1.0);
HXLINE(  80)		this->color = (int)16777215;
HXLINE(  68)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN(  68)		point->_inPool = false;
HXDLIN(  68)		this->offset = point;
HXLINE(  62)		this->antialiasing = false;
HXLINE(  50)		this->useScaleHack = true;
HXLINE( 150)		super::__construct();
HXLINE( 152)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 152)		if (_hx_tmp) {
HXLINE( 154)			this->_helperPoint =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE( 155)			this->_matrix =  ::flixel::math::FlxMatrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE( 158)		this->scale =  ::flixel::math::FlxCallbackPoint_obj::__new(this->setScaleXCallback_dyn(),this->setScaleYCallback_dyn(),this->setScaleXYCallback_dyn());
HXLINE( 159)		this->scale->set((int)1,(int)1);
HXLINE( 161)		::flixel::FlxG_obj::signals->gameResized->add(this->onGameResized_dyn());
HXLINE( 162)		::flixel::FlxG_obj::cameras->cameraAdded->add(this->onCameraChanged_dyn());
HXLINE( 163)		::flixel::FlxG_obj::cameras->cameraRemoved->add(this->onCameraChanged_dyn());
HXLINE( 164)		::flixel::FlxG_obj::cameras->cameraResized->add(this->onCameraChanged_dyn());
            	}

Dynamic FlxTilemap_obj::__CreateEmpty() { return new FlxTilemap_obj; }

hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__new()
{
	hx::ObjectPtr< FlxTilemap_obj > _hx_result = new FlxTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic FlxTilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxTilemap_obj > _hx_result = new FlxTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

void FlxTilemap_obj::destroy(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","destroy",0xa7f2bdb6,"flixel.tile.FlxTilemap.destroy","flixel/tile/FlxTilemap.hx",180,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 181)		this->_flashPoint = null();
HXLINE( 182)		this->_flashRect = null();
HXLINE( 184)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 185)		this->_buffers = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 187)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 187)		if (!(_hx_tmp)) {
HXLINE( 198)			this->_helperPoint = null();
HXLINE( 199)			this->_matrix = null();
            		}
HXLINE( 202)		this->set_frames(null());
HXLINE( 203)		this->set_graphic(null());
HXLINE( 206)		this->scale = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE( 207)		this->offset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 209)		this->colorTransform = null();
HXLINE( 211)		::flixel::FlxG_obj::signals->gameResized->remove(this->onGameResized_dyn());
HXLINE( 212)		::flixel::FlxG_obj::cameras->cameraAdded->remove(this->onCameraChanged_dyn());
HXLINE( 213)		::flixel::FlxG_obj::cameras->cameraRemoved->remove(this->onCameraChanged_dyn());
HXLINE( 214)		::flixel::FlxG_obj::cameras->cameraResized->remove(this->onCameraChanged_dyn());
HXLINE( 221)		this->shader = null();
HXLINE( 223)		this->super::destroy();
            	}


 ::flixel::graphics::frames::FlxFramesCollection FlxTilemap_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection value){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_frames",0xb39c4aa7,"flixel.tile.FlxTilemap.set_frames","flixel/tile/FlxTilemap.hx",227,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 228)		this->frames = value;
HXLINE( 230)		Bool _hx_tmp = hx::IsNotNull( value );
HXDLIN( 230)		if (_hx_tmp) {
HXLINE( 232)			this->_tileWidth = ::Std_obj::_hx_int(value->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x);
HXLINE( 233)			this->_tileHeight = ::Std_obj::_hx_int(value->frames->__get((int)0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->y);
HXLINE( 234)			this->_flashRect->setTo((int)0,(int)0,this->_tileWidth,this->_tileHeight);
HXLINE( 235)			this->set_graphic(value->parent);
HXLINE( 236)			this->postGraphicLoad();
            		}
HXLINE( 239)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_frames,return )

void FlxTilemap_obj::onGameResized(Int _,Int _1){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","onGameResized",0x240fb4fb,"flixel.tile.FlxTilemap.onGameResized","flixel/tile/FlxTilemap.hx",244,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
            	HX_STACK_ARG(_1,"_1")
HXLINE( 244)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,onGameResized,(void))

void FlxTilemap_obj::onCameraChanged( ::flixel::FlxCamera _){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","onCameraChanged",0xe013f4ec,"flixel.tile.FlxTilemap.onCameraChanged","flixel/tile/FlxTilemap.hx",249,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(_,"_")
HXLINE( 249)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,onCameraChanged,(void))

void FlxTilemap_obj::cacheGraphics(Int TileWidth,Int TileHeight, ::Dynamic TileGraphic){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","cacheGraphics",0x759126e9,"flixel.tile.FlxTilemap.cacheGraphics","flixel/tile/FlxTilemap.hx",253,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileWidth,"TileWidth")
            	HX_STACK_ARG(TileHeight,"TileHeight")
            	HX_STACK_ARG(TileGraphic,"TileGraphic")
HXLINE( 254)		Bool _hx_tmp = ::Std_obj::is(TileGraphic,hx::ClassOf< ::flixel::graphics::frames::FlxFramesCollection >());
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 256)			this->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(TileGraphic) ));
HXLINE( 257)			return;
            		}
HXLINE( 260)		HX_VARI(  ::flixel::graphics::FlxGraphic,graph) = ::flixel::FlxG_obj::bitmap->add(TileGraphic,null(),null());
HXLINE( 261)		Bool _hx_tmp1 = hx::IsNull( graph );
HXDLIN( 261)		if (_hx_tmp1) {
HXLINE( 262)			return;
            		}
HXLINE( 265)		this->_tileWidth = TileWidth;
HXLINE( 266)		Bool _hx_tmp2 = (this->_tileWidth <= (int)0);
HXDLIN( 266)		if (_hx_tmp2) {
HXLINE( 267)			this->_tileWidth = graph->height;
            		}
HXLINE( 269)		this->_tileHeight = TileHeight;
HXLINE( 270)		Bool _hx_tmp3 = (this->_tileHeight <= (int)0);
HXDLIN( 270)		if (_hx_tmp3) {
HXLINE( 271)			this->_tileHeight = this->_tileWidth;
            		}
HXLINE( 273)		Float X = this->_tileWidth;
HXDLIN( 273)		Float Y = this->_tileHeight;
HXDLIN( 273)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 273)		point->_inPool = false;
HXDLIN( 273)		 ::flixel::graphics::frames::FlxTileFrames _hx_tmp4 = ::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null());
HXDLIN( 273)		this->set_frames(_hx_tmp4);
            	}


void FlxTilemap_obj::initTileObjects(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","initTileObjects",0xb20b6ad2,"flixel.tile.FlxTilemap.initTileObjects","flixel/tile/FlxTilemap.hx",277,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 278)		Bool _hx_tmp = hx::IsNull( this->frames );
HXDLIN( 278)		if (_hx_tmp) {
HXLINE( 279)			return;
            		}
HXLINE( 281)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 283)		this->_tileObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 285)		HX_VARI( Int,length) = this->frames->frames->length;
HXLINE( 286)		hx::AddEq(length,this->_startingIndex);
HXLINE( 288)		{
HXLINE( 288)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 288)			HX_VARI( Int,_g) = length;
HXDLIN( 288)			while((_g1 < _g)){
HXLINE( 288)				HX_VARI( Int,i) = _g1++;
HXLINE( 289)				Int _hx_tmp1 = this->_tileWidth;
HXDLIN( 289)				Int _hx_tmp2 = this->_tileHeight;
HXDLIN( 289)				Bool _hx_tmp3 = (i >= this->_drawIndex);
HXDLIN( 289)				Int _hx_tmp4;
HXDLIN( 289)				if ((i >= this->_collideIndex)) {
HXLINE( 289)					_hx_tmp4 = this->allowCollisions;
            				}
            				else {
HXLINE( 289)					_hx_tmp4 = (int)0;
            				}
HXDLIN( 289)				this->_tileObjects->set(i, ::flixel::tile::FlxTile_obj::__new(hx::ObjectPtr<OBJ_>(this),i,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4));
            			}
            		}
            	}


void FlxTilemap_obj::computeDimensions(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","computeDimensions",0x3602f860,"flixel.tile.FlxTilemap.computeDimensions","flixel/tile/FlxTilemap.hx",340,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 341)		this->_scaledTileWidth = (this->_tileWidth * this->scale->x);
HXLINE( 342)		this->_scaledTileHeight = (this->_tileHeight * this->scale->y);
HXLINE( 345)		Float _hx_tmp = (this->widthInTiles * this->_scaledTileWidth);
HXDLIN( 345)		this->set_width(_hx_tmp);
HXLINE( 346)		Float _hx_tmp1 = (this->heightInTiles * this->_scaledTileHeight);
HXDLIN( 346)		this->set_height(_hx_tmp1);
            	}


void FlxTilemap_obj::updateMap(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","updateMap",0x271f1fcf,"flixel.tile.FlxTilemap.updateMap","flixel/tile/FlxTilemap.hx",350,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 356)		HX_VARI( Int,numTiles) = this->_tileObjects->get_length();
HXLINE( 357)		{
HXLINE( 357)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 357)			while((_g1 < numTiles)){
HXLINE( 357)				HX_VARI( Int,i) = _g1++;
HXLINE( 358)				this->updateTile(i);
            			}
            		}
            	}


Bool FlxTilemap_obj::isOnScreen( ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","isOnScreen",0xb4cad0b9,"flixel.tile.FlxTilemap.isOnScreen","flixel/tile/FlxTilemap.hx",441,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 442)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN( 442)		if (_hx_tmp) {
HXLINE( 443)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 445)		HX_VARI( Float,minX) = ((this->x - this->offset->x) - (Camera->scroll->x * this->scrollFactor->x));
HXLINE( 446)		HX_VARI( Float,minY) = ((this->y - this->offset->y) - (Camera->scroll->y * this->scrollFactor->y));
HXLINE( 448)		this->_point->set(minX,minY);
HXLINE( 449)		HX_VARI(  ::flixel::math::FlxPoint,point) = this->_point;
HXDLIN( 449)		Float width = (this->_scaledTileWidth * this->widthInTiles);
HXDLIN( 449)		Float height = (this->_scaledTileHeight * this->heightInTiles);
HXDLIN( 449)		Bool _hx_tmp1;
HXDLIN( 449)		Bool _hx_tmp2;
HXDLIN( 449)		if (((point->x + width) > Camera->viewOffsetX)) {
HXLINE( 449)			_hx_tmp2 = (point->x < Camera->viewOffsetWidth);
            		}
            		else {
HXLINE( 449)			_hx_tmp2 = false;
            		}
HXDLIN( 449)		if (_hx_tmp2) {
HXLINE( 449)			_hx_tmp1 = ((point->y + height) > Camera->viewOffsetY);
            		}
            		else {
HXLINE( 449)			_hx_tmp1 = false;
            		}
HXDLIN( 449)		if (_hx_tmp1) {
HXLINE( 449)			return (point->y < Camera->viewOffsetHeight);
            		}
            		else {
HXLINE( 449)			return false;
            		}
HXDLIN( 449)		return false;
            	}


void FlxTilemap_obj::draw(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","draw",0x7d740dc8,"flixel.tile.FlxTilemap.draw","flixel/tile/FlxTilemap.hx",456,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 458)		Bool _hx_tmp = hx::IsNull( this->graphic );
HXDLIN( 458)		if (_hx_tmp) {
HXLINE( 459)			return;
            		}
HXLINE( 461)		Bool _hx_tmp1 = this->_checkBufferChanges;
HXDLIN( 461)		if (_hx_tmp1) {
HXLINE( 463)			this->refreshBuffers();
HXLINE( 464)			this->_checkBufferChanges = false;
            		}
HXLINE( 467)		HX_VAR(  ::flixel::FlxCamera,camera);
HXLINE( 468)		HX_VAR(  ::flixel::tile::FlxTilemapBuffer,buffer);
HXLINE( 469)		HX_VARI( Int,l) = this->get_cameras()->length;
HXLINE( 471)		{
HXLINE( 471)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 471)			while((_g1 < l)){
HXLINE( 471)				HX_VARI( Int,i) = _g1++;
HXLINE( 473)				::Array< ::Dynamic> _hx_tmp2 = this->get_cameras();
HXDLIN( 473)				camera = _hx_tmp2->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 475)				Bool _hx_tmp3;
HXDLIN( 475)				Bool _hx_tmp4;
HXDLIN( 475)				if (!(!(camera->visible))) {
HXLINE( 475)					_hx_tmp4 = !(camera->exists);
            				}
            				else {
HXLINE( 475)					_hx_tmp4 = true;
            				}
HXDLIN( 475)				if (!(_hx_tmp4)) {
HXLINE( 475)					_hx_tmp3 = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 475)					_hx_tmp3 = true;
            				}
HXDLIN( 475)				if (_hx_tmp3) {
HXLINE( 476)					continue;
            				}
HXLINE( 478)				Bool _hx_tmp5 = hx::IsNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() );
HXDLIN( 478)				if (_hx_tmp5) {
HXLINE( 479)					HX_VARI_NAME(  ::flixel::tile::FlxTilemapBuffer,buffer1,"buffer") =  ::flixel::tile::FlxTilemapBuffer_obj::__new(this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 479)					buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 479)					buffer1->antialiasing = this->antialiasing;
HXDLIN( 479)					this->_buffers[i] = buffer1;
            				}
HXLINE( 481)				buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 483)				Bool _hx_tmp6 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 483)				if (_hx_tmp6) {
HXLINE( 485)					Bool _hx_tmp7 = buffer->isDirty(hx::ObjectPtr<OBJ_>(this),camera);
HXDLIN( 485)					if (_hx_tmp7) {
HXLINE( 486)						this->drawTilemap(buffer,camera);
            					}
HXLINE( 488)					{
HXLINE( 488)						HX_VARI(  ::flixel::math::FlxPoint,_this) = this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXDLIN( 488)						Float X = buffer->x;
HXDLIN( 488)						Float Y = buffer->y;
HXDLIN( 488)						{
HXLINE( 488)							Float _hx_tmp8 = (_this->x + X);
HXDLIN( 488)							_this->set_x(_hx_tmp8);
            						}
HXDLIN( 488)						{
HXLINE( 488)							Float _hx_tmp9 = (_this->y + Y);
HXDLIN( 488)							_this->set_y(_hx_tmp9);
            						}
HXDLIN( 488)						HX_VARI(  ::openfl::geom::Point,FlashPoint) = this->_flashPoint;
HXDLIN( 488)						Bool _hx_tmp10 = hx::IsNull( FlashPoint );
HXDLIN( 488)						if (_hx_tmp10) {
HXLINE( 488)							FlashPoint =  ::openfl::geom::Point_obj::__new(null(),null());
            						}
HXDLIN( 488)						FlashPoint->x = _this->x;
HXDLIN( 488)						FlashPoint->y = _this->y;
            					}
HXLINE( 489)					buffer->draw(camera,this->_flashPoint,this->scale->x,this->scale->y);
            				}
            				else {
HXLINE( 493)					this->drawTilemap(buffer,camera);
            				}
            			}
            		}
            	}


void FlxTilemap_obj::refreshBuffers(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","refreshBuffers",0x89f6f19c,"flixel.tile.FlxTilemap.refreshBuffers","flixel/tile/FlxTilemap.hx",509,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 509)		HX_VARI( Int,_g1) = (int)0;
HXDLIN( 509)		HX_VARI( Int,_g) = this->get_cameras()->length;
HXDLIN( 509)		while((_g1 < _g)){
HXLINE( 509)			HX_VARI( Int,i) = _g1++;
HXLINE( 511)			::Array< ::Dynamic> _hx_tmp = this->get_cameras();
HXDLIN( 511)			HX_VARI(  ::flixel::FlxCamera,camera) = _hx_tmp->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 512)			HX_VARI(  ::flixel::tile::FlxTilemapBuffer,buffer) = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 515)			Bool _hx_tmp1 = hx::IsNull( buffer );
HXDLIN( 515)			if (_hx_tmp1) {
HXLINE( 516)				HX_VARI_NAME(  ::flixel::tile::FlxTilemapBuffer,buffer1,"buffer") =  ::flixel::tile::FlxTilemapBuffer_obj::__new(this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 516)				buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 516)				buffer1->antialiasing = this->antialiasing;
HXDLIN( 516)				this->_buffers[i] = buffer1;
            			}
            			else {
HXLINE( 518)				buffer->resize(this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,refreshBuffers,(void))

void FlxTilemap_obj::setDirty(hx::Null< Bool >  __o_Dirty){
Bool Dirty = __o_Dirty.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","setDirty",0x6396ccd4,"flixel.tile.FlxTilemap.setDirty","flixel/tile/FlxTilemap.hx",529,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Dirty,"Dirty")
HXLINE( 530)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 531)			return;
            		}
HXLINE( 533)		{
HXLINE( 533)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 533)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_buffers;
HXDLIN( 533)			while((_g < _g1->length)){
HXLINE( 533)				HX_VARI(  ::flixel::tile::FlxTilemapBuffer,buffer) = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN( 533)				++_g;
HXLINE( 534)				Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN( 534)				if (_hx_tmp) {
HXLINE( 535)					buffer->dirty = Dirty;
            				}
            			}
            		}
            	}


Bool FlxTilemap_obj::overlapsWithCallback( ::flixel::FlxObject Object, ::Dynamic Callback,hx::Null< Bool >  __o_FlipCallbackParams, ::flixel::math::FlxPoint Position){
Bool FlipCallbackParams = __o_FlipCallbackParams.Default(false);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","overlapsWithCallback",0xe7b56cdb,"flixel.tile.FlxTilemap.overlapsWithCallback","flixel/tile/FlxTilemap.hx",550,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Object,"Object")
            	HX_STACK_ARG(Callback,"Callback")
            	HX_STACK_ARG(FlipCallbackParams,"FlipCallbackParams")
            	HX_STACK_ARG(Position,"Position")
HXLINE( 551)		HX_VARI( Bool,results) = false;
HXLINE( 553)		HX_VARI( Float,xPos) = this->x;
HXLINE( 554)		HX_VARI( Float,yPos) = this->y;
HXLINE( 556)		Bool _hx_tmp = hx::IsNotNull( Position );
HXDLIN( 556)		if (_hx_tmp) {
HXLINE( 558)			xPos = Position->x;
HXLINE( 559)			yPos = Position->y;
            		}
HXLINE( 563)		Float _hx_tmp1 = ((Float)(Object->x - xPos) / (Float)this->_scaledTileWidth);
HXDLIN( 563)		HX_VARI( Int,selectionX) = ::Math_obj::floor(_hx_tmp1);
HXLINE( 564)		Float _hx_tmp2 = ((Float)(Object->y - yPos) / (Float)this->_scaledTileHeight);
HXDLIN( 564)		HX_VARI( Int,selectionY) = ::Math_obj::floor(_hx_tmp2);
HXLINE( 565)		Float _hx_tmp3 = Object->get_width();
HXDLIN( 565)		Float _hx_tmp4 = ((Float)_hx_tmp3 / (Float)this->_scaledTileWidth);
HXDLIN( 565)		Int _hx_tmp5 = ::Math_obj::ceil(_hx_tmp4);
HXDLIN( 565)		HX_VARI( Int,selectionWidth) = ((selectionX + _hx_tmp5) + (int)1);
HXLINE( 566)		Float _hx_tmp6 = Object->get_height();
HXDLIN( 566)		Float _hx_tmp7 = ((Float)_hx_tmp6 / (Float)this->_scaledTileHeight);
HXDLIN( 566)		Int _hx_tmp8 = ::Math_obj::ceil(_hx_tmp7);
HXDLIN( 566)		HX_VARI( Int,selectionHeight) = ((selectionY + _hx_tmp8) + (int)1);
HXLINE( 569)		HX_VARI(  ::Dynamic,Max) = this->widthInTiles;
HXDLIN( 569)		HX_VAR( Float,lowerBound);
HXDLIN( 569)		if ((selectionX < (int)0)) {
HXLINE( 569)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 569)			lowerBound = selectionX;
            		}
HXDLIN( 569)		Float _hx_tmp9;
HXDLIN( 569)		Bool _hx_tmp10;
HXDLIN( 569)		Bool _hx_tmp11 = hx::IsNotNull( Max );
HXDLIN( 569)		if (_hx_tmp11) {
HXLINE( 569)			_hx_tmp10 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 569)			_hx_tmp10 = false;
            		}
HXDLIN( 569)		if (_hx_tmp10) {
HXLINE( 569)			_hx_tmp9 = Max;
            		}
            		else {
HXLINE( 569)			_hx_tmp9 = lowerBound;
            		}
HXDLIN( 569)		selectionX = ::Std_obj::_hx_int(_hx_tmp9);
HXLINE( 570)		HX_VARI_NAME(  ::Dynamic,Max1,"Max") = this->heightInTiles;
HXDLIN( 570)		HX_VAR_NAME( Float,lowerBound1,"lowerBound");
HXDLIN( 570)		if ((selectionY < (int)0)) {
HXLINE( 570)			lowerBound1 = (int)0;
            		}
            		else {
HXLINE( 570)			lowerBound1 = selectionY;
            		}
HXDLIN( 570)		Float _hx_tmp12;
HXDLIN( 570)		Bool _hx_tmp13;
HXDLIN( 570)		Bool _hx_tmp14 = hx::IsNotNull( Max1 );
HXDLIN( 570)		if (_hx_tmp14) {
HXLINE( 570)			_hx_tmp13 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 570)			_hx_tmp13 = false;
            		}
HXDLIN( 570)		if (_hx_tmp13) {
HXLINE( 570)			_hx_tmp12 = Max1;
            		}
            		else {
HXLINE( 570)			_hx_tmp12 = lowerBound1;
            		}
HXDLIN( 570)		selectionY = ::Std_obj::_hx_int(_hx_tmp12);
HXLINE( 571)		HX_VARI_NAME(  ::Dynamic,Max2,"Max") = this->widthInTiles;
HXDLIN( 571)		HX_VAR_NAME( Float,lowerBound2,"lowerBound");
HXDLIN( 571)		if ((selectionWidth < (int)0)) {
HXLINE( 571)			lowerBound2 = (int)0;
            		}
            		else {
HXLINE( 571)			lowerBound2 = selectionWidth;
            		}
HXDLIN( 571)		Float _hx_tmp15;
HXDLIN( 571)		Bool _hx_tmp16;
HXDLIN( 571)		Bool _hx_tmp17 = hx::IsNotNull( Max2 );
HXDLIN( 571)		if (_hx_tmp17) {
HXLINE( 571)			_hx_tmp16 = hx::IsGreater( lowerBound2,Max2 );
            		}
            		else {
HXLINE( 571)			_hx_tmp16 = false;
            		}
HXDLIN( 571)		if (_hx_tmp16) {
HXLINE( 571)			_hx_tmp15 = Max2;
            		}
            		else {
HXLINE( 571)			_hx_tmp15 = lowerBound2;
            		}
HXDLIN( 571)		selectionWidth = ::Std_obj::_hx_int(_hx_tmp15);
HXLINE( 572)		HX_VARI_NAME(  ::Dynamic,Max3,"Max") = this->heightInTiles;
HXDLIN( 572)		HX_VAR_NAME( Float,lowerBound3,"lowerBound");
HXDLIN( 572)		if ((selectionHeight < (int)0)) {
HXLINE( 572)			lowerBound3 = (int)0;
            		}
            		else {
HXLINE( 572)			lowerBound3 = selectionHeight;
            		}
HXDLIN( 572)		Float _hx_tmp18;
HXDLIN( 572)		Bool _hx_tmp19;
HXDLIN( 572)		Bool _hx_tmp20 = hx::IsNotNull( Max3 );
HXDLIN( 572)		if (_hx_tmp20) {
HXLINE( 572)			_hx_tmp19 = hx::IsGreater( lowerBound3,Max3 );
            		}
            		else {
HXLINE( 572)			_hx_tmp19 = false;
            		}
HXDLIN( 572)		if (_hx_tmp19) {
HXLINE( 572)			_hx_tmp18 = Max3;
            		}
            		else {
HXLINE( 572)			_hx_tmp18 = lowerBound3;
            		}
HXDLIN( 572)		selectionHeight = ::Std_obj::_hx_int(_hx_tmp18);
HXLINE( 575)		HX_VARI( Int,rowStart) = (selectionY * this->widthInTiles);
HXLINE( 576)		HX_VAR( Int,column);
HXLINE( 577)		HX_VAR(  ::flixel::tile::FlxTile,tile);
HXLINE( 578)		HX_VAR( Bool,overlapFound);
HXLINE( 579)		HX_VARI( Float,deltaX) = (xPos - this->last->x);
HXLINE( 580)		HX_VARI( Float,deltaY) = (yPos - this->last->y);
HXLINE( 582)		{
HXLINE( 582)			HX_VARI( Int,_g1) = selectionY;
HXDLIN( 582)			HX_VARI( Int,_g) = selectionHeight;
HXDLIN( 582)			while((_g1 < _g)){
HXLINE( 582)				HX_VARI( Int,row) = _g1++;
HXLINE( 584)				column = selectionX;
HXLINE( 586)				while((column < selectionWidth)){
HXLINE( 588)					HX_VARI( Int,index) = (rowStart + column);
HXLINE( 589)					Bool _hx_tmp21;
HXDLIN( 589)					if ((index >= (int)0)) {
HXLINE( 589)						_hx_tmp21 = (index > (this->_data->length - (int)1));
            					}
            					else {
HXLINE( 589)						_hx_tmp21 = true;
            					}
HXDLIN( 589)					if (_hx_tmp21) {
HXLINE( 591)						++column;
HXLINE( 592)						continue;
            					}
HXLINE( 595)					HX_VARI( Int,dataIndex) = this->_data->__get(index);
HXLINE( 596)					if ((dataIndex < (int)0)) {
HXLINE( 598)						++column;
HXLINE( 599)						continue;
            					}
HXLINE( 602)					tile = ( ( ::flixel::tile::FlxTile)(this->_tileObjects->__get(dataIndex)) );
HXLINE( 603)					tile->set_width(this->_scaledTileWidth);
HXLINE( 604)					tile->set_height(this->_scaledTileHeight);
HXLINE( 605)					Float _hx_tmp22 = tile->get_width();
HXDLIN( 605)					tile->set_x((xPos + (column * _hx_tmp22)));
HXLINE( 606)					Float _hx_tmp23 = tile->get_height();
HXDLIN( 606)					tile->set_y((yPos + (row * _hx_tmp23)));
HXLINE( 607)					Float _hx_tmp24 = (tile->x - deltaX);
HXDLIN( 607)					tile->last->set_x(_hx_tmp24);
HXLINE( 608)					Float _hx_tmp25 = (tile->y - deltaY);
HXDLIN( 608)					tile->last->set_y(_hx_tmp25);
HXLINE( 611)					Bool _hx_tmp26;
HXDLIN( 611)					Bool _hx_tmp27;
HXDLIN( 611)					Float _hx_tmp28 = Object->x;
HXDLIN( 611)					Float _hx_tmp29 = Object->get_width();
HXDLIN( 611)					Bool _hx_tmp30 = ((_hx_tmp28 + _hx_tmp29) > tile->x);
HXDLIN( 611)					if (_hx_tmp30) {
HXLINE( 611)						Float _hx_tmp31 = Object->x;
HXDLIN( 611)						Float _hx_tmp32 = tile->x;
HXDLIN( 611)						Float _hx_tmp33 = tile->get_width();
HXDLIN( 611)						_hx_tmp27 = (_hx_tmp31 < (_hx_tmp32 + _hx_tmp33));
            					}
            					else {
HXLINE( 611)						_hx_tmp27 = false;
            					}
HXDLIN( 611)					if (_hx_tmp27) {
HXLINE( 612)						Float _hx_tmp34 = Object->y;
HXDLIN( 612)						Float _hx_tmp35 = Object->get_height();
HXLINE( 611)						_hx_tmp26 = ((_hx_tmp34 + _hx_tmp35) > tile->y);
            					}
            					else {
HXLINE( 611)						_hx_tmp26 = false;
            					}
HXDLIN( 611)					if (_hx_tmp26) {
HXLINE( 612)						Float _hx_tmp36 = Object->y;
HXDLIN( 612)						Float _hx_tmp37 = tile->y;
HXDLIN( 612)						Float _hx_tmp38 = tile->get_height();
HXDLIN( 612)						overlapFound = (_hx_tmp36 < (_hx_tmp37 + _hx_tmp38));
            					}
            					else {
HXLINE( 611)						overlapFound = false;
            					}
HXLINE( 614)					Bool _hx_tmp39 = (tile->allowCollisions != (int)0);
HXDLIN( 614)					if (_hx_tmp39) {
HXLINE( 616)						Bool _hx_tmp40 = hx::IsNotNull( Callback );
HXDLIN( 616)						if (_hx_tmp40) {
HXLINE( 618)							if (FlipCallbackParams) {
HXLINE( 620)								overlapFound = ( (Bool)(Callback(Object,tile)) );
            							}
            							else {
HXLINE( 624)								overlapFound = ( (Bool)(Callback(tile,Object)) );
            							}
            						}
            					}
HXLINE( 629)					if (overlapFound) {
HXLINE( 631)						Bool _hx_tmp41;
HXDLIN( 631)						Bool _hx_tmp42 = hx::IsNotNull( tile->callbackFunction );
HXDLIN( 631)						if (_hx_tmp42) {
HXLINE( 631)							Bool _hx_tmp43 = hx::IsNotNull( tile->filter );
HXDLIN( 631)							if (_hx_tmp43) {
HXLINE( 631)								_hx_tmp41 = ::Std_obj::is(Object,tile->filter);
            							}
            							else {
HXLINE( 631)								_hx_tmp41 = true;
            							}
            						}
            						else {
HXLINE( 631)							_hx_tmp41 = false;
            						}
HXDLIN( 631)						if (_hx_tmp41) {
HXLINE( 633)							tile->mapIndex = (rowStart + column);
HXLINE( 634)							tile->callbackFunction(tile,Object);
            						}
HXLINE( 637)						if ((tile->allowCollisions != (int)0)) {
HXLINE( 638)							results = true;
            						}
            					}
HXLINE( 641)					++column;
            				}
HXLINE( 644)				hx::AddEq(rowStart,this->widthInTiles);
            			}
            		}
HXLINE( 647)		return results;
            	}


Int FlxTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxPoint Coord){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","getTileIndexByCoords",0xb5ce22c7,"flixel.tile.FlxTilemap.getTileIndexByCoords","flixel/tile/FlxTilemap.hx",651,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Coord,"Coord")
HXLINE( 652)		HX_VARI( Float,localX) = (Coord->x - this->x);
HXLINE( 653)		HX_VARI( Float,localY) = (Coord->y - this->y);
HXLINE( 654)		Bool _hx_tmp = Coord->_weak;
HXDLIN( 654)		if (_hx_tmp) {
HXLINE( 654)			Coord->put();
            		}
HXLINE( 656)		Bool _hx_tmp1;
HXDLIN( 656)		Bool _hx_tmp2;
HXDLIN( 656)		Bool _hx_tmp3;
HXDLIN( 656)		if (!((localX < (int)0))) {
HXLINE( 656)			_hx_tmp3 = (localY < (int)0);
            		}
            		else {
HXLINE( 656)			_hx_tmp3 = true;
            		}
HXDLIN( 656)		if (!(_hx_tmp3)) {
HXLINE( 656)			Float _hx_tmp4 = this->get_width();
HXDLIN( 656)			_hx_tmp2 = (localX >= _hx_tmp4);
            		}
            		else {
HXLINE( 656)			_hx_tmp2 = true;
            		}
HXDLIN( 656)		if (!(_hx_tmp2)) {
HXLINE( 656)			Float _hx_tmp5 = this->get_height();
HXDLIN( 656)			_hx_tmp1 = (localY >= _hx_tmp5);
            		}
            		else {
HXLINE( 656)			_hx_tmp1 = true;
            		}
HXDLIN( 656)		if (_hx_tmp1) {
HXLINE( 657)			return (int)-1;
            		}
HXLINE( 659)		Float _hx_tmp6 = ((Float)localY / (Float)this->_scaledTileHeight);
HXDLIN( 659)		Int _hx_tmp7 = ::Std_obj::_hx_int(_hx_tmp6);
HXDLIN( 659)		Int _hx_tmp8 = (_hx_tmp7 * this->widthInTiles);
HXDLIN( 659)		Float _hx_tmp9 = ((Float)localX / (Float)this->_scaledTileWidth);
HXDLIN( 659)		Int _hx_tmp10 = ::Std_obj::_hx_int(_hx_tmp9);
HXDLIN( 659)		return (_hx_tmp8 + _hx_tmp10);
            	}


 ::flixel::math::FlxPoint FlxTilemap_obj::getTileCoordsByIndex(Int Index,hx::Null< Bool >  __o_Midpoint){
Bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","getTileCoordsByIndex",0xe0680d7d,"flixel.tile.FlxTilemap.getTileCoordsByIndex","flixel/tile/FlxTilemap.hx",663,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(Midpoint,"Midpoint")
HXLINE( 664)		Float X = (this->x + (hx::Mod(Index,this->widthInTiles) * this->_scaledTileWidth));
HXDLIN( 664)		Float _hx_tmp = this->y;
HXDLIN( 664)		Float _hx_tmp1 = ((Float)Index / (Float)this->widthInTiles);
HXDLIN( 664)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 664)		Float Y = (_hx_tmp + (_hx_tmp2 * this->_scaledTileHeight));
HXDLIN( 664)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 664)		point->_inPool = false;
HXLINE( 665)		if (Midpoint) {
HXLINE( 667)			{
HXLINE( 667)				Float _hx_tmp3 = (point->x + (this->_scaledTileWidth * ((Float)0.5)));
HXDLIN( 667)				point->set_x(_hx_tmp3);
            			}
HXLINE( 668)			{
HXLINE( 668)				Float _hx_tmp4 = (point->y + (this->_scaledTileHeight * ((Float)0.5)));
HXDLIN( 668)				point->set_y(_hx_tmp4);
            			}
            		}
HXLINE( 670)		return point;
            	}


::Array< ::Dynamic> FlxTilemap_obj::getTileCoords(Int Index,hx::Null< Bool >  __o_Midpoint){
Bool Midpoint = __o_Midpoint.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","getTileCoords",0x02899bde,"flixel.tile.FlxTilemap.getTileCoords","flixel/tile/FlxTilemap.hx",681,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
            	HX_STACK_ARG(Midpoint,"Midpoint")
HXLINE( 682)		HX_VARI( ::Array< ::Dynamic>,array) = null();
HXLINE( 685)		HX_VARI( Int,l) = (this->widthInTiles * this->heightInTiles);
HXLINE( 687)		{
HXLINE( 687)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 687)			while((_g1 < l)){
HXLINE( 687)				HX_VARI( Int,i) = _g1++;
HXLINE( 689)				Bool _hx_tmp = (this->_data->__get(i) == Index);
HXDLIN( 689)				if (_hx_tmp) {
HXLINE( 691)					Float X = (this->x + (hx::Mod(i,this->widthInTiles) * this->_scaledTileWidth));
HXDLIN( 691)					Float _hx_tmp1 = this->y;
HXDLIN( 691)					Float _hx_tmp2 = ((Float)i / (Float)this->widthInTiles);
HXDLIN( 691)					Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 691)					Float Y = (_hx_tmp1 + (_hx_tmp3 * this->_scaledTileHeight));
HXDLIN( 691)					HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 691)					point->_inPool = false;
HXLINE( 693)					if (Midpoint) {
HXLINE( 695)						{
HXLINE( 695)							Float _hx_tmp4 = (point->x + (this->_scaledTileWidth * ((Float)0.5)));
HXDLIN( 695)							point->set_x(_hx_tmp4);
            						}
HXLINE( 696)						{
HXLINE( 696)							Float _hx_tmp5 = (point->y + (this->_scaledTileHeight * ((Float)0.5)));
HXDLIN( 696)							point->set_y(_hx_tmp5);
            						}
            					}
HXLINE( 699)					Bool _hx_tmp6 = hx::IsNull( array );
HXDLIN( 699)					if (_hx_tmp6) {
HXLINE( 701)						array = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 703)					array->push(point);
            				}
            			}
            		}
HXLINE( 707)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,getTileCoords,return )

void FlxTilemap_obj::follow( ::flixel::FlxCamera Camera,hx::Null< Int >  __o_Border,hx::Null< Bool >  __o_UpdateWorld){
Int Border = __o_Border.Default(0);
Bool UpdateWorld = __o_UpdateWorld.Default(true);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","follow",0xe6a96c35,"flixel.tile.FlxTilemap.follow","flixel/tile/FlxTilemap.hx",718,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Camera,"Camera")
            	HX_STACK_ARG(Border,"Border")
            	HX_STACK_ARG(UpdateWorld,"UpdateWorld")
HXLINE( 719)		Bool _hx_tmp = hx::IsNull( Camera );
HXDLIN( 719)		if (_hx_tmp) {
HXLINE( 720)			Camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 722)		Float _hx_tmp1 = (this->x + (Border * this->_scaledTileWidth));
HXDLIN( 722)		Float _hx_tmp2 = (this->y + (Border * this->_scaledTileHeight));
HXDLIN( 722)		Float _hx_tmp3 = this->get_width();
HXDLIN( 722)		Float _hx_tmp4 = (_hx_tmp3 - ((Border * this->_scaledTileWidth) * (int)2));
HXDLIN( 722)		Float _hx_tmp5 = this->get_height();
HXDLIN( 722)		Float _hx_tmp6 = ((Border * this->_scaledTileHeight) * (int)2);
HXDLIN( 722)		Camera->setScrollBoundsRect(_hx_tmp1,_hx_tmp2,_hx_tmp4,(_hx_tmp5 - _hx_tmp6),UpdateWorld);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTilemap_obj,follow,(void))

Bool FlxTilemap_obj::ray( ::flixel::math::FlxPoint Start, ::flixel::math::FlxPoint End, ::flixel::math::FlxPoint Result,hx::Null< Float >  __o_Resolution){
Float Resolution = __o_Resolution.Default(1);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","ray",0xbe0558a6,"flixel.tile.FlxTilemap.ray","flixel/tile/FlxTilemap.hx",736,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Start,"Start")
            	HX_STACK_ARG(End,"End")
            	HX_STACK_ARG(Result,"Result")
            	HX_STACK_ARG(Resolution,"Resolution")
HXLINE( 737)		HX_VARI( Float,step) = this->_scaledTileWidth;
HXLINE( 739)		if ((this->_scaledTileHeight < this->_scaledTileWidth)) {
HXLINE( 740)			step = this->_scaledTileHeight;
            		}
HXLINE( 742)		hx::DivEq(step,Resolution);
HXLINE( 743)		HX_VARI( Float,deltaX) = (End->x - Start->x);
HXLINE( 744)		HX_VARI( Float,deltaY) = (End->y - Start->y);
HXLINE( 745)		HX_VARI( Float,distance) = ::Math_obj::sqrt(((deltaX * deltaX) + (deltaY * deltaY)));
HXLINE( 746)		HX_VARI( Int,steps) = ::Math_obj::ceil(((Float)distance / (Float)step));
HXLINE( 747)		HX_VARI( Float,stepX) = ((Float)deltaX / (Float)steps);
HXLINE( 748)		HX_VARI( Float,stepY) = ((Float)deltaY / (Float)steps);
HXLINE( 749)		HX_VARI( Float,curX) = ((Start->x - stepX) - this->x);
HXLINE( 750)		HX_VARI( Float,curY) = ((Start->y - stepY) - this->y);
HXLINE( 751)		HX_VAR( Int,tileX);
HXLINE( 752)		HX_VAR( Int,tileY);
HXLINE( 753)		HX_VARI( Int,i) = (int)0;
HXLINE( 755)		Bool _hx_tmp = Start->_weak;
HXDLIN( 755)		if (_hx_tmp) {
HXLINE( 755)			Start->put();
            		}
HXLINE( 756)		Bool _hx_tmp1 = End->_weak;
HXDLIN( 756)		if (_hx_tmp1) {
HXLINE( 756)			End->put();
            		}
HXLINE( 758)		while((i < steps)){
HXLINE( 760)			hx::AddEq(curX,stepX);
HXLINE( 761)			hx::AddEq(curY,stepY);
HXLINE( 763)			Bool _hx_tmp2;
HXDLIN( 763)			Bool _hx_tmp3;
HXDLIN( 763)			Bool _hx_tmp4;
HXDLIN( 763)			if (!((curX < (int)0))) {
HXLINE( 763)				Float _hx_tmp5 = this->get_width();
HXDLIN( 763)				_hx_tmp4 = (curX > _hx_tmp5);
            			}
            			else {
HXLINE( 763)				_hx_tmp4 = true;
            			}
HXDLIN( 763)			if (!(_hx_tmp4)) {
HXLINE( 763)				_hx_tmp3 = (curY < (int)0);
            			}
            			else {
HXLINE( 763)				_hx_tmp3 = true;
            			}
HXDLIN( 763)			if (!(_hx_tmp3)) {
HXLINE( 763)				Float _hx_tmp6 = this->get_height();
HXDLIN( 763)				_hx_tmp2 = (curY > _hx_tmp6);
            			}
            			else {
HXLINE( 763)				_hx_tmp2 = true;
            			}
HXDLIN( 763)			if (_hx_tmp2) {
HXLINE( 765)				++i;
HXLINE( 766)				continue;
            			}
HXLINE( 769)			Float _hx_tmp7 = ((Float)curX / (Float)this->_scaledTileWidth);
HXDLIN( 769)			tileX = ::Math_obj::floor(_hx_tmp7);
HXLINE( 770)			Float _hx_tmp8 = ((Float)curY / (Float)this->_scaledTileHeight);
HXDLIN( 770)			tileY = ::Math_obj::floor(_hx_tmp8);
HXLINE( 772)			Bool _hx_tmp9 = (( ( ::flixel::FlxObject)(this->_tileObjects->__get(this->_data->__get(((tileY * this->widthInTiles) + tileX)))) )->allowCollisions != (int)0);
HXDLIN( 772)			if (_hx_tmp9) {
HXLINE( 775)				Int _hx_tmp10 = ::Std_obj::_hx_int(this->_scaledTileWidth);
HXDLIN( 775)				hx::MultEq(tileX,_hx_tmp10);
HXLINE( 776)				Int _hx_tmp11 = ::Std_obj::_hx_int(this->_scaledTileHeight);
HXDLIN( 776)				hx::MultEq(tileY,_hx_tmp11);
HXLINE( 777)				HX_VARI( Float,rx) = (int)0;
HXLINE( 778)				HX_VARI( Float,ry) = (int)0;
HXLINE( 779)				HX_VAR( Float,q);
HXLINE( 780)				HX_VARI( Float,lx) = (curX - stepX);
HXLINE( 781)				HX_VARI( Float,ly) = (curY - stepY);
HXLINE( 784)				q = tileX;
HXLINE( 786)				if ((deltaX < (int)0)) {
HXLINE( 788)					hx::AddEq(q,this->_scaledTileWidth);
            				}
HXLINE( 791)				rx = q;
HXLINE( 792)				ry = (ly + (stepY * ((Float)(q - lx) / (Float)stepX)));
HXLINE( 794)				Bool _hx_tmp12;
HXDLIN( 794)				if ((ry >= tileY)) {
HXLINE( 794)					_hx_tmp12 = (ry <= (tileY + this->_scaledTileHeight));
            				}
            				else {
HXLINE( 794)					_hx_tmp12 = false;
            				}
HXDLIN( 794)				if (_hx_tmp12) {
HXLINE( 796)					Bool _hx_tmp13 = hx::IsNull( Result );
HXDLIN( 796)					if (_hx_tmp13) {
HXLINE( 798)						HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 798)						point->_inPool = false;
HXDLIN( 798)						Result = point;
            					}
HXLINE( 801)					Result->set(rx,ry);
HXLINE( 802)					return false;
            				}
HXLINE( 806)				q = tileY;
HXLINE( 808)				if ((deltaY < (int)0)) {
HXLINE( 810)					hx::AddEq(q,this->_scaledTileHeight);
            				}
HXLINE( 813)				rx = (lx + (stepX * ((Float)(q - ly) / (Float)stepY)));
HXLINE( 814)				ry = q;
HXLINE( 816)				Bool _hx_tmp14;
HXDLIN( 816)				if ((rx >= tileX)) {
HXLINE( 816)					_hx_tmp14 = (rx <= (tileX + this->_scaledTileWidth));
            				}
            				else {
HXLINE( 816)					_hx_tmp14 = false;
            				}
HXDLIN( 816)				if (_hx_tmp14) {
HXLINE( 818)					Bool _hx_tmp15 = hx::IsNull( Result );
HXDLIN( 818)					if (_hx_tmp15) {
HXLINE( 820)						HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 820)						point1->_inPool = false;
HXDLIN( 820)						Result = point1;
            					}
HXLINE( 823)					Result->set(rx,ry);
HXLINE( 824)					return false;
            				}
HXLINE( 827)				return true;
            			}
HXLINE( 829)			++i;
            		}
HXLINE( 832)		return true;
            	}


 ::flixel::FlxSprite FlxTilemap_obj::tileToSprite(Int X,Int Y,hx::Null< Int >  __o_NewTile, ::Dynamic SpriteFactory){
Int NewTile = __o_NewTile.Default(0);
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","tileToSprite",0xe7482ef2,"flixel.tile.FlxTilemap.tileToSprite","flixel/tile/FlxTilemap.hx",846,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(X,"X")
            	HX_STACK_ARG(Y,"Y")
            	HX_STACK_ARG(NewTile,"NewTile")
            	HX_STACK_ARG(SpriteFactory,"SpriteFactory")
HXLINE( 847)		Bool _hx_tmp = hx::IsNull( SpriteFactory );
HXDLIN( 847)		if (_hx_tmp) {
HXLINE( 848)			SpriteFactory = this->defaultTileToSprite_dyn();
            		}
HXLINE( 851)		HX_VARI(  ::flixel::tile::FlxTile,tile) = ( ( ::flixel::tile::FlxTile)(this->_tileObjects->__get(this->_data->__get((X + (Y * this->widthInTiles))))) );
HXLINE( 852)		HX_VARI(  ::flixel::graphics::frames::FlxImageFrame,image) = null();
HXLINE( 854)		Bool _hx_tmp1;
HXDLIN( 854)		Bool _hx_tmp2 = hx::IsNotNull( tile );
HXDLIN( 854)		if (_hx_tmp2) {
HXLINE( 854)			_hx_tmp1 = tile->visible;
            		}
            		else {
HXLINE( 854)			_hx_tmp1 = false;
            		}
HXDLIN( 854)		if (_hx_tmp1) {
HXLINE( 855)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromFrame(tile->frame);
            		}
            		else {
HXLINE( 857)			Float Width = this->_tileWidth;
HXDLIN( 857)			Float Height = this->_tileHeight;
HXDLIN( 857)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 857)			_this->x = (int)0;
HXDLIN( 857)			_this->y = (int)0;
HXDLIN( 857)			_this->width = Width;
HXDLIN( 857)			_this->height = Height;
HXDLIN( 857)			_this->_inPool = false;
HXDLIN( 857)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromEmptyFrame(this->graphic,_this);
            		}
HXLINE( 859)		HX_VARI( Float,tileX) = (((X * this->_tileWidth) * this->scale->x) + this->x);
HXLINE( 860)		HX_VARI( Float,tileY) = (((Y * this->_tileHeight) * this->scale->y) + this->y);
HXLINE( 861)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set((int)0,(int)0);
HXDLIN( 861)		point->_inPool = false;
HXDLIN( 861)		HX_VARI_NAME(  ::flixel::math::FlxPoint,point1,"point") = this->scale;
HXDLIN( 861)		point->set_x(point1->x);
HXDLIN( 861)		point->set_y(point1->y);
HXDLIN( 861)		Bool _hx_tmp3 = point1->_weak;
HXDLIN( 861)		if (_hx_tmp3) {
HXLINE( 861)			point1->put();
            		}
HXDLIN( 861)		HX_VARI(  ::flixel::FlxSprite,tileSprite) = ( ( ::flixel::FlxSprite)(SpriteFactory( ::Dynamic(hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("blend",51,e8,f4,b4),this->blend)
            			->setFixed(1,HX_("x",78,00,00,00),tileX)
            			->setFixed(2,HX_("y",79,00,00,00),tileY)
            			->setFixed(3,HX_("alpha",5e,a7,96,21),this->alpha)
            			->setFixed(4,HX_("graphic",a8,5a,07,74),image)
            			->setFixed(5,HX_("scale",8a,ce,ce,78),point)))) );
HXLINE( 863)		if ((NewTile >= (int)0)) {
HXLINE( 864)			this->setTile(X,Y,NewTile,null());
            		}
HXLINE( 866)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTilemap_obj,tileToSprite,return )

void FlxTilemap_obj::updateBuffers(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","updateBuffers",0xf5face26,"flixel.tile.FlxTilemap.updateBuffers","flixel/tile/FlxTilemap.hx",873,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE( 874)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 875)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateBuffers,(void))

void FlxTilemap_obj::drawTilemap( ::flixel::tile::FlxTilemapBuffer Buffer, ::flixel::FlxCamera Camera){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","drawTilemap",0x2b20d346,"flixel.tile.FlxTilemap.drawTilemap","flixel/tile/FlxTilemap.hx",886,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Buffer,"Buffer")
            	HX_STACK_ARG(Camera,"Camera")
HXLINE( 887)		HX_VAR( Bool,isColored);
HXDLIN( 887)		if ((this->alpha == (int)1)) {
HXLINE( 887)			isColored = (this->color != (int)16777215);
            		}
            		else {
HXLINE( 887)			isColored = true;
            		}
HXLINE( 890)		HX_VARI( Float,drawX) = (int)0;
HXLINE( 891)		HX_VARI( Float,drawY) = (int)0;
HXLINE( 892)		HX_VARI( Float,scaledWidth) = (int)0;
HXLINE( 893)		HX_VARI( Float,scaledHeight) = (int)0;
HXLINE( 894)		HX_VARI(  ::flixel::graphics::tile::FlxDrawTilesItem,drawItem) = null();
HXLINE( 896)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 896)		if (_hx_tmp) {
HXLINE( 898)			Buffer->fill(null());
            		}
            		else {
HXLINE( 902)			{
HXLINE( 902)				HX_VARI(  ::flixel::math::FlxPoint,_this) = this->getScreenPosition(this->_point,Camera)->subtractPoint(this->offset);
HXDLIN( 902)				HX_VARI(  ::openfl::geom::Point,FlashPoint) = this->_helperPoint;
HXDLIN( 902)				Bool _hx_tmp1 = hx::IsNull( FlashPoint );
HXDLIN( 902)				if (_hx_tmp1) {
HXLINE( 902)					FlashPoint =  ::openfl::geom::Point_obj::__new(null(),null());
            				}
HXDLIN( 902)				FlashPoint->x = _this->x;
HXDLIN( 902)				FlashPoint->y = _this->y;
            			}
HXLINE( 904)			Float _hx_tmp2;
HXDLIN( 904)			Bool _hx_tmp3 = this->isPixelPerfectRender(Camera);
HXDLIN( 904)			if (_hx_tmp3) {
HXLINE( 904)				_hx_tmp2 = ::Math_obj::floor(this->_helperPoint->x);
            			}
            			else {
HXLINE( 904)				_hx_tmp2 = this->_helperPoint->x;
            			}
HXDLIN( 904)			this->_helperPoint->x = _hx_tmp2;
HXLINE( 905)			Float _hx_tmp4;
HXDLIN( 905)			Bool _hx_tmp5 = this->isPixelPerfectRender(Camera);
HXDLIN( 905)			if (_hx_tmp5) {
HXLINE( 905)				_hx_tmp4 = ::Math_obj::floor(this->_helperPoint->y);
            			}
            			else {
HXLINE( 905)				_hx_tmp4 = this->_helperPoint->y;
            			}
HXDLIN( 905)			this->_helperPoint->y = _hx_tmp4;
HXLINE( 907)			scaledWidth = this->_scaledTileWidth;
HXLINE( 908)			scaledHeight = this->_scaledTileHeight;
HXLINE( 910)			HX_VAR( Bool,hasColorOffsets);
HXDLIN( 910)			Bool _hx_tmp6 = hx::IsNotNull( this->colorTransform );
HXDLIN( 910)			if (_hx_tmp6) {
HXLINE( 910)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(this->colorTransform);
            			}
            			else {
HXLINE( 910)				hasColorOffsets = false;
            			}
HXLINE( 911)			drawItem = Camera->startQuadBatch(this->graphic,isColored,hasColorOffsets,this->blend,this->antialiasing,this->shader);
            		}
HXLINE( 915)		Float _hx_tmp7 = ((((Camera->scroll->x * this->scrollFactor->x) - this->x) - this->offset->x) + Camera->viewOffsetX);
HXDLIN( 915)		this->_point->set_x(_hx_tmp7);
HXLINE( 916)		Float _hx_tmp8 = ((((Camera->scroll->y * this->scrollFactor->y) - this->y) - this->offset->y) + Camera->viewOffsetY);
HXDLIN( 916)		this->_point->set_y(_hx_tmp8);
HXLINE( 918)		Float _hx_tmp9 = ((Float)this->_point->x / (Float)this->_scaledTileWidth);
HXDLIN( 918)		HX_VARI( Int,screenXInTiles) = ::Math_obj::floor(_hx_tmp9);
HXLINE( 919)		Float _hx_tmp10 = ((Float)this->_point->y / (Float)this->_scaledTileHeight);
HXDLIN( 919)		HX_VARI( Int,screenYInTiles) = ::Math_obj::floor(_hx_tmp10);
HXLINE( 920)		HX_VARI( Int,screenRows) = Buffer->rows;
HXLINE( 921)		HX_VARI( Int,screenColumns) = Buffer->columns;
HXLINE( 924)		HX_VARI(  ::Dynamic,Max) = (this->widthInTiles - screenColumns);
HXDLIN( 924)		HX_VAR( Float,lowerBound);
HXDLIN( 924)		if ((screenXInTiles < (int)0)) {
HXLINE( 924)			lowerBound = (int)0;
            		}
            		else {
HXLINE( 924)			lowerBound = screenXInTiles;
            		}
HXDLIN( 924)		Float _hx_tmp11;
HXDLIN( 924)		Bool _hx_tmp12;
HXDLIN( 924)		Bool _hx_tmp13 = hx::IsNotNull( Max );
HXDLIN( 924)		if (_hx_tmp13) {
HXLINE( 924)			_hx_tmp12 = hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 924)			_hx_tmp12 = false;
            		}
HXDLIN( 924)		if (_hx_tmp12) {
HXLINE( 924)			_hx_tmp11 = Max;
            		}
            		else {
HXLINE( 924)			_hx_tmp11 = lowerBound;
            		}
HXDLIN( 924)		screenXInTiles = ::Std_obj::_hx_int(_hx_tmp11);
HXLINE( 925)		HX_VARI_NAME(  ::Dynamic,Max1,"Max") = (this->heightInTiles - screenRows);
HXDLIN( 925)		HX_VAR_NAME( Float,lowerBound1,"lowerBound");
HXDLIN( 925)		if ((screenYInTiles < (int)0)) {
HXLINE( 925)			lowerBound1 = (int)0;
            		}
            		else {
HXLINE( 925)			lowerBound1 = screenYInTiles;
            		}
HXDLIN( 925)		Float _hx_tmp14;
HXDLIN( 925)		Bool _hx_tmp15;
HXDLIN( 925)		Bool _hx_tmp16 = hx::IsNotNull( Max1 );
HXDLIN( 925)		if (_hx_tmp16) {
HXLINE( 925)			_hx_tmp15 = hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 925)			_hx_tmp15 = false;
            		}
HXDLIN( 925)		if (_hx_tmp15) {
HXLINE( 925)			_hx_tmp14 = Max1;
            		}
            		else {
HXLINE( 925)			_hx_tmp14 = lowerBound1;
            		}
HXDLIN( 925)		screenYInTiles = ::Std_obj::_hx_int(_hx_tmp14);
HXLINE( 927)		HX_VARI( Int,rowIndex) = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE( 928)		this->_flashPoint->y = (int)0;
HXLINE( 929)		HX_VAR( Int,columnIndex);
HXLINE( 930)		HX_VAR(  ::flixel::tile::FlxTile,tile);
HXLINE( 931)		HX_VAR(  ::flixel::graphics::frames::FlxFrame,frame);
HXLINE( 937)		{
HXLINE( 937)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 937)			while((_g1 < screenRows)){
HXLINE( 937)				++_g1;
HXLINE( 939)				columnIndex = rowIndex;
HXLINE( 940)				this->_flashPoint->x = (int)0;
HXLINE( 942)				{
HXLINE( 942)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 942)					while((_g3 < screenColumns)){
HXLINE( 942)						++_g3;
HXLINE( 944)						tile = ( ( ::flixel::tile::FlxTile)(this->_tileObjects->__get(this->_data->__get(columnIndex))) );
HXLINE( 946)						Bool _hx_tmp17;
HXDLIN( 946)						Bool _hx_tmp18;
HXDLIN( 946)						Bool _hx_tmp19 = hx::IsNotNull( tile );
HXDLIN( 946)						if (_hx_tmp19) {
HXLINE( 946)							_hx_tmp18 = tile->visible;
            						}
            						else {
HXLINE( 946)							_hx_tmp18 = false;
            						}
HXDLIN( 946)						if (_hx_tmp18) {
HXLINE( 946)							_hx_tmp17 = (tile->frame->type != (int)2);
            						}
            						else {
HXLINE( 946)							_hx_tmp17 = false;
            						}
HXDLIN( 946)						if (_hx_tmp17) {
HXLINE( 948)							frame = tile->frame;
HXLINE( 950)							Bool _hx_tmp20 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 950)							if (_hx_tmp20) {
HXLINE( 952)								frame->paint(Buffer->pixels,this->_flashPoint,true,null());
            							}
            							else {
HXLINE( 978)								drawX = (this->_helperPoint->x + (hx::Mod(columnIndex,this->widthInTiles) * scaledWidth));
HXLINE( 979)								Float _hx_tmp21 = this->_helperPoint->y;
HXDLIN( 979)								Float _hx_tmp22 = ((Float)columnIndex / (Float)this->widthInTiles);
HXDLIN( 979)								Int _hx_tmp23 = ::Math_obj::floor(_hx_tmp22);
HXDLIN( 979)								drawY = (_hx_tmp21 + (_hx_tmp23 * scaledHeight));
HXLINE( 981)								this->_matrix->identity();
HXLINE( 983)								Bool _hx_tmp24 = (frame->angle != (int)0);
HXDLIN( 983)								if (_hx_tmp24) {
HXLINE( 985)									frame->prepareMatrix(this->_matrix,null(),null(),null());
            								}
HXLINE( 988)								HX_VARI( Float,scaleX) = this->scale->x;
HXLINE( 989)								HX_VARI( Float,scaleY) = this->scale->y;
HXLINE( 991)								if (this->useScaleHack) {
HXLINE( 993)									hx::AddEq(scaleX,((Float)(int)1 / (Float)(frame->sourceSize->x * Camera->totalScaleX)));
HXLINE( 994)									hx::AddEq(scaleY,((Float)(int)1 / (Float)(frame->sourceSize->y * Camera->totalScaleY)));
            								}
HXLINE( 997)								this->_matrix->scale(scaleX,scaleY);
HXLINE( 998)								this->_matrix->translate(drawX,drawY);
HXLINE(1000)								drawItem->addQuad(frame,this->_matrix,this->colorTransform);
            							}
            						}
HXLINE(1004)						Bool _hx_tmp25 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1004)						if (_hx_tmp25) {
HXLINE(1005)							hx::AddEq(this->_flashPoint->x,this->_tileWidth);
            						}
HXLINE(1007)						++columnIndex;
            					}
            				}
HXLINE(1010)				Bool _hx_tmp26 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1010)				if (_hx_tmp26) {
HXLINE(1011)					hx::AddEq(this->_flashPoint->y,this->_tileHeight);
            				}
HXLINE(1012)				hx::AddEq(rowIndex,this->widthInTiles);
            			}
            		}
HXLINE(1015)		Buffer->x = (screenXInTiles * this->_scaledTileWidth);
HXLINE(1016)		Buffer->y = (screenYInTiles * this->_scaledTileHeight);
HXLINE(1018)		Bool _hx_tmp27 = ::flixel::FlxG_obj::renderBlit;
HXDLIN(1018)		if (_hx_tmp27) {
HXLINE(1020)			if (isColored) {
HXLINE(1021)				Buffer->colorTransform(this->colorTransform);
            			}
HXLINE(1022)			Buffer->blend = this->blend;
            		}
HXLINE(1025)		Buffer->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawTilemap,(void))

void FlxTilemap_obj::updateTile(Int Index){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","updateTile",0x18c3429b,"flixel.tile.FlxTilemap.updateTile","flixel/tile/FlxTilemap.hx",1072,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Index,"Index")
HXLINE(1073)		HX_VARI(  ::flixel::tile::FlxTile,tile) = ( ( ::flixel::tile::FlxTile)(this->_tileObjects->__get(Index)) );
HXLINE(1074)		Bool _hx_tmp;
HXDLIN(1074)		Bool _hx_tmp1 = hx::IsNotNull( tile );
HXDLIN(1074)		if (_hx_tmp1) {
HXLINE(1074)			_hx_tmp = !(tile->visible);
            		}
            		else {
HXLINE(1074)			_hx_tmp = true;
            		}
HXDLIN(1074)		if (_hx_tmp) {
HXLINE(1075)			return;
            		}
HXLINE(1077)		Int _hx_tmp2 = (Index - this->_startingIndex);
HXDLIN(1077)		tile->frame = this->frames->frames->__get(_hx_tmp2).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


 ::flixel::tile::FlxTilemapBuffer FlxTilemap_obj::createBuffer( ::flixel::FlxCamera camera){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","createBuffer",0x170b42e0,"flixel.tile.FlxTilemap.createBuffer","flixel/tile/FlxTilemap.hx",1081,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(camera,"camera")
HXLINE(1082)		HX_VARI(  ::flixel::tile::FlxTilemapBuffer,buffer) =  ::flixel::tile::FlxTilemapBuffer_obj::__new(this->_tileWidth,this->_tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXLINE(1083)		buffer->pixelPerfectRender = this->pixelPerfectRender;
HXLINE(1084)		buffer->antialiasing = this->antialiasing;
HXLINE(1085)		return buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,createBuffer,return )

Bool FlxTilemap_obj::set_antialiasing(Bool value){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_antialiasing",0x6cc568b5,"flixel.tile.FlxTilemap.set_antialiasing","flixel/tile/FlxTilemap.hx",1089,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1090)		{
HXLINE(1090)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1090)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_buffers;
HXDLIN(1090)			while((_g < _g1->length)){
HXLINE(1090)				HX_VARI(  ::flixel::tile::FlxTilemapBuffer,buffer) = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1090)				++_g;
HXLINE(1091)				buffer->antialiasing = value;
            			}
            		}
HXLINE(1092)		return (this->antialiasing = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_antialiasing,return )

 ::flixel::graphics::FlxGraphic FlxTilemap_obj::set_graphic( ::flixel::graphics::FlxGraphic Value){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_graphic",0xa0b86087,"flixel.tile.FlxTilemap.set_graphic","flixel/tile/FlxTilemap.hx",1100,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1102)		if (hx::IsNotEq( this->graphic,Value )) {
HXLINE(1105)			Bool _hx_tmp = hx::IsNotNull( Value );
HXDLIN(1105)			if (_hx_tmp) {
HXLINE(1106)				HX_VARI( Int,_g1) = Value->get_useCount();
HXDLIN(1106)				Value->set_useCount((_g1 + (int)1));
            			}
HXLINE(1109)			Bool _hx_tmp1 = hx::IsNotNull( this->graphic );
HXDLIN(1109)			if (_hx_tmp1) {
HXLINE(1110)				HX_VARI(  ::flixel::graphics::FlxGraphic,_g) = this->graphic;
HXDLIN(1110)				HX_VARI_NAME( Int,_g11,"_g1") = _g->get_useCount();
HXDLIN(1110)				_g->set_useCount((_g11 - (int)1));
            			}
            		}
HXLINE(1113)		return (this->graphic = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_graphic,return )

Bool FlxTilemap_obj::set_pixelPerfectRender(Bool Value){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_pixelPerfectRender",0x5122f25e,"flixel.tile.FlxTilemap.set_pixelPerfectRender","flixel/tile/FlxTilemap.hx",1117,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1118)		Bool _hx_tmp = hx::IsNotNull( this->_buffers );
HXDLIN(1118)		if (_hx_tmp) {
HXLINE(1119)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1119)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_buffers;
HXDLIN(1119)			while((_g < _g1->length)){
HXLINE(1119)				HX_VARI(  ::flixel::tile::FlxTilemapBuffer,buffer) = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1119)				++_g;
HXLINE(1120)				buffer->pixelPerfectRender = Value;
            			}
            		}
HXLINE(1122)		return (this->pixelPerfectRender = Value);
            	}


Float FlxTilemap_obj::set_alpha(Float Alpha){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_alpha",0xecd0277d,"flixel.tile.FlxTilemap.set_alpha","flixel/tile/FlxTilemap.hx",1126,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Alpha,"Alpha")
HXLINE(1127)		HX_VAR( Float,lowerBound);
HXDLIN(1127)		if ((Alpha < (int)0)) {
HXLINE(1127)			lowerBound = (int)0;
            		}
            		else {
HXLINE(1127)			lowerBound = Alpha;
            		}
HXDLIN(1127)		 ::Dynamic _hx_tmp;
HXDLIN(1127)		if ((lowerBound > (int)1)) {
HXLINE(1127)			_hx_tmp = (int)1;
            		}
            		else {
HXLINE(1127)			_hx_tmp = lowerBound;
            		}
HXDLIN(1127)		this->alpha = _hx_tmp;
HXLINE(1128)		this->updateColorTransform();
HXLINE(1129)		return this->alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_alpha,return )

Int FlxTilemap_obj::set_color(Int Color){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_color",0x1595f182,"flixel.tile.FlxTilemap.set_color","flixel/tile/FlxTilemap.hx",1133,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Color,"Color")
HXLINE(1134)		if ((this->color == Color)) {
HXLINE(1135)			return Color;
            		}
HXLINE(1137)		this->color = Color;
HXLINE(1138)		this->updateColorTransform();
HXLINE(1139)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_color,return )

void FlxTilemap_obj::updateColorTransform(){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","updateColorTransform",0x6f14b936,"flixel.tile.FlxTilemap.updateColorTransform","flixel/tile/FlxTilemap.hx",1143,0x448feb74)
            	HX_STACK_THIS(this)
HXLINE(1144)		Bool _hx_tmp = hx::IsNull( this->colorTransform );
HXDLIN(1144)		if (_hx_tmp) {
HXLINE(1145)			this->colorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1147)		Bool _hx_tmp1;
HXDLIN(1147)		if ((this->alpha == (int)1)) {
HXLINE(1147)			_hx_tmp1 = (this->color != (int)16777215);
            		}
            		else {
HXLINE(1147)			_hx_tmp1 = true;
            		}
HXDLIN(1147)		if (_hx_tmp1) {
HXLINE(1148)			Float _hx_tmp2 = ((Float)((int)((int)this->color >> (int)(int)16) & (int)(int)255) / (Float)(int)255);
HXDLIN(1148)			Float _hx_tmp3 = ((Float)((int)((int)this->color >> (int)(int)8) & (int)(int)255) / (Float)(int)255);
HXDLIN(1148)			Int _hx_tmp4 = ((int)this->color & (int)(int)255);
HXDLIN(1148)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,_hx_tmp2,_hx_tmp3,((Float)_hx_tmp4 / (Float)(int)255),this->alpha);
            		}
            		else {
HXLINE(1150)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,(int)1,(int)1,(int)1,(int)1);
            		}
HXLINE(1152)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateColorTransform,(void))

 ::Dynamic FlxTilemap_obj::set_blend( ::Dynamic Value){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_blend",0x802e6870,"flixel.tile.FlxTilemap.set_blend","flixel/tile/FlxTilemap.hx",1156,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1157)		this->setDirty(null());
HXLINE(1158)		return (this->blend = Value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_blend,return )

void FlxTilemap_obj::setScaleXYCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","setScaleXYCallback",0x2287ee32,"flixel.tile.FlxTilemap.setScaleXYCallback","flixel/tile/FlxTilemap.hx",1162,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Scale,"Scale")
HXLINE(1163)		this->setScaleXCallback(Scale);
HXLINE(1164)		this->setScaleYCallback(Scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXYCallback,(void))

void FlxTilemap_obj::setScaleXCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","setScaleXCallback",0x45b95971,"flixel.tile.FlxTilemap.setScaleXCallback","flixel/tile/FlxTilemap.hx",1168,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Scale,"Scale")
HXLINE(1169)		this->_scaledTileWidth = (this->_tileWidth * this->scale->x);
HXLINE(1170)		Float _hx_tmp = (this->widthInTiles * this->_scaledTileWidth);
HXDLIN(1170)		this->set_width(_hx_tmp);
HXLINE(1172)		::Array< ::Dynamic> _hx_tmp1 = this->get_cameras();
HXDLIN(1172)		Bool _hx_tmp2 = hx::IsNull( _hx_tmp1 );
HXDLIN(1172)		if (_hx_tmp2) {
HXLINE(1173)			return;
            		}
HXLINE(1175)		{
HXLINE(1175)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1175)			HX_VARI( Int,_g) = this->get_cameras()->length;
HXDLIN(1175)			while((_g1 < _g)){
HXLINE(1175)				HX_VARI( Int,i) = _g1++;
HXLINE(1176)				Bool _hx_tmp3 = hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() );
HXDLIN(1176)				if (_hx_tmp3) {
HXLINE(1177)					Int _hx_tmp4 = this->_tileWidth;
HXDLIN(1177)					Int _hx_tmp5 = this->widthInTiles;
HXDLIN(1177)					Float _hx_tmp6 = this->scale->x;
HXDLIN(1177)					::Array< ::Dynamic> _hx_tmp7 = this->get_cameras();
HXDLIN(1177)					 ::flixel::FlxCamera _hx_tmp8 = _hx_tmp7->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(1177)					this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >()->updateColumns(_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp8);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXCallback,(void))

void FlxTilemap_obj::setScaleYCallback( ::flixel::math::FlxPoint Scale){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","setScaleYCallback",0x18aac272,"flixel.tile.FlxTilemap.setScaleYCallback","flixel/tile/FlxTilemap.hx",1181,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Scale,"Scale")
HXLINE(1182)		this->_scaledTileHeight = (this->_tileHeight * this->scale->y);
HXLINE(1183)		Float _hx_tmp = (this->heightInTiles * this->_scaledTileHeight);
HXDLIN(1183)		this->set_height(_hx_tmp);
HXLINE(1185)		::Array< ::Dynamic> _hx_tmp1 = this->get_cameras();
HXDLIN(1185)		Bool _hx_tmp2 = hx::IsNull( _hx_tmp1 );
HXDLIN(1185)		if (_hx_tmp2) {
HXLINE(1186)			return;
            		}
HXLINE(1188)		{
HXLINE(1188)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1188)			HX_VARI( Int,_g) = this->get_cameras()->length;
HXDLIN(1188)			while((_g1 < _g)){
HXLINE(1188)				HX_VARI( Int,i) = _g1++;
HXLINE(1189)				Bool _hx_tmp3 = hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() );
HXDLIN(1189)				if (_hx_tmp3) {
HXLINE(1190)					Int _hx_tmp4 = this->_tileHeight;
HXDLIN(1190)					Int _hx_tmp5 = this->heightInTiles;
HXDLIN(1190)					Float _hx_tmp6 = this->scale->y;
HXDLIN(1190)					::Array< ::Dynamic> _hx_tmp7 = this->get_cameras();
HXDLIN(1190)					 ::flixel::FlxCamera _hx_tmp8 = _hx_tmp7->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXDLIN(1190)					this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >()->updateRows(_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp8);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleYCallback,(void))

 ::flixel::FlxSprite FlxTilemap_obj::defaultTileToSprite( ::Dynamic TileProperties){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","defaultTileToSprite",0xb4e0664b,"flixel.tile.FlxTilemap.defaultTileToSprite","flixel/tile/FlxTilemap.hx",1200,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(TileProperties,"TileProperties")
HXLINE(1201)		HX_VARI(  ::flixel::FlxSprite,tileSprite) =  ::flixel::FlxSprite_obj::__new( ::Dynamic(TileProperties->__Field(HX_("x",78,00,00,00),hx::paccDynamic)), ::Dynamic(TileProperties->__Field(HX_("y",79,00,00,00),hx::paccDynamic)),null());
HXLINE(1202)		tileSprite->set_frames( ::Dynamic(TileProperties->__Field(HX_("graphic",a8,5a,07,74),hx::paccDynamic)));
HXLINE(1203)		{
HXLINE(1203)			HX_VARI(  ::flixel::math::FlxPoint,_this) = tileSprite->scale;
HXDLIN(1203)			HX_VARI(  ::flixel::math::FlxPoint,point) = ( ( ::flixel::math::FlxPoint)(TileProperties->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)) );
HXDLIN(1203)			_this->set_x(point->x);
HXDLIN(1203)			_this->set_y(point->y);
HXDLIN(1203)			Bool _hx_tmp = point->_weak;
HXDLIN(1203)			if (_hx_tmp) {
HXLINE(1203)				point->put();
            			}
            		}
HXLINE(1204)		TileProperties->__SetField(HX_("scale",8a,ce,ce,78),( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put( ::Dynamic(TileProperties->__Field(HX_("scale",8a,ce,ce,78),hx::paccDynamic)))) ),hx::paccDynamic);
HXLINE(1205)		tileSprite->set_alpha( ::Dynamic(TileProperties->__Field(HX_("alpha",5e,a7,96,21),hx::paccDynamic)));
HXLINE(1206)		tileSprite->set_blend( ::Dynamic(TileProperties->__Field(HX_("blend",51,e8,f4,b4),hx::paccDynamic)));
HXLINE(1207)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,defaultTileToSprite,return )

Int FlxTilemap_obj::set_allowCollisions(Int Value){
            	HX_STACK_FRAME("flixel.tile.FlxTilemap","set_allowCollisions",0x96e24689,"flixel.tile.FlxTilemap.set_allowCollisions","flixel/tile/FlxTilemap.hx",1211,0x448feb74)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Value,"Value")
HXLINE(1212)		{
HXLINE(1212)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1212)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_tileObjects;
HXDLIN(1212)			while((_g < _g1->length)){
HXLINE(1212)				HX_VARI(  ::flixel::tile::FlxTile,tile) = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTile >();
HXDLIN(1212)				++_g;
HXLINE(1213)				Bool _hx_tmp = (tile->index >= this->_collideIndex);
HXDLIN(1213)				if (_hx_tmp) {
HXLINE(1214)					tile->set_allowCollisions(Value);
            				}
            			}
            		}
HXLINE(1216)		return this->super::set_allowCollisions(Value);
            	}



FlxTilemap_obj::FlxTilemap_obj()
{
}

void FlxTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTilemap);
	HX_MARK_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_buffers,"_buffers");
	HX_MARK_MEMBER_NAME(_tileWidth,"_tileWidth");
	HX_MARK_MEMBER_NAME(_tileHeight,"_tileHeight");
	HX_MARK_MEMBER_NAME(_scaledTileWidth,"_scaledTileWidth");
	HX_MARK_MEMBER_NAME(_scaledTileHeight,"_scaledTileHeight");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_buffers,"_buffers");
	HX_VISIT_MEMBER_NAME(_tileWidth,"_tileWidth");
	HX_VISIT_MEMBER_NAME(_tileHeight,"_tileHeight");
	HX_VISIT_MEMBER_NAME(_scaledTileWidth,"_scaledTileWidth");
	HX_VISIT_MEMBER_NAME(_scaledTileHeight,"_scaledTileHeight");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxTilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return hx::Val( ray_dyn()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return hx::Val( scale); }
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"blend") ) { return hx::Val( blend); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return hx::Val( offset); }
		if (HX_FIELD_EQ(inName,"frames") ) { return hx::Val( frames); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader); }
		if (HX_FIELD_EQ(inName,"follow") ) { return hx::Val( follow_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return hx::Val( graphic); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return hx::Val( _matrix); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { return hx::Val( _buffers); }
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateMap") ) { return hx::Val( updateMap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return hx::Val( set_blend_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return hx::Val( _flashRect); }
		if (HX_FIELD_EQ(inName,"_tileWidth") ) { return hx::Val( _tileWidth); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return hx::Val( set_frames_dyn()); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return hx::Val( isOnScreen_dyn()); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return hx::Val( updateTile_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return hx::Val( _flashPoint); }
		if (HX_FIELD_EQ(inName,"_tileHeight") ) { return hx::Val( _tileHeight); }
		if (HX_FIELD_EQ(inName,"drawTilemap") ) { return hx::Val( drawTilemap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return hx::Val( set_graphic_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { return hx::Val( useScaleHack); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return hx::Val( antialiasing); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return hx::Val( _helperPoint); }
		if (HX_FIELD_EQ(inName,"tileToSprite") ) { return hx::Val( tileToSprite_dyn()); }
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return hx::Val( createBuffer_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onGameResized") ) { return hx::Val( onGameResized_dyn()); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return hx::Val( cacheGraphics_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileCoords") ) { return hx::Val( getTileCoords_dyn()); }
		if (HX_FIELD_EQ(inName,"updateBuffers") ) { return hx::Val( updateBuffers_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform); }
		if (HX_FIELD_EQ(inName,"refreshBuffers") ) { return hx::Val( refreshBuffers_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"onCameraChanged") ) { return hx::Val( onCameraChanged_dyn()); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return hx::Val( initTileObjects_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scaledTileWidth") ) { return hx::Val( _scaledTileWidth); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return hx::Val( set_antialiasing_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_scaledTileHeight") ) { return hx::Val( _scaledTileHeight); }
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return hx::Val( computeDimensions_dyn()); }
		if (HX_FIELD_EQ(inName,"setScaleXCallback") ) { return hx::Val( setScaleXCallback_dyn()); }
		if (HX_FIELD_EQ(inName,"setScaleYCallback") ) { return hx::Val( setScaleYCallback_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"setScaleXYCallback") ) { return hx::Val( setScaleXYCallback_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { return hx::Val( _checkBufferChanges); }
		if (HX_FIELD_EQ(inName,"defaultTileToSprite") ) { return hx::Val( defaultTileToSprite_dyn()); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return hx::Val( set_allowCollisions_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return hx::Val( overlapsWithCallback_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return hx::Val( getTileIndexByCoords_dyn()); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return hx::Val( getTileCoordsByIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return hx::Val( updateColorTransform_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return hx::Val( set_pixelPerfectRender_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxTilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_color(inValue) );color=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blend(inValue) );blend=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frames(inValue) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_graphic(inValue) );graphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { _buffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileWidth") ) { _tileWidth=inValue.Cast< Int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_tileHeight") ) { _tileHeight=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { useScaleHack=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antialiasing(inValue) );antialiasing=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_scaledTileWidth") ) { _scaledTileWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_scaledTileHeight") ) { _scaledTileHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { _checkBufferChanges=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98"));
	outFields->push(HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"));
	outFields->push(HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"));
	outFields->push(HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"));
	outFields->push(HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"));
	outFields->push(HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"));
	outFields->push(HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"));
	outFields->push(HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"));
	outFields->push(HX_HCSTRING("_buffers","\xf4","\xfc","\x48","\xeb"));
	outFields->push(HX_HCSTRING("_tileWidth","\xb9","\x8f","\x60","\xb1"));
	outFields->push(HX_HCSTRING("_tileHeight","\xd4","\xaa","\x6c","\x39"));
	outFields->push(HX_HCSTRING("_scaledTileWidth","\x7f","\x28","\x09","\x38"));
	outFields->push(HX_HCSTRING("_scaledTileHeight","\x4e","\xbf","\x49","\x86"));
	outFields->push(HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8"));
	outFields->push(HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"));
	outFields->push(HX_HCSTRING("_checkBufferChanges","\x1a","\x1a","\x89","\x0b"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxTilemap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,useScaleHack),HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTilemap_obj,scale),HX_HCSTRING("scale","\x8a","\xce","\xce","\x78")},
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,antialiasing),HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxTilemap_obj,offset),HX_HCSTRING("offset","\x93","\x97","\x3f","\x60")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFramesCollection*/ ,(int)offsetof(FlxTilemap_obj,frames),HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac")},
	{hx::fsObject /*::flixel::graphics::FlxGraphic*/ ,(int)offsetof(FlxTilemap_obj,graphic),HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74")},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(FlxTilemap_obj,colorTransform),HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxTilemap_obj,blend),HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(FlxTilemap_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(FlxTilemap_obj,_flashPoint),HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(FlxTilemap_obj,_flashRect),HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FlxTilemap_obj,_buffers),HX_HCSTRING("_buffers","\xf4","\xfc","\x48","\xeb")},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,_tileWidth),HX_HCSTRING("_tileWidth","\xb9","\x8f","\x60","\xb1")},
	{hx::fsInt,(int)offsetof(FlxTilemap_obj,_tileHeight),HX_HCSTRING("_tileHeight","\xd4","\xaa","\x6c","\x39")},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,_scaledTileWidth),HX_HCSTRING("_scaledTileWidth","\x7f","\x28","\x09","\x38")},
	{hx::fsFloat,(int)offsetof(FlxTilemap_obj,_scaledTileHeight),HX_HCSTRING("_scaledTileHeight","\x4e","\xbf","\x49","\x86")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(FlxTilemap_obj,_helperPoint),HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8")},
	{hx::fsObject /*::flixel::math::FlxMatrix*/ ,(int)offsetof(FlxTilemap_obj,_matrix),HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a")},
	{hx::fsBool,(int)offsetof(FlxTilemap_obj,_checkBufferChanges),HX_HCSTRING("_checkBufferChanges","\x1a","\x1a","\x89","\x0b")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxTilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxTilemap_obj_sMemberFields[] = {
	HX_HCSTRING("useScaleHack","\x44","\x9c","\x16","\x98"),
	HX_HCSTRING("scale","\x8a","\xce","\xce","\x78"),
	HX_HCSTRING("antialiasing","\xf4","\x16","\xb3","\x48"),
	HX_HCSTRING("offset","\x93","\x97","\x3f","\x60"),
	HX_HCSTRING("frames","\xa6","\xaf","\x85","\xac"),
	HX_HCSTRING("graphic","\xa8","\x5a","\x07","\x74"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("blend","\x51","\xe8","\xf4","\xb4"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("_flashPoint","\x9f","\x1d","\x2a","\xb7"),
	HX_HCSTRING("_flashRect","\xb5","\xc2","\xf3","\x5d"),
	HX_HCSTRING("_buffers","\xf4","\xfc","\x48","\xeb"),
	HX_HCSTRING("_tileWidth","\xb9","\x8f","\x60","\xb1"),
	HX_HCSTRING("_tileHeight","\xd4","\xaa","\x6c","\x39"),
	HX_HCSTRING("_scaledTileWidth","\x7f","\x28","\x09","\x38"),
	HX_HCSTRING("_scaledTileHeight","\x4e","\xbf","\x49","\x86"),
	HX_HCSTRING("_helperPoint","\x03","\xe6","\x14","\xf8"),
	HX_HCSTRING("_matrix","\xe0","\x47","\x3f","\x2a"),
	HX_HCSTRING("_checkBufferChanges","\x1a","\x1a","\x89","\x0b"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("set_frames","\xe3","\xbd","\x8a","\xa0"),
	HX_HCSTRING("onGameResized","\x3f","\xef","\x13","\xab"),
	HX_HCSTRING("onCameraChanged","\x30","\x48","\x4e","\x5c"),
	HX_HCSTRING("cacheGraphics","\x2d","\x61","\x95","\xfc"),
	HX_HCSTRING("initTileObjects","\x16","\xbe","\x45","\x2e"),
	HX_HCSTRING("computeDimensions","\xa4","\xa4","\xeb","\xf3"),
	HX_HCSTRING("updateMap","\x13","\xe8","\xdf","\x82"),
	HX_HCSTRING("isOnScreen","\xf5","\x43","\xb9","\xa1"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("refreshBuffers","\xd8","\xb2","\xa5","\x26"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("overlapsWithCallback","\x17","\xc3","\x72","\xa8"),
	HX_HCSTRING("getTileIndexByCoords","\x03","\x79","\x8b","\x76"),
	HX_HCSTRING("getTileCoordsByIndex","\xb9","\x63","\x25","\xa1"),
	HX_HCSTRING("getTileCoords","\x22","\xd6","\x8d","\x89"),
	HX_HCSTRING("follow","\x71","\x91","\x96","\xf9"),
	HX_HCSTRING("ray","\xea","\xd5","\x56","\x00"),
	HX_HCSTRING("tileToSprite","\x2e","\xe9","\x26","\xc3"),
	HX_HCSTRING("updateBuffers","\x6a","\x08","\xff","\x7c"),
	HX_HCSTRING("drawTilemap","\x8a","\x34","\xd7","\x8e"),
	HX_HCSTRING("updateTile","\xd7","\xb5","\xb1","\x05"),
	HX_HCSTRING("createBuffer","\x1c","\xfd","\xe9","\xf2"),
	HX_HCSTRING("set_antialiasing","\xf1","\xf0","\x93","\xa3"),
	HX_HCSTRING("set_graphic","\xcb","\xc1","\x6e","\x04"),
	HX_HCSTRING("set_pixelPerfectRender","\x9a","\x4f","\x8f","\xbc"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("updateColorTransform","\x72","\x0f","\xd2","\x2f"),
	HX_HCSTRING("set_blend","\xb4","\x30","\xef","\xdb"),
	HX_HCSTRING("setScaleXYCallback","\x6e","\xfd","\x35","\x90"),
	HX_HCSTRING("setScaleXCallback","\xb5","\x05","\xa2","\x03"),
	HX_HCSTRING("setScaleYCallback","\xb6","\x6e","\x93","\xd6"),
	HX_HCSTRING("defaultTileToSprite","\x8f","\xab","\x7f","\x3f"),
	HX_HCSTRING("set_allowCollisions","\xcd","\x8b","\x81","\x21"),
	::String(null()) };

static void FlxTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxTilemap_obj::__mClass;

void FlxTilemap_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.tile.FlxTilemap","\x2a","\xd5","\x63","\x29");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxTilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxTilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace tile
