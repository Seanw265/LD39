// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxGradient
#include <flixel/util/FlxGradient.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_util_LabelValuePair
#include <flixel/util/FlxPool_flixel_util_LabelValuePair.h>
#endif
#ifndef INCLUDED_flixel_util_FlxStringUtil
#include <flixel/util/FlxStringUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_LabelValuePair
#include <flixel/util/LabelValuePair.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace flixel{
namespace ui{

void FlxBar_obj::__construct(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,::hx::EnumBase direction,hx::Null< Int >  __o_width,hx::Null< Int >  __o_height, ::Dynamic parentRef,::String __o_variable,hx::Null< Float >  __o_min,hx::Null< Float >  __o_max,hx::Null< Bool >  __o_showBorder){
Float x = __o_x.Default(0);
Float y = __o_y.Default(0);
Int width = __o_width.Default(100);
Int height = __o_height.Default(10);
::String variable = __o_variable.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
Float min = __o_min.Default(0);
Float max = __o_max.Default(100);
Bool showBorder = __o_showBorder.Default(false);
            	HX_STACK_FRAME("flixel.ui.FlxBar","new",0xec11b05b,"flixel.ui.FlxBar.new","flixel/ui/FlxBar.hx",29,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(direction,"direction")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(parentRef,"parentRef")
            	HX_STACK_ARG(variable,"variable")
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
            	HX_STACK_ARG(showBorder,"showBorder")
HXLINE( 131)		this->_maxPercent = (int)100;
HXLINE(  78)		this->numDivisions = (int)100;
HXLINE(  47)		this->killOnEmpty = false;
HXLINE(  35)		this->fixedPosition = true;
HXLINE( 149)		super::__construct(x,y,null());
HXLINE( 151)		Bool _hx_tmp = hx::IsNull( direction );
HXDLIN( 151)		if (_hx_tmp) {
HXLINE( 151)			direction = ::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn();
            		}
            		else {
HXLINE( 151)			direction = direction;
            		}
HXLINE( 153)		this->barWidth = width;
HXLINE( 154)		this->barHeight = height;
HXLINE( 156)		this->_filledBarPoint =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE( 157)		this->_filledBarRect =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 158)		Bool _hx_tmp1 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 158)		if (_hx_tmp1) {
HXLINE( 160)			this->_zeroOffset =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE( 161)			this->_emptyBarRect =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 162)			this->makeGraphic(width,height,(int)0,true,null());
            		}
            		else {
HXLINE( 166)			Float X = (int)0;
HXDLIN( 166)			Float Y = (int)0;
HXDLIN( 166)			Float Width = (int)0;
HXDLIN( 166)			Float Height = (int)0;
HXDLIN( 166)			HX_VARI(  ::flixel::math::FlxRect,_this) = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 166)			_this->x = X;
HXDLIN( 166)			_this->y = Y;
HXDLIN( 166)			_this->width = Width;
HXDLIN( 166)			_this->height = Height;
HXDLIN( 166)			_this->_inPool = false;
HXDLIN( 166)			this->_filledFlxRect = _this;
            		}
HXLINE( 169)		Bool _hx_tmp2 = hx::IsNotNull( parentRef );
HXDLIN( 169)		if (_hx_tmp2) {
HXLINE( 171)			this->parent = parentRef;
HXLINE( 172)			this->parentVariable = variable;
            		}
HXLINE( 175)		this->set_fillDirection(direction);
HXLINE( 176)		this->createFilledBar((int)-16756480,(int)-16714752,showBorder,null());
HXLINE( 177)		this->setRange(min,max);
            	}

Dynamic FlxBar_obj::__CreateEmpty() { return new FlxBar_obj; }

hx::ObjectPtr< FlxBar_obj > FlxBar_obj::__new(hx::Null< Float >  __o_x,hx::Null< Float >  __o_y,::hx::EnumBase direction,hx::Null< Int >  __o_width,hx::Null< Int >  __o_height, ::Dynamic parentRef,::String __o_variable,hx::Null< Float >  __o_min,hx::Null< Float >  __o_max,hx::Null< Bool >  __o_showBorder)
{
	hx::ObjectPtr< FlxBar_obj > _hx_result = new FlxBar_obj();
	_hx_result->__construct(__o_x,__o_y,direction,__o_width,__o_height,parentRef,__o_variable,__o_min,__o_max,__o_showBorder);
	return _hx_result;
}

Dynamic FlxBar_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxBar_obj > _hx_result = new FlxBar_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

void FlxBar_obj::destroy(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","destroy",0x13b32675,"flixel.ui.FlxBar.destroy","flixel/ui/FlxBar.hx",181,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 182)		this->positionOffset = ( ( ::flixel::math::FlxPoint)(::flixel::util::FlxDestroyUtil_obj::put(this->positionOffset)) );
HXLINE( 184)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 184)		if (_hx_tmp) {
HXLINE( 186)			this->_frontFrame = null();
HXLINE( 187)			this->_filledFlxRect = ( ( ::flixel::math::FlxRect)(::flixel::util::FlxDestroyUtil_obj::put(this->_filledFlxRect)) );
            		}
            		else {
HXLINE( 191)			this->_emptyBarRect = null();
HXLINE( 192)			this->_zeroOffset = null();
HXLINE( 193)			this->_emptyBar = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_emptyBar);
HXLINE( 194)			this->_filledBar = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_filledBar);
            		}
HXLINE( 196)		this->_filledBarRect = null();
HXLINE( 197)		this->_filledBarPoint = null();
HXLINE( 199)		this->parent = null();
HXLINE( 200)		this->positionOffset = null();
HXLINE( 201)		this->emptyCallback = null();
HXLINE( 202)		this->filledCallback = null();
HXLINE( 204)		this->super::destroy();
            	}


void FlxBar_obj::trackParent(Int offsetX,Int offsetY){
            	HX_STACK_FRAME("flixel.ui.FlxBar","trackParent",0x235ed510,"flixel.ui.FlxBar.trackParent","flixel/ui/FlxBar.hx",217,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(offsetX,"offsetX")
            	HX_STACK_ARG(offsetY,"offsetY")
HXLINE( 218)		this->fixedPosition = false;
HXLINE( 219)		HX_VARI(  ::flixel::math::FlxPoint,point) = ::flixel::math::FlxPoint_obj::_pool->get()->set(offsetX,offsetY);
HXDLIN( 219)		point->_inPool = false;
HXDLIN( 219)		this->positionOffset = point;
HXLINE( 221)		Bool _hx_tmp = ::Reflect_obj::hasField(this->parent,HX_("scrollFactor",bc,ec,cf,3b));
HXDLIN( 221)		if (_hx_tmp) {
HXLINE( 223)			this->scrollFactor->set_x( ::Dynamic( ::Dynamic(this->parent->__Field(HX_("scrollFactor",bc,ec,cf,3b),hx::paccDynamic))->__Field(HX_("x",78,00,00,00),hx::paccDynamic)));
HXLINE( 224)			this->scrollFactor->set_y( ::Dynamic( ::Dynamic(this->parent->__Field(HX_("scrollFactor",bc,ec,cf,3b),hx::paccDynamic))->__Field(HX_("y",79,00,00,00),hx::paccDynamic)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,trackParent,(void))

void FlxBar_obj::setParent( ::Dynamic parentRef,::String variable,hx::Null< Bool >  __o_track,hx::Null< Int >  __o_offsetX,hx::Null< Int >  __o_offsetY){
Bool track = __o_track.Default(false);
Int offsetX = __o_offsetX.Default(0);
Int offsetY = __o_offsetY.Default(0);
            	HX_STACK_FRAME("flixel.ui.FlxBar","setParent",0x1ca008a7,"flixel.ui.FlxBar.setParent","flixel/ui/FlxBar.hx",238,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(parentRef,"parentRef")
            	HX_STACK_ARG(variable,"variable")
            	HX_STACK_ARG(track,"track")
            	HX_STACK_ARG(offsetX,"offsetX")
            	HX_STACK_ARG(offsetY,"offsetY")
HXLINE( 239)		this->parent = parentRef;
HXLINE( 240)		this->parentVariable = variable;
HXLINE( 242)		if (track) {
HXLINE( 244)			this->trackParent(offsetX,offsetY);
            		}
HXLINE( 247)		this->updateValueFromParent();
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBar_obj,setParent,(void))

void FlxBar_obj::stopTrackingParent(Int posX,Int posY){
            	HX_STACK_FRAME("flixel.ui.FlxBar","stopTrackingParent",0x3b6e39c8,"flixel.ui.FlxBar.stopTrackingParent","flixel/ui/FlxBar.hx",257,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(posX,"posX")
            	HX_STACK_ARG(posY,"posY")
HXLINE( 258)		this->fixedPosition = true;
HXLINE( 259)		this->set_x(posX);
HXLINE( 260)		this->set_y(posY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,stopTrackingParent,(void))

void FlxBar_obj::setCallbacks( ::Dynamic onEmpty, ::Dynamic onFilled,hx::Null< Bool >  __o_killOnEmpty){
Bool killOnEmpty = __o_killOnEmpty.Default(false);
            	HX_STACK_FRAME("flixel.ui.FlxBar","setCallbacks",0x67217bb1,"flixel.ui.FlxBar.setCallbacks","flixel/ui/FlxBar.hx",273,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(onEmpty,"onEmpty")
            	HX_STACK_ARG(onFilled,"onFilled")
            	HX_STACK_ARG(killOnEmpty,"killOnEmpty")
HXLINE( 274)		 ::Dynamic _hx_tmp;
HXDLIN( 274)		Bool _hx_tmp1 = hx::IsNotNull( onEmpty );
HXDLIN( 274)		if (_hx_tmp1) {
HXLINE( 274)			_hx_tmp = onEmpty;
            		}
            		else {
HXLINE( 274)			_hx_tmp = this->emptyCallback;
            		}
HXDLIN( 274)		this->emptyCallback = _hx_tmp;
HXLINE( 275)		 ::Dynamic _hx_tmp2;
HXDLIN( 275)		Bool _hx_tmp3 = hx::IsNotNull( onFilled );
HXDLIN( 275)		if (_hx_tmp3) {
HXLINE( 275)			_hx_tmp2 = onFilled;
            		}
            		else {
HXLINE( 275)			_hx_tmp2 = this->filledCallback;
            		}
HXDLIN( 275)		this->filledCallback = _hx_tmp2;
HXLINE( 276)		this->killOnEmpty = killOnEmpty;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBar_obj,setCallbacks,(void))

void FlxBar_obj::setRange(Float min,Float max){
            	HX_STACK_FRAME("flixel.ui.FlxBar","setRange",0x4a8160e0,"flixel.ui.FlxBar.setRange","flixel/ui/FlxBar.hx",286,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(min,"min")
            	HX_STACK_ARG(max,"max")
HXLINE( 287)		if ((max <= min)) {
HXLINE( 289)			HX_STACK_DO_THROW(HX_("FlxBar: max cannot be less than or equal to min",5b,e6,e7,51));
            		}
HXLINE( 293)		this->min = min;
HXLINE( 294)		this->max = max;
HXLINE( 295)		this->range = (max - min);
HXLINE( 296)		this->pct = ((Float)this->range / (Float)this->_maxPercent);
HXLINE( 298)		Float _hx_tmp;
HXDLIN( 298)		if (this->_fillHorizontal) {
HXLINE( 298)			_hx_tmp = ((Float)this->barWidth / (Float)this->_maxPercent);
            		}
            		else {
HXLINE( 298)			_hx_tmp = ((Float)this->barHeight / (Float)this->_maxPercent);
            		}
HXDLIN( 298)		this->pxPerPercent = _hx_tmp;
HXLINE( 300)		Float _hx_tmp1 = this->get_value();
HXDLIN( 300)		Bool _hx_tmp2 = !(::Math_obj::isNaN(_hx_tmp1));
HXDLIN( 300)		if (_hx_tmp2) {
HXLINE( 302)			Float _hx_tmp3 = this->get_value();
HXDLIN( 302)			Float _hx_tmp4 = ::Math_obj::min(_hx_tmp3,max);
HXDLIN( 302)			Float _hx_tmp5 = ::Math_obj::max(min,_hx_tmp4);
HXDLIN( 302)			this->set_value(_hx_tmp5);
            		}
            		else {
HXLINE( 306)			this->set_value(min);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,setRange,(void))

 ::flixel::ui::FlxBar FlxBar_obj::createFilledBar(Int empty,Int fill,hx::Null< Bool >  __o_showBorder,hx::Null< Int >  __o_border){
Bool showBorder = __o_showBorder.Default(false);
Int border = __o_border.Default(-1);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createFilledBar",0x6a7e3330,"flixel.ui.FlxBar.createFilledBar","flixel/ui/FlxBar.hx",321,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(empty,"empty")
            	HX_STACK_ARG(fill,"fill")
            	HX_STACK_ARG(showBorder,"showBorder")
            	HX_STACK_ARG(border,"border")
HXLINE( 322)		this->createColoredEmptyBar(empty,showBorder,border);
HXLINE( 323)		this->createColoredFilledBar(fill,showBorder,border);
HXLINE( 324)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBar_obj,createFilledBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createColoredEmptyBar(Int empty,hx::Null< Bool >  __o_showBorder,hx::Null< Int >  __o_border){
Bool showBorder = __o_showBorder.Default(false);
Int border = __o_border.Default(-1);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createColoredEmptyBar",0xa6df1307,"flixel.ui.FlxBar.createColoredEmptyBar","flixel/ui/FlxBar.hx",336,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(empty,"empty")
            	HX_STACK_ARG(showBorder,"showBorder")
            	HX_STACK_ARG(border,"border")
HXLINE( 337)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 337)		if (_hx_tmp) {
HXLINE( 339)			::String _hx_tmp1 = ((((HX_("empty: ",73,ea,c7,c6) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(":",3a,00,00,00));
HXDLIN( 339)			::String _hx_tmp2;
HXDLIN( 339)			_hx_tmp2 = ::StringTools_obj::hex(((int)((int)empty >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 339)			::String _hx_tmp3 = (HX_("0x",48,2a,00,00) + _hx_tmp2);
HXDLIN( 339)			::String _hx_tmp4 = ::StringTools_obj::hex(((int)((int)empty >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 339)			::String _hx_tmp5 = (_hx_tmp3 + _hx_tmp4);
HXDLIN( 339)			::String _hx_tmp6 = ::StringTools_obj::hex(((int)((int)empty >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 339)			::String _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 339)			::String _hx_tmp8 = ::StringTools_obj::hex(((int)empty & (int)(int)255),(int)2);
HXDLIN( 339)			HX_VARI( ::String,emptyKey) = (_hx_tmp1 + (_hx_tmp7 + _hx_tmp8));
HXLINE( 340)			if (showBorder) {
HXLINE( 341)				::String _hx_tmp9;
HXDLIN( 341)				_hx_tmp9 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 341)				::String _hx_tmp10 = (HX_("0x",48,2a,00,00) + _hx_tmp9);
HXDLIN( 341)				::String _hx_tmp11 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 341)				::String _hx_tmp12 = (_hx_tmp10 + _hx_tmp11);
HXDLIN( 341)				::String _hx_tmp13 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 341)				::String _hx_tmp14 = (_hx_tmp12 + _hx_tmp13);
HXDLIN( 341)				::String _hx_tmp15 = ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2);
HXDLIN( 341)				hx::AddEq(emptyKey,(HX_(",border: ",be,9e,76,9a) + (_hx_tmp14 + _hx_tmp15)));
            			}
HXLINE( 343)			Bool _hx_tmp16 = hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(emptyKey).StaticCast<  ::flixel::graphics::FlxGraphic >() );
HXDLIN( 343)			if (_hx_tmp16) {
HXLINE( 345)				HX_VARI(  ::openfl::display::BitmapData,emptyBar) = null();
HXLINE( 347)				if (showBorder) {
HXLINE( 349)					emptyBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 350)					Int _hx_tmp17 = (this->barWidth - (int)2);
HXDLIN( 350)					Int _hx_tmp18 = (this->barHeight - (int)2);
HXDLIN( 350)					emptyBar->fillRect( ::openfl::geom::Rectangle_obj::__new((int)1,(int)1,_hx_tmp17,_hx_tmp18),empty);
            				}
            				else {
HXLINE( 354)					emptyBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,empty);
            				}
HXLINE( 357)				::flixel::FlxG_obj::bitmap->add(emptyBar,false,emptyKey);
            			}
HXLINE( 360)			 ::flixel::graphics::frames::FlxImageFrame _hx_tmp19 = ::flixel::FlxG_obj::bitmap->_cache->get(emptyKey).StaticCast<  ::flixel::graphics::FlxGraphic >()->get_imageFrame();
HXDLIN( 360)			this->set_frames(_hx_tmp19);
            		}
            		else {
HXLINE( 364)			if (showBorder) {
HXLINE( 366)				this->_emptyBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 367)				Int _hx_tmp20 = (this->barWidth - (int)2);
HXDLIN( 367)				Int _hx_tmp21 = (this->barHeight - (int)2);
HXDLIN( 367)				this->_emptyBar->fillRect( ::openfl::geom::Rectangle_obj::__new((int)1,(int)1,_hx_tmp20,_hx_tmp21),empty);
            			}
            			else {
HXLINE( 371)				this->_emptyBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,empty);
            			}
HXLINE( 374)			this->_emptyBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 375)			this->updateEmptyBar();
            		}
HXLINE( 378)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBar_obj,createColoredEmptyBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createColoredFilledBar(Int fill,hx::Null< Bool >  __o_showBorder,hx::Null< Int >  __o_border){
Bool showBorder = __o_showBorder.Default(false);
Int border = __o_border.Default(-1);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createColoredFilledBar",0x03a68870,"flixel.ui.FlxBar.createColoredFilledBar","flixel/ui/FlxBar.hx",389,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fill,"fill")
            	HX_STACK_ARG(showBorder,"showBorder")
            	HX_STACK_ARG(border,"border")
HXLINE( 390)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 392)			::String _hx_tmp1 = ((((HX_("filled: ",c8,6c,47,79) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(":",3a,00,00,00));
HXDLIN( 392)			::String _hx_tmp2;
HXDLIN( 392)			_hx_tmp2 = ::StringTools_obj::hex(((int)((int)fill >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 392)			::String _hx_tmp3 = (HX_("0x",48,2a,00,00) + _hx_tmp2);
HXDLIN( 392)			::String _hx_tmp4 = ::StringTools_obj::hex(((int)((int)fill >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 392)			::String _hx_tmp5 = (_hx_tmp3 + _hx_tmp4);
HXDLIN( 392)			::String _hx_tmp6 = ::StringTools_obj::hex(((int)((int)fill >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 392)			::String _hx_tmp7 = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 392)			::String _hx_tmp8 = ::StringTools_obj::hex(((int)fill & (int)(int)255),(int)2);
HXDLIN( 392)			HX_VARI( ::String,filledKey) = (_hx_tmp1 + (_hx_tmp7 + _hx_tmp8));
HXLINE( 393)			if (showBorder) {
HXLINE( 394)				::String _hx_tmp9;
HXDLIN( 394)				_hx_tmp9 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 394)				::String _hx_tmp10 = (HX_("0x",48,2a,00,00) + _hx_tmp9);
HXDLIN( 394)				::String _hx_tmp11 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 394)				::String _hx_tmp12 = (_hx_tmp10 + _hx_tmp11);
HXDLIN( 394)				::String _hx_tmp13 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 394)				::String _hx_tmp14 = (_hx_tmp12 + _hx_tmp13);
HXDLIN( 394)				::String _hx_tmp15 = ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2);
HXDLIN( 394)				hx::AddEq(filledKey,(HX_(",border: ",be,9e,76,9a) + (_hx_tmp14 + _hx_tmp15)));
            			}
HXLINE( 396)			Bool _hx_tmp16 = hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(filledKey).StaticCast<  ::flixel::graphics::FlxGraphic >() );
HXDLIN( 396)			if (_hx_tmp16) {
HXLINE( 398)				HX_VARI(  ::openfl::display::BitmapData,filledBar) = null();
HXLINE( 400)				if (showBorder) {
HXLINE( 402)					filledBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 403)					Int _hx_tmp17 = (this->barWidth - (int)2);
HXDLIN( 403)					Int _hx_tmp18 = (this->barHeight - (int)2);
HXDLIN( 403)					filledBar->fillRect( ::openfl::geom::Rectangle_obj::__new((int)1,(int)1,_hx_tmp17,_hx_tmp18),fill);
            				}
            				else {
HXLINE( 407)					filledBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,fill);
            				}
HXLINE( 410)				::flixel::FlxG_obj::bitmap->add(filledBar,false,filledKey);
            			}
HXLINE( 413)			 ::flixel::graphics::frames::FlxImageFrame _hx_tmp19 = ::flixel::FlxG_obj::bitmap->_cache->get(filledKey).StaticCast<  ::flixel::graphics::FlxGraphic >()->get_imageFrame();
HXDLIN( 413)			this->set_frontFrames(_hx_tmp19);
            		}
            		else {
HXLINE( 417)			if (showBorder) {
HXLINE( 419)				this->_filledBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 420)				Int _hx_tmp20 = (this->barWidth - (int)2);
HXDLIN( 420)				Int _hx_tmp21 = (this->barHeight - (int)2);
HXDLIN( 420)				this->_filledBar->fillRect( ::openfl::geom::Rectangle_obj::__new((int)1,(int)1,_hx_tmp20,_hx_tmp21),fill);
            			}
            			else {
HXLINE( 424)				this->_filledBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,fill);
            			}
HXLINE( 427)			this->_filledBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 428)			this->updateFilledBar();
            		}
HXLINE( 430)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxBar_obj,createColoredFilledBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createGradientBar(::Array< Int > empty,::Array< Int > fill,hx::Null< Int >  __o_chunkSize,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_showBorder,hx::Null< Int >  __o_border){
Int chunkSize = __o_chunkSize.Default(1);
Int rotation = __o_rotation.Default(180);
Bool showBorder = __o_showBorder.Default(false);
Int border = __o_border.Default(-1);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createGradientBar",0x851ca162,"flixel.ui.FlxBar.createGradientBar","flixel/ui/FlxBar.hx",446,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(empty,"empty")
            	HX_STACK_ARG(fill,"fill")
            	HX_STACK_ARG(chunkSize,"chunkSize")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(showBorder,"showBorder")
            	HX_STACK_ARG(border,"border")
HXLINE( 447)		this->createGradientEmptyBar(empty,chunkSize,rotation,showBorder,border);
HXLINE( 448)		this->createGradientFilledBar(fill,chunkSize,rotation,showBorder,border);
HXLINE( 449)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxBar_obj,createGradientBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createGradientEmptyBar(::Array< Int > empty,hx::Null< Int >  __o_chunkSize,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_showBorder,hx::Null< Int >  __o_border){
Int chunkSize = __o_chunkSize.Default(1);
Int rotation = __o_rotation.Default(180);
Bool showBorder = __o_showBorder.Default(false);
Int border = __o_border.Default(-1);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createGradientEmptyBar",0x05ffcf57,"flixel.ui.FlxBar.createGradientEmptyBar","flixel/ui/FlxBar.hx",463,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(empty,"empty")
            	HX_STACK_ARG(chunkSize,"chunkSize")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(showBorder,"showBorder")
            	HX_STACK_ARG(border,"border")
HXLINE( 464)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 464)		if (_hx_tmp) {
HXLINE( 466)			HX_VARI( ::String,emptyKey) = ((((HX_("Gradient:",2a,58,e6,6e) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(",colors:[",bd,d0,85,cb));
HXLINE( 467)			{
HXLINE( 467)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 467)				while((_g < empty->length)){
HXLINE( 467)					HX_VARI( Int,col) = empty->__get(_g);
HXDLIN( 467)					++_g;
HXLINE( 469)					::String _hx_tmp1;
HXDLIN( 469)					_hx_tmp1 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 469)					::String _hx_tmp2 = (HX_("0x",48,2a,00,00) + _hx_tmp1);
HXDLIN( 469)					::String _hx_tmp3 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 469)					::String _hx_tmp4 = (_hx_tmp2 + _hx_tmp3);
HXDLIN( 469)					::String _hx_tmp5 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 469)					::String _hx_tmp6 = (_hx_tmp4 + _hx_tmp5);
HXDLIN( 469)					::String _hx_tmp7 = ::StringTools_obj::hex(((int)col & (int)(int)255),(int)2);
HXDLIN( 469)					hx::AddEq(emptyKey,((_hx_tmp6 + _hx_tmp7) + HX_(",",2c,00,00,00)));
            				}
            			}
HXLINE( 471)			hx::AddEq(emptyKey,(((HX_("],chunkSize: ",25,ff,35,eb) + chunkSize) + HX_(",rotation: ",90,2a,b9,0a)) + rotation));
HXLINE( 473)			if (showBorder) {
HXLINE( 475)				::String _hx_tmp8;
HXDLIN( 475)				_hx_tmp8 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 475)				::String _hx_tmp9 = (HX_("0x",48,2a,00,00) + _hx_tmp8);
HXDLIN( 475)				::String _hx_tmp10 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 475)				::String _hx_tmp11 = (_hx_tmp9 + _hx_tmp10);
HXDLIN( 475)				::String _hx_tmp12 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 475)				::String _hx_tmp13 = (_hx_tmp11 + _hx_tmp12);
HXDLIN( 475)				::String _hx_tmp14 = ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2);
HXDLIN( 475)				hx::AddEq(emptyKey,(HX_(",border: ",be,9e,76,9a) + (_hx_tmp13 + _hx_tmp14)));
            			}
HXLINE( 478)			Bool _hx_tmp15 = hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(emptyKey).StaticCast<  ::flixel::graphics::FlxGraphic >() );
HXDLIN( 478)			if (_hx_tmp15) {
HXLINE( 480)				HX_VARI(  ::openfl::display::BitmapData,emptyBar) = null();
HXLINE( 482)				if (showBorder) {
HXLINE( 484)					emptyBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 485)					Int _hx_tmp16 = (this->barWidth - (int)2);
HXDLIN( 485)					Int _hx_tmp17 = (this->barHeight - (int)2);
HXDLIN( 485)					::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(emptyBar,_hx_tmp16,_hx_tmp17,empty,(int)1,(int)1,chunkSize,rotation,null());
            				}
            				else {
HXLINE( 489)					emptyBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,empty,chunkSize,rotation,null());
            				}
HXLINE( 492)				::flixel::FlxG_obj::bitmap->add(emptyBar,false,emptyKey);
            			}
HXLINE( 495)			 ::flixel::graphics::frames::FlxImageFrame _hx_tmp18 = ::flixel::FlxG_obj::bitmap->_cache->get(emptyKey).StaticCast<  ::flixel::graphics::FlxGraphic >()->get_imageFrame();
HXDLIN( 495)			this->set_frames(_hx_tmp18);
            		}
            		else {
HXLINE( 499)			if (showBorder) {
HXLINE( 501)				this->_emptyBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 502)				Int _hx_tmp19 = (this->barWidth - (int)2);
HXDLIN( 502)				Int _hx_tmp20 = (this->barHeight - (int)2);
HXDLIN( 502)				::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(this->_emptyBar,_hx_tmp19,_hx_tmp20,empty,(int)1,(int)1,chunkSize,rotation,null());
            			}
            			else {
HXLINE( 506)				this->_emptyBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,empty,chunkSize,rotation,null());
            			}
HXLINE( 509)			this->_emptyBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 510)			this->updateEmptyBar();
            		}
HXLINE( 513)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBar_obj,createGradientEmptyBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createGradientFilledBar(::Array< Int > fill,hx::Null< Int >  __o_chunkSize,hx::Null< Int >  __o_rotation,hx::Null< Bool >  __o_showBorder,hx::Null< Int >  __o_border){
Int chunkSize = __o_chunkSize.Default(1);
Int rotation = __o_rotation.Default(180);
Bool showBorder = __o_showBorder.Default(false);
Int border = __o_border.Default(-1);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createGradientFilledBar",0xe12a9220,"flixel.ui.FlxBar.createGradientFilledBar","flixel/ui/FlxBar.hx",527,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fill,"fill")
            	HX_STACK_ARG(chunkSize,"chunkSize")
            	HX_STACK_ARG(rotation,"rotation")
            	HX_STACK_ARG(showBorder,"showBorder")
            	HX_STACK_ARG(border,"border")
HXLINE( 528)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 528)		if (_hx_tmp) {
HXLINE( 530)			HX_VARI( ::String,filledKey) = ((((HX_("Gradient:",2a,58,e6,6e) + this->barWidth) + HX_("x",78,00,00,00)) + this->barHeight) + HX_(",colors:[",bd,d0,85,cb));
HXLINE( 531)			{
HXLINE( 531)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 531)				while((_g < fill->length)){
HXLINE( 531)					HX_VARI( Int,col) = fill->__get(_g);
HXDLIN( 531)					++_g;
HXLINE( 533)					::String _hx_tmp1;
HXDLIN( 533)					_hx_tmp1 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 533)					::String _hx_tmp2 = (HX_("0x",48,2a,00,00) + _hx_tmp1);
HXDLIN( 533)					::String _hx_tmp3 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 533)					::String _hx_tmp4 = (_hx_tmp2 + _hx_tmp3);
HXDLIN( 533)					::String _hx_tmp5 = ::StringTools_obj::hex(((int)((int)col >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 533)					::String _hx_tmp6 = (_hx_tmp4 + _hx_tmp5);
HXDLIN( 533)					::String _hx_tmp7 = ::StringTools_obj::hex(((int)col & (int)(int)255),(int)2);
HXDLIN( 533)					hx::AddEq(filledKey,((_hx_tmp6 + _hx_tmp7) + HX_(",",2c,00,00,00)));
            				}
            			}
HXLINE( 535)			hx::AddEq(filledKey,(((HX_("],chunkSize: ",25,ff,35,eb) + chunkSize) + HX_(",rotation: ",90,2a,b9,0a)) + rotation));
HXLINE( 537)			if (showBorder) {
HXLINE( 539)				::String _hx_tmp8;
HXDLIN( 539)				_hx_tmp8 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)24) & (int)(int)255),(int)2);
HXDLIN( 539)				::String _hx_tmp9 = (HX_("0x",48,2a,00,00) + _hx_tmp8);
HXDLIN( 539)				::String _hx_tmp10 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)16) & (int)(int)255),(int)2);
HXDLIN( 539)				::String _hx_tmp11 = (_hx_tmp9 + _hx_tmp10);
HXDLIN( 539)				::String _hx_tmp12 = ::StringTools_obj::hex(((int)((int)border >> (int)(int)8) & (int)(int)255),(int)2);
HXDLIN( 539)				::String _hx_tmp13 = (_hx_tmp11 + _hx_tmp12);
HXDLIN( 539)				::String _hx_tmp14 = ::StringTools_obj::hex(((int)border & (int)(int)255),(int)2);
HXDLIN( 539)				hx::AddEq(filledKey,(HX_(",border: ",be,9e,76,9a) + (_hx_tmp13 + _hx_tmp14)));
            			}
HXLINE( 542)			Bool _hx_tmp15 = hx::IsNull( ::flixel::FlxG_obj::bitmap->_cache->get(filledKey).StaticCast<  ::flixel::graphics::FlxGraphic >() );
HXDLIN( 542)			if (_hx_tmp15) {
HXLINE( 544)				HX_VARI(  ::openfl::display::BitmapData,filledBar) = null();
HXLINE( 546)				if (showBorder) {
HXLINE( 548)					filledBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 549)					Int _hx_tmp16 = (this->barWidth - (int)2);
HXDLIN( 549)					Int _hx_tmp17 = (this->barHeight - (int)2);
HXDLIN( 549)					::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(filledBar,_hx_tmp16,_hx_tmp17,fill,(int)1,(int)1,chunkSize,rotation,null());
            				}
            				else {
HXLINE( 553)					filledBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,fill,chunkSize,rotation,null());
            				}
HXLINE( 556)				::flixel::FlxG_obj::bitmap->add(filledBar,false,filledKey);
            			}
HXLINE( 559)			 ::flixel::graphics::frames::FlxImageFrame _hx_tmp18 = ::flixel::FlxG_obj::bitmap->_cache->get(filledKey).StaticCast<  ::flixel::graphics::FlxGraphic >()->get_imageFrame();
HXDLIN( 559)			this->set_frontFrames(_hx_tmp18);
            		}
            		else {
HXLINE( 563)			if (showBorder) {
HXLINE( 565)				this->_filledBar =  ::openfl::display::BitmapData_obj::__new(this->barWidth,this->barHeight,true,border);
HXLINE( 566)				Int _hx_tmp19 = (this->barWidth - (int)2);
HXDLIN( 566)				Int _hx_tmp20 = (this->barHeight - (int)2);
HXDLIN( 566)				::flixel::util::FlxGradient_obj::overlayGradientOnBitmapData(this->_filledBar,_hx_tmp19,_hx_tmp20,fill,(int)1,(int)1,chunkSize,rotation,null());
            			}
            			else {
HXLINE( 570)				this->_filledBar = ::flixel::util::FlxGradient_obj::createGradientBitmapData(this->barWidth,this->barHeight,fill,chunkSize,rotation,null());
            			}
HXLINE( 573)			this->_filledBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 574)			this->updateFilledBar();
            		}
HXLINE( 577)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxBar_obj,createGradientFilledBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createImageBar( ::Dynamic empty, ::Dynamic fill,hx::Null< Int >  __o_emptyBackground,hx::Null< Int >  __o_fillBackground){
Int emptyBackground = __o_emptyBackground.Default(-16777216);
Int fillBackground = __o_fillBackground.Default(-16711936);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createImageBar",0xf0f89039,"flixel.ui.FlxBar.createImageBar","flixel/ui/FlxBar.hx",593,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(empty,"empty")
            	HX_STACK_ARG(fill,"fill")
            	HX_STACK_ARG(emptyBackground,"emptyBackground")
            	HX_STACK_ARG(fillBackground,"fillBackground")
HXLINE( 594)		this->createImageEmptyBar(empty,emptyBackground);
HXLINE( 595)		this->createImageFilledBar(fill,fillBackground);
HXLINE( 596)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxBar_obj,createImageBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createImageEmptyBar( ::Dynamic empty,hx::Null< Int >  __o_emptyBackground){
Int emptyBackground = __o_emptyBackground.Default(-16777216);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createImageEmptyBar",0xa6dfb520,"flixel.ui.FlxBar.createImageEmptyBar","flixel/ui/FlxBar.hx",607,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(empty,"empty")
            	HX_STACK_ARG(emptyBackground,"emptyBackground")
HXLINE( 608)		Bool _hx_tmp = hx::IsNotNull( empty );
HXDLIN( 608)		if (_hx_tmp) {
HXLINE( 610)			HX_VARI(  ::flixel::graphics::FlxGraphic,emptyGraphic) = ::flixel::FlxG_obj::bitmap->add(empty,null(),null());
HXLINE( 612)			Bool _hx_tmp1 = ::flixel::FlxG_obj::renderTile;
HXDLIN( 612)			if (_hx_tmp1) {
HXLINE( 614)				 ::flixel::graphics::frames::FlxImageFrame _hx_tmp2 = emptyGraphic->get_imageFrame();
HXDLIN( 614)				this->set_frames(_hx_tmp2);
            			}
            			else {
HXLINE( 618)				this->_emptyBar = emptyGraphic->bitmap->clone();
HXLINE( 620)				this->barWidth = this->_emptyBar->width;
HXLINE( 621)				this->barHeight = this->_emptyBar->height;
HXLINE( 623)				this->_emptyBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 625)				Bool _hx_tmp3;
HXDLIN( 625)				Bool _hx_tmp4 = hx::IsNotNull( this->graphic );
HXDLIN( 625)				if (_hx_tmp4) {
HXLINE( 625)					if ((this->frame->sourceSize->x == this->barWidth)) {
HXLINE( 625)						_hx_tmp3 = (this->frame->sourceSize->y != this->barHeight);
            					}
            					else {
HXLINE( 625)						_hx_tmp3 = true;
            					}
            				}
            				else {
HXLINE( 625)					_hx_tmp3 = true;
            				}
HXDLIN( 625)				if (_hx_tmp3) {
HXLINE( 627)					this->makeGraphic(this->barWidth,this->barHeight,(int)0,true,null());
            				}
HXLINE( 630)				this->updateEmptyBar();
            			}
            		}
            		else {
HXLINE( 635)			this->createColoredEmptyBar(emptyBackground,null(),null());
            		}
HXLINE( 638)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,createImageEmptyBar,return )

 ::flixel::ui::FlxBar FlxBar_obj::createImageFilledBar( ::Dynamic fill,hx::Null< Int >  __o_fillBackground){
Int fillBackground = __o_fillBackground.Default(-16711936);
            	HX_STACK_FRAME("flixel.ui.FlxBar","createImageFilledBar",0x0433bc37,"flixel.ui.FlxBar.createImageFilledBar","flixel/ui/FlxBar.hx",649,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(fill,"fill")
            	HX_STACK_ARG(fillBackground,"fillBackground")
HXLINE( 650)		Bool _hx_tmp = hx::IsNotNull( fill );
HXDLIN( 650)		if (_hx_tmp) {
HXLINE( 652)			HX_VARI(  ::flixel::graphics::FlxGraphic,filledGraphic) = ::flixel::FlxG_obj::bitmap->add(fill,null(),null());
HXLINE( 654)			Bool _hx_tmp1 = ::flixel::FlxG_obj::renderTile;
HXDLIN( 654)			if (_hx_tmp1) {
HXLINE( 656)				 ::flixel::graphics::frames::FlxImageFrame _hx_tmp2 = filledGraphic->get_imageFrame();
HXDLIN( 656)				this->set_frontFrames(_hx_tmp2);
            			}
            			else {
HXLINE( 660)				this->_filledBar = filledGraphic->bitmap->clone();
HXLINE( 662)				this->_filledBarRect->setTo((int)0,(int)0,this->barWidth,this->barHeight);
HXLINE( 664)				Bool _hx_tmp3;
HXDLIN( 664)				Bool _hx_tmp4 = hx::IsNotNull( this->graphic );
HXDLIN( 664)				if (_hx_tmp4) {
HXLINE( 664)					if ((this->frame->sourceSize->x == this->barWidth)) {
HXLINE( 664)						_hx_tmp3 = (this->frame->sourceSize->y != this->barHeight);
            					}
            					else {
HXLINE( 664)						_hx_tmp3 = true;
            					}
            				}
            				else {
HXLINE( 664)					_hx_tmp3 = true;
            				}
HXDLIN( 664)				if (_hx_tmp3) {
HXLINE( 666)					this->makeGraphic(this->barWidth,this->barHeight,(int)0,true,null());
            				}
HXLINE( 669)				Float _hx_tmp5;
HXDLIN( 669)				if (this->_fillHorizontal) {
HXLINE( 669)					_hx_tmp5 = ((Float)this->barWidth / (Float)this->_maxPercent);
            				}
            				else {
HXLINE( 669)					_hx_tmp5 = ((Float)this->barHeight / (Float)this->_maxPercent);
            				}
HXDLIN( 669)				this->pxPerPercent = _hx_tmp5;
HXLINE( 670)				this->updateFilledBar();
            			}
            		}
            		else {
HXLINE( 675)			this->createColoredFilledBar(fillBackground,null(),null());
            		}
HXLINE( 678)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxBar_obj,createImageFilledBar,return )

::hx::EnumBase FlxBar_obj::set_fillDirection(::hx::EnumBase direction){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_fillDirection",0x7ac2afda,"flixel.ui.FlxBar.set_fillDirection","flixel/ui/FlxBar.hx",682,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(direction,"direction")
HXLINE( 683)		this->fillDirection = direction;
HXLINE( 685)		Int _hx_tmp = ( ( ::hx::EnumBase)(direction) )->_hx_getIndex();
HXDLIN( 685)		switch((int)(_hx_tmp)){
            			case (int)0: case (int)1: case (int)4: case (int)5: {
HXLINE( 688)				this->_fillHorizontal = true;
            			}
            			break;
            			case (int)2: case (int)3: case (int)6: case (int)7: {
HXLINE( 691)				this->_fillHorizontal = false;
            			}
            			break;
            		}
HXLINE( 694)		return this->fillDirection;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_fillDirection,return )

void FlxBar_obj::updateValueFromParent(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","updateValueFromParent",0x9d60d3b7,"flixel.ui.FlxBar.updateValueFromParent","flixel/ui/FlxBar.hx",699,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 699)		 ::Dynamic _hx_tmp = ::Reflect_obj::getProperty(this->parent,this->parentVariable);
HXDLIN( 699)		this->set_value(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateValueFromParent,(void))

void FlxBar_obj::updateBar(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","updateBar",0x52521d85,"flixel.ui.FlxBar.updateBar","flixel/ui/FlxBar.hx",707,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 708)		this->updateEmptyBar();
HXLINE( 709)		this->updateFilledBar();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateBar,(void))

void FlxBar_obj::updateEmptyBar(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","updateEmptyBar",0x77e67454,"flixel.ui.FlxBar.updateEmptyBar","flixel/ui/FlxBar.hx",717,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 717)		Bool _hx_tmp = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 717)		if (_hx_tmp) {
HXLINE( 719)			this->get_pixels()->copyPixels(this->_emptyBar,this->_emptyBarRect,this->_zeroOffset,null(),null(),null());
HXLINE( 720)			this->dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateEmptyBar,(void))

void FlxBar_obj::updateFilledBar(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","updateFilledBar",0x19144a83,"flixel.ui.FlxBar.updateFilledBar","flixel/ui/FlxBar.hx",728,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 729)		this->_filledBarRect->width = this->barWidth;
HXLINE( 730)		this->_filledBarRect->height = this->barHeight;
HXLINE( 732)		Float _hx_tmp = this->get_value();
HXDLIN( 732)		HX_VARI( Float,fraction) = ((Float)(_hx_tmp - this->min) / (Float)this->range);
HXLINE( 733)		HX_VARI( Float,percent) = (fraction * this->_maxPercent);
HXLINE( 734)		HX_VAR( Float,maxScale);
HXDLIN( 734)		if (this->_fillHorizontal) {
HXLINE( 734)			maxScale = this->barWidth;
            		}
            		else {
HXLINE( 734)			maxScale = this->barHeight;
            		}
HXLINE( 735)		HX_VARI( Float,scaleInterval) = ((Float)maxScale / (Float)this->numDivisions);
HXLINE( 736)		Int _hx_tmp1 = ::Std_obj::_hx_int(((Float)(fraction * maxScale) / (Float)scaleInterval));
HXDLIN( 736)		HX_VARI( Float,interval) = (_hx_tmp1 * scaleInterval);
HXLINE( 738)		Bool _hx_tmp2 = this->_fillHorizontal;
HXDLIN( 738)		if (_hx_tmp2) {
HXLINE( 740)			this->_filledBarRect->width = ::Std_obj::_hx_int(interval);
            		}
            		else {
HXLINE( 744)			this->_filledBarRect->height = ::Std_obj::_hx_int(interval);
            		}
HXLINE( 747)		if ((percent > (int)0)) {
HXLINE( 749)			{
HXLINE( 749)				Int _hx_tmp3 = ( ( ::hx::EnumBase)(this->fillDirection) )->_hx_getIndex();
HXDLIN( 749)				switch((int)(_hx_tmp3)){
            					case (int)1: {
HXLINE( 759)						this->_filledBarRect->x = (this->barWidth - this->_filledBarRect->width);
HXLINE( 760)						this->_filledBarPoint->x = (this->barWidth - this->_filledBarRect->width);
            					}
            					break;
            					case (int)0: case (int)2: {
            					}
            					break;
            					case (int)3: {
HXLINE( 755)						this->_filledBarRect->y = (this->barHeight - this->_filledBarRect->height);
HXLINE( 756)						this->_filledBarPoint->y = (this->barHeight - this->_filledBarRect->height);
            					}
            					break;
            					case (int)4: {
HXLINE( 763)						Float _hx_tmp4 = (((Float)this->barWidth / (Float)(int)2) - ((Float)this->_filledBarRect->width / (Float)(int)2));
HXDLIN( 763)						this->_filledBarRect->x = ::Std_obj::_hx_int(_hx_tmp4);
HXLINE( 764)						Float _hx_tmp5 = (((Float)this->barWidth / (Float)(int)2) - ((Float)this->_filledBarRect->width / (Float)(int)2));
HXDLIN( 764)						this->_filledBarPoint->x = ::Std_obj::_hx_int(_hx_tmp5);
            					}
            					break;
            					case (int)5: {
HXLINE( 767)						this->_filledBarRect->width = ::Std_obj::_hx_int((maxScale - interval));
HXLINE( 768)						Float _hx_tmp6 = ((Float)(this->barWidth - this->_filledBarRect->width) / (Float)(int)2);
HXDLIN( 768)						this->_filledBarPoint->x = ::Std_obj::_hx_int(_hx_tmp6);
            					}
            					break;
            					case (int)6: {
HXLINE( 771)						Float _hx_tmp7 = (((Float)this->barHeight / (Float)(int)2) - ((Float)this->_filledBarRect->height / (Float)(int)2));
HXDLIN( 771)						this->_filledBarRect->y = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE( 772)						Float _hx_tmp8 = (((Float)this->barHeight / (Float)(int)2) - ((Float)this->_filledBarRect->height / (Float)(int)2));
HXDLIN( 772)						this->_filledBarPoint->y = ::Std_obj::_hx_int(_hx_tmp8);
            					}
            					break;
            					case (int)7: {
HXLINE( 775)						this->_filledBarRect->height = ::Std_obj::_hx_int((maxScale - interval));
HXLINE( 776)						Float _hx_tmp9 = ((Float)(this->barHeight - this->_filledBarRect->height) / (Float)(int)2);
HXDLIN( 776)						this->_filledBarPoint->y = ::Std_obj::_hx_int(_hx_tmp9);
            					}
            					break;
            				}
            			}
HXLINE( 779)			Bool _hx_tmp10 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 779)			if (_hx_tmp10) {
HXLINE( 781)				this->get_pixels()->copyPixels(this->_filledBar,this->_filledBarRect,this->_filledBarPoint,null(),null(),true);
            			}
            			else {
HXLINE( 785)				 ::flixel::graphics::frames::FlxImageFrame _hx_tmp11 = this->get_frontFrames();
HXDLIN( 785)				Bool _hx_tmp12 = hx::IsNotNull( _hx_tmp11 );
HXDLIN( 785)				if (_hx_tmp12) {
HXLINE( 787)					{
HXLINE( 787)						HX_VARI(  ::flixel::math::FlxRect,_this) = this->_filledFlxRect;
HXDLIN( 787)						HX_VARI(  ::openfl::geom::Rectangle,FlashRect) = this->_filledBarRect;
HXDLIN( 787)						_this->x = FlashRect->x;
HXDLIN( 787)						_this->y = FlashRect->y;
HXDLIN( 787)						_this->width = FlashRect->width;
HXDLIN( 787)						_this->height = FlashRect->height;
HXDLIN( 787)						_this->x = ::Math_obj::round(_this->x);
HXDLIN( 787)						_this->y = ::Math_obj::round(_this->y);
HXDLIN( 787)						_this->width = ::Math_obj::round(_this->width);
HXDLIN( 787)						_this->height = ::Math_obj::round(_this->height);
            					}
HXLINE( 788)					Int _hx_tmp13 = ::Std_obj::_hx_int(percent);
HXDLIN( 788)					if ((_hx_tmp13 > (int)0)) {
HXLINE( 790)						this->_frontFrame = this->get_frontFrames()->get_frame()->clipTo(this->_filledFlxRect,this->_frontFrame);
            					}
            				}
            			}
            		}
HXLINE( 796)		Bool _hx_tmp14 = ::flixel::FlxG_obj::renderBlit;
HXDLIN( 796)		if (_hx_tmp14) {
HXLINE( 798)			this->dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,updateFilledBar,(void))

void FlxBar_obj::update(Float elapsed){
            	HX_STACK_FRAME("flixel.ui.FlxBar","update",0xdbe594ee,"flixel.ui.FlxBar.update","flixel/ui/FlxBar.hx",803,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(elapsed,"elapsed")
HXLINE( 804)		Bool _hx_tmp = hx::IsNotNull( this->parent );
HXDLIN( 804)		if (_hx_tmp) {
HXLINE( 806)			 ::Dynamic _hx_tmp1 = ::Reflect_obj::getProperty(this->parent,this->parentVariable);
HXDLIN( 806)			Float _hx_tmp2 = this->get_value();
HXDLIN( 806)			if (hx::IsNotEq( _hx_tmp1,_hx_tmp2 )) {
HXLINE( 808)				this->updateValueFromParent();
            			}
HXLINE( 811)			Bool _hx_tmp3 = !(this->fixedPosition);
HXDLIN( 811)			if (_hx_tmp3) {
HXLINE( 813)				 ::Dynamic _hx_tmp4 = ( ::Dynamic(this->parent->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) + this->positionOffset->x);
HXDLIN( 813)				this->set_x(_hx_tmp4);
HXLINE( 814)				 ::Dynamic _hx_tmp5 = ( ::Dynamic(this->parent->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) + this->positionOffset->y);
HXDLIN( 814)				this->set_y(_hx_tmp5);
            			}
            		}
HXLINE( 818)		this->super::update(elapsed);
            	}


void FlxBar_obj::draw(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","draw",0x9cd647a9,"flixel.ui.FlxBar.draw","flixel/ui/FlxBar.hx",822,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 823)		this->super::draw();
HXLINE( 825)		if (!(::flixel::FlxG_obj::renderTile)) {
HXLINE( 826)			return;
            		}
HXLINE( 828)		if ((this->alpha == (int)0)) {
HXLINE( 829)			return;
            		}
HXLINE( 831)		Bool _hx_tmp;
HXDLIN( 831)		Float _hx_tmp1 = this->get_percent();
HXDLIN( 831)		if ((_hx_tmp1 > (int)0)) {
HXLINE( 831)			_hx_tmp = (this->_frontFrame->type != (int)2);
            		}
            		else {
HXLINE( 831)			_hx_tmp = false;
            		}
HXDLIN( 831)		if (_hx_tmp) {
HXLINE( 833)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 833)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->get_cameras();
HXDLIN( 833)			while((_g < _g1->length)){
HXLINE( 833)				HX_VARI(  ::flixel::FlxCamera,camera) = _g1->__get(_g).StaticCast<  ::flixel::FlxCamera >();
HXDLIN( 833)				++_g;
HXLINE( 835)				Bool _hx_tmp2;
HXDLIN( 835)				Bool _hx_tmp3;
HXDLIN( 835)				if (!(!(camera->visible))) {
HXLINE( 835)					_hx_tmp3 = !(camera->exists);
            				}
            				else {
HXLINE( 835)					_hx_tmp3 = true;
            				}
HXDLIN( 835)				if (!(_hx_tmp3)) {
HXLINE( 835)					_hx_tmp2 = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 835)					_hx_tmp2 = true;
            				}
HXDLIN( 835)				if (_hx_tmp2) {
HXLINE( 837)					continue;
            				}
HXLINE( 840)				this->getScreenPosition(this->_point,camera)->subtractPoint(this->offset);
HXLINE( 842)				this->_frontFrame->prepareMatrix(this->_matrix,(int)0,this->flipX,this->flipY);
HXLINE( 843)				this->_matrix->translate(-(this->origin->x),-(this->origin->y));
HXLINE( 844)				this->_matrix->scale(this->scale->x,this->scale->y);
HXLINE( 847)				Bool _hx_tmp4 = (this->angle != (int)0);
HXDLIN( 847)				if (_hx_tmp4) {
HXLINE( 849)					HX_VARI(  ::flixel::math::FlxMatrix,_this) = this->_matrix;
HXDLIN( 849)					HX_VARI( Float,cos) = this->_cosAngle;
HXDLIN( 849)					HX_VARI( Float,sin) = this->_sinAngle;
HXDLIN( 849)					HX_VARI( Float,a1) = ((_this->a * cos) - (_this->b * sin));
HXDLIN( 849)					Float _hx_tmp5 = (_this->a * sin);
HXDLIN( 849)					Float _hx_tmp6 = (_this->b * cos);
HXDLIN( 849)					_this->b = (_hx_tmp5 + _hx_tmp6);
HXDLIN( 849)					_this->a = a1;
HXDLIN( 849)					HX_VARI( Float,c1) = ((_this->c * cos) - (_this->d * sin));
HXDLIN( 849)					Float _hx_tmp7 = (_this->c * sin);
HXDLIN( 849)					Float _hx_tmp8 = (_this->d * cos);
HXDLIN( 849)					_this->d = (_hx_tmp7 + _hx_tmp8);
HXDLIN( 849)					_this->c = c1;
HXDLIN( 849)					HX_VARI( Float,tx1) = ((_this->tx * cos) - (_this->ty * sin));
HXDLIN( 849)					Float _hx_tmp9 = (_this->tx * sin);
HXDLIN( 849)					Float _hx_tmp10 = (_this->ty * cos);
HXDLIN( 849)					_this->ty = (_hx_tmp9 + _hx_tmp10);
HXDLIN( 849)					_this->tx = tx1;
            				}
HXLINE( 852)				{
HXLINE( 852)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_this1,"_this") = this->_point;
HXDLIN( 852)					Float X = this->origin->x;
HXDLIN( 852)					Float Y = this->origin->y;
HXDLIN( 852)					{
HXLINE( 852)						Float _hx_tmp11 = (_this1->x + X);
HXDLIN( 852)						_this1->set_x(_hx_tmp11);
            					}
HXDLIN( 852)					{
HXLINE( 852)						Float _hx_tmp12 = (_this1->y + Y);
HXDLIN( 852)						_this1->set_y(_hx_tmp12);
            					}
            				}
HXLINE( 853)				Bool _hx_tmp13 = this->isPixelPerfectRender(camera);
HXDLIN( 853)				if (_hx_tmp13) {
HXLINE( 855)					HX_VARI_NAME(  ::flixel::math::FlxPoint,_this2,"_this") = this->_point;
HXDLIN( 855)					Int _hx_tmp14 = ::Math_obj::floor(_this2->x);
HXDLIN( 855)					_this2->set_x(_hx_tmp14);
HXDLIN( 855)					Int _hx_tmp15 = ::Math_obj::floor(_this2->y);
HXDLIN( 855)					_this2->set_y(_hx_tmp15);
            				}
HXLINE( 858)				this->_matrix->translate(this->_point->x,this->_point->y);
HXLINE( 859)				camera->drawPixels(this->_frontFrame,null(),this->_matrix,this->colorTransform,this->blend,this->antialiasing,this->shader);
            			}
            		}
            	}


 ::openfl::display::BitmapData FlxBar_obj::set_pixels( ::openfl::display::BitmapData Pixels){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_pixels",0x3c70e2cf,"flixel.ui.FlxBar.set_pixels","flixel/ui/FlxBar.hx",866,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(Pixels,"Pixels")
HXLINE( 866)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 866)		if (_hx_tmp) {
HXLINE( 868)			return Pixels;
            		}
            		else {
HXLINE( 872)			return this->super::set_pixels(Pixels);
            		}
HXLINE( 866)		return null();
            	}


::String FlxBar_obj::toString(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","toString",0x909c22d1,"flixel.ui.FlxBar.toString","flixel/ui/FlxBar.hx",878,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 879)		 ::Dynamic value = this->min;
HXDLIN( 879)		HX_VARI(  ::flixel::util::LabelValuePair,_this) = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 879)		_this->label = HX_("min",92,11,53,00);
HXDLIN( 879)		_this->value = value;
HXLINE( 880)		 ::Dynamic value1 = this->max;
HXDLIN( 880)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this1,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 880)		_this1->label = HX_("max",a4,0a,53,00);
HXDLIN( 880)		_this1->value = value1;
HXLINE( 881)		 ::Dynamic value2 = this->range;
HXDLIN( 881)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this2,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 881)		_this2->label = HX_("range",bd,a5,1f,e4);
HXDLIN( 881)		_this2->value = value2;
HXLINE( 882)		 ::Dynamic value3 = this->pct;
HXDLIN( 882)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this3,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 882)		_this3->label = HX_("%",25,00,00,00);
HXDLIN( 882)		_this3->value = value3;
HXLINE( 883)		 ::Dynamic value4 = this->pxPerPercent;
HXDLIN( 883)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this4,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 883)		_this4->label = HX_("px/%",1e,1d,63,4a);
HXDLIN( 883)		_this4->value = value4;
HXLINE( 884)		 ::Dynamic value5 = this->get_value();
HXDLIN( 884)		HX_VARI_NAME(  ::flixel::util::LabelValuePair,_this5,"_this") = ::flixel::util::LabelValuePair_obj::_pool->get();
HXDLIN( 884)		_this5->label = HX_("value",71,7f,b8,31);
HXDLIN( 884)		_this5->value = value5;
HXLINE( 878)		return ::flixel::util::FlxStringUtil_obj::getDebugString(::Array_obj< ::Dynamic>::__new(6)->init(0,_this)->init(1,_this1)->init(2,_this2)->init(3,_this3)->init(4,_this4)->init(5,_this5));
            	}


Float FlxBar_obj::get_percent(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","get_percent",0x8cbbddd7,"flixel.ui.FlxBar.get_percent","flixel/ui/FlxBar.hx",888,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 889)		Float _hx_tmp = this->get_value();
HXDLIN( 889)		if ((_hx_tmp > this->max)) {
HXLINE( 891)			return this->_maxPercent;
            		}
HXLINE( 894)		Float _hx_tmp1 = this->get_value();
HXDLIN( 894)		Float _hx_tmp2 = (((Float)(_hx_tmp1 - this->min) / (Float)this->range) * this->_maxPercent);
HXDLIN( 894)		return ::Math_obj::floor(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_percent,return )

Float FlxBar_obj::set_percent(Float newPct){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_percent",0x9728e4e3,"flixel.ui.FlxBar.set_percent","flixel/ui/FlxBar.hx",898,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newPct,"newPct")
HXLINE( 899)		Bool _hx_tmp;
HXDLIN( 899)		if ((newPct >= (int)0)) {
HXLINE( 899)			_hx_tmp = (newPct <= this->_maxPercent);
            		}
            		else {
HXLINE( 899)			_hx_tmp = false;
            		}
HXDLIN( 899)		if (_hx_tmp) {
HXLINE( 901)			Float _hx_tmp1 = (this->pct * newPct);
HXDLIN( 901)			this->set_value(_hx_tmp1);
            		}
HXLINE( 903)		return newPct;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_percent,return )

Float FlxBar_obj::set_value(Float newValue){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_value",0x282d560f,"flixel.ui.FlxBar.set_value","flixel/ui/FlxBar.hx",907,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newValue,"newValue")
HXLINE( 908)		Float _hx_tmp = this->min;
HXDLIN( 908)		Float _hx_tmp1 = ::Math_obj::min(newValue,this->max);
HXDLIN( 908)		this->value = ::Math_obj::max(_hx_tmp,_hx_tmp1);
HXLINE( 910)		Bool _hx_tmp2;
HXDLIN( 910)		Float _hx_tmp3 = this->get_value();
HXDLIN( 910)		if ((_hx_tmp3 == this->min)) {
HXLINE( 910)			_hx_tmp2 = hx::IsNotNull( this->emptyCallback );
            		}
            		else {
HXLINE( 910)			_hx_tmp2 = false;
            		}
HXDLIN( 910)		if (_hx_tmp2) {
HXLINE( 912)			this->emptyCallback();
            		}
HXLINE( 915)		Bool _hx_tmp4;
HXDLIN( 915)		Float _hx_tmp5 = this->get_value();
HXDLIN( 915)		if ((_hx_tmp5 == this->max)) {
HXLINE( 915)			_hx_tmp4 = hx::IsNotNull( this->filledCallback );
            		}
            		else {
HXLINE( 915)			_hx_tmp4 = false;
            		}
HXDLIN( 915)		if (_hx_tmp4) {
HXLINE( 917)			this->filledCallback();
            		}
HXLINE( 920)		Bool _hx_tmp6;
HXDLIN( 920)		Float _hx_tmp7 = this->get_value();
HXDLIN( 920)		if ((_hx_tmp7 == this->min)) {
HXLINE( 920)			_hx_tmp6 = this->killOnEmpty;
            		}
            		else {
HXLINE( 920)			_hx_tmp6 = false;
            		}
HXDLIN( 920)		if (_hx_tmp6) {
HXLINE( 922)			this->kill();
            		}
HXLINE( 925)		this->updateBar();
HXLINE( 926)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_value,return )

Float FlxBar_obj::get_value(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","get_value",0x44dc6a03,"flixel.ui.FlxBar.get_value","flixel/ui/FlxBar.hx",938,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 938)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_value,return )

Int FlxBar_obj::set_numDivisions(Int newValue){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_numDivisions",0x1f308ca2,"flixel.ui.FlxBar.set_numDivisions","flixel/ui/FlxBar.hx",942,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(newValue,"newValue")
HXLINE( 943)		Int _hx_tmp;
HXDLIN( 943)		if ((newValue > (int)0)) {
HXLINE( 943)			_hx_tmp = newValue;
            		}
            		else {
HXLINE( 943)			_hx_tmp = (int)100;
            		}
HXDLIN( 943)		this->numDivisions = _hx_tmp;
HXLINE( 944)		this->updateFilledBar();
HXLINE( 945)		return newValue;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_numDivisions,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::get_frontFrames(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","get_frontFrames",0xa222c541,"flixel.ui.FlxBar.get_frontFrames","flixel/ui/FlxBar.hx",949,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 950)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 952)			return this->frontFrames;
            		}
HXLINE( 954)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_frontFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::set_frontFrames( ::flixel::graphics::frames::FlxImageFrame value){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_frontFrames",0x9dee424d,"flixel.ui.FlxBar.set_frontFrames","flixel/ui/FlxBar.hx",958,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 959)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 959)		if (_hx_tmp) {
HXLINE( 961)			this->frontFrames = value;
HXLINE( 962)			 ::flixel::graphics::frames::FlxFrame _hx_tmp1;
HXDLIN( 962)			Bool _hx_tmp2 = hx::IsNotNull( value );
HXDLIN( 962)			if (_hx_tmp2) {
HXLINE( 962)				_hx_tmp1 = value->get_frame()->copyTo(this->_frontFrame);
            			}
            			else {
HXLINE( 962)				_hx_tmp1 = null();
            			}
HXDLIN( 962)			this->_frontFrame = _hx_tmp1;
            		}
            		else {
HXLINE( 966)			 ::openfl::display::BitmapData _hx_tmp3 = value->get_frame()->paint(null(),null(),null(),null());
HXDLIN( 966)			this->createImageFilledBar(_hx_tmp3,null());
            		}
HXLINE( 968)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_frontFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::get_backFrames(){
            	HX_STACK_FRAME("flixel.ui.FlxBar","get_backFrames",0x7b96195b,"flixel.ui.FlxBar.get_backFrames","flixel/ui/FlxBar.hx",972,0x9c56c8d5)
            	HX_STACK_THIS(this)
HXLINE( 973)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 975)			return ( ( ::flixel::graphics::frames::FlxImageFrame)(this->frames) );
            		}
HXLINE( 977)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxBar_obj,get_backFrames,return )

 ::flixel::graphics::frames::FlxImageFrame FlxBar_obj::set_backFrames( ::flixel::graphics::frames::FlxImageFrame value){
            	HX_STACK_FRAME("flixel.ui.FlxBar","set_backFrames",0x9bb601cf,"flixel.ui.FlxBar.set_backFrames","flixel/ui/FlxBar.hx",981,0x9c56c8d5)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 982)		Bool _hx_tmp = ::flixel::FlxG_obj::renderTile;
HXDLIN( 982)		if (_hx_tmp) {
HXLINE( 984)			this->set_frames(value);
            		}
            		else {
HXLINE( 988)			 ::openfl::display::BitmapData _hx_tmp1 = value->get_frame()->paint(null(),null(),null(),null());
HXDLIN( 988)			this->createImageEmptyBar(_hx_tmp1,null());
            		}
HXLINE( 990)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxBar_obj,set_backFrames,return )


FlxBar_obj::FlxBar_obj()
{
}

void FlxBar_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxBar);
	HX_MARK_MEMBER_NAME(fixedPosition,"fixedPosition");
	HX_MARK_MEMBER_NAME(pxPerPercent,"pxPerPercent");
	HX_MARK_MEMBER_NAME(positionOffset,"positionOffset");
	HX_MARK_MEMBER_NAME(killOnEmpty,"killOnEmpty");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(min,"min");
	HX_MARK_MEMBER_NAME(max,"max");
	HX_MARK_MEMBER_NAME(range,"range");
	HX_MARK_MEMBER_NAME(pct,"pct");
	HX_MARK_MEMBER_NAME(numDivisions,"numDivisions");
	HX_MARK_MEMBER_NAME(emptyCallback,"emptyCallback");
	HX_MARK_MEMBER_NAME(filledCallback,"filledCallback");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(parentVariable,"parentVariable");
	HX_MARK_MEMBER_NAME(barWidth,"barWidth");
	HX_MARK_MEMBER_NAME(barHeight,"barHeight");
	HX_MARK_MEMBER_NAME(frontFrames,"frontFrames");
	HX_MARK_MEMBER_NAME(fillDirection,"fillDirection");
	HX_MARK_MEMBER_NAME(_fillHorizontal,"_fillHorizontal");
	HX_MARK_MEMBER_NAME(_frontFrame,"_frontFrame");
	HX_MARK_MEMBER_NAME(_filledFlxRect,"_filledFlxRect");
	HX_MARK_MEMBER_NAME(_emptyBar,"_emptyBar");
	HX_MARK_MEMBER_NAME(_emptyBarRect,"_emptyBarRect");
	HX_MARK_MEMBER_NAME(_filledBar,"_filledBar");
	HX_MARK_MEMBER_NAME(_zeroOffset,"_zeroOffset");
	HX_MARK_MEMBER_NAME(_filledBarRect,"_filledBarRect");
	HX_MARK_MEMBER_NAME(_filledBarPoint,"_filledBarPoint");
	HX_MARK_MEMBER_NAME(_maxPercent,"_maxPercent");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxBar_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fixedPosition,"fixedPosition");
	HX_VISIT_MEMBER_NAME(pxPerPercent,"pxPerPercent");
	HX_VISIT_MEMBER_NAME(positionOffset,"positionOffset");
	HX_VISIT_MEMBER_NAME(killOnEmpty,"killOnEmpty");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(min,"min");
	HX_VISIT_MEMBER_NAME(max,"max");
	HX_VISIT_MEMBER_NAME(range,"range");
	HX_VISIT_MEMBER_NAME(pct,"pct");
	HX_VISIT_MEMBER_NAME(numDivisions,"numDivisions");
	HX_VISIT_MEMBER_NAME(emptyCallback,"emptyCallback");
	HX_VISIT_MEMBER_NAME(filledCallback,"filledCallback");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(parentVariable,"parentVariable");
	HX_VISIT_MEMBER_NAME(barWidth,"barWidth");
	HX_VISIT_MEMBER_NAME(barHeight,"barHeight");
	HX_VISIT_MEMBER_NAME(frontFrames,"frontFrames");
	HX_VISIT_MEMBER_NAME(fillDirection,"fillDirection");
	HX_VISIT_MEMBER_NAME(_fillHorizontal,"_fillHorizontal");
	HX_VISIT_MEMBER_NAME(_frontFrame,"_frontFrame");
	HX_VISIT_MEMBER_NAME(_filledFlxRect,"_filledFlxRect");
	HX_VISIT_MEMBER_NAME(_emptyBar,"_emptyBar");
	HX_VISIT_MEMBER_NAME(_emptyBarRect,"_emptyBarRect");
	HX_VISIT_MEMBER_NAME(_filledBar,"_filledBar");
	HX_VISIT_MEMBER_NAME(_zeroOffset,"_zeroOffset");
	HX_VISIT_MEMBER_NAME(_filledBarRect,"_filledBarRect");
	HX_VISIT_MEMBER_NAME(_filledBarPoint,"_filledBarPoint");
	HX_VISIT_MEMBER_NAME(_maxPercent,"_maxPercent");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val FlxBar_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { return hx::Val( min); }
		if (HX_FIELD_EQ(inName,"max") ) { return hx::Val( max); }
		if (HX_FIELD_EQ(inName,"pct") ) { return hx::Val( pct); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return hx::Val( inCallProp == hx::paccAlways ? get_value() : value); }
		if (HX_FIELD_EQ(inName,"range") ) { return hx::Val( range); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_percent()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barWidth") ) { return hx::Val( barWidth); }
		if (HX_FIELD_EQ(inName,"setRange") ) { return hx::Val( setRange_dyn()); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barHeight") ) { return hx::Val( barHeight); }
		if (HX_FIELD_EQ(inName,"_emptyBar") ) { return hx::Val( _emptyBar); }
		if (HX_FIELD_EQ(inName,"setParent") ) { return hx::Val( setParent_dyn()); }
		if (HX_FIELD_EQ(inName,"updateBar") ) { return hx::Val( updateBar_dyn()); }
		if (HX_FIELD_EQ(inName,"set_value") ) { return hx::Val( set_value_dyn()); }
		if (HX_FIELD_EQ(inName,"get_value") ) { return hx::Val( get_value_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_backFrames()); }
		if (HX_FIELD_EQ(inName,"_filledBar") ) { return hx::Val( _filledBar); }
		if (HX_FIELD_EQ(inName,"set_pixels") ) { return hx::Val( set_pixels_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"killOnEmpty") ) { return hx::Val( killOnEmpty); }
		if (HX_FIELD_EQ(inName,"frontFrames") ) { return hx::Val( inCallProp == hx::paccAlways ? get_frontFrames() : frontFrames); }
		if (HX_FIELD_EQ(inName,"_frontFrame") ) { return hx::Val( _frontFrame); }
		if (HX_FIELD_EQ(inName,"_zeroOffset") ) { return hx::Val( _zeroOffset); }
		if (HX_FIELD_EQ(inName,"_maxPercent") ) { return hx::Val( _maxPercent); }
		if (HX_FIELD_EQ(inName,"trackParent") ) { return hx::Val( trackParent_dyn()); }
		if (HX_FIELD_EQ(inName,"get_percent") ) { return hx::Val( get_percent_dyn()); }
		if (HX_FIELD_EQ(inName,"set_percent") ) { return hx::Val( set_percent_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pxPerPercent") ) { return hx::Val( pxPerPercent); }
		if (HX_FIELD_EQ(inName,"numDivisions") ) { return hx::Val( numDivisions); }
		if (HX_FIELD_EQ(inName,"setCallbacks") ) { return hx::Val( setCallbacks_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedPosition") ) { return hx::Val( fixedPosition); }
		if (HX_FIELD_EQ(inName,"emptyCallback") ) { return hx::Val( emptyCallback); }
		if (HX_FIELD_EQ(inName,"fillDirection") ) { return hx::Val( fillDirection); }
		if (HX_FIELD_EQ(inName,"_emptyBarRect") ) { return hx::Val( _emptyBarRect); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"positionOffset") ) { return hx::Val( positionOffset); }
		if (HX_FIELD_EQ(inName,"filledCallback") ) { return hx::Val( filledCallback); }
		if (HX_FIELD_EQ(inName,"parentVariable") ) { return hx::Val( parentVariable); }
		if (HX_FIELD_EQ(inName,"_filledFlxRect") ) { return hx::Val( _filledFlxRect); }
		if (HX_FIELD_EQ(inName,"_filledBarRect") ) { return hx::Val( _filledBarRect); }
		if (HX_FIELD_EQ(inName,"createImageBar") ) { return hx::Val( createImageBar_dyn()); }
		if (HX_FIELD_EQ(inName,"updateEmptyBar") ) { return hx::Val( updateEmptyBar_dyn()); }
		if (HX_FIELD_EQ(inName,"get_backFrames") ) { return hx::Val( get_backFrames_dyn()); }
		if (HX_FIELD_EQ(inName,"set_backFrames") ) { return hx::Val( set_backFrames_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fillHorizontal") ) { return hx::Val( _fillHorizontal); }
		if (HX_FIELD_EQ(inName,"_filledBarPoint") ) { return hx::Val( _filledBarPoint); }
		if (HX_FIELD_EQ(inName,"createFilledBar") ) { return hx::Val( createFilledBar_dyn()); }
		if (HX_FIELD_EQ(inName,"updateFilledBar") ) { return hx::Val( updateFilledBar_dyn()); }
		if (HX_FIELD_EQ(inName,"get_frontFrames") ) { return hx::Val( get_frontFrames_dyn()); }
		if (HX_FIELD_EQ(inName,"set_frontFrames") ) { return hx::Val( set_frontFrames_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_numDivisions") ) { return hx::Val( set_numDivisions_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"createGradientBar") ) { return hx::Val( createGradientBar_dyn()); }
		if (HX_FIELD_EQ(inName,"set_fillDirection") ) { return hx::Val( set_fillDirection_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"stopTrackingParent") ) { return hx::Val( stopTrackingParent_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createImageEmptyBar") ) { return hx::Val( createImageEmptyBar_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"createImageFilledBar") ) { return hx::Val( createImageFilledBar_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createColoredEmptyBar") ) { return hx::Val( createColoredEmptyBar_dyn()); }
		if (HX_FIELD_EQ(inName,"updateValueFromParent") ) { return hx::Val( updateValueFromParent_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"createColoredFilledBar") ) { return hx::Val( createColoredFilledBar_dyn()); }
		if (HX_FIELD_EQ(inName,"createGradientEmptyBar") ) { return hx::Val( createGradientEmptyBar_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"createGradientFilledBar") ) { return hx::Val( createGradientFilledBar_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxBar_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"min") ) { min=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pct") ) { pct=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_value(inValue) );value=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"range") ) { range=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"percent") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_percent(inValue) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"barWidth") ) { barWidth=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"barHeight") ) { barHeight=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_emptyBar") ) { _emptyBar=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backFrames(inValue) ); }
		if (HX_FIELD_EQ(inName,"_filledBar") ) { _filledBar=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"killOnEmpty") ) { killOnEmpty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frontFrames") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_frontFrames(inValue) );frontFrames=inValue.Cast<  ::flixel::graphics::frames::FlxImageFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_frontFrame") ) { _frontFrame=inValue.Cast<  ::flixel::graphics::frames::FlxFrame >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_zeroOffset") ) { _zeroOffset=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxPercent") ) { _maxPercent=inValue.Cast< Int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pxPerPercent") ) { pxPerPercent=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numDivisions") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_numDivisions(inValue) );numDivisions=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fixedPosition") ) { fixedPosition=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"emptyCallback") ) { emptyCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fillDirection") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_fillDirection(inValue) );fillDirection=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_emptyBarRect") ) { _emptyBarRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"positionOffset") ) { positionOffset=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filledCallback") ) { filledCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parentVariable") ) { parentVariable=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filledFlxRect") ) { _filledFlxRect=inValue.Cast<  ::flixel::math::FlxRect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filledBarRect") ) { _filledBarRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_fillHorizontal") ) { _fillHorizontal=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_filledBarPoint") ) { _filledBarPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxBar_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("fixedPosition","\x3d","\xea","\xd2","\x12"));
	outFields->push(HX_HCSTRING("pxPerPercent","\x90","\xc3","\x28","\x3b"));
	outFields->push(HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5"));
	outFields->push(HX_HCSTRING("killOnEmpty","\xf0","\x70","\x0b","\xae"));
	outFields->push(HX_HCSTRING("percent","\xc5","\xaa","\xda","\x78"));
	outFields->push(HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"));
	outFields->push(HX_HCSTRING("min","\x92","\x11","\x53","\x00"));
	outFields->push(HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4"));
	outFields->push(HX_HCSTRING("pct","\x21","\x53","\x55","\x00"));
	outFields->push(HX_HCSTRING("numDivisions","\x80","\x33","\x9c","\x26"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("parentVariable","\x86","\x0d","\xe5","\x30"));
	outFields->push(HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99"));
	outFields->push(HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27"));
	outFields->push(HX_HCSTRING("frontFrames","\x2f","\xa1","\xf5","\xbc"));
	outFields->push(HX_HCSTRING("backFrames","\x2d","\x95","\x0f","\xeb"));
	outFields->push(HX_HCSTRING("fillDirection","\x3c","\x0b","\x89","\xf1"));
	outFields->push(HX_HCSTRING("_fillHorizontal","\xe6","\x79","\x6f","\x9d"));
	outFields->push(HX_HCSTRING("_frontFrame","\xe3","\x97","\xe5","\x05"));
	outFields->push(HX_HCSTRING("_filledFlxRect","\x75","\x41","\xba","\xea"));
	outFields->push(HX_HCSTRING("_emptyBar","\xa5","\x7c","\xc1","\x6f"));
	outFields->push(HX_HCSTRING("_emptyBarRect","\x69","\xac","\xcd","\xcb"));
	outFields->push(HX_HCSTRING("_filledBar","\x12","\x89","\xe0","\x00"));
	outFields->push(HX_HCSTRING("_zeroOffset","\xfa","\xb5","\x5e","\xc4"));
	outFields->push(HX_HCSTRING("_filledBarRect","\x56","\xf3","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("_filledBarPoint","\xde","\x79","\xb8","\x43"));
	outFields->push(HX_HCSTRING("_maxPercent","\xa0","\xf1","\x88","\xb5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxBar_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxBar_obj,fixedPosition),HX_HCSTRING("fixedPosition","\x3d","\xea","\xd2","\x12")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,pxPerPercent),HX_HCSTRING("pxPerPercent","\x90","\xc3","\x28","\x3b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(FlxBar_obj,positionOffset),HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5")},
	{hx::fsBool,(int)offsetof(FlxBar_obj,killOnEmpty),HX_HCSTRING("killOnEmpty","\xf0","\x70","\x0b","\xae")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,value),HX_HCSTRING("value","\x71","\x7f","\xb8","\x31")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,min),HX_HCSTRING("min","\x92","\x11","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,max),HX_HCSTRING("max","\xa4","\x0a","\x53","\x00")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,range),HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4")},
	{hx::fsFloat,(int)offsetof(FlxBar_obj,pct),HX_HCSTRING("pct","\x21","\x53","\x55","\x00")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,numDivisions),HX_HCSTRING("numDivisions","\x80","\x33","\x9c","\x26")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBar_obj,emptyCallback),HX_HCSTRING("emptyCallback","\x72","\x65","\x53","\x13")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBar_obj,filledCallback),HX_HCSTRING("filledCallback","\x87","\xd5","\x00","\xe4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxBar_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsString,(int)offsetof(FlxBar_obj,parentVariable),HX_HCSTRING("parentVariable","\x86","\x0d","\xe5","\x30")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,barWidth),HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,barHeight),HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27")},
	{hx::fsObject /*::flixel::graphics::frames::FlxImageFrame*/ ,(int)offsetof(FlxBar_obj,frontFrames),HX_HCSTRING("frontFrames","\x2f","\xa1","\xf5","\xbc")},
	{hx::fsObject /*::flixel::ui::FlxBarFillDirection*/ ,(int)offsetof(FlxBar_obj,fillDirection),HX_HCSTRING("fillDirection","\x3c","\x0b","\x89","\xf1")},
	{hx::fsBool,(int)offsetof(FlxBar_obj,_fillHorizontal),HX_HCSTRING("_fillHorizontal","\xe6","\x79","\x6f","\x9d")},
	{hx::fsObject /*::flixel::graphics::frames::FlxFrame*/ ,(int)offsetof(FlxBar_obj,_frontFrame),HX_HCSTRING("_frontFrame","\xe3","\x97","\xe5","\x05")},
	{hx::fsObject /*::flixel::math::FlxRect*/ ,(int)offsetof(FlxBar_obj,_filledFlxRect),HX_HCSTRING("_filledFlxRect","\x75","\x41","\xba","\xea")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(FlxBar_obj,_emptyBar),HX_HCSTRING("_emptyBar","\xa5","\x7c","\xc1","\x6f")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(FlxBar_obj,_emptyBarRect),HX_HCSTRING("_emptyBarRect","\x69","\xac","\xcd","\xcb")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(FlxBar_obj,_filledBar),HX_HCSTRING("_filledBar","\x12","\x89","\xe0","\x00")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(FlxBar_obj,_zeroOffset),HX_HCSTRING("_zeroOffset","\xfa","\xb5","\x5e","\xc4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(FlxBar_obj,_filledBarRect),HX_HCSTRING("_filledBarRect","\x56","\xf3","\x0f","\x6a")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(FlxBar_obj,_filledBarPoint),HX_HCSTRING("_filledBarPoint","\xde","\x79","\xb8","\x43")},
	{hx::fsInt,(int)offsetof(FlxBar_obj,_maxPercent),HX_HCSTRING("_maxPercent","\xa0","\xf1","\x88","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxBar_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxBar_obj_sMemberFields[] = {
	HX_HCSTRING("fixedPosition","\x3d","\xea","\xd2","\x12"),
	HX_HCSTRING("pxPerPercent","\x90","\xc3","\x28","\x3b"),
	HX_HCSTRING("positionOffset","\x1c","\x11","\x32","\xb5"),
	HX_HCSTRING("killOnEmpty","\xf0","\x70","\x0b","\xae"),
	HX_HCSTRING("value","\x71","\x7f","\xb8","\x31"),
	HX_HCSTRING("min","\x92","\x11","\x53","\x00"),
	HX_HCSTRING("max","\xa4","\x0a","\x53","\x00"),
	HX_HCSTRING("range","\xbd","\xa5","\x1f","\xe4"),
	HX_HCSTRING("pct","\x21","\x53","\x55","\x00"),
	HX_HCSTRING("numDivisions","\x80","\x33","\x9c","\x26"),
	HX_HCSTRING("emptyCallback","\x72","\x65","\x53","\x13"),
	HX_HCSTRING("filledCallback","\x87","\xd5","\x00","\xe4"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("parentVariable","\x86","\x0d","\xe5","\x30"),
	HX_HCSTRING("barWidth","\x33","\xf7","\x30","\x99"),
	HX_HCSTRING("barHeight","\x1a","\xce","\xf6","\x27"),
	HX_HCSTRING("frontFrames","\x2f","\xa1","\xf5","\xbc"),
	HX_HCSTRING("fillDirection","\x3c","\x0b","\x89","\xf1"),
	HX_HCSTRING("_fillHorizontal","\xe6","\x79","\x6f","\x9d"),
	HX_HCSTRING("_frontFrame","\xe3","\x97","\xe5","\x05"),
	HX_HCSTRING("_filledFlxRect","\x75","\x41","\xba","\xea"),
	HX_HCSTRING("_emptyBar","\xa5","\x7c","\xc1","\x6f"),
	HX_HCSTRING("_emptyBarRect","\x69","\xac","\xcd","\xcb"),
	HX_HCSTRING("_filledBar","\x12","\x89","\xe0","\x00"),
	HX_HCSTRING("_zeroOffset","\xfa","\xb5","\x5e","\xc4"),
	HX_HCSTRING("_filledBarRect","\x56","\xf3","\x0f","\x6a"),
	HX_HCSTRING("_filledBarPoint","\xde","\x79","\xb8","\x43"),
	HX_HCSTRING("_maxPercent","\xa0","\xf1","\x88","\xb5"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("trackParent","\x15","\x02","\x78","\x95"),
	HX_HCSTRING("setParent","\x6c","\x7a","\x25","\x4d"),
	HX_HCSTRING("stopTrackingParent","\x63","\xe7","\x80","\x2a"),
	HX_HCSTRING("setCallbacks","\x0c","\xb3","\x0f","\xcb"),
	HX_HCSTRING("setRange","\xbb","\x0e","\x54","\xf2"),
	HX_HCSTRING("createFilledBar","\xb5","\xc6","\x32","\x46"),
	HX_HCSTRING("createColoredEmptyBar","\x4c","\x98","\x6a","\xaf"),
	HX_HCSTRING("createColoredFilledBar","\x8b","\x9f","\x2f","\x75"),
	HX_HCSTRING("createGradientBar","\x27","\xe0","\xc0","\x25"),
	HX_HCSTRING("createGradientEmptyBar","\x72","\xe6","\x88","\x77"),
	HX_HCSTRING("createGradientFilledBar","\xa5","\xb2","\x95","\xc7"),
	HX_HCSTRING("createImageBar","\x54","\x94","\x67","\xd6"),
	HX_HCSTRING("createImageEmptyBar","\x25","\xef","\x24","\xe8"),
	HX_HCSTRING("createImageFilledBar","\x92","\x46","\x81","\xdf"),
	HX_HCSTRING("set_fillDirection","\x9f","\xee","\x66","\x1b"),
	HX_HCSTRING("updateValueFromParent","\xfc","\x58","\xec","\xa5"),
	HX_HCSTRING("updateBar","\x4a","\x8f","\xd7","\x82"),
	HX_HCSTRING("updateEmptyBar","\x6f","\x78","\x55","\x5d"),
	HX_HCSTRING("updateFilledBar","\x08","\xde","\xc8","\xf4"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("set_pixels","\x6a","\xfd","\xae","\x80"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("get_percent","\xdc","\x0a","\xd5","\xfe"),
	HX_HCSTRING("set_percent","\xe8","\x11","\x42","\x09"),
	HX_HCSTRING("set_value","\xd4","\xc7","\xb2","\x58"),
	HX_HCSTRING("get_value","\xc8","\xdb","\x61","\x75"),
	HX_HCSTRING("set_numDivisions","\x7d","\x0d","\x7d","\x81"),
	HX_HCSTRING("get_frontFrames","\xc6","\x58","\xd7","\x7d"),
	HX_HCSTRING("set_frontFrames","\xd2","\xd5","\xa2","\x79"),
	HX_HCSTRING("get_backFrames","\x76","\x1d","\x05","\x61"),
	HX_HCSTRING("set_backFrames","\xea","\x05","\x25","\x81"),
	::String(null()) };

static void FlxBar_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxBar_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxBar_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxBar_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxBar_obj::__mClass;

void FlxBar_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.ui.FlxBar","\xe9","\xe6","\x0d","\x71");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxBar_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxBar_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxBar_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxBar_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxBar_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxBar_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace ui
