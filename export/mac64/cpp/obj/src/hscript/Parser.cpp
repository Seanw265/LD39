// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_hscript_Token
#include <haxe/ds/GenericCell_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_hscript_Token
#include <haxe/ds/GenericStack_hscript_Token.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesInput
#include <haxe/io/BytesInput.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_StringInput
#include <haxe/io/StringInput.h>
#endif
#ifndef INCLUDED_hscript_CType
#include <hscript/CType.h>
#endif
#ifndef INCLUDED_hscript_Const
#include <hscript/Const.h>
#endif
#ifndef INCLUDED_hscript_Error
#include <hscript/Error.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_hscript_Token
#include <hscript/Token.h>
#endif

static const ::String _hx_array_data_3[] = {
	HX_("%",25,00,00,00),
};
static const ::String _hx_array_data_4[] = {
	HX_("*",2a,00,00,00),HX_("/",2f,00,00,00),
};
static const ::String _hx_array_data_5[] = {
	HX_("+",2b,00,00,00),HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_6[] = {
	HX_("<<",80,34,00,00),HX_(">>",40,36,00,00),HX_(">>>",fe,41,2f,00),
};
static const ::String _hx_array_data_7[] = {
	HX_("|",7c,00,00,00),HX_("&",26,00,00,00),HX_("^",5e,00,00,00),
};
static const ::String _hx_array_data_8[] = {
	HX_("==",60,35,00,00),HX_("!=",fc,1c,00,00),HX_(">",3e,00,00,00),HX_("<",3c,00,00,00),HX_(">=",3f,36,00,00),HX_("<=",81,34,00,00),
};
static const ::String _hx_array_data_9[] = {
	HX_("...",ee,0f,23,00),
};
static const ::String _hx_array_data_10[] = {
	HX_("&&",40,21,00,00),
};
static const ::String _hx_array_data_11[] = {
	HX_("||",80,6c,00,00),
};
static const ::String _hx_array_data_12[] = {
	HX_("=",3d,00,00,00),HX_("+=",b2,25,00,00),HX_("-=",70,27,00,00),HX_("*=",d3,24,00,00),HX_("/=",2e,29,00,00),HX_("%=",78,20,00,00),HX_("<<=",bd,bb,2d,00),HX_(">>=",fd,41,2f,00),HX_(">>>=",7f,7c,2a,29),HX_("|=",41,6c,00,00),HX_("&=",57,21,00,00),HX_("^=",1f,52,00,00),HX_("=>",61,35,00,00),
};
static const ::String _hx_array_data_13[] = {
	HX_("!",21,00,00,00),HX_("++",a0,25,00,00),HX_("--",60,27,00,00),HX_("-",2d,00,00,00),HX_("~",7e,00,00,00),
};
namespace hscript{

void Parser_obj::__construct(){
            	HX_STACK_FRAME("hscript.Parser","new",0x4b9f158c,"hscript.Parser.new","hscript/Parser.hx",47,0x98735743)
            	HX_STACK_THIS(this)
HXLINE(  83)		this->uid = (int)0;
HXLINE( 108)		this->line = (int)1;
HXLINE( 109)		this->opChars = HX_("+*/-=!><&|^%~",e2,ec,c4,dc);
HXLINE( 110)		this->identChars = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_",e0,b5,3b,15);
HXLINE( 111)		HX_VARI( ::Array< ::Dynamic>,priorities) = ::Array_obj< ::Dynamic>::__new(10)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_3,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_4,2))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_5,2))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_6,3))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_7,3))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_8,6))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_9,1))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_10,1))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_11,1))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_12,13));
HXLINE( 124)		this->opPriority =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 125)		this->opRightAssoc =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 126)		this->unops =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 132)		{
HXLINE( 132)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 132)			HX_VARI( Int,_g) = priorities->length;
HXDLIN( 132)			while((_g1 < _g)){
HXLINE( 132)				HX_VARI( Int,i) = _g1++;
HXLINE( 133)				{
HXLINE( 133)					HX_VARI( Int,_g2) = (int)0;
HXDLIN( 133)					HX_VARI( ::Array< ::String >,_g3) = priorities->__get(i).StaticCast< ::Array< ::String > >();
HXDLIN( 133)					while((_g2 < _g3->length)){
HXLINE( 133)						HX_VARI( ::String,x) = _g3->__get(_g2);
HXDLIN( 133)						++_g2;
HXLINE( 134)						this->opPriority->set(x,i);
HXLINE( 135)						if ((i == (int)9)) {
HXLINE( 135)							this->opRightAssoc->set(x,true);
            						}
            					}
            				}
            			}
            		}
HXLINE( 137)		{
HXLINE( 137)			HX_VARI_NAME( Int,_g4,"_g") = (int)0;
HXDLIN( 137)			HX_VARI_NAME( ::Array< ::String >,_g11,"_g1") = ::Array_obj< ::String >::fromData( _hx_array_data_13,5);
HXDLIN( 137)			while((_g4 < _g11->length)){
HXLINE( 137)				HX_VARI_NAME( ::String,x1,"x") = _g11->__get(_g4);
HXDLIN( 137)				++_g4;
HXLINE( 138)				Bool _hx_tmp;
HXDLIN( 138)				if ((x1 != HX_("++",a0,25,00,00))) {
HXLINE( 138)					_hx_tmp = (x1 == HX_("--",60,27,00,00));
            				}
            				else {
HXLINE( 138)					_hx_tmp = true;
            				}
HXDLIN( 138)				this->unops->set(x1,_hx_tmp);
            			}
            		}
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

hx::ObjectPtr< Parser_obj > Parser_obj::__new()
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Parser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct();
	return _hx_result;
}

void Parser_obj::error(::hx::EnumBase err,Int pmin,Int pmax){
            	HX_STACK_FRAME("hscript.Parser","error",0x9bb1b3f4,"hscript.Parser.error","hscript/Parser.hx",145,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(err,"err")
            	HX_STACK_ARG(pmin,"pmin")
            	HX_STACK_ARG(pmax,"pmax")
HXLINE( 145)		HX_STACK_DO_THROW(err);
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,error,(void))

void Parser_obj::invalidChar(Int c){
            	HX_STACK_FRAME("hscript.Parser","invalidChar",0x0ae4fe99,"hscript.Parser.invalidChar","hscript/Parser.hx",150,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE( 150)		::hx::EnumBase err = ::hscript::Error_obj::EInvalidChar(c);
HXDLIN( 150)		HX_STACK_DO_THROW(err);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,invalidChar,(void))

::hx::EnumBase Parser_obj::parseString(::String s,::String __o_origin){
::String origin = __o_origin.Default(HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"));
            	HX_STACK_FRAME("hscript.Parser","parseString",0xed832690,"hscript.Parser.parseString","hscript/Parser.hx",153,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(origin,"origin")
HXLINE( 154)		this->uid = (int)0;
HXLINE( 155)		return this->parse( ::haxe::io::StringInput_obj::__new(s),origin);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parseString,return )

::hx::EnumBase Parser_obj::parse( ::haxe::io::Input s,::String __o_origin){
::String origin = __o_origin.Default(HX_HCSTRING("hscript","\x73","\x8c","\x18","\x2c"));
            	HX_STACK_FRAME("hscript.Parser","parse",0xe5dd785f,"hscript.Parser.parse","hscript/Parser.hx",158,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(s,"s")
            	HX_STACK_ARG(origin,"origin")
HXLINE( 159)		this->line = (int)1;
HXLINE( 167)		this->tokens =  ::haxe::ds::GenericStack_hscript_Token_obj::__new();
HXLINE( 171)		this->_hx_char = (int)-1;
HXLINE( 172)		this->input = s;
HXLINE( 173)		this->ops = ::Array_obj< Bool >::__new();
HXLINE( 174)		this->idents = ::Array_obj< Bool >::__new();
HXLINE( 175)		{
HXLINE( 175)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 175)			HX_VARI( Int,_g) = this->opChars.length;
HXDLIN( 175)			while((_g1 < _g)){
HXLINE( 175)				HX_VARI( Int,i) = _g1++;
HXLINE( 176)				 ::Dynamic _hx_tmp = this->opChars.charCodeAt(i);
HXDLIN( 176)				this->ops[_hx_tmp] = true;
            			}
            		}
HXLINE( 177)		{
HXLINE( 177)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 177)			HX_VARI_NAME( Int,_g2,"_g") = this->identChars.length;
HXDLIN( 177)			while((_g11 < _g2)){
HXLINE( 177)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 178)				 ::Dynamic _hx_tmp1 = this->identChars.charCodeAt(i1);
HXDLIN( 178)				this->idents[_hx_tmp1] = true;
            			}
            		}
HXLINE( 179)		HX_VARI( ::Array< ::Dynamic>,a) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 180)		while(true){
HXLINE( 181)			HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 182)			if (hx::IsEq( tk,::hscript::Token_obj::TEof_dyn() )) {
HXLINE( 182)				goto _hx_goto_16;
            			}
HXLINE( 183)			{
HXLINE( 183)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 183)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            			}
HXLINE( 184)			::hx::EnumBase _hx_tmp2 = this->parseFullExpr();
HXDLIN( 184)			a->push(_hx_tmp2);
            		}
            		_hx_goto_16:;
HXLINE( 186)		Bool _hx_tmp3 = (a->length == (int)1);
HXDLIN( 186)		if (_hx_tmp3) {
HXLINE( 186)			return a->__get((int)0).StaticCast< ::hx::EnumBase >();
            		}
            		else {
HXLINE( 186)			::hx::EnumBase e = ::hscript::Expr_obj::EBlock(a);
HXDLIN( 186)			return e;
            		}
HXDLIN( 186)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,parse,return )

 ::Dynamic Parser_obj::unexpected(::hx::EnumBase tk){
            	HX_STACK_FRAME("hscript.Parser","unexpected",0xb7770e25,"hscript.Parser.unexpected","hscript/Parser.hx",189,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tk,"tk")
HXLINE( 190)		::String _hx_tmp = this->tokenString(tk);
HXDLIN( 190)		::hx::EnumBase err = ::hscript::Error_obj::EUnexpected(_hx_tmp);
HXDLIN( 190)		HX_STACK_DO_THROW(err);
HXDLIN( 190)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,unexpected,return )

void Parser_obj::push(::hx::EnumBase tk){
            	HX_STACK_FRAME("hscript.Parser","push",0xe0f2532e,"hscript.Parser.push","hscript/Parser.hx",200,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tk,"tk")
HXLINE( 200)		HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 200)		_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,push,(void))

void Parser_obj::ensure(::hx::EnumBase tk){
            	HX_STACK_FRAME("hscript.Parser","ensure",0x52df3412,"hscript.Parser.ensure","hscript/Parser.hx",204,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tk,"tk")
HXLINE( 205)		HX_VARI( ::hx::EnumBase,t) = this->token();
HXLINE( 206)		if (hx::IsNotEq( t,tk )) {
HXLINE( 206)			this->unexpected(t);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,ensure,(void))

::String Parser_obj::getIdent(){
            	HX_STACK_FRAME("hscript.Parser","getIdent",0x33becdce,"hscript.Parser.getIdent","hscript/Parser.hx",209,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 210)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 211)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 211)		if ((_hx_tmp == (int)2)) {
HXLINE( 212)			return tk->_hx_getString(0);
            		}
            		else {
HXLINE( 214)			this->unexpected(tk);
HXLINE( 215)			return null();
            		}
HXLINE( 211)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,getIdent,return )

::hx::EnumBase Parser_obj::expr(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","expr",0xd9af3e89,"hscript.Parser.expr","hscript/Parser.hx",223,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 223)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,expr,return )

Int Parser_obj::pmin(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","pmin",0xe0ec3876,"hscript.Parser.pmin","hscript/Parser.hx",231,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 231)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmin,return )

Int Parser_obj::pmax(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","pmax",0xe0ec3188,"hscript.Parser.pmax","hscript/Parser.hx",239,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 239)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,pmax,return )

::hx::EnumBase Parser_obj::mk(::hx::EnumBase e, ::Dynamic pmin, ::Dynamic pmax){
            	HX_STACK_FRAME("hscript.Parser","mk",0xd828e3b2,"hscript.Parser.mk","hscript/Parser.hx",250,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
            	HX_STACK_ARG(pmin,"pmin")
            	HX_STACK_ARG(pmax,"pmax")
HXLINE( 250)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,mk,return )

Bool Parser_obj::isBlock(::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","isBlock",0x99f5642f,"hscript.Parser.isBlock","hscript/Parser.hx",255,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e,"e")
HXLINE( 255)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 255)		switch((int)(_hx_tmp)){
            			case (int)2: {
HXLINE( 258)				HX_VARI_NAME( ::hx::EnumBase,e1,"e") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 258)				Bool _hx_tmp1 = hx::IsNotNull( e1 );
HXDLIN( 258)				if (_hx_tmp1) {
HXLINE( 255)					return this->isBlock(e1);
            				}
            				else {
HXLINE( 255)					return false;
            				}
            			}
            			break;
            			case (int)4: case (int)21: case (int)23: {
HXLINE( 255)				return true;
            			}
            			break;
            			case (int)6: {
HXLINE( 255)				return this->isBlock(e->_hx_getObject(2).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)7: {
HXLINE( 261)				HX_VARI_NAME( ::hx::EnumBase,e2,"e") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 261)				if (!(e->_hx_getBool(1))) {
HXLINE( 255)					return this->isBlock(e2);
            				}
            				else {
HXLINE( 255)					return false;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 259)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 259)				HX_VARI_NAME( ::hx::EnumBase,e11,"e1") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 259)				Bool _hx_tmp2 = hx::IsNotNull( e21 );
HXDLIN( 259)				if (_hx_tmp2) {
HXLINE( 255)					return this->isBlock(e21);
            				}
            				else {
HXLINE( 255)					return this->isBlock(e11);
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 255)				return this->isBlock(e->_hx_getObject(1).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)11: {
HXLINE( 255)				return this->isBlock(e->_hx_getObject(2).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)14: {
HXLINE( 255)				return this->isBlock(e->_hx_getObject(1).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)15: {
HXLINE( 265)				HX_VARI_NAME( ::hx::EnumBase,e3,"e") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 265)				Bool _hx_tmp3 = hx::IsNotNull( e3 );
HXDLIN( 265)				if (_hx_tmp3) {
HXLINE( 255)					return this->isBlock(e3);
            				}
            				else {
HXLINE( 255)					return false;
            				}
            			}
            			break;
            			case (int)20: {
HXLINE( 255)				return this->isBlock(e->_hx_getObject(3).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)24: {
HXLINE( 255)				return this->isBlock(e->_hx_getObject(1).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			default:{
HXLINE( 255)				return false;
            			}
            		}
HXDLIN( 255)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,isBlock,return )

::hx::EnumBase Parser_obj::parseFullExpr(){
            	HX_STACK_FRAME("hscript.Parser","parseFullExpr",0x2c8eb1e3,"hscript.Parser.parseFullExpr","hscript/Parser.hx",271,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 272)		HX_VARI( ::hx::EnumBase,e) = this->parseExpr();
HXLINE( 273)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 274)		Bool _hx_tmp;
HXDLIN( 274)		if (hx::IsNotEq( tk,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 274)			_hx_tmp = hx::IsNotEq( tk,::hscript::Token_obj::TEof_dyn() );
            		}
            		else {
HXLINE( 274)			_hx_tmp = false;
            		}
HXDLIN( 274)		if (_hx_tmp) {
HXLINE( 275)			Bool _hx_tmp1 = this->isBlock(e);
HXDLIN( 275)			if (_hx_tmp1) {
HXLINE( 276)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 276)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            			}
            			else {
HXLINE( 278)				this->unexpected(tk);
            			}
            		}
HXLINE( 280)		return e;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseFullExpr,return )

::hx::EnumBase Parser_obj::parseObject( ::Dynamic p1){
            	HX_STACK_FRAME("hscript.Parser","parseObject",0xf1927c7e,"hscript.Parser.parseObject","hscript/Parser.hx",283,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(p1,"p1")
HXLINE( 285)		HX_VARI( ::Array< ::Dynamic>,fl) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 286)		while(true){
HXLINE( 287)			HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 288)			HX_VARI( ::String,id) = null();
HXLINE( 289)			Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 289)			switch((int)(_hx_tmp)){
            				case (int)1: {
HXLINE( 291)					HX_VARI( ::hx::EnumBase,c) = tk->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 291)					{
HXLINE( 292)						Bool _hx_tmp1 = !(this->allowJSON);
HXDLIN( 292)						if (_hx_tmp1) {
HXLINE( 293)							this->unexpected(tk);
            						}
HXLINE( 294)						Int _hx_tmp2 = ( ( ::hx::EnumBase)(c) )->_hx_getIndex();
HXDLIN( 294)						if ((_hx_tmp2 == (int)2)) {
HXLINE( 295)							id = c->_hx_getString(0);
            						}
            						else {
HXLINE( 296)							this->unexpected(tk);
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 290)					id = tk->_hx_getString(0);
            				}
            				break;
            				case (int)7: {
HXLINE( 299)					goto _hx_goto_17;
            				}
            				break;
            				default:{
HXLINE( 301)					this->unexpected(tk);
            				}
            			}
HXLINE( 303)			{
HXLINE( 303)				HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 303)				if (hx::IsNotEq( t,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 303)					this->unexpected(t);
            				}
            			}
HXLINE( 304)			::hx::EnumBase _hx_tmp3 = this->parseExpr();
HXDLIN( 304)			fl->push( ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("e",65,00,00,00),_hx_tmp3)
            				->setFixed(1,HX_("name",4b,72,ff,48),id)));
HXLINE( 305)			tk = this->token();
HXLINE( 306)			Int _hx_tmp4 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 306)			switch((int)(_hx_tmp4)){
            				case (int)7: {
HXLINE( 308)					goto _hx_goto_17;
            				}
            				break;
            				case (int)9: {
            				}
            				break;
            				default:{
HXLINE( 311)					this->unexpected(tk);
            				}
            			}
            		}
            		_hx_goto_17:;
HXLINE( 314)		::hx::EnumBase e = ::hscript::Expr_obj::EObject(fl);
HXDLIN( 314)		return this->parseExprNext(e);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseObject,return )

::hx::EnumBase Parser_obj::parseExpr(){
            	HX_STACK_FRAME("hscript.Parser","parseExpr",0x8f01bd34,"hscript.Parser.parseExpr","hscript/Parser.hx",317,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 318)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 322)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 322)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE( 329)				::hx::EnumBase e = ::hscript::Expr_obj::EConst(tk->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
HXDLIN( 329)				return this->parseExprNext(e);
            			}
            			break;
            			case (int)2: {
HXLINE( 323)				HX_VARI( ::String,id) = tk->_hx_getString(0);
HXLINE( 324)				HX_VARI_NAME( ::hx::EnumBase,e1,"e") = this->parseStructure(id);
HXLINE( 325)				Bool _hx_tmp1 = hx::IsNull( e1 );
HXDLIN( 325)				if (_hx_tmp1) {
HXLINE( 326)					::hx::EnumBase e2 = ::hscript::Expr_obj::EIdent(id);
HXDLIN( 326)					e1 = e2;
            				}
HXLINE( 327)				return this->parseExprNext(e1);
            			}
            			break;
            			case (int)3: {
HXLINE( 377)				HX_VARI( ::String,op) = tk->_hx_getString(0);
HXLINE( 378)				Bool _hx_tmp2 = this->unops->exists(op);
HXDLIN( 378)				if (_hx_tmp2) {
HXLINE( 379)					::hx::EnumBase _hx_tmp3 = this->parseExpr();
HXDLIN( 379)					return this->makeUnop(op,_hx_tmp3);
            				}
HXLINE( 380)				return this->unexpected(tk);
            			}
            			break;
            			case (int)4: {
HXLINE( 331)				HX_VARI_NAME( ::hx::EnumBase,e3,"e") = this->parseExpr();
HXLINE( 332)				{
HXLINE( 332)					HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 332)					if (hx::IsNotEq( t,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 332)						this->unexpected(t);
            					}
            				}
HXLINE( 333)				::hx::EnumBase e4 = ::hscript::Expr_obj::EParent(e3);
HXDLIN( 333)				return this->parseExprNext(e4);
            			}
            			break;
            			case (int)6: {
HXLINE( 335)				tk = this->token();
HXLINE( 336)				Int _hx_tmp4 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 336)				switch((int)(_hx_tmp4)){
            					case (int)1: {
HXLINE( 348)						HX_VARI( ::hx::EnumBase,c) = tk->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 349)						Bool _hx_tmp5 = this->allowJSON;
HXDLIN( 349)						if (_hx_tmp5) {
HXLINE( 350)							Int _hx_tmp6 = ( ( ::hx::EnumBase)(c) )->_hx_getIndex();
HXDLIN( 350)							if ((_hx_tmp6 == (int)2)) {
HXLINE( 352)								HX_VARI( ::hx::EnumBase,tk2) = this->token();
HXLINE( 353)								{
HXLINE( 353)									HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 353)									_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk2,_this->head);
            								}
HXLINE( 354)								{
HXLINE( 354)									HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 354)									_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            								}
HXLINE( 355)								Int _hx_tmp7 = ( ( ::hx::EnumBase)(tk2) )->_hx_getIndex();
HXDLIN( 355)								if ((_hx_tmp7 == (int)14)) {
HXLINE( 357)									::hx::EnumBase _hx_tmp8 = this->parseObject((int)0);
HXDLIN( 357)									return this->parseExprNext(_hx_tmp8);
            								}
            							}
            							else {
HXLINE( 361)								HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this2,"_this") = this->tokens;
HXDLIN( 361)								_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this2->head);
            							}
            						}
            						else {
HXLINE( 364)							HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this3,"_this") = this->tokens;
HXDLIN( 364)							_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this3->head);
            						}
            					}
            					break;
            					case (int)2: {
HXLINE( 340)						HX_VARI_NAME( ::hx::EnumBase,tk21,"tk2") = this->token();
HXLINE( 341)						{
HXLINE( 341)							HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this4,"_this") = this->tokens;
HXDLIN( 341)							_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk21,_this4->head);
            						}
HXLINE( 342)						{
HXLINE( 342)							HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this5,"_this") = this->tokens;
HXDLIN( 342)							_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this5->head);
            						}
HXLINE( 343)						Int _hx_tmp9 = ( ( ::hx::EnumBase)(tk21) )->_hx_getIndex();
HXDLIN( 343)						if ((_hx_tmp9 == (int)14)) {
HXLINE( 345)							::hx::EnumBase _hx_tmp10 = this->parseObject((int)0);
HXDLIN( 345)							return this->parseExprNext(_hx_tmp10);
            						}
            					}
            					break;
            					case (int)7: {
HXLINE( 338)						::hx::EnumBase e5 = ::hscript::Expr_obj::EObject(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 338)						return this->parseExprNext(e5);
            					}
            					break;
            					default:{
HXLINE( 366)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this6,"_this") = this->tokens;
HXDLIN( 366)						_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this6->head);
            					}
            				}
HXLINE( 368)				HX_VARI( ::Array< ::Dynamic>,a) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 369)				while(true){
HXLINE( 370)					::hx::EnumBase _hx_tmp11 = this->parseFullExpr();
HXDLIN( 370)					a->push(_hx_tmp11);
HXLINE( 371)					tk = this->token();
HXLINE( 372)					if (hx::IsEq( tk,::hscript::Token_obj::TBrClose_dyn() )) {
HXLINE( 373)						goto _hx_goto_18;
            					}
HXLINE( 374)					{
HXLINE( 374)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this7,"_this") = this->tokens;
HXDLIN( 374)						_this7->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this7->head);
            					}
            				}
            				_hx_goto_18:;
HXLINE( 376)				::hx::EnumBase e6 = ::hscript::Expr_obj::EBlock(a);
HXDLIN( 376)				return e6;
            			}
            			break;
            			case (int)11: {
HXLINE( 382)				HX_VARI_NAME( ::Array< ::Dynamic>,a1,"a") = ::Array_obj< ::Dynamic>::__new();
HXLINE( 383)				tk = this->token();
HXLINE( 384)				while(hx::IsNotEq( tk,::hscript::Token_obj::TBkClose_dyn() )){
HXLINE( 385)					{
HXLINE( 385)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this8,"_this") = this->tokens;
HXDLIN( 385)						_this8->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this8->head);
            					}
HXLINE( 386)					::hx::EnumBase _hx_tmp12 = this->parseExpr();
HXDLIN( 386)					a1->push(_hx_tmp12);
HXLINE( 387)					tk = this->token();
HXLINE( 388)					if (hx::IsEq( tk,::hscript::Token_obj::TComma_dyn() )) {
HXLINE( 389)						tk = this->token();
            					}
            				}
HXLINE( 391)				Bool _hx_tmp13 = (a1->length == (int)1);
HXDLIN( 391)				if (_hx_tmp13) {
HXLINE( 392)					HX_VARI(  ::hx::EnumBase,value) = ( ( ::hx::EnumBase)(a1->__get((int)0).StaticCast< ::hx::EnumBase >()) );
HXDLIN( 392)					Int _hx_tmp14 = value->_hx_getIndex();
HXDLIN( 392)					switch((int)(_hx_tmp14)){
            						case (int)10: case (int)11: case (int)24: {
HXLINE( 394)							HX_VARI( ::String,tmp) = (HX_("__a_",fe,af,13,3f) + this->uid++);
HXLINE( 396)							::hx::EnumBase e7 = ::hscript::Expr_obj::EArrayDecl(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 396)							::hx::EnumBase e8 = ::hscript::Expr_obj::EVar(tmp,null(),e7);
HXLINE( 397)							::hx::EnumBase _hx_tmp15 = a1->__get((int)0).StaticCast< ::hx::EnumBase >();
HXDLIN( 397)							::hx::EnumBase _hx_tmp16 = this->mapCompr(tmp,_hx_tmp15);
HXLINE( 398)							::hx::EnumBase e9 = ::hscript::Expr_obj::EIdent(tmp);
HXLINE( 395)							::hx::EnumBase e10 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(3)->init(0,e8)->init(1,_hx_tmp16)->init(2,e9));
HXLINE( 400)							return this->parseExprNext(e10);
            						}
            						break;
            						default:{
            						}
            					}
            				}
HXLINE( 403)				::hx::EnumBase e11 = ::hscript::Expr_obj::EArrayDecl(a1);
HXDLIN( 403)				return this->parseExprNext(e11);
            			}
            			break;
            			case (int)15: {
HXLINE( 404)				HX_VARI_NAME( ::String,id1,"id") = tk->_hx_getString(0);
HXDLIN( 404)				Bool _hx_tmp17 = this->allowMetadata;
HXDLIN( 404)				if (_hx_tmp17) {
HXLINE( 405)					HX_VARI( ::Array< ::Dynamic>,args) = this->parseMetaArgs();
HXLINE( 406)					::hx::EnumBase _hx_tmp18 = this->parseExpr();
HXDLIN( 406)					::hx::EnumBase e12 = ::hscript::Expr_obj::EMeta(id1,args,_hx_tmp18);
HXDLIN( 406)					return e12;
            				}
            				else {
HXLINE( 408)					return this->unexpected(tk);
            				}
            			}
            			break;
            			default:{
HXLINE( 408)				return this->unexpected(tk);
            			}
            		}
HXLINE( 322)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseExpr,return )

::Array< ::Dynamic> Parser_obj::parseMetaArgs(){
            	HX_STACK_FRAME("hscript.Parser","parseMetaArgs",0xfe617641,"hscript.Parser.parseMetaArgs","hscript/Parser.hx",412,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 413)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 414)		if (hx::IsNotEq( tk,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 415)			{
HXLINE( 415)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 415)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            			}
HXLINE( 416)			return null();
            		}
HXLINE( 418)		HX_VARI( ::Array< ::Dynamic>,args) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 419)		tk = this->token();
HXLINE( 420)		if (hx::IsNotEq( tk,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 421)			{
HXLINE( 421)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 421)				_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            			}
HXLINE( 422)			while(true){
HXLINE( 423)				::hx::EnumBase _hx_tmp = this->parseExpr();
HXDLIN( 423)				args->push(_hx_tmp);
HXLINE( 424)				{
HXLINE( 424)					HX_VARI( ::hx::EnumBase,_g) = this->token();
HXDLIN( 424)					Int _hx_tmp1 = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 424)					switch((int)(_hx_tmp1)){
            						case (int)5: {
HXLINE( 427)							goto _hx_goto_20;
            						}
            						break;
            						case (int)9: {
            						}
            						break;
            						default:{
HXLINE( 429)							this->unexpected(_g);
            						}
            					}
            				}
            			}
            			_hx_goto_20:;
            		}
HXLINE( 433)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseMetaArgs,return )

::hx::EnumBase Parser_obj::mapCompr(::String tmp,::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","mapCompr",0xde0e1f9b,"hscript.Parser.mapCompr","hscript/Parser.hx",436,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(tmp,"tmp")
            	HX_STACK_ARG(e,"e")
HXLINE( 437)		HX_VAR( ::hx::EnumBase,edef);
HXDLIN( 437)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 437)		switch((int)(_hx_tmp)){
            			case (int)3: {
HXLINE( 449)				::hx::EnumBase _hx_tmp1 = this->mapCompr(tmp,e->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
HXLINE( 437)				edef = ::hscript::Expr_obj::EParent(_hx_tmp1);
            			}
            			break;
            			case (int)4: {
HXLINE( 437)				Bool _hx_tmp2 = (e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->length == (int)1);
HXDLIN( 437)				if (_hx_tmp2) {
HXLINE( 446)					HX_VARI_NAME( ::hx::EnumBase,e1,"e") = e->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->__get((int)0).StaticCast< ::hx::EnumBase >();
HXLINE( 447)					::hx::EnumBase _hx_tmp3 = this->mapCompr(tmp,e1);
HXLINE( 437)					edef = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp3));
            				}
            				else {
HXLINE( 451)					::hx::EnumBase e2 = ::hscript::Expr_obj::EIdent(tmp);
HXDLIN( 451)					::hx::EnumBase e3 = ::hscript::Expr_obj::EField(e2,HX_("push",da,11,61,4a));
HXLINE( 437)					edef = ::hscript::Expr_obj::ECall(e3,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 444)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 444)				HX_VARI_NAME( ::hx::EnumBase,e11,"e1") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 444)				HX_VARI( ::hx::EnumBase,cond) = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXDLIN( 444)				Bool _hx_tmp4 = hx::IsNull( e21 );
HXDLIN( 444)				if (_hx_tmp4) {
HXLINE( 445)					::hx::EnumBase _hx_tmp5 = this->mapCompr(tmp,e11);
HXLINE( 437)					edef = ::hscript::Expr_obj::EIf(cond,_hx_tmp5,null());
            				}
            				else {
HXLINE( 451)					::hx::EnumBase e4 = ::hscript::Expr_obj::EIdent(tmp);
HXDLIN( 451)					::hx::EnumBase e5 = ::hscript::Expr_obj::EField(e4,HX_("push",da,11,61,4a));
HXLINE( 437)					edef = ::hscript::Expr_obj::ECall(e5,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 440)				HX_VARI_NAME( ::hx::EnumBase,e22,"e2") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 440)				HX_VARI_NAME( ::hx::EnumBase,cond1,"cond") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 441)				::hx::EnumBase _hx_tmp6 = this->mapCompr(tmp,e22);
HXLINE( 437)				edef = ::hscript::Expr_obj::EWhile(cond1,_hx_tmp6);
            			}
            			break;
            			case (int)11: {
HXLINE( 438)				HX_VARI_NAME( ::hx::EnumBase,e23,"e2") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 438)				HX_VARI( ::hx::EnumBase,it) = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 438)				HX_VARI( ::String,v) = e->_hx_getString(0);
HXLINE( 439)				::hx::EnumBase _hx_tmp7 = this->mapCompr(tmp,e23);
HXLINE( 437)				edef = ::hscript::Expr_obj::EFor(v,it,_hx_tmp7);
            			}
            			break;
            			case (int)24: {
HXLINE( 442)				HX_VARI_NAME( ::hx::EnumBase,e24,"e2") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 442)				HX_VARI_NAME( ::hx::EnumBase,cond2,"cond") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 443)				::hx::EnumBase _hx_tmp8 = this->mapCompr(tmp,e24);
HXLINE( 437)				edef = ::hscript::Expr_obj::EDoWhile(cond2,_hx_tmp8);
            			}
            			break;
            			default:{
HXLINE( 451)				::hx::EnumBase e6 = ::hscript::Expr_obj::EIdent(tmp);
HXDLIN( 451)				::hx::EnumBase e7 = ::hscript::Expr_obj::EField(e6,HX_("push",da,11,61,4a));
HXLINE( 437)				edef = ::hscript::Expr_obj::ECall(e7,::Array_obj< ::Dynamic>::__new(1)->init(0,e));
            			}
            		}
HXLINE( 453)		return edef;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,mapCompr,return )

::hx::EnumBase Parser_obj::makeUnop(::String op,::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","makeUnop",0x60b6401c,"hscript.Parser.makeUnop","hscript/Parser.hx",457,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
            	HX_STACK_ARG(e,"e")
HXLINE( 457)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 457)		switch((int)(_hx_tmp)){
            			case (int)6: {
HXLINE( 458)				HX_VARI( ::hx::EnumBase,e2) = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 458)				HX_VARI( ::hx::EnumBase,e1) = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 458)				HX_VARI( ::String,bop) = e->_hx_getString(0);
HXDLIN( 458)				::hx::EnumBase _hx_tmp1 = this->makeUnop(op,e1);
HXDLIN( 458)				::hx::EnumBase e3 = ::hscript::Expr_obj::EBinop(bop,_hx_tmp1,e2);
HXLINE( 457)				return e3;
            			}
            			break;
            			case (int)22: {
HXLINE( 459)				HX_VARI_NAME( ::hx::EnumBase,e31,"e3") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 459)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 459)				::hx::EnumBase _hx_tmp2 = this->makeUnop(op,e->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
HXDLIN( 459)				::hx::EnumBase e4 = ::hscript::Expr_obj::ETernary(_hx_tmp2,e21,e31);
HXLINE( 457)				return e4;
            			}
            			break;
            			default:{
HXLINE( 460)				::hx::EnumBase e5 = ::hscript::Expr_obj::EUnop(op,true,e);
HXLINE( 457)				return e5;
            			}
            		}
HXDLIN( 457)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,makeUnop,return )

::hx::EnumBase Parser_obj::makeBinop(::String op,::hx::EnumBase e1,::hx::EnumBase e){
            	HX_STACK_FRAME("hscript.Parser","makeBinop",0x4ad5ff06,"hscript.Parser.makeBinop","hscript/Parser.hx",465,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
            	HX_STACK_ARG(e1,"e1")
            	HX_STACK_ARG(e,"e")
HXLINE( 465)		Int _hx_tmp = ( ( ::hx::EnumBase)(e) )->_hx_getIndex();
HXDLIN( 465)		switch((int)(_hx_tmp)){
            			case (int)6: {
HXLINE( 466)				HX_VARI( ::hx::EnumBase,e3) = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 466)				HX_VARI( ::hx::EnumBase,e2) = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 466)				HX_VARI( ::String,op2) = e->_hx_getString(0);
HXLINE( 467)				Bool _hx_tmp1;
HXDLIN( 467)				 ::Dynamic _hx_tmp2 = this->opPriority->get(op);
HXDLIN( 467)				Bool _hx_tmp3 = hx::IsLessEq( _hx_tmp2,this->opPriority->get(op2) );
HXDLIN( 467)				if (_hx_tmp3) {
HXLINE( 467)					_hx_tmp1 = !(this->opRightAssoc->exists(op));
            				}
            				else {
HXLINE( 467)					_hx_tmp1 = false;
            				}
HXDLIN( 467)				if (_hx_tmp1) {
HXLINE( 468)					::hx::EnumBase _hx_tmp4 = this->makeBinop(op,e1,e2);
HXDLIN( 468)					::hx::EnumBase e4 = ::hscript::Expr_obj::EBinop(op2,_hx_tmp4,e3);
HXLINE( 465)					return e4;
            				}
            				else {
HXLINE( 470)					::hx::EnumBase e5 = ::hscript::Expr_obj::EBinop(op,e1,e);
HXLINE( 465)					return e5;
            				}
            			}
            			break;
            			case (int)22: {
HXLINE( 471)				HX_VARI_NAME( ::hx::EnumBase,e41,"e4") = e->_hx_getObject(2).StaticCast< ::hx::EnumBase >();
HXDLIN( 471)				HX_VARI_NAME( ::hx::EnumBase,e31,"e3") = e->_hx_getObject(1).StaticCast< ::hx::EnumBase >();
HXDLIN( 471)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = e->_hx_getObject(0).StaticCast< ::hx::EnumBase >();
HXLINE( 472)				Bool _hx_tmp5 = this->opRightAssoc->exists(op);
HXDLIN( 472)				if (_hx_tmp5) {
HXLINE( 473)					::hx::EnumBase e6 = ::hscript::Expr_obj::EBinop(op,e1,e);
HXLINE( 465)					return e6;
            				}
            				else {
HXLINE( 475)					::hx::EnumBase _hx_tmp6 = this->makeBinop(op,e1,e21);
HXDLIN( 475)					::hx::EnumBase e7 = ::hscript::Expr_obj::ETernary(_hx_tmp6,e31,e41);
HXLINE( 465)					return e7;
            				}
            			}
            			break;
            			default:{
HXLINE( 477)				::hx::EnumBase e8 = ::hscript::Expr_obj::EBinop(op,e1,e);
HXLINE( 465)				return e8;
            			}
            		}
HXDLIN( 465)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Parser_obj,makeBinop,return )

::hx::EnumBase Parser_obj::parseStructure(::String id){
            	HX_STACK_FRAME("hscript.Parser","parseStructure",0x237837d4,"hscript.Parser.parseStructure","hscript/Parser.hx",485,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(id,"id")
HXLINE( 485)		::String _hx_switch_0 = id;
            		if (  (_hx_switch_0==HX_("break",bf,24,ec,b8)) ){
HXLINE( 485)			return ::hscript::Expr_obj::EBreak_dyn();
HXDLIN( 485)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
HXLINE( 485)			return ::hscript::Expr_obj::EContinue_dyn();
HXDLIN( 485)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("do",8b,57,00,00)) ){
HXLINE( 524)			HX_VARI( ::hx::EnumBase,e) = this->parseExpr();
HXLINE( 525)			HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 526)			Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 526)			if ((_hx_tmp == (int)2)) {
HXLINE( 526)				if ((tk->_hx_getString(0) != HX_("while",b1,43,bd,c9))) {
HXLINE( 529)					this->unexpected(tk);
            				}
            			}
            			else {
HXLINE( 529)				this->unexpected(tk);
            			}
HXLINE( 531)			HX_VARI( ::hx::EnumBase,econd) = this->parseExpr();
HXLINE( 532)			::hx::EnumBase e1 = ::hscript::Expr_obj::EDoWhile(econd,e);
HXLINE( 485)			return e1;
HXLINE( 523)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("else",b9,e4,14,43)) ){
HXLINE( 544)			::hx::EnumBase _hx_tmp1 = ::hscript::Token_obj::TId(id);
HXLINE( 485)			return this->unexpected(_hx_tmp1);
HXDLIN( 485)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("for",09,c7,4d,00)) ){
HXLINE( 534)			{
HXLINE( 534)				HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 534)				if (hx::IsNotEq( t,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 534)					this->unexpected(t);
            				}
            			}
HXLINE( 535)			HX_VARI( ::String,vname) = this->getIdent();
HXLINE( 536)			HX_VARI_NAME( ::hx::EnumBase,tk1,"tk") = this->token();
HXLINE( 537)			::hx::EnumBase _hx_tmp2 = ::hscript::Token_obj::TId(HX_("in",e5,5b,00,00));
HXDLIN( 537)			if (!(::Type_obj::enumEq(tk1,_hx_tmp2))) {
HXLINE( 537)				this->unexpected(tk1);
            			}
HXLINE( 538)			HX_VARI( ::hx::EnumBase,eiter) = this->parseExpr();
HXLINE( 539)			{
HXLINE( 539)				HX_VARI_NAME( ::hx::EnumBase,t1,"t") = this->token();
HXDLIN( 539)				if (hx::IsNotEq( t1,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 539)					this->unexpected(t1);
            				}
            			}
HXLINE( 540)			HX_VARI_NAME( ::hx::EnumBase,e2,"e") = this->parseExpr();
HXLINE( 541)			::hx::EnumBase e3 = ::hscript::Expr_obj::EFor(vname,eiter,e2);
HXLINE( 485)			return e3;
HXLINE( 533)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("function",18,ab,52,14)) ){
HXLINE( 546)			HX_VARI_NAME( ::hx::EnumBase,tk2,"tk") = this->token();
HXLINE( 547)			HX_VARI( ::String,name) = null();
HXLINE( 548)			Int _hx_tmp3 = ( ( ::hx::EnumBase)(tk2) )->_hx_getIndex();
HXDLIN( 548)			if ((_hx_tmp3 == (int)2)) {
HXLINE( 549)				name = tk2->_hx_getString(0);
            			}
            			else {
HXLINE( 550)				HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 550)				_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk2,_this->head);
            			}
HXLINE( 552)			{
HXLINE( 552)				HX_VARI_NAME( ::hx::EnumBase,t2,"t") = this->token();
HXDLIN( 552)				if (hx::IsNotEq( t2,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 552)					this->unexpected(t2);
            				}
            			}
HXLINE( 553)			HX_VARI( ::Array< ::Dynamic>,args) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 554)			tk2 = this->token();
HXLINE( 555)			if (hx::IsNotEq( tk2,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 556)				HX_VARI( Bool,done) = false;
HXLINE( 557)				while(!(done)){
HXLINE( 558)					HX_VARI_NAME( ::String,name1,"name") = null();
HXDLIN( 558)					HX_VARI( Bool,opt) = false;
HXLINE( 559)					Int _hx_tmp4 = ( ( ::hx::EnumBase)(tk2) )->_hx_getIndex();
HXDLIN( 559)					if ((_hx_tmp4 == (int)13)) {
HXLINE( 561)						opt = true;
HXLINE( 562)						tk2 = this->token();
            					}
HXLINE( 565)					Int _hx_tmp5 = ( ( ::hx::EnumBase)(tk2) )->_hx_getIndex();
HXDLIN( 565)					if ((_hx_tmp5 == (int)2)) {
HXLINE( 566)						name1 = tk2->_hx_getString(0);
            					}
            					else {
HXLINE( 567)						this->unexpected(tk2);
            					}
HXLINE( 569)					tk2 = this->token();
HXLINE( 570)					HX_VARI(  ::Dynamic,arg) =  ::Dynamic(hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("name",4b,72,ff,48),name1));
HXLINE( 571)					args->push(arg);
HXLINE( 572)					if (opt) {
HXLINE( 572)						arg->__SetField(HX_("opt",33,9c,54,00),true,hx::paccDynamic);
            					}
HXLINE( 573)					Bool _hx_tmp6;
HXDLIN( 573)					if (hx::IsEq( tk2,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 573)						_hx_tmp6 = this->allowTypes;
            					}
            					else {
HXLINE( 573)						_hx_tmp6 = false;
            					}
HXDLIN( 573)					if (_hx_tmp6) {
HXLINE( 574)						arg->__SetField(HX_("t",74,00,00,00),this->parseType(),hx::paccDynamic);
HXLINE( 575)						tk2 = this->token();
            					}
HXLINE( 577)					Int _hx_tmp7 = ( ( ::hx::EnumBase)(tk2) )->_hx_getIndex();
HXDLIN( 577)					switch((int)(_hx_tmp7)){
            						case (int)5: {
HXLINE( 581)							done = true;
            						}
            						break;
            						case (int)9: {
HXLINE( 579)							tk2 = this->token();
            						}
            						break;
            						default:{
HXLINE( 583)							this->unexpected(tk2);
            						}
            					}
            				}
            			}
HXLINE( 587)			HX_VARI( ::hx::EnumBase,ret) = null();
HXLINE( 588)			Bool _hx_tmp8 = this->allowTypes;
HXDLIN( 588)			if (_hx_tmp8) {
HXLINE( 589)				tk2 = this->token();
HXLINE( 590)				if (hx::IsNotEq( tk2,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 591)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 591)					_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk2,_this1->head);
            				}
            				else {
HXLINE( 593)					ret = this->parseType();
            				}
            			}
HXLINE( 595)			HX_VARI( ::hx::EnumBase,body) = this->parseExpr();
HXLINE( 596)			::hx::EnumBase e4 = ::hscript::Expr_obj::EFunction(args,body,name,ret);
HXLINE( 485)			return e4;
HXLINE( 545)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("if",dd,5b,00,00)) ){
HXLINE( 487)			{
HXLINE( 487)				HX_VARI_NAME( ::hx::EnumBase,t3,"t") = this->token();
HXDLIN( 487)				if (hx::IsNotEq( t3,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 487)					this->unexpected(t3);
            				}
            			}
HXLINE( 488)			HX_VARI( ::hx::EnumBase,cond) = this->parseExpr();
HXLINE( 489)			{
HXLINE( 489)				HX_VARI_NAME( ::hx::EnumBase,t4,"t") = this->token();
HXDLIN( 489)				if (hx::IsNotEq( t4,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 489)					this->unexpected(t4);
            				}
            			}
HXLINE( 490)			HX_VARI_NAME( ::hx::EnumBase,e11,"e1") = this->parseExpr();
HXLINE( 491)			HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = null();
HXLINE( 492)			HX_VARI( Bool,semic) = false;
HXLINE( 493)			HX_VARI_NAME( ::hx::EnumBase,tk3,"tk") = this->token();
HXLINE( 494)			if (hx::IsEq( tk3,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 495)				semic = true;
HXLINE( 496)				tk3 = this->token();
            			}
HXLINE( 498)			::hx::EnumBase _hx_tmp9 = ::hscript::Token_obj::TId(HX_("else",b9,e4,14,43));
HXDLIN( 498)			if (::Type_obj::enumEq(tk3,_hx_tmp9)) {
HXLINE( 499)				e21 = this->parseExpr();
            			}
            			else {
HXLINE( 501)				{
HXLINE( 501)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this2,"_this") = this->tokens;
HXDLIN( 501)					_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk3,_this2->head);
            				}
HXLINE( 502)				if (semic) {
HXLINE( 502)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this3,"_this") = this->tokens;
HXDLIN( 502)					_this3->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(::hscript::Token_obj::TSemicolon_dyn(),_this3->head);
            				}
            			}
HXLINE( 504)			::hx::EnumBase e5 = ::hscript::Expr_obj::EIf(cond,e11,e21);
HXLINE( 485)			return e5;
HXLINE( 486)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("new",60,d0,53,00)) ){
HXLINE( 603)			HX_VARI( ::Array< ::String >,a) = ::Array_obj< ::String >::__new();
HXLINE( 604)			::String _hx_tmp10 = this->getIdent();
HXDLIN( 604)			a->push(_hx_tmp10);
HXLINE( 605)			HX_VARI( Bool,next) = true;
HXLINE( 606)			while(next){
HXLINE( 607)				HX_VARI_NAME( ::hx::EnumBase,tk4,"tk") = this->token();
HXLINE( 608)				Int _hx_tmp11 = ( ( ::hx::EnumBase)(tk4) )->_hx_getIndex();
HXDLIN( 608)				switch((int)(_hx_tmp11)){
            					case (int)4: {
HXLINE( 612)						next = false;
            					}
            					break;
            					case (int)8: {
HXLINE( 610)						::String _hx_tmp12 = this->getIdent();
HXDLIN( 610)						a->push(_hx_tmp12);
            					}
            					break;
            					default:{
HXLINE( 614)						this->unexpected(tk4);
            					}
            				}
            			}
HXLINE( 617)			HX_VARI_NAME( ::Array< ::Dynamic>,args1,"args") = this->parseExprList(::hscript::Token_obj::TPClose_dyn());
HXLINE( 618)			::String _hx_tmp13 = a->join(HX_(".",2e,00,00,00));
HXDLIN( 618)			::hx::EnumBase e6 = ::hscript::Expr_obj::ENew(_hx_tmp13,args1);
HXLINE( 485)			return e6;
HXLINE( 602)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("return",b0,a4,2d,09)) ){
HXLINE( 598)			HX_VARI_NAME( ::hx::EnumBase,tk5,"tk") = this->token();
HXLINE( 599)			{
HXLINE( 599)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this4,"_this") = this->tokens;
HXDLIN( 599)				_this4->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk5,_this4->head);
            			}
HXLINE( 600)			HX_VAR_NAME( ::hx::EnumBase,e7,"e");
HXDLIN( 600)			if (hx::IsEq( tk5,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 600)				e7 = null();
            			}
            			else {
HXLINE( 600)				e7 = this->parseExpr();
            			}
HXLINE( 601)			::hx::EnumBase e8 = ::hscript::Expr_obj::EReturn(e7);
HXLINE( 485)			return e8;
HXLINE( 597)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("switch",f4,49,79,c5)) ){
HXLINE( 640)			HX_VARI_NAME( ::hx::EnumBase,e9,"e") = this->parseExpr();
HXLINE( 641)			HX_VARI( ::hx::EnumBase,def) = null();
HXDLIN( 641)			HX_VARI( ::Array< ::Dynamic>,cases) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 642)			{
HXLINE( 642)				HX_VARI_NAME( ::hx::EnumBase,t5,"t") = this->token();
HXDLIN( 642)				if (hx::IsNotEq( t5,::hscript::Token_obj::TBrOpen_dyn() )) {
HXLINE( 642)					this->unexpected(t5);
            				}
            			}
HXLINE( 643)			while(true){
HXLINE( 644)				HX_VARI_NAME( ::hx::EnumBase,tk6,"tk") = this->token();
HXLINE( 645)				Int _hx_tmp14 = ( ( ::hx::EnumBase)(tk6) )->_hx_getIndex();
HXDLIN( 645)				switch((int)(_hx_tmp14)){
            					case (int)2: {
HXLINE( 645)						::String _hx_switch_1 = tk6->_hx_getString(0);
            						if (  (_hx_switch_1==HX_("case",b0,1e,ba,41)) ){
HXLINE( 647)							HX_VARI(  ::Dynamic,c) =  ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("expr",35,fd,1d,43),null())
            								->setFixed(1,HX_("values",e2,03,b7,4f),::Array_obj< ::Dynamic>::__new(0)));
HXLINE( 648)							cases->push(c);
HXLINE( 649)							while(true){
HXLINE( 650)								HX_VARI_NAME( ::hx::EnumBase,e10,"e") = this->parseExpr();
HXLINE( 651)								( (::Array< ::Dynamic>)(c->__Field(HX_("values",e2,03,b7,4f),hx::paccDynamic)) )->push(e10);
HXLINE( 652)								tk6 = this->token();
HXLINE( 653)								Int _hx_tmp15 = ( ( ::hx::EnumBase)(tk6) )->_hx_getIndex();
HXDLIN( 653)								switch((int)(_hx_tmp15)){
            									case (int)9: {
            									}
            									break;
            									case (int)14: {
HXLINE( 657)										goto _hx_goto_26;
            									}
            									break;
            									default:{
HXLINE( 659)										this->unexpected(tk6);
            									}
            								}
            							}
            							_hx_goto_26:;
HXLINE( 662)							HX_VARI( ::Array< ::Dynamic>,exprs) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 663)							while(true){
HXLINE( 664)								tk6 = this->token();
HXLINE( 665)								{
HXLINE( 665)									HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this5,"_this") = this->tokens;
HXDLIN( 665)									_this5->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk6,_this5->head);
            								}
HXLINE( 666)								Int _hx_tmp16 = ( ( ::hx::EnumBase)(tk6) )->_hx_getIndex();
HXDLIN( 666)								switch((int)(_hx_tmp16)){
            									case (int)2: {
HXLINE( 666)										::String _hx_switch_2 = tk6->_hx_getString(0);
            										if (  (_hx_switch_2==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_2==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 668)											goto _hx_goto_27;
HXDLIN( 668)											goto _hx_goto_28;
            										}
            										/* default */{
HXLINE( 670)											::hx::EnumBase _hx_tmp17 = this->parseFullExpr();
HXDLIN( 670)											exprs->push(_hx_tmp17);
            										}
            										_hx_goto_28:;
            									}
            									break;
            									case (int)7: {
HXLINE( 668)										goto _hx_goto_27;
            									}
            									break;
            									default:{
HXLINE( 670)										::hx::EnumBase _hx_tmp18 = this->parseFullExpr();
HXDLIN( 670)										exprs->push(_hx_tmp18);
            									}
            								}
            							}
            							_hx_goto_27:;
HXLINE( 673)							::hx::EnumBase _hx_tmp19;
HXDLIN( 673)							Bool _hx_tmp20 = (exprs->length == (int)1);
HXDLIN( 673)							if (_hx_tmp20) {
HXLINE( 673)								_hx_tmp19 = exprs->__get((int)0).StaticCast< ::hx::EnumBase >();
            							}
            							else {
HXLINE( 675)								Bool _hx_tmp21 = (exprs->length == (int)0);
HXDLIN( 675)								if (_hx_tmp21) {
HXLINE( 676)									::hx::EnumBase e12 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
HXLINE( 673)									_hx_tmp19 = e12;
            								}
            								else {
HXLINE( 678)									::hx::EnumBase e13 = ::hscript::Expr_obj::EBlock(exprs);
HXLINE( 673)									_hx_tmp19 = e13;
            								}
            							}
HXDLIN( 673)							c->__SetField(HX_("expr",35,fd,1d,43),_hx_tmp19,hx::paccDynamic);
HXLINE( 646)							goto _hx_goto_25;
            						}
            						if (  (_hx_switch_1==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 680)							Bool _hx_tmp22 = hx::IsNotNull( def );
HXDLIN( 680)							if (_hx_tmp22) {
HXLINE( 680)								this->unexpected(tk6);
            							}
HXLINE( 681)							{
HXLINE( 681)								HX_VARI_NAME( ::hx::EnumBase,t6,"t") = this->token();
HXDLIN( 681)								if (hx::IsNotEq( t6,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 681)									this->unexpected(t6);
            								}
            							}
HXLINE( 682)							HX_VARI_NAME( ::Array< ::Dynamic>,exprs1,"exprs") = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 683)							while(true){
HXLINE( 684)								tk6 = this->token();
HXLINE( 685)								{
HXLINE( 685)									HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this6,"_this") = this->tokens;
HXDLIN( 685)									_this6->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk6,_this6->head);
            								}
HXLINE( 686)								Int _hx_tmp23 = ( ( ::hx::EnumBase)(tk6) )->_hx_getIndex();
HXDLIN( 686)								switch((int)(_hx_tmp23)){
            									case (int)2: {
HXLINE( 686)										::String _hx_switch_3 = tk6->_hx_getString(0);
            										if (  (_hx_switch_3==HX_("case",b0,1e,ba,41)) ||  (_hx_switch_3==HX_("default",c1,d8,c3,9b)) ){
HXLINE( 688)											goto _hx_goto_29;
HXDLIN( 688)											goto _hx_goto_30;
            										}
            										/* default */{
HXLINE( 690)											::hx::EnumBase _hx_tmp24 = this->parseFullExpr();
HXDLIN( 690)											exprs1->push(_hx_tmp24);
            										}
            										_hx_goto_30:;
            									}
            									break;
            									case (int)7: {
HXLINE( 688)										goto _hx_goto_29;
            									}
            									break;
            									default:{
HXLINE( 690)										::hx::EnumBase _hx_tmp25 = this->parseFullExpr();
HXDLIN( 690)										exprs1->push(_hx_tmp25);
            									}
            								}
            							}
            							_hx_goto_29:;
HXLINE( 693)							Bool _hx_tmp26 = (exprs1->length == (int)1);
HXDLIN( 693)							if (_hx_tmp26) {
HXLINE( 694)								def = exprs1->__get((int)0).StaticCast< ::hx::EnumBase >();
            							}
            							else {
HXLINE( 695)								Bool _hx_tmp27 = (exprs1->length == (int)0);
HXDLIN( 695)								if (_hx_tmp27) {
HXLINE( 696)									::hx::EnumBase e14 = ::hscript::Expr_obj::EBlock(::Array_obj< ::Dynamic>::__new(0));
HXDLIN( 696)									def = e14;
            								}
            								else {
HXLINE( 698)									::hx::EnumBase e15 = ::hscript::Expr_obj::EBlock(exprs1);
HXDLIN( 698)									def = e15;
            								}
            							}
HXLINE( 679)							goto _hx_goto_25;
            						}
            						/* default */{
HXLINE( 702)							this->unexpected(tk6);
            						}
            						_hx_goto_25:;
            					}
            					break;
            					case (int)7: {
HXLINE( 700)						goto _hx_goto_24;
            					}
            					break;
            					default:{
HXLINE( 702)						this->unexpected(tk6);
            					}
            				}
            			}
            			_hx_goto_24:;
HXLINE( 705)			::hx::EnumBase e16 = ::hscript::Expr_obj::ESwitch(e9,cases,def);
HXLINE( 485)			return e16;
HXLINE( 639)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("throw",26,5d,90,0f)) ){
HXLINE( 620)			HX_VARI_NAME( ::hx::EnumBase,e17,"e") = this->parseExpr();
HXLINE( 621)			::hx::EnumBase e18 = ::hscript::Expr_obj::EThrow(e17);
HXLINE( 485)			return e18;
HXLINE( 619)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("try",3b,69,58,00)) ){
HXLINE( 623)			HX_VARI_NAME( ::hx::EnumBase,e19,"e") = this->parseExpr();
HXLINE( 624)			HX_VARI_NAME( ::hx::EnumBase,tk7,"tk") = this->token();
HXLINE( 625)			::hx::EnumBase _hx_tmp28 = ::hscript::Token_obj::TId(HX_("catch",3b,7c,21,41));
HXDLIN( 625)			if (!(::Type_obj::enumEq(tk7,_hx_tmp28))) {
HXLINE( 625)				this->unexpected(tk7);
            			}
HXLINE( 626)			{
HXLINE( 626)				HX_VARI_NAME( ::hx::EnumBase,t7,"t") = this->token();
HXDLIN( 626)				if (hx::IsNotEq( t7,::hscript::Token_obj::TPOpen_dyn() )) {
HXLINE( 626)					this->unexpected(t7);
            				}
            			}
HXLINE( 627)			HX_VARI_NAME( ::String,vname1,"vname") = this->getIdent();
HXLINE( 628)			{
HXLINE( 628)				HX_VARI_NAME( ::hx::EnumBase,t8,"t") = this->token();
HXDLIN( 628)				if (hx::IsNotEq( t8,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 628)					this->unexpected(t8);
            				}
            			}
HXLINE( 629)			HX_VARI_NAME( ::hx::EnumBase,t9,"t") = null();
HXLINE( 630)			Bool _hx_tmp29 = this->allowTypes;
HXDLIN( 630)			if (_hx_tmp29) {
HXLINE( 631)				t9 = this->parseType();
            			}
            			else {
HXLINE( 633)				tk7 = this->token();
HXLINE( 634)				::hx::EnumBase _hx_tmp30 = ::hscript::Token_obj::TId(HX_("Dynamic",5f,c7,66,03));
HXDLIN( 634)				if (!(::Type_obj::enumEq(tk7,_hx_tmp30))) {
HXLINE( 634)					this->unexpected(tk7);
            				}
            			}
HXLINE( 636)			{
HXLINE( 636)				HX_VARI_NAME( ::hx::EnumBase,t10,"t") = this->token();
HXDLIN( 636)				if (hx::IsNotEq( t10,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 636)					this->unexpected(t10);
            				}
            			}
HXLINE( 637)			HX_VARI( ::hx::EnumBase,ec) = this->parseExpr();
HXLINE( 638)			::hx::EnumBase e20 = ::hscript::Expr_obj::ETry(e19,vname1,t9,ec);
HXLINE( 485)			return e20;
HXLINE( 622)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("var",e7,de,59,00)) ){
HXLINE( 506)			HX_VARI( ::String,ident) = this->getIdent();
HXLINE( 507)			HX_VARI_NAME( ::hx::EnumBase,tk8,"tk") = this->token();
HXLINE( 508)			HX_VARI_NAME( ::hx::EnumBase,t11,"t") = null();
HXLINE( 509)			Bool _hx_tmp31;
HXDLIN( 509)			if (hx::IsEq( tk8,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 509)				_hx_tmp31 = this->allowTypes;
            			}
            			else {
HXLINE( 509)				_hx_tmp31 = false;
            			}
HXDLIN( 509)			if (_hx_tmp31) {
HXLINE( 510)				t11 = this->parseType();
HXLINE( 511)				tk8 = this->token();
            			}
HXLINE( 513)			HX_VARI_NAME( ::hx::EnumBase,e22,"e") = null();
HXLINE( 514)			::hx::EnumBase _hx_tmp32 = ::hscript::Token_obj::TOp(HX_("=",3d,00,00,00));
HXDLIN( 514)			if (::Type_obj::enumEq(tk8,_hx_tmp32)) {
HXLINE( 515)				e22 = this->parseExpr();
            			}
            			else {
HXLINE( 517)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this7,"_this") = this->tokens;
HXDLIN( 517)				_this7->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk8,_this7->head);
            			}
HXLINE( 518)			::hx::EnumBase e23 = ::hscript::Expr_obj::EVar(ident,t11,e22);
HXLINE( 485)			return e23;
HXLINE( 505)			goto _hx_goto_21;
            		}
            		if (  (_hx_switch_0==HX_("while",b1,43,bd,c9)) ){
HXLINE( 520)			HX_VARI_NAME( ::hx::EnumBase,econd1,"econd") = this->parseExpr();
HXLINE( 521)			HX_VARI_NAME( ::hx::EnumBase,e24,"e") = this->parseExpr();
HXLINE( 522)			::hx::EnumBase e25 = ::hscript::Expr_obj::EWhile(econd1,e24);
HXLINE( 485)			return e25;
HXLINE( 519)			goto _hx_goto_21;
            		}
            		/* default */{
HXLINE( 485)			return null();
            		}
            		_hx_goto_21:;
HXDLIN( 485)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseStructure,return )

::hx::EnumBase Parser_obj::parseExprNext(::hx::EnumBase e1){
            	HX_STACK_FRAME("hscript.Parser","parseExprNext",0x83d61847,"hscript.Parser.parseExprNext","hscript/Parser.hx",711,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(e1,"e1")
HXLINE( 712)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 713)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 713)		switch((int)(_hx_tmp)){
            			case (int)3: {
HXLINE( 714)				HX_VARI( ::String,op) = tk->_hx_getString(0);
HXLINE( 715)				 ::Dynamic _hx_tmp1 = this->unops->get(op);
HXDLIN( 715)				if (_hx_tmp1) {
HXLINE( 716)					Bool _hx_tmp2;
HXDLIN( 716)					Bool _hx_tmp3 = !(this->isBlock(e1));
HXDLIN( 716)					if (_hx_tmp3) {
HXLINE( 716)						Int _hx_tmp4 = ( ( ::hx::EnumBase)(e1) )->_hx_getIndex();
HXDLIN( 716)						if ((_hx_tmp4 == (int)3)) {
HXLINE( 716)							_hx_tmp2 = true;
            						}
            						else {
HXLINE( 716)							_hx_tmp2 = false;
            						}
            					}
            					else {
HXLINE( 716)						_hx_tmp2 = true;
            					}
HXDLIN( 716)					if (_hx_tmp2) {
HXLINE( 717)						{
HXLINE( 717)							HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 717)							_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            						}
HXLINE( 718)						return e1;
            					}
HXLINE( 720)					::hx::EnumBase e = ::hscript::Expr_obj::EUnop(op,false,e1);
HXDLIN( 720)					return this->parseExprNext(e);
            				}
HXLINE( 722)				::hx::EnumBase _hx_tmp5 = this->parseExpr();
HXDLIN( 722)				return this->makeBinop(op,e1,_hx_tmp5);
            			}
            			break;
            			case (int)4: {
HXLINE( 727)				::Array< ::Dynamic> _hx_tmp6 = this->parseExprList(::hscript::Token_obj::TPClose_dyn());
HXDLIN( 727)				::hx::EnumBase e2 = ::hscript::Expr_obj::ECall(e1,_hx_tmp6);
HXDLIN( 727)				return this->parseExprNext(e2);
            			}
            			break;
            			case (int)8: {
HXLINE( 724)				HX_VARI( ::String,field) = this->getIdent();
HXLINE( 725)				::hx::EnumBase e3 = ::hscript::Expr_obj::EField(e1,field);
HXDLIN( 725)				return this->parseExprNext(e3);
            			}
            			break;
            			case (int)11: {
HXLINE( 729)				HX_VARI_NAME( ::hx::EnumBase,e21,"e2") = this->parseExpr();
HXLINE( 730)				{
HXLINE( 730)					HX_VARI( ::hx::EnumBase,t) = this->token();
HXDLIN( 730)					if (hx::IsNotEq( t,::hscript::Token_obj::TBkClose_dyn() )) {
HXLINE( 730)						this->unexpected(t);
            					}
            				}
HXLINE( 731)				::hx::EnumBase e4 = ::hscript::Expr_obj::EArray(e1,e21);
HXDLIN( 731)				return this->parseExprNext(e4);
            			}
            			break;
            			case (int)13: {
HXLINE( 733)				HX_VARI_NAME( ::hx::EnumBase,e22,"e2") = this->parseExpr();
HXLINE( 734)				{
HXLINE( 734)					HX_VARI_NAME( ::hx::EnumBase,t1,"t") = this->token();
HXDLIN( 734)					if (hx::IsNotEq( t1,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 734)						this->unexpected(t1);
            					}
            				}
HXLINE( 735)				HX_VARI_NAME( ::hx::EnumBase,e31,"e3") = this->parseExpr();
HXLINE( 736)				::hx::EnumBase e5 = ::hscript::Expr_obj::ETernary(e1,e22,e31);
HXDLIN( 736)				return e5;
            			}
            			break;
            			default:{
HXLINE( 738)				{
HXLINE( 738)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 738)					_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            				}
HXLINE( 739)				return e1;
            			}
            		}
HXLINE( 713)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprNext,return )

::hx::EnumBase Parser_obj::parseType(){
            	HX_STACK_FRAME("hscript.Parser","parseType",0x98ecb2b9,"hscript.Parser.parseType","hscript/Parser.hx",743,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 744)		HX_VARI( ::hx::EnumBase,t) = this->token();
HXLINE( 745)		Int _hx_tmp = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 745)		switch((int)(_hx_tmp)){
            			case (int)2: {
HXLINE( 747)				HX_VARI( ::Array< ::String >,path) = ::Array_obj< ::String >::__new(1)->init(0,t->_hx_getString(0));
HXLINE( 748)				while(true){
HXLINE( 749)					t = this->token();
HXLINE( 750)					if (hx::IsNotEq( t,::hscript::Token_obj::TDot_dyn() )) {
HXLINE( 751)						goto _hx_goto_31;
            					}
HXLINE( 752)					::String _hx_tmp1 = this->getIdent();
HXDLIN( 752)					path->push(_hx_tmp1);
            				}
            				_hx_goto_31:;
HXLINE( 754)				HX_VARI( ::Array< ::Dynamic>,params) = null();
HXLINE( 755)				Int _hx_tmp2 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 755)				if ((_hx_tmp2 == (int)3)) {
HXLINE( 757)					if ((t->_hx_getString(0) == HX_("<",3c,00,00,00))) {
HXLINE( 758)						params = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 759)						while(true){
HXLINE( 760)							::hx::EnumBase _hx_tmp3 = this->parseType();
HXDLIN( 760)							params->push(_hx_tmp3);
HXLINE( 761)							t = this->token();
HXLINE( 762)							Int _hx_tmp4 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 762)							switch((int)(_hx_tmp4)){
            								case (int)3: {
HXLINE( 764)									HX_VARI( ::String,op) = t->_hx_getString(0);
HXDLIN( 764)									{
HXLINE( 765)										if ((op == HX_(">",3e,00,00,00))) {
HXLINE( 765)											goto _hx_goto_32;
            										}
HXLINE( 766)										 ::Dynamic _hx_tmp5 = op.charCodeAt((int)0);
HXDLIN( 766)										if (hx::IsEq( _hx_tmp5,(int)62 )) {
HXLINE( 770)											{
HXLINE( 770)												HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 770)												::String _hx_tmp6 = op.substr((int)1,null());
HXDLIN( 770)												::hx::EnumBase item = ::hscript::Token_obj::TOp(_hx_tmp6);
HXDLIN( 770)												_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(item,_this->head);
            											}
HXLINE( 772)											goto _hx_goto_32;
            										}
            									}
            								}
            								break;
            								case (int)9: {
HXLINE( 763)									continue;
            								}
            								break;
            								default:{
            								}
            							}
HXLINE( 776)							this->unexpected(t);
            						}
            						_hx_goto_32:;
            					}
            					else {
HXLINE( 779)						HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 779)						_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(t,_this1->head);
            					}
            				}
            				else {
HXLINE( 781)					HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this2,"_this") = this->tokens;
HXDLIN( 781)					_this2->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(t,_this2->head);
            				}
HXLINE( 783)				::hx::EnumBase _hx_tmp7 = ::hscript::CType_obj::CTPath(path,params);
HXDLIN( 783)				return this->parseTypeNext(_hx_tmp7);
            			}
            			break;
            			case (int)4: {
HXLINE( 785)				HX_VARI_NAME( ::hx::EnumBase,t1,"t") = this->parseType();
HXLINE( 786)				{
HXLINE( 786)					HX_VARI_NAME( ::hx::EnumBase,t2,"t") = this->token();
HXDLIN( 786)					if (hx::IsNotEq( t2,::hscript::Token_obj::TPClose_dyn() )) {
HXLINE( 786)						this->unexpected(t2);
            					}
            				}
HXLINE( 787)				::hx::EnumBase _hx_tmp8 = ::hscript::CType_obj::CTParent(t1);
HXDLIN( 787)				return this->parseTypeNext(_hx_tmp8);
            			}
            			break;
            			case (int)6: {
HXLINE( 789)				HX_VARI( ::Array< ::Dynamic>,fields) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 790)				HX_VARI( ::Array< ::Dynamic>,meta) = null();
HXLINE( 791)				while(true){
HXLINE( 792)					t = this->token();
HXLINE( 793)					Int _hx_tmp9 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 793)					switch((int)(_hx_tmp9)){
            						case (int)2: {
HXLINE( 793)							if ((t->_hx_getString(0) == HX_("var",e7,de,59,00))) {
HXLINE( 796)								HX_VARI( ::String,name) = this->getIdent();
HXLINE( 797)								{
HXLINE( 797)									HX_VARI_NAME( ::hx::EnumBase,t3,"t") = this->token();
HXDLIN( 797)									if (hx::IsNotEq( t3,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 797)										this->unexpected(t3);
            									}
            								}
HXLINE( 798)								::hx::EnumBase _hx_tmp10 = this->parseType();
HXDLIN( 798)								fields->push( ::Dynamic(hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),_hx_tmp10)
            									->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            									->setFixed(2,HX_("name",4b,72,ff,48),name)));
HXLINE( 799)								meta = null();
HXLINE( 800)								{
HXLINE( 800)									HX_VARI_NAME( ::hx::EnumBase,t4,"t") = this->token();
HXDLIN( 800)									if (hx::IsNotEq( t4,::hscript::Token_obj::TSemicolon_dyn() )) {
HXLINE( 800)										this->unexpected(t4);
            									}
            								}
            							}
            							else {
HXLINE( 802)								{
HXLINE( 802)									HX_VARI_NAME( ::hx::EnumBase,t5,"t") = this->token();
HXDLIN( 802)									if (hx::IsNotEq( t5,::hscript::Token_obj::TDoubleDot_dyn() )) {
HXLINE( 802)										this->unexpected(t5);
            									}
            								}
HXLINE( 803)								::hx::EnumBase _hx_tmp11 = this->parseType();
HXDLIN( 803)								fields->push( ::Dynamic(hx::Anon_obj::Create(3)
            									->setFixed(0,HX_("t",74,00,00,00),_hx_tmp11)
            									->setFixed(1,HX_("meta",c5,4a,59,48),meta)
            									->setFixed(2,HX_("name",4b,72,ff,48),t->_hx_getString(0))));
HXLINE( 804)								t = this->token();
HXLINE( 805)								Int _hx_tmp12 = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN( 805)								switch((int)(_hx_tmp12)){
            									case (int)7: {
HXLINE( 807)										goto _hx_goto_33;
            									}
            									break;
            									case (int)9: {
            									}
            									break;
            									default:{
HXLINE( 808)										this->unexpected(t);
            									}
            								}
            							}
            						}
            						break;
            						case (int)7: {
HXLINE( 794)							goto _hx_goto_33;
            						}
            						break;
            						case (int)15: {
HXLINE( 811)							Bool _hx_tmp13 = hx::IsNull( meta );
HXDLIN( 811)							if (_hx_tmp13) {
HXLINE( 811)								meta = ::Array_obj< ::Dynamic>::__new(0);
            							}
HXLINE( 812)							::Array< ::Dynamic> _hx_tmp14 = this->parseMetaArgs();
HXDLIN( 812)							meta->push( ::Dynamic(hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("params",46,fb,7a,ed),_hx_tmp14)
            								->setFixed(1,HX_("name",4b,72,ff,48),t->_hx_getString(0))));
            						}
            						break;
            						default:{
HXLINE( 814)							this->unexpected(t);
            						}
            					}
            				}
            				_hx_goto_33:;
HXLINE( 817)				::hx::EnumBase _hx_tmp15 = ::hscript::CType_obj::CTAnon(fields);
HXDLIN( 817)				return this->parseTypeNext(_hx_tmp15);
            			}
            			break;
            			default:{
HXLINE( 819)				return this->unexpected(t);
            			}
            		}
HXLINE( 745)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,parseType,return )

::hx::EnumBase Parser_obj::parseTypeNext(::hx::EnumBase t){
            	HX_STACK_FRAME("hscript.Parser","parseTypeNext",0x8b2ab44c,"hscript.Parser.parseTypeNext","hscript/Parser.hx",823,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE( 824)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 825)		Int _hx_tmp = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 825)		if ((_hx_tmp == (int)3)) {
HXLINE( 827)			if ((tk->_hx_getString(0) != HX_("->",71,27,00,00))) {
HXLINE( 828)				{
HXLINE( 828)					HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 828)					_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            				}
HXLINE( 829)				return t;
            			}
            		}
            		else {
HXLINE( 832)			{
HXLINE( 832)				HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN( 832)				_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            			}
HXLINE( 833)			return t;
            		}
HXLINE( 835)		HX_VARI( ::hx::EnumBase,t2) = this->parseType();
HXLINE( 836)		Int _hx_tmp1 = ( ( ::hx::EnumBase)(t2) )->_hx_getIndex();
HXDLIN( 836)		if ((_hx_tmp1 == (int)1)) {
HXLINE( 838)			t2->_hx_getObject(0).StaticCast< ::Array< ::Dynamic> >()->unshift(t);
HXLINE( 839)			return t2;
            		}
            		else {
HXLINE( 841)			return ::hscript::CType_obj::CTFun(::Array_obj< ::Dynamic>::__new(1)->init(0,t),t2);
            		}
HXLINE( 836)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseTypeNext,return )

::Array< ::Dynamic> Parser_obj::parseExprList(::hx::EnumBase etk){
            	HX_STACK_FRAME("hscript.Parser","parseExprList",0x8286afb2,"hscript.Parser.parseExprList","hscript/Parser.hx",845,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(etk,"etk")
HXLINE( 846)		HX_VARI( ::Array< ::Dynamic>,args) = ::Array_obj< ::Dynamic>::__new();
HXLINE( 847)		HX_VARI( ::hx::EnumBase,tk) = this->token();
HXLINE( 848)		if (hx::IsEq( tk,etk )) {
HXLINE( 849)			return args;
            		}
HXLINE( 850)		{
HXLINE( 850)			HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 850)			_this->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this->head);
            		}
HXLINE( 851)		while(true){
HXLINE( 852)			::hx::EnumBase _hx_tmp = this->parseExpr();
HXDLIN( 852)			args->push(_hx_tmp);
HXLINE( 853)			tk = this->token();
HXLINE( 854)			Int _hx_tmp1 = ( ( ::hx::EnumBase)(tk) )->_hx_getIndex();
HXDLIN( 854)			if ((_hx_tmp1 != (int)9)) {
HXLINE( 857)				if (hx::IsEq( tk,etk )) {
HXLINE( 857)					goto _hx_goto_34;
            				}
HXLINE( 858)				this->unexpected(tk);
            			}
            		}
            		_hx_goto_34:;
HXLINE( 861)		return args;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parseExprList,return )

void Parser_obj::incPos(){
            	HX_STACK_FRAME("hscript.Parser","incPos",0xe19d25aa,"hscript.Parser.incPos","hscript/Parser.hx",864,0x98735743)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,incPos,(void))

Int Parser_obj::readChar(){
            	HX_STACK_FRAME("hscript.Parser","readChar",0x8625b4a0,"hscript.Parser.readChar","hscript/Parser.hx",872,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 872)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 872)			return this->input->readByte();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 872)				return (int)0;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXDLIN( 872)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,readChar,return )

::String Parser_obj::readString(Int until){
            	HX_STACK_FRAME("hscript.Parser","readString",0xfc2f051b,"hscript.Parser.readString","hscript/Parser.hx",875,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(until,"until")
HXLINE( 876)		HX_VARI( Int,c) = (int)0;
HXLINE( 877)		HX_VARI(  ::haxe::io::BytesOutput,b) =  ::haxe::io::BytesOutput_obj::__new();
HXLINE( 878)		HX_VARI( Bool,esc) = false;
HXLINE( 879)		HX_VARI( Int,old) = this->line;
HXLINE( 880)		HX_VARI(  ::haxe::io::Input,s) = this->input;
HXLINE( 884)		while(true){
HXLINE( 885)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 887)				c = s->readByte();
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
HXLINE( 889)					this->line = old;
HXLINE( 890)					HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedString_dyn());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 892)			if (esc) {
HXLINE( 893)				esc = false;
HXLINE( 894)				switch((int)(c)){
            					case (int)34: case (int)39: case (int)92: {
HXLINE( 898)						b->writeByte(c);
            					}
            					break;
            					case (int)47: {
HXLINE( 899)						Bool _hx_tmp = this->allowJSON;
HXDLIN( 899)						if (_hx_tmp) {
HXLINE( 899)							b->writeByte(c);
            						}
            						else {
HXLINE( 899)							this->invalidChar(c);
            						}
            					}
            					break;
            					case (int)110: {
HXLINE( 895)						b->writeByte((int)10);
            					}
            					break;
            					case (int)114: {
HXLINE( 896)						b->writeByte((int)13);
            					}
            					break;
            					case (int)116: {
HXLINE( 897)						b->writeByte((int)9);
            					}
            					break;
            					case (int)117: {
HXLINE( 901)						Bool _hx_tmp1 = !(this->allowJSON);
HXDLIN( 901)						if (_hx_tmp1) {
HXLINE( 901)							this->invalidChar(c);
            						}
HXLINE( 902)						HX_VARI( ::String,code) = null();
HXLINE( 903)						try {
            							HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 908)							code = s->readString((int)4);
            						}
            						catch( ::Dynamic _hx_e){
            							if (_hx_e.IsClass<  ::Dynamic >() ){
            								HX_STACK_BEGIN_CATCH
            								 ::Dynamic e1 = _hx_e;
HXLINE( 910)								this->line = old;
HXLINE( 911)								HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedString_dyn());
            							}
            							else {
            								HX_STACK_DO_THROW(_hx_e);
            							}
            						}
HXLINE( 913)						HX_VARI( Int,k) = (int)0;
HXLINE( 914)						{
HXLINE( 914)							HX_VARI( Int,_g) = (int)0;
HXDLIN( 914)							while((_g < (int)4)){
HXLINE( 914)								HX_VARI( Int,i) = _g++;
HXLINE( 915)								hx::ShlEq(k,(int)4);
HXLINE( 916)								HX_VARI_NAME(  ::Dynamic,_hx_char,"char") = code.charCodeAt(i);
HXLINE( 917)								Bool _hx_tmp2 = hx::IsNull( _hx_char );
HXDLIN( 917)								if (_hx_tmp2) {
HXLINE( 925)									this->invalidChar(_hx_char);
            								}
            								else {
HXLINE( 917)									 ::Dynamic _hx_switch_0 = _hx_char;
            									if (  (_hx_switch_0==(int)48) ||  (_hx_switch_0==(int)49) ||  (_hx_switch_0==(int)50) ||  (_hx_switch_0==(int)51) ||  (_hx_switch_0==(int)52) ||  (_hx_switch_0==(int)53) ||  (_hx_switch_0==(int)54) ||  (_hx_switch_0==(int)55) ||  (_hx_switch_0==(int)56) ||  (_hx_switch_0==(int)57) ){
HXLINE( 919)										hx::AddEq(k,(_hx_char - (int)48));
HXDLIN( 919)										goto _hx_goto_37;
            									}
            									if (  (_hx_switch_0==(int)65) ||  (_hx_switch_0==(int)66) ||  (_hx_switch_0==(int)67) ||  (_hx_switch_0==(int)68) ||  (_hx_switch_0==(int)69) ||  (_hx_switch_0==(int)70) ){
HXLINE( 921)										hx::AddEq(k,(_hx_char - (int)55));
HXDLIN( 921)										goto _hx_goto_37;
            									}
            									if (  (_hx_switch_0==(int)97) ||  (_hx_switch_0==(int)98) ||  (_hx_switch_0==(int)99) ||  (_hx_switch_0==(int)100) ||  (_hx_switch_0==(int)101) ||  (_hx_switch_0==(int)102) ){
HXLINE( 923)										hx::AddEq(k,(_hx_char - (int)87));
HXDLIN( 923)										goto _hx_goto_37;
            									}
            									/* default */{
HXLINE( 925)										this->invalidChar(_hx_char);
            									}
            									_hx_goto_37:;
            								}
            							}
            						}
HXLINE( 929)						if ((k <= (int)127)) {
HXLINE( 930)							b->writeByte(k);
            						}
            						else {
HXLINE( 931)							if ((k <= (int)2047)) {
HXLINE( 932)								b->writeByte(((int)(int)192 | (int)((int)k >> (int)(int)6)));
HXLINE( 933)								b->writeByte(((int)(int)128 | (int)((int)k & (int)(int)63)));
            							}
            							else {
HXLINE( 935)								b->writeByte(((int)(int)224 | (int)((int)k >> (int)(int)12)));
HXLINE( 936)								b->writeByte(((int)(int)128 | (int)((int)((int)k >> (int)(int)6) & (int)(int)63)));
HXLINE( 937)								b->writeByte(((int)(int)128 | (int)((int)k & (int)(int)63)));
            							}
            						}
            					}
            					break;
            					default:{
HXLINE( 939)						this->invalidChar(c);
            					}
            				}
            			}
            			else {
HXLINE( 941)				if ((c == (int)92)) {
HXLINE( 942)					esc = true;
            				}
            				else {
HXLINE( 943)					if ((c == until)) {
HXLINE( 944)						goto _hx_goto_35;
            					}
            					else {
HXLINE( 946)						if ((c == (int)10)) {
HXLINE( 946)							this->line++;
            						}
HXLINE( 947)						b->writeByte(c);
            					}
            				}
            			}
            		}
            		_hx_goto_35:;
HXLINE( 950)		return b->getBytes()->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,readString,return )

::hx::EnumBase Parser_obj::token(){
            	HX_STACK_FRAME("hscript.Parser","token",0x3cb36b25,"hscript.Parser.token","hscript/Parser.hx",953,0x98735743)
            	HX_STACK_THIS(this)
HXLINE( 971)		Bool _hx_tmp = hx::IsNotNull( this->tokens->head );
HXDLIN( 971)		if (_hx_tmp) {
HXLINE( 972)			HX_VARI(  ::haxe::ds::GenericStack_hscript_Token,_this) = this->tokens;
HXDLIN( 972)			HX_VARI(  ::haxe::ds::GenericCell_hscript_Token,k) = _this->head;
HXDLIN( 972)			Bool _hx_tmp1 = hx::IsNull( k );
HXDLIN( 972)			if (_hx_tmp1) {
HXLINE( 972)				return null();
            			}
            			else {
HXLINE( 972)				_this->head = k->next;
HXDLIN( 972)				return k->elt;
            			}
            		}
HXLINE( 974)		HX_VAR_NAME( Int,_hx_char,"char");
HXLINE( 975)		Bool _hx_tmp2 = (this->_hx_char < (int)0);
HXDLIN( 975)		if (_hx_tmp2) {
HXLINE( 976)			_hx_char = this->readChar();
            		}
            		else {
HXLINE( 978)			_hx_char = this->_hx_char;
HXLINE( 979)			this->_hx_char = (int)-1;
            		}
HXLINE( 981)		while(true){
HXLINE( 982)			switch((int)(_hx_char)){
            				case (int)0: {
HXLINE( 983)					return ::hscript::Token_obj::TEof_dyn();
            				}
            				break;
            				case (int)10: {
HXLINE( 988)					this->line++;
            				}
            				break;
            				case (int)9: case (int)13: case (int)32: {
            				}
            				break;
            				case (int)34: {
HXLINE(1094)					::String _hx_tmp3 = this->readString((int)34);
HXDLIN(1094)					::hx::EnumBase _hx_tmp4 = ::hscript::Const_obj::CString(_hx_tmp3);
HXDLIN(1094)					return ::hscript::Token_obj::TConst(_hx_tmp4);
            				}
            				break;
            				case (int)39: {
HXLINE(1093)					::String _hx_tmp5 = this->readString((int)39);
HXDLIN(1093)					::hx::EnumBase _hx_tmp6 = ::hscript::Const_obj::CString(_hx_tmp5);
HXDLIN(1093)					return ::hscript::Token_obj::TConst(_hx_tmp6);
            				}
            				break;
            				case (int)40: {
HXLINE(1060)					return ::hscript::Token_obj::TPOpen_dyn();
            				}
            				break;
            				case (int)41: {
HXLINE(1061)					return ::hscript::Token_obj::TPClose_dyn();
            				}
            				break;
            				case (int)44: {
HXLINE(1062)					return ::hscript::Token_obj::TComma_dyn();
            				}
            				break;
            				case (int)46: {
HXLINE(1064)					_hx_char = this->readChar();
HXLINE(1065)					switch((int)(_hx_char)){
            						case (int)46: {
HXLINE(1081)							_hx_char = this->readChar();
HXLINE(1082)							if ((_hx_char != (int)46)) {
HXLINE(1083)								this->invalidChar(_hx_char);
            							}
HXLINE(1084)							return ::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00));
            						}
            						break;
            						case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1067)							HX_VARI( Int,n) = (_hx_char - (int)48);
HXLINE(1068)							HX_VARI( Int,exp) = (int)1;
HXLINE(1069)							while(true){
HXLINE(1070)								_hx_char = this->readChar();
HXLINE(1071)								hx::MultEq(exp,(int)10);
HXLINE(1072)								switch((int)(_hx_char)){
            									case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1074)										Int _hx_tmp7 = (n * (int)10);
HXDLIN(1074)										n = (_hx_tmp7 + (_hx_char - (int)48));
            									}
            									break;
            									default:{
HXLINE(1076)										this->_hx_char = _hx_char;
HXLINE(1077)										::hx::EnumBase _hx_tmp8 = ::hscript::Const_obj::CFloat(((Float)n / (Float)exp));
HXDLIN(1077)										return ::hscript::Token_obj::TConst(_hx_tmp8);
            									}
            								}
            							}
            						}
            						break;
            						default:{
HXLINE(1086)							this->_hx_char = _hx_char;
HXLINE(1087)							return ::hscript::Token_obj::TDot_dyn();
            						}
            					}
            				}
            				break;
            				case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE( 993)					HX_VARI_NAME( Float,n1,"n") = ((_hx_char - (int)48) * ((Float)1.0));
HXLINE( 994)					HX_VARI_NAME( Float,exp1,"exp") = ((Float)0.);
HXLINE( 995)					while(true){
HXLINE( 996)						_hx_char = this->readChar();
HXLINE( 997)						hx::MultEq(exp1,(int)10);
HXLINE( 998)						switch((int)(_hx_char)){
            							case (int)46: {
HXLINE(1002)								if ((exp1 > (int)0)) {
HXLINE(1004)									Bool _hx_tmp9;
HXDLIN(1004)									if ((exp1 == (int)10)) {
HXLINE(1004)										Int _hx_tmp10 = this->readChar();
HXDLIN(1004)										_hx_tmp9 = (_hx_tmp10 == (int)46);
            									}
            									else {
HXLINE(1004)										_hx_tmp9 = false;
            									}
HXDLIN(1004)									if (_hx_tmp9) {
HXLINE(1005)										{
HXLINE(1005)											::hx::EnumBase tk = ::hscript::Token_obj::TOp(HX_("...",ee,0f,23,00));
HXDLIN(1005)											{
HXLINE(1005)												HX_VARI_NAME(  ::haxe::ds::GenericStack_hscript_Token,_this1,"_this") = this->tokens;
HXDLIN(1005)												_this1->head =  ::haxe::ds::GenericCell_hscript_Token_obj::__new(tk,_this1->head);
            											}
            										}
HXLINE(1006)										HX_VARI( Int,i) = ::Std_obj::_hx_int(n1);
HXLINE(1007)										::hx::EnumBase _hx_tmp11;
HXDLIN(1007)										if ((i == n1)) {
HXLINE(1007)											_hx_tmp11 = ::hscript::Const_obj::CInt(i);
            										}
            										else {
HXLINE(1007)											_hx_tmp11 = ::hscript::Const_obj::CFloat(n1);
            										}
HXDLIN(1007)										return ::hscript::Token_obj::TConst(_hx_tmp11);
            									}
HXLINE(1009)									this->invalidChar(_hx_char);
            								}
HXLINE(1011)								exp1 = ((Float)1.);
            							}
            							break;
            							case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1000)								Float _hx_tmp12 = (n1 * (int)10);
HXDLIN(1000)								n1 = (_hx_tmp12 + (_hx_char - (int)48));
            							}
            							break;
            							case (int)120: {
HXLINE(1013)								Bool _hx_tmp13;
HXDLIN(1013)								if (!((n1 > (int)0))) {
HXLINE(1013)									_hx_tmp13 = (exp1 > (int)0);
            								}
            								else {
HXLINE(1013)									_hx_tmp13 = true;
            								}
HXDLIN(1013)								if (_hx_tmp13) {
HXLINE(1014)									this->invalidChar(_hx_char);
            								}
HXLINE(1017)								HX_VARI_NAME( Int,n2,"n") = (int)0;
HXLINE(1018)								while(true){
HXLINE(1019)									_hx_char = this->readChar();
HXLINE(1020)									switch((int)(_hx_char)){
            										case (int)48: case (int)49: case (int)50: case (int)51: case (int)52: case (int)53: case (int)54: case (int)55: case (int)56: case (int)57: {
HXLINE(1022)											Int _hx_tmp14 = (((int)n2 << (int)(int)4) + _hx_char);
HXDLIN(1022)											n2 = (_hx_tmp14 - (int)48);
            										}
            										break;
            										case (int)65: case (int)66: case (int)67: case (int)68: case (int)69: case (int)70: {
HXLINE(1024)											Int _hx_tmp15 = ((int)n2 << (int)(int)4);
HXDLIN(1024)											n2 = (_hx_tmp15 + (_hx_char - (int)55));
            										}
            										break;
            										case (int)97: case (int)98: case (int)99: case (int)100: case (int)101: case (int)102: {
HXLINE(1026)											Int _hx_tmp16 = ((int)n2 << (int)(int)4);
HXDLIN(1026)											n2 = (_hx_tmp16 + (_hx_char - (int)87));
            										}
            										break;
            										default:{
HXLINE(1028)											this->_hx_char = _hx_char;
HXLINE(1029)											::hx::EnumBase _hx_tmp17 = ::hscript::Const_obj::CInt(n2);
HXDLIN(1029)											return ::hscript::Token_obj::TConst(_hx_tmp17);
            										}
            									}
            								}
            							}
            							break;
            							default:{
HXLINE(1054)								this->_hx_char = _hx_char;
HXLINE(1055)								HX_VARI_NAME( Int,i1,"i") = ::Std_obj::_hx_int(n1);
HXLINE(1056)								::hx::EnumBase _hx_tmp18;
HXDLIN(1056)								if ((exp1 > (int)0)) {
HXLINE(1056)									_hx_tmp18 = ::hscript::Const_obj::CFloat(((Float)(n1 * (int)10) / (Float)exp1));
            								}
            								else {
HXLINE(1056)									if ((i1 == n1)) {
HXLINE(1056)										_hx_tmp18 = ::hscript::Const_obj::CInt(i1);
            									}
            									else {
HXLINE(1056)										_hx_tmp18 = ::hscript::Const_obj::CFloat(n1);
            									}
            								}
HXDLIN(1056)								return ::hscript::Token_obj::TConst(_hx_tmp18);
            							}
            						}
            					}
            				}
            				break;
            				case (int)58: {
HXLINE(1096)					return ::hscript::Token_obj::TDoubleDot_dyn();
            				}
            				break;
            				case (int)59: {
HXLINE(1059)					return ::hscript::Token_obj::TSemicolon_dyn();
            				}
            				break;
            				case (int)61: {
HXLINE(1098)					_hx_char = this->readChar();
HXLINE(1099)					if ((_hx_char == (int)61)) {
HXLINE(1100)						return ::hscript::Token_obj::TOp(HX_("==",60,35,00,00));
            					}
            					else {
HXLINE(1101)						if ((_hx_char == (int)62)) {
HXLINE(1102)							return ::hscript::Token_obj::TOp(HX_("=>",61,35,00,00));
            						}
            					}
HXLINE(1103)					this->_hx_char = _hx_char;
HXLINE(1104)					return ::hscript::Token_obj::TOp(HX_("=",3d,00,00,00));
            				}
            				break;
            				case (int)63: {
HXLINE(1095)					return ::hscript::Token_obj::TQuestion_dyn();
            				}
            				break;
            				case (int)64: {
HXLINE(1106)					_hx_char = this->readChar();
HXLINE(1107)					Bool _hx_tmp19;
HXDLIN(1107)					if (!(this->idents->__get(_hx_char))) {
HXLINE(1107)						_hx_tmp19 = (_hx_char == (int)58);
            					}
            					else {
HXLINE(1107)						_hx_tmp19 = true;
            					}
HXDLIN(1107)					if (_hx_tmp19) {
HXLINE(1108)						HX_VARI( ::String,id) = ::String::fromCharCode(_hx_char);
HXLINE(1109)						while(true){
HXLINE(1110)							_hx_char = this->readChar();
HXLINE(1111)							Bool _hx_tmp20 = !(this->idents->__get(_hx_char));
HXDLIN(1111)							if (_hx_tmp20) {
HXLINE(1112)								this->_hx_char = _hx_char;
HXLINE(1113)								return ::hscript::Token_obj::TMeta(id);
            							}
HXLINE(1115)							hx::AddEq(id,::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1118)					this->invalidChar(_hx_char);
            				}
            				break;
            				case (int)91: {
HXLINE(1091)					return ::hscript::Token_obj::TBkOpen_dyn();
            				}
            				break;
            				case (int)93: {
HXLINE(1092)					return ::hscript::Token_obj::TBkClose_dyn();
            				}
            				break;
            				case (int)123: {
HXLINE(1089)					return ::hscript::Token_obj::TBrOpen_dyn();
            				}
            				break;
            				case (int)125: {
HXLINE(1090)					return ::hscript::Token_obj::TBrClose_dyn();
            				}
            				break;
            				default:{
HXLINE(1120)					Bool _hx_tmp21 = this->ops->__get(_hx_char);
HXDLIN(1120)					if (_hx_tmp21) {
HXLINE(1121)						HX_VARI( ::String,op) = ::String::fromCharCode(_hx_char);
HXLINE(1122)						HX_VARI( Int,prev) = (int)-1;
HXLINE(1123)						while(true){
HXLINE(1124)							_hx_char = this->readChar();
HXLINE(1125)							Bool _hx_tmp22;
HXDLIN(1125)							if (!(!(this->ops->__get(_hx_char)))) {
HXLINE(1125)								_hx_tmp22 = (prev == (int)61);
            							}
            							else {
HXLINE(1125)								_hx_tmp22 = true;
            							}
HXDLIN(1125)							if (_hx_tmp22) {
HXLINE(1126)								 ::Dynamic _hx_tmp23 = op.charCodeAt((int)0);
HXDLIN(1126)								if (hx::IsEq( _hx_tmp23,(int)47 )) {
HXLINE(1127)									return this->tokenComment(op,_hx_char);
            								}
HXLINE(1128)								this->_hx_char = _hx_char;
HXLINE(1129)								return ::hscript::Token_obj::TOp(op);
            							}
HXLINE(1131)							prev = _hx_char;
HXLINE(1132)							hx::AddEq(op,::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1135)					Bool _hx_tmp24 = this->idents->__get(_hx_char);
HXDLIN(1135)					if (_hx_tmp24) {
HXLINE(1136)						HX_VARI_NAME( ::String,id1,"id") = ::String::fromCharCode(_hx_char);
HXLINE(1137)						while(true){
HXLINE(1138)							_hx_char = this->readChar();
HXLINE(1139)							Bool _hx_tmp25 = !(this->idents->__get(_hx_char));
HXDLIN(1139)							if (_hx_tmp25) {
HXLINE(1140)								this->_hx_char = _hx_char;
HXLINE(1141)								return ::hscript::Token_obj::TId(id1);
            							}
HXLINE(1143)							hx::AddEq(id1,::String::fromCharCode(_hx_char));
            						}
            					}
HXLINE(1146)					this->invalidChar(_hx_char);
            				}
            			}
HXLINE(1148)			_hx_char = this->readChar();
            		}
HXLINE( 981)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Parser_obj,token,return )

::hx::EnumBase Parser_obj::tokenComment(::String op,Int _hx_char){
            	HX_STACK_FRAME("hscript.Parser","tokenComment",0xb86c15ba,"hscript.Parser.tokenComment","hscript/Parser.hx",1153,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(op,"op")
            	HX_STACK_ARG(_hx_char,"char")
HXLINE(1154)		HX_VARI(  ::Dynamic,c) = op.charCodeAt((int)1);
HXLINE(1155)		HX_VARI(  ::haxe::io::Input,s) = this->input;
HXLINE(1156)		if (hx::IsEq( c,(int)47 )) {
HXLINE(1157)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1158)				while(true){
HXLINE(1158)					Bool _hx_tmp;
HXDLIN(1158)					if ((_hx_char != (int)13)) {
HXLINE(1158)						_hx_tmp = (_hx_char != (int)10);
            					}
            					else {
HXLINE(1158)						_hx_tmp = false;
            					}
HXDLIN(1158)					if (!(_hx_tmp)) {
HXLINE(1158)						goto _hx_goto_45;
            					}
HXLINE(1160)					_hx_char = s->readByte();
            				}
            				_hx_goto_45:;
HXLINE(1162)				this->_hx_char = _hx_char;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1165)			return this->token();
            		}
HXLINE(1167)		if (hx::IsEq( c,(int)42 )) {
HXLINE(1168)			HX_VARI( Int,old) = this->line;
HXLINE(1169)			if ((op == HX_("/**/",a0,0a,31,1f))) {
HXLINE(1170)				this->_hx_char = _hx_char;
HXLINE(1171)				return this->token();
            			}
HXLINE(1173)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1174)				while(true){
HXLINE(1175)					while((_hx_char != (int)42)){
HXLINE(1176)						if ((_hx_char == (int)10)) {
HXLINE(1176)							this->line++;
            						}
HXLINE(1178)						_hx_char = s->readByte();
            					}
HXLINE(1181)					_hx_char = s->readByte();
HXLINE(1182)					if ((_hx_char == (int)47)) {
HXLINE(1183)						goto _hx_goto_46;
            					}
            				}
            				_hx_goto_46:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e1 = _hx_e;
HXLINE(1186)					this->line = old;
HXLINE(1187)					HX_STACK_DO_THROW(::hscript::Error_obj::EUnterminatedComment_dyn());
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE(1189)			return this->token();
            		}
HXLINE(1191)		this->_hx_char = _hx_char;
HXLINE(1192)		return ::hscript::Token_obj::TOp(op);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,tokenComment,return )

::String Parser_obj::constString(::hx::EnumBase c){
            	HX_STACK_FRAME("hscript.Parser","constString",0x0a4693c0,"hscript.Parser.constString","hscript/Parser.hx",1196,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(c,"c")
HXLINE(1196)		Int _hx_tmp = ( ( ::hx::EnumBase)(c) )->_hx_getIndex();
HXDLIN(1196)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(1196)				return ::Std_obj::string(c->_hx_getInt(0));
            			}
            			break;
            			case (int)1: {
HXLINE(1196)				return ::Std_obj::string(c->_hx_getFloat(0));
            			}
            			break;
            			case (int)2: {
HXLINE(1196)				return c->_hx_getString(0);
            			}
            			break;
            		}
HXDLIN(1196)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,constString,return )

::String Parser_obj::tokenString(::hx::EnumBase t){
            	HX_STACK_FRAME("hscript.Parser","tokenString",0x05f471d6,"hscript.Parser.tokenString","hscript/Parser.hx",1207,0x98735743)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(t,"t")
HXLINE(1207)		Int _hx_tmp = ( ( ::hx::EnumBase)(t) )->_hx_getIndex();
HXDLIN(1207)		switch((int)(_hx_tmp)){
            			case (int)0: {
HXLINE(1207)				return HX_("<eof>",3e,ee,21,cf);
            			}
            			break;
            			case (int)1: {
HXLINE(1207)				return this->constString(t->_hx_getObject(0).StaticCast< ::hx::EnumBase >());
            			}
            			break;
            			case (int)2: {
HXLINE(1207)				return t->_hx_getString(0);
            			}
            			break;
            			case (int)3: {
HXLINE(1207)				return t->_hx_getString(0);
            			}
            			break;
            			case (int)4: {
HXLINE(1207)				return HX_("(",28,00,00,00);
            			}
            			break;
            			case (int)5: {
HXLINE(1207)				return HX_(")",29,00,00,00);
            			}
            			break;
            			case (int)6: {
HXLINE(1207)				return HX_("{",7b,00,00,00);
            			}
            			break;
            			case (int)7: {
HXLINE(1207)				return HX_("}",7d,00,00,00);
            			}
            			break;
            			case (int)8: {
HXLINE(1207)				return HX_(".",2e,00,00,00);
            			}
            			break;
            			case (int)9: {
HXLINE(1207)				return HX_(",",2c,00,00,00);
            			}
            			break;
            			case (int)10: {
HXLINE(1207)				return HX_(";",3b,00,00,00);
            			}
            			break;
            			case (int)11: {
HXLINE(1207)				return HX_("[",5b,00,00,00);
            			}
            			break;
            			case (int)12: {
HXLINE(1207)				return HX_("]",5d,00,00,00);
            			}
            			break;
            			case (int)13: {
HXLINE(1207)				return HX_("?",3f,00,00,00);
            			}
            			break;
            			case (int)14: {
HXLINE(1207)				return HX_(":",3a,00,00,00);
            			}
            			break;
            			case (int)15: {
HXLINE(1207)				return (HX_("@",40,00,00,00) + t->_hx_getString(0));
            			}
            			break;
            		}
HXDLIN(1207)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,tokenString,return )

Int Parser_obj::p1;

Int Parser_obj::readPos;

Int Parser_obj::tokenMin;

Int Parser_obj::tokenMax;


Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(opChars,"opChars");
	HX_MARK_MEMBER_NAME(identChars,"identChars");
	HX_MARK_MEMBER_NAME(opPriority,"opPriority");
	HX_MARK_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_MARK_MEMBER_NAME(unops,"unops");
	HX_MARK_MEMBER_NAME(allowJSON,"allowJSON");
	HX_MARK_MEMBER_NAME(allowTypes,"allowTypes");
	HX_MARK_MEMBER_NAME(allowMetadata,"allowMetadata");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(ops,"ops");
	HX_MARK_MEMBER_NAME(idents,"idents");
	HX_MARK_MEMBER_NAME(uid,"uid");
	HX_MARK_MEMBER_NAME(tokens,"tokens");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(opChars,"opChars");
	HX_VISIT_MEMBER_NAME(identChars,"identChars");
	HX_VISIT_MEMBER_NAME(opPriority,"opPriority");
	HX_VISIT_MEMBER_NAME(opRightAssoc,"opRightAssoc");
	HX_VISIT_MEMBER_NAME(unops,"unops");
	HX_VISIT_MEMBER_NAME(allowJSON,"allowJSON");
	HX_VISIT_MEMBER_NAME(allowTypes,"allowTypes");
	HX_VISIT_MEMBER_NAME(allowMetadata,"allowMetadata");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(ops,"ops");
	HX_VISIT_MEMBER_NAME(idents,"idents");
	HX_VISIT_MEMBER_NAME(uid,"uid");
	HX_VISIT_MEMBER_NAME(tokens,"tokens");
}

hx::Val Parser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"mk") ) { return hx::Val( mk_dyn()); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { return hx::Val( ops); }
		if (HX_FIELD_EQ(inName,"uid") ) { return hx::Val( uid); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return hx::Val( line); }
		if (HX_FIELD_EQ(inName,"char") ) { return hx::Val( _hx_char); }
		if (HX_FIELD_EQ(inName,"push") ) { return hx::Val( push_dyn()); }
		if (HX_FIELD_EQ(inName,"expr") ) { return hx::Val( expr_dyn()); }
		if (HX_FIELD_EQ(inName,"pmin") ) { return hx::Val( pmin_dyn()); }
		if (HX_FIELD_EQ(inName,"pmax") ) { return hx::Val( pmax_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unops") ) { return hx::Val( unops); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input); }
		if (HX_FIELD_EQ(inName,"error") ) { return hx::Val( error_dyn()); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn()); }
		if (HX_FIELD_EQ(inName,"token") ) { return hx::Val( token_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { return hx::Val( idents); }
		if (HX_FIELD_EQ(inName,"tokens") ) { return hx::Val( tokens); }
		if (HX_FIELD_EQ(inName,"ensure") ) { return hx::Val( ensure_dyn()); }
		if (HX_FIELD_EQ(inName,"incPos") ) { return hx::Val( incPos_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { return hx::Val( opChars); }
		if (HX_FIELD_EQ(inName,"isBlock") ) { return hx::Val( isBlock_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getIdent") ) { return hx::Val( getIdent_dyn()); }
		if (HX_FIELD_EQ(inName,"mapCompr") ) { return hx::Val( mapCompr_dyn()); }
		if (HX_FIELD_EQ(inName,"makeUnop") ) { return hx::Val( makeUnop_dyn()); }
		if (HX_FIELD_EQ(inName,"readChar") ) { return hx::Val( readChar_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { return hx::Val( allowJSON); }
		if (HX_FIELD_EQ(inName,"parseExpr") ) { return hx::Val( parseExpr_dyn()); }
		if (HX_FIELD_EQ(inName,"makeBinop") ) { return hx::Val( makeBinop_dyn()); }
		if (HX_FIELD_EQ(inName,"parseType") ) { return hx::Val( parseType_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { return hx::Val( identChars); }
		if (HX_FIELD_EQ(inName,"opPriority") ) { return hx::Val( opPriority); }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { return hx::Val( allowTypes); }
		if (HX_FIELD_EQ(inName,"unexpected") ) { return hx::Val( unexpected_dyn()); }
		if (HX_FIELD_EQ(inName,"readString") ) { return hx::Val( readString_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"invalidChar") ) { return hx::Val( invalidChar_dyn()); }
		if (HX_FIELD_EQ(inName,"parseString") ) { return hx::Val( parseString_dyn()); }
		if (HX_FIELD_EQ(inName,"parseObject") ) { return hx::Val( parseObject_dyn()); }
		if (HX_FIELD_EQ(inName,"constString") ) { return hx::Val( constString_dyn()); }
		if (HX_FIELD_EQ(inName,"tokenString") ) { return hx::Val( tokenString_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { return hx::Val( opRightAssoc); }
		if (HX_FIELD_EQ(inName,"tokenComment") ) { return hx::Val( tokenComment_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMetadata") ) { return hx::Val( allowMetadata); }
		if (HX_FIELD_EQ(inName,"parseFullExpr") ) { return hx::Val( parseFullExpr_dyn()); }
		if (HX_FIELD_EQ(inName,"parseMetaArgs") ) { return hx::Val( parseMetaArgs_dyn()); }
		if (HX_FIELD_EQ(inName,"parseExprNext") ) { return hx::Val( parseExprNext_dyn()); }
		if (HX_FIELD_EQ(inName,"parseTypeNext") ) { return hx::Val( parseTypeNext_dyn()); }
		if (HX_FIELD_EQ(inName,"parseExprList") ) { return hx::Val( parseExprList_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"parseStructure") ) { return hx::Val( parseStructure_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Parser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ops") ) { ops=inValue.Cast< ::Array< Bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uid") ) { uid=inValue.Cast< Int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"unops") ) { unops=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"idents") ) { idents=inValue.Cast< ::Array< Bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tokens") ) { tokens=inValue.Cast<  ::haxe::ds::GenericStack_hscript_Token >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"opChars") ) { opChars=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"allowJSON") ) { allowJSON=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"identChars") ) { identChars=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"opPriority") ) { opPriority=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowTypes") ) { allowTypes=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"opRightAssoc") ) { opRightAssoc=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"allowMetadata") ) { allowMetadata=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"));
	outFields->push(HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8"));
	outFields->push(HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee"));
	outFields->push(HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e"));
	outFields->push(HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02"));
	outFields->push(HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6"));
	outFields->push(HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1"));
	outFields->push(HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45"));
	outFields->push(HX_HCSTRING("allowMetadata","\x18","\x79","\xd4","\x10"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"));
	outFields->push(HX_HCSTRING("ops","\x32","\x9c","\x54","\x00"));
	outFields->push(HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2"));
	outFields->push(HX_HCSTRING("uid","\x90","\x23","\x59","\x00"));
	outFields->push(HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Parser_obj,line),HX_HCSTRING("line","\xf4","\x17","\xb3","\x47")},
	{hx::fsString,(int)offsetof(Parser_obj,opChars),HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8")},
	{hx::fsString,(int)offsetof(Parser_obj,identChars),HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,opPriority),HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,opRightAssoc),HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Parser_obj,unops),HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowJSON),HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowTypes),HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45")},
	{hx::fsBool,(int)offsetof(Parser_obj,allowMetadata),HX_HCSTRING("allowMetadata","\x18","\x79","\xd4","\x10")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(Parser_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsInt,(int)offsetof(Parser_obj,_hx_char),HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Parser_obj,ops),HX_HCSTRING("ops","\x32","\x9c","\x54","\x00")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(Parser_obj,idents),HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2")},
	{hx::fsInt,(int)offsetof(Parser_obj,uid),HX_HCSTRING("uid","\x90","\x23","\x59","\x00")},
	{hx::fsObject /*::haxe::ds::GenericStack_hscript_Token*/ ,(int)offsetof(Parser_obj,tokens),HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Parser_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Parser_obj::p1,HX_HCSTRING("p1","\xc1","\x61","\x00","\x00")},
	{hx::fsInt,(void *) &Parser_obj::readPos,HX_HCSTRING("readPos","\xde","\x03","\xcf","\x02")},
	{hx::fsInt,(void *) &Parser_obj::tokenMin,HX_HCSTRING("tokenMin","\x19","\xa8","\x42","\x2b")},
	{hx::fsInt,(void *) &Parser_obj::tokenMax,HX_HCSTRING("tokenMax","\x2b","\xa1","\x42","\x2b")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"),
	HX_HCSTRING("opChars","\xfc","\xf3","\xa7","\xa8"),
	HX_HCSTRING("identChars","\xcd","\x23","\x3f","\xee"),
	HX_HCSTRING("opPriority","\xa5","\x21","\xd8","\x3e"),
	HX_HCSTRING("opRightAssoc","\x9a","\xd1","\xfe","\x02"),
	HX_HCSTRING("unops","\x79","\xf3","\xeb","\xa6"),
	HX_HCSTRING("allowJSON","\x31","\x27","\x44","\xb1"),
	HX_HCSTRING("allowTypes","\x30","\x2b","\x97","\x45"),
	HX_HCSTRING("allowMetadata","\x18","\x79","\xd4","\x10"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("char","\xd6","\x5e","\xbf","\x41"),
	HX_HCSTRING("ops","\x32","\x9c","\x54","\x00"),
	HX_HCSTRING("idents","\x83","\x4f","\xa1","\xd2"),
	HX_HCSTRING("uid","\x90","\x23","\x59","\x00"),
	HX_HCSTRING("tokens","\x5a","\x17","\xe7","\x91"),
	HX_HCSTRING("error","\xc8","\xcb","\x29","\x73"),
	HX_HCSTRING("invalidChar","\x6d","\xad","\xce","\xa9"),
	HX_HCSTRING("parseString","\x64","\xd5","\x6c","\x8c"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	HX_HCSTRING("unexpected","\xd1","\x15","\xf4","\xc5"),
	HX_HCSTRING("push","\xda","\x11","\x61","\x4a"),
	HX_HCSTRING("ensure","\xbe","\xf5","\x7b","\x04"),
	HX_HCSTRING("getIdent","\x7a","\x52","\x50","\x17"),
	HX_HCSTRING("expr","\x35","\xfd","\x1d","\x43"),
	HX_HCSTRING("pmin","\x22","\xf7","\x5a","\x4a"),
	HX_HCSTRING("pmax","\x34","\xf0","\x5a","\x4a"),
	HX_HCSTRING("mk","\x5e","\x5f","\x00","\x00"),
	HX_HCSTRING("isBlock","\x03","\x19","\x82","\x51"),
	HX_HCSTRING("parseFullExpr","\xb7","\xbd","\x60","\x9c"),
	HX_HCSTRING("parseObject","\x52","\x2b","\x7c","\x90"),
	HX_HCSTRING("parseExpr","\x08","\x4f","\xc4","\xca"),
	HX_HCSTRING("parseMetaArgs","\x15","\x82","\x33","\x6e"),
	HX_HCSTRING("mapCompr","\x47","\xa4","\x9f","\xc1"),
	HX_HCSTRING("makeUnop","\xc8","\xc4","\x47","\x44"),
	HX_HCSTRING("makeBinop","\xda","\x90","\x98","\x86"),
	HX_HCSTRING("parseStructure","\x80","\x85","\x70","\x8b"),
	HX_HCSTRING("parseExprNext","\x1b","\x24","\xa8","\xf3"),
	HX_HCSTRING("parseType","\x8d","\x44","\xaf","\xd4"),
	HX_HCSTRING("parseTypeNext","\x20","\xc0","\xfc","\xfa"),
	HX_HCSTRING("parseExprList","\x86","\xbb","\x58","\xf2"),
	HX_HCSTRING("incPos","\x56","\xe7","\x39","\x93"),
	HX_HCSTRING("readChar","\x4c","\x39","\xb7","\x69"),
	HX_HCSTRING("readString","\xc7","\x0c","\xac","\x0a"),
	HX_HCSTRING("token","\xf9","\x82","\x2b","\x14"),
	HX_HCSTRING("tokenComment","\x66","\x60","\xfb","\x25"),
	HX_HCSTRING("constString","\x94","\x42","\x30","\xa9"),
	HX_HCSTRING("tokenString","\xaa","\x20","\xde","\xa4"),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_MARK_MEMBER_NAME(Parser_obj::readPos,"readPos");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_MARK_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Parser_obj::p1,"p1");
	HX_VISIT_MEMBER_NAME(Parser_obj::readPos,"readPos");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMin,"tokenMin");
	HX_VISIT_MEMBER_NAME(Parser_obj::tokenMax,"tokenMax");
};

#endif

hx::Class Parser_obj::__mClass;

static ::String Parser_obj_sStaticFields[] = {
	HX_HCSTRING("p1","\xc1","\x61","\x00","\x00"),
	HX_HCSTRING("readPos","\xde","\x03","\xcf","\x02"),
	HX_HCSTRING("tokenMin","\x19","\xa8","\x42","\x2b"),
	HX_HCSTRING("tokenMax","\x2b","\xa1","\x42","\x2b"),
	::String(null())
};

void Parser_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hscript.Parser","\x9a","\x9f","\xf2","\xe9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Parser_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Parser_obj::__boot()
{
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",94,0x98735743)
HXLINE(  94)		p1 = (int)0;
            	}
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",95,0x98735743)
HXLINE(  95)		readPos = (int)0;
            	}
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",96,0x98735743)
HXLINE(  96)		tokenMin = (int)0;
            	}
{
            	HX_STACK_FRAME("hscript.Parser","boot",0xd7acc586,"hscript.Parser.boot","hscript/Parser.hx",97,0x98735743)
HXLINE(  97)		tokenMax = (int)0;
            	}
}

} // end namespace hscript
