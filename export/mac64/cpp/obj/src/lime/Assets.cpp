// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_DefaultAssetLibrary
#include <DefaultAssetLibrary.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_AssetCache
#include <lime/AssetCache.h>
#endif
#ifndef INCLUDED_lime_AssetLibrary
#include <lime/AssetLibrary.h>
#endif
#ifndef INCLUDED_lime_Assets
#include <lime/Assets.h>
#endif
#ifndef INCLUDED_lime_app_Event_Void_Void
#include <lime/app/Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_lime_app_Promise
#include <lime/app/Promise.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_lime_utils_Bytes
#include <lime/utils/Bytes.h>
#endif

namespace lime{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

hx::ObjectPtr< Assets_obj > Assets_obj::__new()
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic Assets_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::lime::AssetCache Assets_obj::cache;

 ::haxe::ds::StringMap Assets_obj::libraries;

 ::lime::app::Event_Void_Void Assets_obj::onChange;

Bool Assets_obj::initialized;

Bool Assets_obj::exists(::String id,::String type){
            	HX_STACK_FRAME("lime.Assets","exists",0x8a084f2e,"lime.Assets.exists","lime/Assets.hx",47,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
HXLINE(  49)		::lime::Assets_obj::initialize();
HXLINE(  53)		Bool _hx_tmp = hx::IsNull( type );
HXDLIN(  53)		if (_hx_tmp) {
HXLINE(  55)			type = HX_("BINARY",01,68,8e,9f);
            		}
HXLINE(  59)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  59)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp1);
HXLINE(  60)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN(  60)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp2 + (int)1),null());
HXLINE(  61)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE(  63)		Bool _hx_tmp3 = hx::IsNotNull( library );
HXDLIN(  63)		if (_hx_tmp3) {
HXLINE(  65)			return library->exists(symbolName,type);
            		}
HXLINE(  71)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::lime::audio::AudioBuffer Assets_obj::getAudioBuffer(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","getAudioBuffer",0x1f7814d2,"lime.Assets.getAudioBuffer","lime/Assets.hx",82,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE(  84)		::lime::Assets_obj::initialize();
HXLINE(  88)		Bool _hx_tmp;
HXDLIN(  88)		Bool _hx_tmp1;
HXDLIN(  88)		if (useCache) {
HXLINE(  88)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE(  88)			_hx_tmp1 = false;
            		}
HXDLIN(  88)		if (_hx_tmp1) {
HXLINE(  88)			_hx_tmp = ::lime::Assets_obj::cache->audio->exists(id);
            		}
            		else {
HXLINE(  88)			_hx_tmp = false;
            		}
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  90)			HX_VARI(  ::lime::audio::AudioBuffer,audio) = ::lime::Assets_obj::cache->audio->get(id).StaticCast<  ::lime::audio::AudioBuffer >();
HXLINE(  92)			if (::lime::Assets_obj::isValidAudio(audio)) {
HXLINE(  94)				return audio;
            			}
            		}
HXLINE( 100)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 100)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 101)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 101)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 102)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 104)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 104)		if (_hx_tmp4) {
HXLINE( 106)			Bool _hx_tmp5 = library->exists(symbolName,HX_("SOUND",af,c4,ba,fe));
HXDLIN( 106)			if (_hx_tmp5) {
HXLINE( 108)				Bool _hx_tmp6 = library->isLocal(symbolName,HX_("SOUND",af,c4,ba,fe));
HXDLIN( 108)				if (_hx_tmp6) {
HXLINE( 110)					HX_VARI_NAME(  ::lime::audio::AudioBuffer,audio1,"audio") = library->getAudioBuffer(symbolName);
HXLINE( 112)					Bool _hx_tmp7;
HXDLIN( 112)					if (useCache) {
HXLINE( 112)						_hx_tmp7 = ::lime::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 112)						_hx_tmp7 = false;
            					}
HXDLIN( 112)					if (_hx_tmp7) {
HXLINE( 114)						::lime::Assets_obj::cache->audio->set(id,audio1);
            					}
HXLINE( 118)					return audio1;
            				}
            				else {
HXLINE( 122)					::haxe::Log_obj::trace(((HX_("[Assets] Audio asset \"",07,8c,ae,7b) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),122,HX_("lime.Assets",dc,38,84,97),HX_("getAudioBuffer",80,41,e3,26)));
            				}
            			}
            			else {
HXLINE( 128)				::haxe::Log_obj::trace(((HX_("[Assets] There is no audio asset with an ID of \"",65,50,b8,55) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),128,HX_("lime.Assets",dc,38,84,97),HX_("getAudioBuffer",80,41,e3,26)));
            			}
            		}
            		else {
HXLINE( 134)			::haxe::Log_obj::trace(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),134,HX_("lime.Assets",dc,38,84,97),HX_("getAudioBuffer",80,41,e3,26)));
            		}
HXLINE( 140)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getAudioBuffer,return )

 ::lime::utils::Bytes Assets_obj::getBytes(::String id){
            	HX_STACK_FRAME("lime.Assets","getBytes",0xe703c1c7,"lime.Assets.getBytes","lime/Assets.hx",151,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 153)		::lime::Assets_obj::initialize();
HXLINE( 157)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 157)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 158)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 158)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 159)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 161)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 161)		if (_hx_tmp2) {
HXLINE( 163)			Bool _hx_tmp3 = library->exists(symbolName,HX_("BINARY",01,68,8e,9f));
HXDLIN( 163)			if (_hx_tmp3) {
HXLINE( 165)				Bool _hx_tmp4 = library->isLocal(symbolName,HX_("BINARY",01,68,8e,9f));
HXDLIN( 165)				if (_hx_tmp4) {
HXLINE( 167)					return library->getBytes(symbolName);
            				}
            				else {
HXLINE( 171)					::haxe::Log_obj::trace(((HX_("[Assets] String or Bytes asset \"",ae,95,0c,eb) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),171,HX_("lime.Assets",dc,38,84,97),HX_("getBytes",f5,17,6f,1d)));
            				}
            			}
            			else {
HXLINE( 177)				::haxe::Log_obj::trace(((HX_("[Assets] There is no String or Bytes asset with an ID of \"",ec,ff,7c,1c) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),177,HX_("lime.Assets",dc,38,84,97),HX_("getBytes",f5,17,6f,1d)));
            			}
            		}
            		else {
HXLINE( 183)			::haxe::Log_obj::trace(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),183,HX_("lime.Assets",dc,38,84,97),HX_("getBytes",f5,17,6f,1d)));
            		}
HXLINE( 189)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getBytes,return )

 ::lime::text::Font Assets_obj::getFont(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","getFont",0x2f4603f3,"lime.Assets.getFont","lime/Assets.hx",200,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 202)		::lime::Assets_obj::initialize();
HXLINE( 206)		Bool _hx_tmp;
HXDLIN( 206)		Bool _hx_tmp1;
HXDLIN( 206)		if (useCache) {
HXLINE( 206)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 206)			_hx_tmp1 = false;
            		}
HXDLIN( 206)		if (_hx_tmp1) {
HXLINE( 206)			_hx_tmp = ::lime::Assets_obj::cache->font->exists(id);
            		}
            		else {
HXLINE( 206)			_hx_tmp = false;
            		}
HXDLIN( 206)		if (_hx_tmp) {
HXLINE( 208)			return ::lime::Assets_obj::cache->font->get(id);
            		}
HXLINE( 212)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 212)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 213)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 213)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 214)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 216)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 216)		if (_hx_tmp4) {
HXLINE( 218)			Bool _hx_tmp5 = library->exists(symbolName,HX_("FONT",cf,25,81,2e));
HXDLIN( 218)			if (_hx_tmp5) {
HXLINE( 220)				Bool _hx_tmp6 = library->isLocal(symbolName,HX_("FONT",cf,25,81,2e));
HXDLIN( 220)				if (_hx_tmp6) {
HXLINE( 222)					HX_VARI(  ::lime::text::Font,font) = library->getFont(symbolName);
HXLINE( 224)					Bool _hx_tmp7;
HXDLIN( 224)					if (useCache) {
HXLINE( 224)						_hx_tmp7 = ::lime::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 224)						_hx_tmp7 = false;
            					}
HXDLIN( 224)					if (_hx_tmp7) {
HXLINE( 226)						::lime::Assets_obj::cache->font->set(id,font);
            					}
HXLINE( 230)					return font;
            				}
            				else {
HXLINE( 234)					::haxe::Log_obj::trace(((HX_("[Assets] Font asset \"",22,94,a9,e6) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),234,HX_("lime.Assets",dc,38,84,97),HX_("getFont",85,0d,43,16)));
            				}
            			}
            			else {
HXLINE( 240)				::haxe::Log_obj::trace(((HX_("[Assets] There is no Font asset with an ID of \"",8a,40,c3,f6) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),240,HX_("lime.Assets",dc,38,84,97),HX_("getFont",85,0d,43,16)));
            			}
            		}
            		else {
HXLINE( 246)			::haxe::Log_obj::trace(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),246,HX_("lime.Assets",dc,38,84,97),HX_("getFont",85,0d,43,16)));
            		}
HXLINE( 252)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

 ::lime::graphics::Image Assets_obj::getImage(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","getImage",0xe6d4d8b7,"lime.Assets.getImage","lime/Assets.hx",264,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 266)		::lime::Assets_obj::initialize();
HXLINE( 270)		Bool _hx_tmp;
HXDLIN( 270)		Bool _hx_tmp1;
HXDLIN( 270)		if (useCache) {
HXLINE( 270)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 270)			_hx_tmp1 = false;
            		}
HXDLIN( 270)		if (_hx_tmp1) {
HXLINE( 270)			_hx_tmp = ::lime::Assets_obj::cache->image->exists(id);
            		}
            		else {
HXLINE( 270)			_hx_tmp = false;
            		}
HXDLIN( 270)		if (_hx_tmp) {
HXLINE( 272)			HX_VARI(  ::lime::graphics::Image,image) = ::lime::Assets_obj::cache->image->get(id).StaticCast<  ::lime::graphics::Image >();
HXLINE( 274)			if (::lime::Assets_obj::isValidImage(image)) {
HXLINE( 276)				return image;
            			}
            		}
HXLINE( 282)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 282)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 283)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 283)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 284)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 286)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 286)		if (_hx_tmp4) {
HXLINE( 288)			Bool _hx_tmp5 = library->exists(symbolName,HX_("IMAGE",3b,57,57,3b));
HXDLIN( 288)			if (_hx_tmp5) {
HXLINE( 290)				Bool _hx_tmp6 = library->isLocal(symbolName,HX_("IMAGE",3b,57,57,3b));
HXDLIN( 290)				if (_hx_tmp6) {
HXLINE( 292)					HX_VARI_NAME(  ::lime::graphics::Image,image1,"image") = library->getImage(symbolName);
HXLINE( 294)					Bool _hx_tmp7;
HXDLIN( 294)					if (useCache) {
HXLINE( 294)						_hx_tmp7 = ::lime::Assets_obj::cache->enabled;
            					}
            					else {
HXLINE( 294)						_hx_tmp7 = false;
            					}
HXDLIN( 294)					if (_hx_tmp7) {
HXLINE( 296)						::lime::Assets_obj::cache->image->set(id,image1);
            					}
HXLINE( 300)					return image1;
            				}
            				else {
HXLINE( 304)					::haxe::Log_obj::trace(((HX_("[Assets] Image asset \"",8c,bf,18,5b) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),304,HX_("lime.Assets",dc,38,84,97),HX_("getImage",e5,2e,40,1d)));
            				}
            			}
            			else {
HXLINE( 310)				::haxe::Log_obj::trace(((HX_("[Assets] There is no Image asset with an ID of \"",8a,1a,98,70) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),310,HX_("lime.Assets",dc,38,84,97),HX_("getImage",e5,2e,40,1d)));
            			}
            		}
            		else {
HXLINE( 316)			::haxe::Log_obj::trace(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),316,HX_("lime.Assets",dc,38,84,97),HX_("getImage",e5,2e,40,1d)));
            		}
HXLINE( 322)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getImage,return )

 ::lime::AssetLibrary Assets_obj::getLibrary(::String name){
            	HX_STACK_FRAME("lime.Assets","getLibrary",0x6641ef57,"lime.Assets.getLibrary","lime/Assets.hx",327,0x48c77341)
            	HX_STACK_ARG(name,"name")
HXLINE( 329)		Bool _hx_tmp;
HXDLIN( 329)		Bool _hx_tmp1 = hx::IsNotNull( name );
HXDLIN( 329)		if (_hx_tmp1) {
HXLINE( 329)			_hx_tmp = (name == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 331)			name = HX_("default",c1,d8,c3,9b);
            		}
HXLINE( 335)		return ::lime::Assets_obj::libraries->get(name).StaticCast<  ::lime::AssetLibrary >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLibrary,return )

::String Assets_obj::getPath(::String id){
            	HX_STACK_FRAME("lime.Assets","getPath",0x35d78bc9,"lime.Assets.getPath","lime/Assets.hx",346,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 348)		::lime::Assets_obj::initialize();
HXLINE( 352)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 352)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 353)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 353)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 354)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 356)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 356)		if (_hx_tmp2) {
HXLINE( 358)			Bool _hx_tmp3 = library->exists(symbolName,null());
HXDLIN( 358)			if (_hx_tmp3) {
HXLINE( 360)				return library->getPath(symbolName);
            			}
            			else {
HXLINE( 364)				::haxe::Log_obj::trace(((HX_("[Assets] There is no asset with an ID of \"",af,c3,ed,11) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),364,HX_("lime.Assets",dc,38,84,97),HX_("getPath",5b,95,d4,1c)));
            			}
            		}
            		else {
HXLINE( 370)			::haxe::Log_obj::trace(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),370,HX_("lime.Assets",dc,38,84,97),HX_("getPath",5b,95,d4,1c)));
            		}
HXLINE( 376)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

::String Assets_obj::getText(::String id){
            	HX_STACK_FRAME("lime.Assets","getText",0x387f72d1,"lime.Assets.getText","lime/Assets.hx",387,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 389)		::lime::Assets_obj::initialize();
HXLINE( 393)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 393)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 394)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 394)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 395)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 397)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 397)		if (_hx_tmp2) {
HXLINE( 399)			Bool _hx_tmp3 = library->exists(symbolName,HX_("TEXT",ad,94,ba,37));
HXDLIN( 399)			if (_hx_tmp3) {
HXLINE( 401)				Bool _hx_tmp4 = library->isLocal(symbolName,HX_("TEXT",ad,94,ba,37));
HXDLIN( 401)				if (_hx_tmp4) {
HXLINE( 403)					return library->getText(symbolName);
            				}
            				else {
HXLINE( 407)					::haxe::Log_obj::trace(((HX_("[Assets] String asset \"",64,53,3d,14) + id) + HX_("\" exists, but only asynchronously",dc,ca,f2,dd)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),407,HX_("lime.Assets",dc,38,84,97),HX_("getText",63,7c,7c,1f)));
            				}
            			}
            			else {
HXLINE( 413)				::haxe::Log_obj::trace(((HX_("[Assets] There is no String asset with an ID of \"",8c,62,e6,40) + id) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),413,HX_("lime.Assets",dc,38,84,97),HX_("getText",63,7c,7c,1f)));
            			}
            		}
            		else {
HXLINE( 419)			::haxe::Log_obj::trace(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)),hx::SourceInfo(HX_("Assets.hx",fb,cd,c6,67),419,HX_("lime.Assets",dc,38,84,97),HX_("getText",63,7c,7c,1f)));
            		}
HXLINE( 425)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getText,return )

void Assets_obj::initialize(){
            	HX_STACK_FRAME("lime.Assets","initialize",0xc42b73a2,"lime.Assets.initialize","lime/Assets.hx",432,0x48c77341)
HXLINE( 432)		Bool _hx_tmp = !(::lime::Assets_obj::initialized);
HXDLIN( 432)		if (_hx_tmp) {
HXLINE( 436)			::lime::Assets_obj::registerLibrary(HX_("default",c1,d8,c3,9b), ::DefaultAssetLibrary_obj::__new());
HXLINE( 440)			::lime::Assets_obj::initialized = true;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,initialize,(void))

Bool Assets_obj::isLocal(::String id,::String type,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","isLocal",0x2e79638f,"lime.Assets.isLocal","lime/Assets.hx",447,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 449)		::lime::Assets_obj::initialize();
HXLINE( 453)		Bool _hx_tmp;
HXDLIN( 453)		if (useCache) {
HXLINE( 453)			_hx_tmp = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 453)			_hx_tmp = false;
            		}
HXDLIN( 453)		if (_hx_tmp) {
HXLINE( 455)			Bool _hx_tmp1;
HXDLIN( 455)			if ((type != HX_("IMAGE",3b,57,57,3b))) {
HXLINE( 455)				_hx_tmp1 = hx::IsNull( type );
            			}
            			else {
HXLINE( 455)				_hx_tmp1 = true;
            			}
HXDLIN( 455)			if (_hx_tmp1) {
HXLINE( 457)				Bool _hx_tmp2 = ::lime::Assets_obj::cache->image->exists(id);
HXDLIN( 457)				if (_hx_tmp2) {
HXLINE( 457)					return true;
            				}
            			}
HXLINE( 461)			Bool _hx_tmp3;
HXDLIN( 461)			if ((type != HX_("FONT",cf,25,81,2e))) {
HXLINE( 461)				_hx_tmp3 = hx::IsNull( type );
            			}
            			else {
HXLINE( 461)				_hx_tmp3 = true;
            			}
HXDLIN( 461)			if (_hx_tmp3) {
HXLINE( 463)				Bool _hx_tmp4 = ::lime::Assets_obj::cache->font->exists(id);
HXDLIN( 463)				if (_hx_tmp4) {
HXLINE( 463)					return true;
            				}
            			}
HXLINE( 467)			Bool _hx_tmp5;
HXDLIN( 467)			Bool _hx_tmp6;
HXDLIN( 467)			if ((type != HX_("SOUND",af,c4,ba,fe))) {
HXLINE( 467)				_hx_tmp6 = (type == HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE( 467)				_hx_tmp6 = true;
            			}
HXDLIN( 467)			if (!(_hx_tmp6)) {
HXLINE( 467)				_hx_tmp5 = hx::IsNull( type );
            			}
            			else {
HXLINE( 467)				_hx_tmp5 = true;
            			}
HXDLIN( 467)			if (_hx_tmp5) {
HXLINE( 469)				Bool _hx_tmp7 = ::lime::Assets_obj::cache->audio->exists(id);
HXDLIN( 469)				if (_hx_tmp7) {
HXLINE( 469)					return true;
            				}
            			}
            		}
HXLINE( 475)		Int _hx_tmp8 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 475)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp8);
HXLINE( 476)		Int _hx_tmp9 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 476)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp9 + (int)1),null());
HXLINE( 477)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 479)		Bool _hx_tmp10 = hx::IsNotNull( library );
HXDLIN( 479)		if (_hx_tmp10) {
HXLINE( 481)			return library->isLocal(symbolName,type);
            		}
HXLINE( 487)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,isLocal,return )

Bool Assets_obj::isValidAudio( ::lime::audio::AudioBuffer buffer){
            	HX_STACK_FRAME("lime.Assets","isValidAudio",0x0da20596,"lime.Assets.isValidAudio","lime/Assets.hx",496,0x48c77341)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 496)		return hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidAudio,return )

Bool Assets_obj::isValidImage( ::lime::graphics::Image buffer){
            	HX_STACK_FRAME("lime.Assets","isValidImage",0xa38aac1b,"lime.Assets.isValidImage","lime/Assets.hx",513,0x48c77341)
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 513)		return hx::IsNotNull( buffer );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isValidImage,return )

::Array< ::String > Assets_obj::list(::String type){
            	HX_STACK_FRAME("lime.Assets","list",0x60d5f530,"lime.Assets.list","lime/Assets.hx",537,0x48c77341)
            	HX_STACK_ARG(type,"type")
HXLINE( 539)		::lime::Assets_obj::initialize();
HXLINE( 541)		HX_VARI( ::Array< ::String >,items) = ::Array_obj< ::String >::__new(0);
HXLINE( 543)		{
HXLINE( 543)			HX_VARI(  ::Dynamic,tmp) = ::lime::Assets_obj::libraries->iterator();
HXDLIN( 543)			while(true){
HXLINE( 543)				Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 543)				if (_hx_tmp) {
HXLINE( 543)					goto _hx_goto_0;
            				}
HXDLIN( 543)				HX_VARI(  ::lime::AssetLibrary,library) = ( ( ::lime::AssetLibrary)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 545)				HX_VARI( ::Array< ::String >,libraryItems) = library->list(type);
HXLINE( 547)				Bool _hx_tmp1 = hx::IsNotNull( libraryItems );
HXDLIN( 547)				if (_hx_tmp1) {
HXLINE( 549)					items = items->concat(libraryItems);
            				}
            			}
            			_hx_goto_0:;
            		}
HXLINE( 555)		return items;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

 ::lime::app::Future Assets_obj::loadAudioBuffer(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","loadAudioBuffer",0x6d20865e,"lime.Assets.loadAudioBuffer","lime/Assets.hx",560,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 562)		::lime::Assets_obj::initialize();
HXLINE( 564)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 568)		Bool _hx_tmp;
HXDLIN( 568)		Bool _hx_tmp1;
HXDLIN( 568)		if (useCache) {
HXLINE( 568)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 568)			_hx_tmp1 = false;
            		}
HXDLIN( 568)		if (_hx_tmp1) {
HXLINE( 568)			_hx_tmp = ::lime::Assets_obj::cache->audio->exists(id);
            		}
            		else {
HXLINE( 568)			_hx_tmp = false;
            		}
HXDLIN( 568)		if (_hx_tmp) {
HXLINE( 570)			HX_VARI(  ::lime::audio::AudioBuffer,audio) = ::lime::Assets_obj::cache->audio->get(id).StaticCast<  ::lime::audio::AudioBuffer >();
HXLINE( 572)			if (::lime::Assets_obj::isValidAudio(audio)) {
HXLINE( 574)				promise->complete(audio);
HXLINE( 575)				return promise->future;
            			}
            		}
HXLINE( 581)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 581)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 582)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 582)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 583)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 585)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 585)		if (_hx_tmp4) {
HXLINE( 587)			Bool _hx_tmp5 = library->exists(symbolName,HX_("SOUND",af,c4,ba,fe));
HXDLIN( 587)			if (_hx_tmp5) {
HXLINE( 589)				HX_VARI(  ::lime::app::Future,future) = library->loadAudioBuffer(symbolName);
HXLINE( 591)				Bool _hx_tmp6;
HXDLIN( 591)				if (useCache) {
HXLINE( 591)					_hx_tmp6 = ::lime::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 591)					_hx_tmp6 = false;
            				}
HXDLIN( 591)				if (_hx_tmp6) {
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,id) HXARGC(1)
            					void _hx_run( ::lime::audio::AudioBuffer audio1){
            						HX_STACK_FRAME("lime.Assets","loadAudioBuffer",0x6d20865e,"lime.Assets.loadAudioBuffer","lime/Assets.hx",593,0x48c77341)
            						HX_STACK_ARG(audio1,"audio1")
HXLINE( 593)						::lime::Assets_obj::cache->audio->set(id,audio1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 593)					future->onComplete( ::Dynamic(new _hx_Closure_0(id)));
            				}
HXLINE( 597)				promise->completeWith(future);
            			}
            			else {
HXLINE( 601)				promise->error(((HX_("[Assets] There is no audio asset with an ID of \"",65,50,b8,55) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 607)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 613)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadAudioBuffer,return )

 ::lime::app::Future Assets_obj::loadBytes(::String id){
            	HX_STACK_FRAME("lime.Assets","loadBytes",0x714f4253,"lime.Assets.loadBytes","lime/Assets.hx",618,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 620)		::lime::Assets_obj::initialize();
HXLINE( 622)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 626)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 626)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 627)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 627)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 628)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 630)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 630)		if (_hx_tmp2) {
HXLINE( 632)			Bool _hx_tmp3 = library->exists(symbolName,HX_("BINARY",01,68,8e,9f));
HXDLIN( 632)			if (_hx_tmp3) {
HXLINE( 634)				 ::lime::app::Future _hx_tmp4 = library->loadBytes(symbolName);
HXDLIN( 634)				promise->completeWith(_hx_tmp4);
            			}
            			else {
HXLINE( 638)				promise->error(((HX_("[Assets] There is no String or Bytes asset with an ID of \"",ec,ff,7c,1c) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 644)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 650)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadBytes,return )

 ::lime::app::Future Assets_obj::loadFont(::String id){
            	HX_STACK_FRAME("lime.Assets","loadFont",0x7df4d8e7,"lime.Assets.loadFont","lime/Assets.hx",655,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 657)		::lime::Assets_obj::initialize();
HXLINE( 659)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 663)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 663)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 664)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 664)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 665)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 667)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 667)		if (_hx_tmp2) {
HXLINE( 669)			Bool _hx_tmp3 = library->exists(symbolName,HX_("FONT",cf,25,81,2e));
HXDLIN( 669)			if (_hx_tmp3) {
HXLINE( 671)				 ::lime::app::Future _hx_tmp4 = library->loadFont(symbolName);
HXDLIN( 671)				promise->completeWith(_hx_tmp4);
            			}
            			else {
HXLINE( 675)				promise->error(((HX_("[Assets] There is no Font asset with an ID of \"",8a,40,c3,f6) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 681)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 687)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadFont,return )

 ::lime::app::Future Assets_obj::loadImage(::String id,hx::Null< Bool >  __o_useCache){
Bool useCache = __o_useCache.Default(true);
            	HX_STACK_FRAME("lime.Assets","loadImage",0x71205943,"lime.Assets.loadImage","lime/Assets.hx",692,0x48c77341)
            	HX_STACK_ARG(id,"id")
            	HX_STACK_ARG(useCache,"useCache")
HXLINE( 694)		::lime::Assets_obj::initialize();
HXLINE( 696)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 700)		Bool _hx_tmp;
HXDLIN( 700)		Bool _hx_tmp1;
HXDLIN( 700)		if (useCache) {
HXLINE( 700)			_hx_tmp1 = ::lime::Assets_obj::cache->enabled;
            		}
            		else {
HXLINE( 700)			_hx_tmp1 = false;
            		}
HXDLIN( 700)		if (_hx_tmp1) {
HXLINE( 700)			_hx_tmp = ::lime::Assets_obj::cache->image->exists(id);
            		}
            		else {
HXLINE( 700)			_hx_tmp = false;
            		}
HXDLIN( 700)		if (_hx_tmp) {
HXLINE( 702)			HX_VARI(  ::lime::graphics::Image,image) = ::lime::Assets_obj::cache->image->get(id).StaticCast<  ::lime::graphics::Image >();
HXLINE( 704)			if (::lime::Assets_obj::isValidImage(image)) {
HXLINE( 706)				promise->complete(image);
HXLINE( 707)				return promise->future;
            			}
            		}
HXLINE( 713)		Int _hx_tmp2 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 713)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp2);
HXLINE( 714)		Int _hx_tmp3 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 714)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp3 + (int)1),null());
HXLINE( 715)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 717)		Bool _hx_tmp4 = hx::IsNotNull( library );
HXDLIN( 717)		if (_hx_tmp4) {
HXLINE( 719)			Bool _hx_tmp5 = library->exists(symbolName,HX_("IMAGE",3b,57,57,3b));
HXDLIN( 719)			if (_hx_tmp5) {
HXLINE( 721)				HX_VARI(  ::lime::app::Future,future) = library->loadImage(symbolName);
HXLINE( 723)				Bool _hx_tmp6;
HXDLIN( 723)				if (useCache) {
HXLINE( 723)					_hx_tmp6 = ::lime::Assets_obj::cache->enabled;
            				}
            				else {
HXLINE( 723)					_hx_tmp6 = false;
            				}
HXDLIN( 723)				if (_hx_tmp6) {
            					HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::String,id) HXARGC(1)
            					void _hx_run( ::lime::graphics::Image image1){
            						HX_STACK_FRAME("lime.Assets","loadImage",0x71205943,"lime.Assets.loadImage","lime/Assets.hx",725,0x48c77341)
            						HX_STACK_ARG(image1,"image1")
HXLINE( 725)						::lime::Assets_obj::cache->image->set(id,image1);
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 725)					future->onComplete( ::Dynamic(new _hx_Closure_0(id)));
            				}
HXLINE( 729)				promise->completeWith(future);
            			}
            			else {
HXLINE( 733)				promise->error(((HX_("[Assets] There is no Image asset with an ID of \"",8a,1a,98,70) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 739)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 745)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadImage,return )

 ::lime::app::Future Assets_obj::loadLibrary(::String name){
            	HX_STACK_FRAME("lime.Assets","loadLibrary",0xbad7aae3,"lime.Assets.loadLibrary","lime/Assets.hx",750,0x48c77341)
            	HX_STACK_ARG(name,"name")
HXLINE( 752)		::lime::Assets_obj::initialize();
HXLINE( 754)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 758)		HX_VARI( ::String,data) = ::lime::Assets_obj::getText(((HX_("libraries/",f6,c5,4d,c0) + name) + HX_(".json",56,f1,d6,c2)));
HXLINE( 760)		Bool _hx_tmp;
HXDLIN( 760)		Bool _hx_tmp1 = hx::IsNotNull( data );
HXDLIN( 760)		if (_hx_tmp1) {
HXLINE( 760)			_hx_tmp = (data != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 760)			_hx_tmp = false;
            		}
HXDLIN( 760)		if (_hx_tmp) {
HXLINE( 762)			HX_VARI(  ::Dynamic,info) =  ::haxe::format::JsonParser_obj::__new(data)->parseRec();
HXLINE( 763)			hx::Class _hx_tmp2 = ::Type_obj::resolveClass( ::Dynamic(info->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)));
HXDLIN( 763)			HX_VARI(  ::lime::AssetLibrary,library) = ( ( ::lime::AssetLibrary)(::Type_obj::createInstance(_hx_tmp2, ::Dynamic(info->__Field(HX_("args",5d,8d,74,40),hx::paccDynamic)))) );
HXLINE( 764)			::lime::Assets_obj::libraries->set(name,library);
HXLINE( 765)			library->onChange->add(::lime::Assets_obj::onChange->dispatch_dyn(),null(),null());
HXLINE( 766)			 ::lime::app::Future _hx_tmp3 = library->load();
HXDLIN( 766)			promise->completeWith(_hx_tmp3);
            		}
            		else {
HXLINE( 770)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + name) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 776)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadLibrary,return )

 ::lime::app::Future Assets_obj::loadText(::String id){
            	HX_STACK_FRAME("lime.Assets","loadText",0x872e47c5,"lime.Assets.loadText","lime/Assets.hx",781,0x48c77341)
            	HX_STACK_ARG(id,"id")
HXLINE( 783)		::lime::Assets_obj::initialize();
HXLINE( 785)		HX_VARI(  ::lime::app::Promise,promise) =  ::lime::app::Promise_obj::__new();
HXLINE( 789)		Int _hx_tmp = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 789)		HX_VARI( ::String,libraryName) = id.substring((int)0,_hx_tmp);
HXLINE( 790)		Int _hx_tmp1 = id.indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 790)		HX_VARI( ::String,symbolName) = id.substr((_hx_tmp1 + (int)1),null());
HXLINE( 791)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::getLibrary(libraryName);
HXLINE( 793)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 793)		if (_hx_tmp2) {
HXLINE( 795)			Bool _hx_tmp3 = library->exists(symbolName,HX_("TEXT",ad,94,ba,37));
HXDLIN( 795)			if (_hx_tmp3) {
HXLINE( 797)				 ::lime::app::Future _hx_tmp4 = library->loadText(symbolName);
HXDLIN( 797)				promise->completeWith(_hx_tmp4);
            			}
            			else {
HXLINE( 801)				promise->error(((HX_("[Assets] There is no String asset with an ID of \"",8c,62,e6,40) + id) + HX_("\"",22,00,00,00)));
            			}
            		}
            		else {
HXLINE( 807)			promise->error(((HX_("[Assets] There is no asset library named \"",a0,b4,0a,cd) + libraryName) + HX_("\"",22,00,00,00)));
            		}
HXLINE( 813)		return promise->future;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,loadText,return )

void Assets_obj::registerLibrary(::String name, ::lime::AssetLibrary library){
            	HX_STACK_FRAME("lime.Assets","registerLibrary",0x7c289f46,"lime.Assets.registerLibrary","lime/Assets.hx",818,0x48c77341)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(library,"library")
HXLINE( 820)		Bool _hx_tmp = ::lime::Assets_obj::libraries->exists(name);
HXDLIN( 820)		if (_hx_tmp) {
HXLINE( 822)			Bool _hx_tmp1 = hx::IsEq( ::lime::Assets_obj::libraries->get(name).StaticCast<  ::lime::AssetLibrary >(),library );
HXDLIN( 822)			if (_hx_tmp1) {
HXLINE( 824)				return;
            			}
            			else {
HXLINE( 828)				::lime::Assets_obj::unloadLibrary(name);
            			}
            		}
HXLINE( 834)		Bool _hx_tmp2 = hx::IsNotNull( library );
HXDLIN( 834)		if (_hx_tmp2) {
HXLINE( 836)			library->onChange->add(::lime::Assets_obj::library_onChange_dyn(),null(),null());
            		}
HXLINE( 840)		::lime::Assets_obj::libraries->set(name,library);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,registerLibrary,(void))

void Assets_obj::unloadLibrary(::String name){
            	HX_STACK_FRAME("lime.Assets","unloadLibrary",0x7620d8aa,"lime.Assets.unloadLibrary","lime/Assets.hx",845,0x48c77341)
            	HX_STACK_ARG(name,"name")
HXLINE( 847)		::lime::Assets_obj::initialize();
HXLINE( 851)		HX_VARI(  ::lime::AssetLibrary,library) = ::lime::Assets_obj::libraries->get(name).StaticCast<  ::lime::AssetLibrary >();
HXLINE( 853)		Bool _hx_tmp = hx::IsNotNull( library );
HXDLIN( 853)		if (_hx_tmp) {
HXLINE( 855)			::lime::Assets_obj::cache->clear((name + HX_(":",3a,00,00,00)));
HXLINE( 856)			library->onChange->remove(::lime::Assets_obj::library_onChange_dyn());
HXLINE( 857)			library->unload();
            		}
HXLINE( 861)		::lime::Assets_obj::libraries->remove(name);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,unloadLibrary,(void))

void Assets_obj::library_onChange(){
            	HX_STACK_FRAME("lime.Assets","library_onChange",0xae01ecc5,"lime.Assets.library_onChange","lime/Assets.hx",875,0x48c77341)
HXLINE( 877)		::lime::Assets_obj::cache->clear(null());
HXLINE( 878)		::lime::Assets_obj::onChange->dispatch();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,library_onChange,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = cache; return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { outValue = onChange; return true; }
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadFont") ) { outValue = loadFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadText") ) { outValue = loadText_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { outValue = libraries; return true; }
		if (HX_FIELD_EQ(inName,"loadBytes") ) { outValue = loadBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadImage") ) { outValue = loadImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getLibrary") ) { outValue = getLibrary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = initialized; return true; }
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isValidAudio") ) { outValue = isValidAudio_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isValidImage") ) { outValue = isValidImage_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unloadLibrary") ) { outValue = unloadLibrary_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getAudioBuffer") ) { outValue = getAudioBuffer_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadAudioBuffer") ) { outValue = loadAudioBuffer_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"registerLibrary") ) { outValue = registerLibrary_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"library_onChange") ) { outValue = library_onChange_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::lime::AssetCache >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"onChange") ) { onChange=ioValue.Cast<  ::lime::app::Event_Void_Void >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"libraries") ) { libraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< Bool >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::lime::AssetCache*/ ,(void *) &Assets_obj::cache,HX_HCSTRING("cache","\x42","\x9a","\x14","\x41")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &Assets_obj::libraries,HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18")},
	{hx::fsObject /*::lime::app::Event_Void_Void*/ ,(void *) &Assets_obj::onChange,HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97")},
	{hx::fsBool,(void *) &Assets_obj::initialized,HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_MARK_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_MARK_MEMBER_NAME(Assets_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraries,"libraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::onChange,"onChange");
	HX_VISIT_MEMBER_NAME(Assets_obj::initialized,"initialized");
};

#endif

hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_HCSTRING("cache","\x42","\x9a","\x14","\x41"),
	HX_HCSTRING("libraries","\x19","\x50","\xf8","\x18"),
	HX_HCSTRING("onChange","\xef","\x87","\x1f","\x97"),
	HX_HCSTRING("initialized","\x14","\xf5","\x0f","\x37"),
	HX_HCSTRING("exists","\xdc","\x1d","\xe0","\xbf"),
	HX_HCSTRING("getAudioBuffer","\x80","\x41","\xe3","\x26"),
	HX_HCSTRING("getBytes","\xf5","\x17","\x6f","\x1d"),
	HX_HCSTRING("getFont","\x85","\x0d","\x43","\x16"),
	HX_HCSTRING("getImage","\xe5","\x2e","\x40","\x1d"),
	HX_HCSTRING("getLibrary","\x05","\xad","\xd1","\x8e"),
	HX_HCSTRING("getPath","\x5b","\x95","\xd4","\x1c"),
	HX_HCSTRING("getText","\x63","\x7c","\x7c","\x1f"),
	HX_HCSTRING("initialize","\x50","\x31","\xbb","\xec"),
	HX_HCSTRING("isLocal","\x21","\x6d","\x76","\x15"),
	HX_HCSTRING("isValidAudio","\xc4","\x0a","\xdf","\x47"),
	HX_HCSTRING("isValidImage","\x49","\xb1","\xc7","\xdd"),
	HX_HCSTRING("list","\x5e","\x1c","\xb3","\x47"),
	HX_HCSTRING("loadAudioBuffer","\xf0","\x71","\x7c","\xe3"),
	HX_HCSTRING("loadBytes","\x65","\x54","\xcf","\xd8"),
	HX_HCSTRING("loadFont","\x15","\x2f","\x60","\xb4"),
	HX_HCSTRING("loadImage","\x55","\x6b","\xa0","\xd8"),
	HX_HCSTRING("loadLibrary","\x75","\xe5","\x0d","\x10"),
	HX_HCSTRING("loadText","\xf3","\x9d","\x99","\xbd"),
	HX_HCSTRING("registerLibrary","\xd8","\x8a","\x84","\xf2"),
	HX_HCSTRING("unloadLibrary","\xbc","\x5b","\x48","\x31"),
	HX_HCSTRING("library_onChange","\xf3","\x20","\x14","\xc8"),
	::String(null())
};

void Assets_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.Assets","\xdc","\x38","\x84","\x97");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",40,0x48c77341)
HXLINE(  40)		cache =  ::lime::AssetCache_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",41,0x48c77341)
HXLINE(  41)		libraries =  ::haxe::ds::StringMap_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",42,0x48c77341)
HXLINE(  42)		onChange =  ::lime::app::Event_Void_Void_obj::__new();
            	}
{
            	HX_STACK_FRAME("lime.Assets","boot",0x5a3e5d04,"lime.Assets.boot","lime/Assets.hx",44,0x48c77341)
HXLINE(  44)		initialized = false;
            	}
}

} // end namespace lime
