// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_audio_AudioBuffer
#include <lime/audio/AudioBuffer.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif

namespace lime{
namespace audio{

void AudioBuffer_obj::__construct(){
            	HX_STACK_FRAME("lime.audio.AudioBuffer","new",0x54859e97,"lime.audio.AudioBuffer.new","lime/audio/AudioBuffer.hx",45,0x5fb686fb)
            	HX_STACK_THIS(this)
HXLINE(  45)		this->id = (int)0;
            	}

Dynamic AudioBuffer_obj::__CreateEmpty() { return new AudioBuffer_obj; }

hx::ObjectPtr< AudioBuffer_obj > AudioBuffer_obj::__new()
{
	hx::ObjectPtr< AudioBuffer_obj > _hx_result = new AudioBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic AudioBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioBuffer_obj > _hx_result = new AudioBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

void AudioBuffer_obj::dispose(){
            	HX_STACK_FRAME("lime.audio.AudioBuffer","dispose",0xb2873656,"lime.audio.AudioBuffer.dispose","lime/audio/AudioBuffer.hx",50,0x5fb686fb)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioBuffer_obj,dispose,(void))

 ::lime::audio::AudioBuffer AudioBuffer_obj::fromBytes( ::haxe::io::Bytes bytes){
            	HX_STACK_FRAME("lime.audio.AudioBuffer","fromBytes",0xb5bdc418,"lime.audio.AudioBuffer.fromBytes","lime/audio/AudioBuffer.hx",72,0x5fb686fb)
            	HX_STACK_ARG(bytes,"bytes")
HXLINE(  80)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::AudioBuffer_obj::cffi_lime_audio_load(hx::DynamicPtr(bytes))) );
HXDLIN(  80)		HX_VARI(  ::Dynamic,data) = Dynamic(hx::DynamicPtr(inVal));
HXLINE(  82)		Bool _hx_tmp = hx::IsNotNull( data );
HXDLIN(  82)		if (_hx_tmp) {
HXLINE(  84)			HX_VARI(  ::lime::audio::AudioBuffer,audioBuffer) =  ::lime::audio::AudioBuffer_obj::__new();
HXLINE(  85)			audioBuffer->bitsPerSample =  ::Dynamic(data->__Field(HX_("bitsPerSample",01,01,36,c4),hx::paccDynamic));
HXLINE(  86)			audioBuffer->channels =  ::Dynamic(data->__Field(HX_("channels",50,aa,ee,6a),hx::paccDynamic));
HXLINE(  87)			HX_VARI(  ::haxe::io::Bytes,buffer) =  ::haxe::io::Bytes_obj::__new( ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)));
HXDLIN(  87)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  87)			Bool _hx_tmp1 = hx::IsNotNull( buffer );
HXDLIN(  87)			if (_hx_tmp1) {
HXLINE(  87)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(  87)				if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE(  87)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN(  87)				HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN(  87)				{
HXLINE(  87)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE(  87)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN(  87)					if ((bufferByteLength < (int)0)) {
HXLINE(  87)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN(  87)				_this->buffer = buffer;
HXDLIN(  87)				_this->byteOffset = (int)0;
HXDLIN(  87)				_this->byteLength = bufferByteLength;
HXDLIN(  87)				Float _hx_tmp2 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN(  87)				_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN(  87)				this1 = _this;
            			}
            			else {
HXLINE(  87)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            			}
HXDLIN(  87)			audioBuffer->data = this1;
HXLINE(  88)			audioBuffer->sampleRate =  ::Dynamic(data->__Field(HX_("sampleRate",2a,3c,4c,67),hx::paccDynamic));
HXLINE(  89)			return audioBuffer;
            		}
HXLINE(  95)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,fromBytes,return )

 ::lime::audio::AudioBuffer AudioBuffer_obj::fromFile(::String path){
            	HX_STACK_FRAME("lime.audio.AudioBuffer","fromFile",0xfdabe76f,"lime.audio.AudioBuffer.fromFile","lime/audio/AudioBuffer.hx",100,0x5fb686fb)
            	HX_STACK_ARG(path,"path")
HXLINE( 128)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::AudioBuffer_obj::cffi_lime_audio_load(hx::DynamicPtr(path))) );
HXDLIN( 128)		HX_VARI(  ::Dynamic,data) = Dynamic(hx::DynamicPtr(inVal));
HXLINE( 130)		Bool _hx_tmp = hx::IsNotNull( data );
HXDLIN( 130)		if (_hx_tmp) {
HXLINE( 132)			HX_VARI(  ::lime::audio::AudioBuffer,audioBuffer) =  ::lime::audio::AudioBuffer_obj::__new();
HXLINE( 133)			audioBuffer->bitsPerSample =  ::Dynamic(data->__Field(HX_("bitsPerSample",01,01,36,c4),hx::paccDynamic));
HXLINE( 134)			audioBuffer->channels =  ::Dynamic(data->__Field(HX_("channels",50,aa,ee,6a),hx::paccDynamic));
HXLINE( 135)			HX_VARI(  ::haxe::io::Bytes,buffer) =  ::haxe::io::Bytes_obj::__new( ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)), ::Dynamic( ::Dynamic(data->__Field(HX_("data",2a,56,63,42),hx::paccDynamic))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)));
HXDLIN( 135)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 135)			Bool _hx_tmp1 = hx::IsNotNull( buffer );
HXDLIN( 135)			if (_hx_tmp1) {
HXLINE( 135)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 135)				if ((hx::Mod((int)0,_this->bytesPerElement) != (int)0)) {
HXLINE( 135)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 135)				HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN( 135)				{
HXLINE( 135)					if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 135)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
HXDLIN( 135)					if ((bufferByteLength < (int)0)) {
HXLINE( 135)						HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            					}
            				}
HXDLIN( 135)				_this->buffer = buffer;
HXDLIN( 135)				_this->byteOffset = (int)0;
HXDLIN( 135)				_this->byteLength = bufferByteLength;
HXDLIN( 135)				Float _hx_tmp2 = ((Float)bufferByteLength / (Float)_this->bytesPerElement);
HXDLIN( 135)				_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 135)				this1 = _this;
            			}
            			else {
HXLINE( 135)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            			}
HXDLIN( 135)			audioBuffer->data = this1;
HXLINE( 136)			audioBuffer->sampleRate =  ::Dynamic(data->__Field(HX_("sampleRate",2a,3c,4c,67),hx::paccDynamic));
HXLINE( 137)			return audioBuffer;
            		}
HXLINE( 143)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,fromFile,return )

void AudioBuffer_obj::fromURL(::String url, ::Dynamic handler){
            	HX_STACK_FRAME("lime.audio.AudioBuffer","fromURL",0x4f3e95dc,"lime.audio.AudioBuffer.fromURL","lime/audio/AudioBuffer.hx",150,0x5fb686fb)
            	HX_STACK_ARG(url,"url")
            	HX_STACK_ARG(handler,"handler")
HXLINE( 150)		Bool _hx_tmp;
HXDLIN( 150)		Bool _hx_tmp1;
HXDLIN( 150)		Bool _hx_tmp2 = hx::IsNotNull( url );
HXDLIN( 150)		if (_hx_tmp2) {
HXLINE( 150)			Int _hx_tmp3 = url.indexOf(HX_("http://",52,75,cd,5a),null());
HXDLIN( 150)			_hx_tmp1 = (_hx_tmp3 == (int)-1);
            		}
            		else {
HXLINE( 150)			_hx_tmp1 = false;
            		}
HXDLIN( 150)		if (_hx_tmp1) {
HXLINE( 150)			Int _hx_tmp4 = url.indexOf(HX_("https://",cf,b4,ae,3e),null());
HXDLIN( 150)			_hx_tmp = (_hx_tmp4 == (int)-1);
            		}
            		else {
HXLINE( 150)			_hx_tmp = false;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 152)			 ::lime::audio::AudioBuffer _hx_tmp5 = ::lime::audio::AudioBuffer_obj::fromFile(url);
HXDLIN( 152)			handler(_hx_tmp5);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AudioBuffer_obj,fromURL,(void))

 ::Dynamic AudioBuffer_obj::lime_audio_load( ::Dynamic data){
            	HX_STACK_FRAME("lime.audio.AudioBuffer","lime_audio_load",0x6b424e50,"lime.audio.AudioBuffer.lime_audio_load","lime/audio/AudioBuffer.hx",189,0x5fb686fb)
            	HX_STACK_ARG(data,"data")
HXLINE( 189)		 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::audio::AudioBuffer_obj::cffi_lime_audio_load(hx::DynamicPtr(data))) );
HXDLIN( 189)		return Dynamic(hx::DynamicPtr(inVal));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AudioBuffer_obj,lime_audio_load,return )

::cpp::Function<   ::hx::Object *( ::hx::Object *) > AudioBuffer_obj::cffi_lime_audio_load;


AudioBuffer_obj::AudioBuffer_obj()
{
}

void AudioBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioBuffer);
	HX_MARK_MEMBER_NAME(bitsPerSample,"bitsPerSample");
	HX_MARK_MEMBER_NAME(channels,"channels");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(sampleRate,"sampleRate");
	HX_MARK_MEMBER_NAME(src,"src");
	HX_MARK_END_CLASS();
}

void AudioBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bitsPerSample,"bitsPerSample");
	HX_VISIT_MEMBER_NAME(channels,"channels");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(sampleRate,"sampleRate");
	HX_VISIT_MEMBER_NAME(src,"src");
}

hx::Val AudioBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { return hx::Val( src); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { return hx::Val( channels); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { return hx::Val( sampleRate); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bitsPerSample") ) { return hx::Val( bitsPerSample); }
	}
	return super::__Field(inName,inCallProp);
}

bool AudioBuffer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromURL") ) { outValue = fromURL_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lime_audio_load") ) { outValue = lime_audio_load_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"cffi_lime_audio_load") ) { outValue = cffi_lime_audio_load; return true; }
	}
	return false;
}

hx::Val AudioBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< Int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"src") ) { src=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"channels") ) { channels=inValue.Cast< Int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"sampleRate") ) { sampleRate=inValue.Cast< Int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bitsPerSample") ) { bitsPerSample=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool AudioBuffer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"cffi_lime_audio_load") ) { cffi_lime_audio_load=ioValue.Cast< ::cpp::Function<   ::hx::Object *( ::hx::Object *) > >(); return true; }
	}
	return false;
}

void AudioBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bitsPerSample","\x01","\x01","\x36","\xc4"));
	outFields->push(HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"));
	outFields->push(HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AudioBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,bitsPerSample),HX_HCSTRING("bitsPerSample","\x01","\x01","\x36","\xc4")},
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,channels),HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(AudioBuffer_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,id),HX_HCSTRING("id","\xdb","\x5b","\x00","\x00")},
	{hx::fsInt,(int)offsetof(AudioBuffer_obj,sampleRate),HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(AudioBuffer_obj,src),HX_HCSTRING("src","\xe4","\xa6","\x57","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo AudioBuffer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &AudioBuffer_obj::cffi_lime_audio_load,HX_HCSTRING("cffi_lime_audio_load","\xc0","\xd6","\x0b","\xc1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String AudioBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("bitsPerSample","\x01","\x01","\x36","\xc4"),
	HX_HCSTRING("channels","\x50","\xaa","\xee","\x6a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("id","\xdb","\x5b","\x00","\x00"),
	HX_HCSTRING("sampleRate","\x2a","\x3c","\x4c","\x67"),
	HX_HCSTRING("src","\xe4","\xa6","\x57","\x00"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	::String(null()) };

static void AudioBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AudioBuffer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(AudioBuffer_obj::cffi_lime_audio_load,"cffi_lime_audio_load");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AudioBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AudioBuffer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(AudioBuffer_obj::cffi_lime_audio_load,"cffi_lime_audio_load");
};

#endif

hx::Class AudioBuffer_obj::__mClass;

static ::String AudioBuffer_obj_sStaticFields[] = {
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromURL","\x25","\xe0","\x03","\x58"),
	HX_HCSTRING("lime_audio_load","\x99","\x89","\x38","\x30"),
	HX_HCSTRING("cffi_lime_audio_load","\xc0","\xd6","\x0b","\xc1"),
	::String(null())
};

void AudioBuffer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.audio.AudioBuffer","\x25","\x07","\x67","\x5a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AudioBuffer_obj::__GetStatic;
	__mClass->mSetStaticField = &AudioBuffer_obj::__SetStatic;
	__mClass->mMarkFunc = AudioBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AudioBuffer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AudioBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void AudioBuffer_obj::__boot()
{
{
            	HX_STACK_FRAME("lime.audio.AudioBuffer","boot",0x987e261b,"lime.audio.AudioBuffer.boot","lime/audio/AudioBuffer.hx",189,0x5fb686fb)
HXLINE( 189)		 ::Dynamic inValue = ::cpp::Prime_obj::_loadPrime(HX_("lime",15,17,b3,47),HX_("lime_audio_load",99,89,38,30),HX_("oo",20,61,00,00),false);
HXDLIN( 189)		cffi_lime_audio_load = inValue;
            	}
}

} // end namespace lime
} // end namespace audio
