// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_math__ColorMatrix_ColorMatrix_Impl_
#include <lime/math/_ColorMatrix/ColorMatrix_Impl_.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif

static const Float _hx_array_data_4[] = {
	1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,
};
namespace lime{
namespace math{
namespace _ColorMatrix{

void ColorMatrix_Impl__obj::__construct() { }

Dynamic ColorMatrix_Impl__obj::__CreateEmpty() { return new ColorMatrix_Impl__obj; }

hx::ObjectPtr< ColorMatrix_Impl__obj > ColorMatrix_Impl__obj::__new()
{
	hx::ObjectPtr< ColorMatrix_Impl__obj > _hx_result = new ColorMatrix_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic ColorMatrix_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColorMatrix_Impl__obj > _hx_result = new ColorMatrix_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Float > ColorMatrix_Impl__obj::_hx___identity;

 ::lime::utils::ArrayBufferView ColorMatrix_Impl__obj::_new( ::lime::utils::ArrayBufferView data){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","_new",0x66bc06c7,"lime.math._ColorMatrix.ColorMatrix_Impl_._new","lime/math/ColorMatrix.hx",28,0x337975c7)
            	HX_STACK_ARG(data,"data")
HXLINE(  28)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXLINE(  30)		Bool _hx_tmp;
HXDLIN(  30)		Bool _hx_tmp1 = hx::IsNotNull( data );
HXDLIN(  30)		if (_hx_tmp1) {
HXLINE(  30)			_hx_tmp = (data->length == (int)20);
            		}
            		else {
HXLINE(  30)			_hx_tmp = false;
            		}
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  32)			this1 = data;
            		}
            		else {
HXLINE(  36)			HX_VARI( ::cpp::VirtualArray,array) = ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::_hx___identity;
HXDLIN(  36)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  36)			Bool _hx_tmp2 = hx::IsNotNull( array );
HXDLIN(  36)			if (_hx_tmp2) {
HXLINE(  36)				HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  36)				_this->byteOffset = (int)0;
HXDLIN(  36)				_this->length = array->get_length();
HXDLIN(  36)				Int _hx_tmp3 = (_this->length * _this->bytesPerElement);
HXDLIN(  36)				_this->byteLength = _hx_tmp3;
HXDLIN(  36)				Int byteLength = _this->byteLength;
HXDLIN(  36)				HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(  36)				_this->buffer = this3;
HXDLIN(  36)				_this->copyFromArray(array,null());
HXDLIN(  36)				this2 = _this;
            			}
            			else {
HXLINE(  36)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  36)			this1 = this2;
            		}
HXLINE(  28)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,_new,return )

 ::lime::utils::ArrayBufferView ColorMatrix_Impl__obj::clone( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","clone",0xca195b37,"lime.math._ColorMatrix.ColorMatrix_Impl_.clone","lime/math/ColorMatrix.hx",45,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  45)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(  45)		Bool _hx_tmp = hx::IsNotNull( this1 );
HXDLIN(  45)		if (_hx_tmp) {
HXLINE(  45)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  45)			HX_VARI(  ::haxe::io::Bytes,srcData) = this1->buffer;
HXDLIN(  45)			HX_VARI( Int,srcLength) = this1->length;
HXDLIN(  45)			HX_VARI( Int,srcByteOffset) = this1->byteOffset;
HXDLIN(  45)			Bool _hx_tmp1 = (this1->type == _this->type);
HXDLIN(  45)			if (_hx_tmp1) {
HXLINE(  45)				HX_VARI( Int,cloneLength) = (srcData->length - srcByteOffset);
HXDLIN(  45)				HX_VARI_NAME(  ::haxe::io::Bytes,this3,"this") = ::haxe::io::Bytes_obj::alloc(cloneLength);
HXDLIN(  45)				_this->buffer = this3;
HXDLIN(  45)				_this->buffer->blit((int)0,srcData,srcByteOffset,cloneLength);
            			}
            			else {
HXLINE(  45)				HX_STACK_DO_THROW(HX_("unimplemented",09,2f,74,b4));
            			}
HXDLIN(  45)			_this->byteLength = (_this->bytesPerElement * srcLength);
HXDLIN(  45)			_this->byteOffset = (int)0;
HXDLIN(  45)			_this->length = srcLength;
HXDLIN(  45)			this2 = _this;
            		}
            		else {
HXLINE(  45)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  45)		return ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::_new(this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,clone,return )

void ColorMatrix_Impl__obj::concat( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView second){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","concat",0xc5989ffa,"lime.math._ColorMatrix.ColorMatrix_Impl_.concat","lime/math/ColorMatrix.hx",50,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(second,"second")
HXLINE(  52)		{
HXLINE(  52)			HX_VARI(  ::lime::utils::ArrayBufferView,_g) = this1;
HXDLIN(  52)			{
HXLINE(  52)				Int byteOffset = _g->byteOffset;
HXDLIN(  52)				Float _hx_tmp = ::__hxcpp_memory_get_float(_g->buffer->b,byteOffset);
HXDLIN(  52)				Int byteOffset1 = second->byteOffset;
HXDLIN(  52)				Float _hx_tmp1 = ::__hxcpp_memory_get_float(second->buffer->b,byteOffset1);
HXDLIN(  52)				{
HXLINE(  52)					Int byteOffset2 = _g->byteOffset;
HXDLIN(  52)					::__hxcpp_memory_set_float(_g->buffer->b,byteOffset2,(_hx_tmp + _hx_tmp1));
            				}
            			}
            		}
HXLINE(  53)		{
HXLINE(  53)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_g1,"_g") = this1;
HXDLIN(  53)			{
HXLINE(  53)				Int byteOffset3 = (_g1->byteOffset + (int)24);
HXDLIN(  53)				Float _hx_tmp2 = ::__hxcpp_memory_get_float(_g1->buffer->b,byteOffset3);
HXDLIN(  53)				Int byteOffset4 = (second->byteOffset + (int)24);
HXDLIN(  53)				Float _hx_tmp3 = ::__hxcpp_memory_get_float(second->buffer->b,byteOffset4);
HXDLIN(  53)				{
HXLINE(  53)					Int byteOffset5 = (_g1->byteOffset + (int)24);
HXDLIN(  53)					::__hxcpp_memory_set_float(_g1->buffer->b,byteOffset5,(_hx_tmp2 + _hx_tmp3));
            				}
            			}
            		}
HXLINE(  54)		{
HXLINE(  54)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_g2,"_g") = this1;
HXDLIN(  54)			{
HXLINE(  54)				Int byteOffset6 = (_g2->byteOffset + (int)48);
HXDLIN(  54)				Float _hx_tmp4 = ::__hxcpp_memory_get_float(_g2->buffer->b,byteOffset6);
HXDLIN(  54)				Int byteOffset7 = (second->byteOffset + (int)48);
HXDLIN(  54)				Float _hx_tmp5 = ::__hxcpp_memory_get_float(second->buffer->b,byteOffset7);
HXDLIN(  54)				{
HXLINE(  54)					Int byteOffset8 = (_g2->byteOffset + (int)48);
HXDLIN(  54)					::__hxcpp_memory_set_float(_g2->buffer->b,byteOffset8,(_hx_tmp4 + _hx_tmp5));
            				}
            			}
            		}
HXLINE(  55)		{
HXLINE(  55)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_g3,"_g") = this1;
HXDLIN(  55)			{
HXLINE(  55)				Int byteOffset9 = (_g3->byteOffset + (int)72);
HXDLIN(  55)				Float _hx_tmp6 = ::__hxcpp_memory_get_float(_g3->buffer->b,byteOffset9);
HXDLIN(  55)				Int byteOffset10 = (second->byteOffset + (int)72);
HXDLIN(  55)				Float _hx_tmp7 = ::__hxcpp_memory_get_float(second->buffer->b,byteOffset10);
HXDLIN(  55)				{
HXLINE(  55)					Int byteOffset11 = (_g3->byteOffset + (int)72);
HXDLIN(  55)					::__hxcpp_memory_set_float(_g3->buffer->b,byteOffset11,(_hx_tmp6 + _hx_tmp7));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,concat,(void))

void ColorMatrix_Impl__obj::copyFrom( ::lime::utils::ArrayBufferView this1, ::lime::utils::ArrayBufferView other){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","copyFrom",0x3aa9a825,"lime.math._ColorMatrix.ColorMatrix_Impl_.copyFrom","lime/math/ColorMatrix.hx",62,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(other,"other")
HXLINE(  62)		Bool _hx_tmp = hx::IsNotNull( other );
HXDLIN(  62)		if (_hx_tmp) {
HXLINE(  62)			Int _hx_tmp1 = ((int)0 * this1->bytesPerElement);
HXDLIN(  62)			this1->buffer->blit(_hx_tmp1,other->buffer,other->byteOffset,other->byteLength);
            		}
            		else {
HXLINE(  62)			HX_STACK_DO_THROW(HX_("Invalid .set call. either view, or array must be not-null.",64,ba,b7,6c));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,copyFrom,(void))

void ColorMatrix_Impl__obj::identity( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","identity",0x2b77e1a4,"lime.math._ColorMatrix.ColorMatrix_Impl_.identity","lime/math/ColorMatrix.hx",67,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  69)		{
HXLINE(  69)			Int byteOffset = this1->byteOffset;
HXDLIN(  69)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,(int)1);
            		}
HXLINE(  70)		{
HXLINE(  70)			Int byteOffset1 = (this1->byteOffset + (int)4);
HXDLIN(  70)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,(int)0);
            		}
HXLINE(  71)		{
HXLINE(  71)			Int byteOffset2 = (this1->byteOffset + (int)8);
HXDLIN(  71)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,(int)0);
            		}
HXLINE(  72)		{
HXLINE(  72)			Int byteOffset3 = (this1->byteOffset + (int)12);
HXDLIN(  72)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,(int)0);
            		}
HXLINE(  73)		{
HXLINE(  73)			Int byteOffset4 = (this1->byteOffset + (int)16);
HXDLIN(  73)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset4,(int)0);
            		}
HXLINE(  74)		{
HXLINE(  74)			Int byteOffset5 = (this1->byteOffset + (int)20);
HXDLIN(  74)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,(int)0);
            		}
HXLINE(  75)		{
HXLINE(  75)			Int byteOffset6 = (this1->byteOffset + (int)24);
HXDLIN(  75)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset6,(int)1);
            		}
HXLINE(  76)		{
HXLINE(  76)			Int byteOffset7 = (this1->byteOffset + (int)28);
HXDLIN(  76)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset7,(int)0);
            		}
HXLINE(  77)		{
HXLINE(  77)			Int byteOffset8 = (this1->byteOffset + (int)32);
HXDLIN(  77)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset8,(int)0);
            		}
HXLINE(  78)		{
HXLINE(  78)			Int byteOffset9 = (this1->byteOffset + (int)36);
HXDLIN(  78)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset9,(int)0);
            		}
HXLINE(  79)		{
HXLINE(  79)			Int byteOffset10 = (this1->byteOffset + (int)40);
HXDLIN(  79)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset10,(int)0);
            		}
HXLINE(  80)		{
HXLINE(  80)			Int byteOffset11 = (this1->byteOffset + (int)44);
HXDLIN(  80)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset11,(int)0);
            		}
HXLINE(  81)		{
HXLINE(  81)			Int byteOffset12 = (this1->byteOffset + (int)48);
HXDLIN(  81)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset12,(int)1);
            		}
HXLINE(  82)		{
HXLINE(  82)			Int byteOffset13 = (this1->byteOffset + (int)52);
HXDLIN(  82)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset13,(int)0);
            		}
HXLINE(  83)		{
HXLINE(  83)			Int byteOffset14 = (this1->byteOffset + (int)56);
HXDLIN(  83)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset14,(int)0);
            		}
HXLINE(  84)		{
HXLINE(  84)			Int byteOffset15 = (this1->byteOffset + (int)60);
HXDLIN(  84)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset15,(int)0);
            		}
HXLINE(  85)		{
HXLINE(  85)			Int byteOffset16 = (this1->byteOffset + (int)64);
HXDLIN(  85)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset16,(int)0);
            		}
HXLINE(  86)		{
HXLINE(  86)			Int byteOffset17 = (this1->byteOffset + (int)68);
HXDLIN(  86)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset17,(int)0);
            		}
HXLINE(  87)		{
HXLINE(  87)			Int byteOffset18 = (this1->byteOffset + (int)72);
HXDLIN(  87)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset18,(int)1);
            		}
HXLINE(  88)		{
HXLINE(  88)			Int byteOffset19 = (this1->byteOffset + (int)76);
HXDLIN(  88)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset19,(int)0);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,identity,(void))

 ::lime::utils::ArrayBufferView ColorMatrix_Impl__obj::getAlphaTable( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","getAlphaTable",0x456419e0,"lime.math._ColorMatrix.ColorMatrix_Impl_.getAlphaTable","lime/math/ColorMatrix.hx",93,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE(  95)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)256,(int)4);
HXDLIN(  95)		HX_VARI(  ::lime::utils::ArrayBufferView,table) = this2;
HXLINE(  96)		Int byteOffset = (this1->byteOffset + (int)72);
HXDLIN(  96)		HX_VARI( Float,multiplier) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXLINE(  97)		Int byteOffset1 = (this1->byteOffset + (int)76);
HXDLIN(  97)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN(  97)		HX_VARI( Float,offset) = (_hx_tmp * (int)255);
HXLINE(  98)		HX_VAR( Int,value);
HXLINE( 100)		{
HXLINE( 100)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 100)			while((_g < (int)256)){
HXLINE( 100)				HX_VARI( Int,i) = _g++;
HXLINE( 102)				value = ::Math_obj::floor(((i * multiplier) + offset));
HXLINE( 103)				Bool _hx_tmp1 = (value > (int)255);
HXDLIN( 103)				if (_hx_tmp1) {
HXLINE( 103)					value = (int)255;
            				}
HXLINE( 104)				Bool _hx_tmp2 = (value < (int)0);
HXDLIN( 104)				if (_hx_tmp2) {
HXLINE( 104)					value = (int)0;
            				}
HXLINE( 105)				{
HXLINE( 105)					Int byteOffset2 = (table->byteOffset + i);
HXDLIN( 105)					::__hxcpp_memory_set_byte(table->buffer->b,byteOffset2,value);
            				}
            			}
            		}
HXLINE( 109)		return table;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,getAlphaTable,return )

 ::lime::utils::ArrayBufferView ColorMatrix_Impl__obj::getBlueTable( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","getBlueTable",0x661a9b04,"lime.math._ColorMatrix.ColorMatrix_Impl_.getBlueTable","lime/math/ColorMatrix.hx",114,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 116)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)256,(int)4);
HXDLIN( 116)		HX_VARI(  ::lime::utils::ArrayBufferView,table) = this2;
HXLINE( 117)		Int byteOffset = (this1->byteOffset + (int)48);
HXDLIN( 117)		HX_VARI( Float,multiplier) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXLINE( 118)		Int byteOffset1 = (this1->byteOffset + (int)56);
HXDLIN( 118)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 118)		HX_VARI( Float,offset) = (_hx_tmp * (int)255);
HXLINE( 119)		HX_VAR( Int,value);
HXLINE( 121)		{
HXLINE( 121)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 121)			while((_g < (int)256)){
HXLINE( 121)				HX_VARI( Int,i) = _g++;
HXLINE( 123)				value = ::Math_obj::floor(((i * multiplier) + offset));
HXLINE( 124)				Bool _hx_tmp1 = (value > (int)255);
HXDLIN( 124)				if (_hx_tmp1) {
HXLINE( 124)					value = (int)255;
            				}
HXLINE( 125)				Bool _hx_tmp2 = (value < (int)0);
HXDLIN( 125)				if (_hx_tmp2) {
HXLINE( 125)					value = (int)0;
            				}
HXLINE( 126)				{
HXLINE( 126)					Int byteOffset2 = (table->byteOffset + i);
HXDLIN( 126)					::__hxcpp_memory_set_byte(table->buffer->b,byteOffset2,value);
            				}
            			}
            		}
HXLINE( 130)		return table;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,getBlueTable,return )

 ::lime::utils::ArrayBufferView ColorMatrix_Impl__obj::getGreenTable( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","getGreenTable",0xf983c45b,"lime.math._ColorMatrix.ColorMatrix_Impl_.getGreenTable","lime/math/ColorMatrix.hx",135,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 137)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)256,(int)4);
HXDLIN( 137)		HX_VARI(  ::lime::utils::ArrayBufferView,table) = this2;
HXLINE( 138)		Int byteOffset = (this1->byteOffset + (int)24);
HXDLIN( 138)		HX_VARI( Float,multiplier) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXLINE( 139)		Int byteOffset1 = (this1->byteOffset + (int)36);
HXDLIN( 139)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 139)		HX_VARI( Float,offset) = (_hx_tmp * (int)255);
HXLINE( 140)		HX_VAR( Int,value);
HXLINE( 142)		{
HXLINE( 142)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 142)			while((_g < (int)256)){
HXLINE( 142)				HX_VARI( Int,i) = _g++;
HXLINE( 144)				value = ::Math_obj::floor(((i * multiplier) + offset));
HXLINE( 145)				Bool _hx_tmp1 = (value > (int)255);
HXDLIN( 145)				if (_hx_tmp1) {
HXLINE( 145)					value = (int)255;
            				}
HXLINE( 146)				Bool _hx_tmp2 = (value < (int)0);
HXDLIN( 146)				if (_hx_tmp2) {
HXLINE( 146)					value = (int)0;
            				}
HXLINE( 147)				{
HXLINE( 147)					Int byteOffset2 = (table->byteOffset + i);
HXDLIN( 147)					::__hxcpp_memory_set_byte(table->buffer->b,byteOffset2,value);
            				}
            			}
            		}
HXLINE( 151)		return table;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,getGreenTable,return )

 ::lime::utils::ArrayBufferView ColorMatrix_Impl__obj::getRedTable( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","getRedTable",0x2b90530d,"lime.math._ColorMatrix.ColorMatrix_Impl_.getRedTable","lime/math/ColorMatrix.hx",156,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 158)		HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this2,"this") =  ::lime::utils::ArrayBufferView_obj::__new((int)256,(int)4);
HXDLIN( 158)		HX_VARI(  ::lime::utils::ArrayBufferView,table) = this2;
HXLINE( 159)		Int byteOffset = this1->byteOffset;
HXDLIN( 159)		HX_VARI( Float,multiplier) = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXLINE( 160)		Int byteOffset1 = (this1->byteOffset + (int)16);
HXDLIN( 160)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 160)		HX_VARI( Float,offset) = (_hx_tmp * (int)255);
HXLINE( 161)		HX_VAR( Int,value);
HXLINE( 163)		{
HXLINE( 163)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 163)			while((_g < (int)256)){
HXLINE( 163)				HX_VARI( Int,i) = _g++;
HXLINE( 165)				value = ::Math_obj::floor(((i * multiplier) + offset));
HXLINE( 166)				Bool _hx_tmp1 = (value > (int)255);
HXDLIN( 166)				if (_hx_tmp1) {
HXLINE( 166)					value = (int)255;
            				}
HXLINE( 167)				Bool _hx_tmp2 = (value < (int)0);
HXDLIN( 167)				if (_hx_tmp2) {
HXLINE( 167)					value = (int)0;
            				}
HXLINE( 168)				{
HXLINE( 168)					Int byteOffset2 = (table->byteOffset + i);
HXDLIN( 168)					::__hxcpp_memory_set_byte(table->buffer->b,byteOffset2,value);
            				}
            			}
            		}
HXLINE( 172)		return table;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,getRedTable,return )

 ::Dynamic ColorMatrix_Impl__obj::_hx___toFlashColorTransform( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","__toFlashColorTransform",0x02badfd8,"lime.math._ColorMatrix.ColorMatrix_Impl_.__toFlashColorTransform","lime/math/ColorMatrix.hx",182,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 182)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,_hx___toFlashColorTransform,return )

Float ColorMatrix_Impl__obj::get_alphaMultiplier( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_alphaMultiplier",0xa15814f0,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaMultiplier","lime/math/ColorMatrix.hx",197,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 197)		Int byteOffset = (this1->byteOffset + (int)72);
HXDLIN( 197)		return ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_alphaMultiplier,return )

Float ColorMatrix_Impl__obj::set_alphaMultiplier( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_alphaMultiplier",0xddf507fc,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaMultiplier","lime/math/ColorMatrix.hx",204,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 204)		Int byteOffset = (this1->byteOffset + (int)72);
HXDLIN( 204)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,value);
HXDLIN( 204)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_alphaMultiplier,return )

Float ColorMatrix_Impl__obj::get_alphaOffset( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_alphaOffset",0xff81a182,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_alphaOffset","lime/math/ColorMatrix.hx",211,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 211)		Int byteOffset = (this1->byteOffset + (int)76);
HXDLIN( 211)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 211)		return (_hx_tmp * (int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_alphaOffset,return )

Float ColorMatrix_Impl__obj::set_alphaOffset( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_alphaOffset",0xfb4d1e8e,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_alphaOffset","lime/math/ColorMatrix.hx",218,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 218)		HX_VARI( Float,val) = ((Float)value / (Float)(int)255);
HXDLIN( 218)		Int byteOffset = (this1->byteOffset + (int)76);
HXDLIN( 218)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
HXDLIN( 218)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_alphaOffset,return )

Float ColorMatrix_Impl__obj::get_blueMultiplier( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_blueMultiplier",0x69726b6a,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueMultiplier","lime/math/ColorMatrix.hx",225,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 225)		Int byteOffset = (this1->byteOffset + (int)48);
HXDLIN( 225)		return ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_blueMultiplier,return )

Float ColorMatrix_Impl__obj::set_blueMultiplier( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_blueMultiplier",0x46219dde,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueMultiplier","lime/math/ColorMatrix.hx",232,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 232)		Int byteOffset = (this1->byteOffset + (int)48);
HXDLIN( 232)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,value);
HXDLIN( 232)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_blueMultiplier,return )

Float ColorMatrix_Impl__obj::get_blueOffset( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_blueOffset",0x2f5cb2fc,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_blueOffset","lime/math/ColorMatrix.hx",239,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 239)		Int byteOffset = (this1->byteOffset + (int)56);
HXDLIN( 239)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 239)		return (_hx_tmp * (int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_blueOffset,return )

Float ColorMatrix_Impl__obj::set_blueOffset( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_blueOffset",0x4f7c9b70,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_blueOffset","lime/math/ColorMatrix.hx",246,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 246)		HX_VARI( Float,val) = ((Float)value / (Float)(int)255);
HXDLIN( 246)		Int byteOffset = (this1->byteOffset + (int)56);
HXDLIN( 246)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
HXDLIN( 246)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_blueOffset,return )

Int ColorMatrix_Impl__obj::get_color( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_color",0x1b460a94,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_color","lime/math/ColorMatrix.hx",253,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 253)		Int byteOffset = (this1->byteOffset + (int)16);
HXDLIN( 253)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 253)		Int _hx_tmp1 = ::Std_obj::_hx_int((_hx_tmp * (int)255));
HXDLIN( 253)		Int _hx_tmp2 = ((int)_hx_tmp1 << (int)(int)16);
HXDLIN( 253)		Int byteOffset1 = (this1->byteOffset + (int)36);
HXDLIN( 253)		Float _hx_tmp3 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset1);
HXDLIN( 253)		Int _hx_tmp4 = ::Std_obj::_hx_int((_hx_tmp3 * (int)255));
HXDLIN( 253)		Int _hx_tmp5 = ((int)_hx_tmp2 | (int)((int)_hx_tmp4 << (int)(int)8));
HXDLIN( 253)		Int byteOffset2 = (this1->byteOffset + (int)56);
HXDLIN( 253)		Float _hx_tmp6 = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset2);
HXDLIN( 253)		Int _hx_tmp7 = ::Std_obj::_hx_int((_hx_tmp6 * (int)255));
HXDLIN( 253)		return ((int)_hx_tmp5 | (int)_hx_tmp7);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_color,return )

Int ColorMatrix_Impl__obj::set_color( ::lime::utils::ArrayBufferView this1,Int value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_color",0xfe96f6a0,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_color","lime/math/ColorMatrix.hx",258,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 260)		{
HXLINE( 260)			Int byteOffset = (this1->byteOffset + (int)16);
HXDLIN( 260)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,((Float)((int)((int)value >> (int)(int)16) & (int)(int)255) / (Float)(int)255));
            		}
HXLINE( 261)		{
HXLINE( 261)			Int byteOffset1 = (this1->byteOffset + (int)36);
HXDLIN( 261)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset1,((Float)((int)((int)value >> (int)(int)8) & (int)(int)255) / (Float)(int)255));
            		}
HXLINE( 262)		{
HXLINE( 262)			Int byteOffset2 = (this1->byteOffset + (int)56);
HXDLIN( 262)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset2,((Float)((int)value & (int)(int)255) / (Float)(int)255));
            		}
HXLINE( 264)		{
HXLINE( 264)			Int byteOffset3 = this1->byteOffset;
HXDLIN( 264)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset3,(int)0);
            		}
HXLINE( 265)		{
HXLINE( 265)			Int byteOffset4 = (this1->byteOffset + (int)24);
HXDLIN( 265)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset4,(int)0);
            		}
HXLINE( 266)		{
HXLINE( 266)			Int byteOffset5 = (this1->byteOffset + (int)48);
HXDLIN( 266)			::__hxcpp_memory_set_float(this1->buffer->b,byteOffset5,(int)0);
            		}
HXLINE( 268)		return ::lime::math::_ColorMatrix::ColorMatrix_Impl__obj::get_color(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_color,return )

Float ColorMatrix_Impl__obj::get_greenMultiplier( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_greenMultiplier",0x76158c95,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenMultiplier","lime/math/ColorMatrix.hx",275,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 275)		Int byteOffset = (this1->byteOffset + (int)24);
HXDLIN( 275)		return ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_greenMultiplier,return )

Float ColorMatrix_Impl__obj::set_greenMultiplier( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_greenMultiplier",0xb2b27fa1,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenMultiplier","lime/math/ColorMatrix.hx",282,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 282)		Int byteOffset = (this1->byteOffset + (int)24);
HXDLIN( 282)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,value);
HXDLIN( 282)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_greenMultiplier,return )

Float ColorMatrix_Impl__obj::get_greenOffset( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_greenOffset",0xe71722a7,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_greenOffset","lime/math/ColorMatrix.hx",289,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 289)		Int byteOffset = (this1->byteOffset + (int)36);
HXDLIN( 289)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 289)		return (_hx_tmp * (int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_greenOffset,return )

Float ColorMatrix_Impl__obj::set_greenOffset( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_greenOffset",0xe2e29fb3,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_greenOffset","lime/math/ColorMatrix.hx",296,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 296)		HX_VARI( Float,val) = ((Float)value / (Float)(int)255);
HXDLIN( 296)		Int byteOffset = (this1->byteOffset + (int)36);
HXDLIN( 296)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
HXDLIN( 296)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_greenOffset,return )

Float ColorMatrix_Impl__obj::get_redMultiplier( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_redMultiplier",0x58c9a663,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_redMultiplier","lime/math/ColorMatrix.hx",303,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 303)		Int byteOffset = this1->byteOffset;
HXDLIN( 303)		return ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_redMultiplier,return )

Float ColorMatrix_Impl__obj::set_redMultiplier( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_redMultiplier",0x7c377e6f,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_redMultiplier","lime/math/ColorMatrix.hx",310,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 310)		Int byteOffset = this1->byteOffset;
HXDLIN( 310)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,value);
HXDLIN( 310)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_redMultiplier,return )

Float ColorMatrix_Impl__obj::get_redOffset( ::lime::utils::ArrayBufferView this1){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get_redOffset",0xd26abd75,"lime.math._ColorMatrix.ColorMatrix_Impl_.get_redOffset","lime/math/ColorMatrix.hx",317,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
HXLINE( 317)		Int byteOffset = (this1->byteOffset + (int)16);
HXDLIN( 317)		Float _hx_tmp = ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
HXDLIN( 317)		return (_hx_tmp * (int)255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ColorMatrix_Impl__obj,get_redOffset,return )

Float ColorMatrix_Impl__obj::set_redOffset( ::lime::utils::ArrayBufferView this1,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set_redOffset",0x17709f81,"lime.math._ColorMatrix.ColorMatrix_Impl_.set_redOffset","lime/math/ColorMatrix.hx",324,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(value,"value")
HXLINE( 324)		HX_VARI( Float,val) = ((Float)value / (Float)(int)255);
HXDLIN( 324)		Int byteOffset = (this1->byteOffset + (int)16);
HXDLIN( 324)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,val);
HXDLIN( 324)		return val;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,set_redOffset,return )

Float ColorMatrix_Impl__obj::get( ::lime::utils::ArrayBufferView this1,Int index){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","get",0xe0573df0,"lime.math._ColorMatrix.ColorMatrix_Impl_.get","lime/math/ColorMatrix.hx",331,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
HXLINE( 331)		Int byteOffset = (this1->byteOffset + (index * (int)4));
HXDLIN( 331)		return ::__hxcpp_memory_get_float(this1->buffer->b,byteOffset);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ColorMatrix_Impl__obj,get,return )

Float ColorMatrix_Impl__obj::set( ::lime::utils::ArrayBufferView this1,Int index,Float value){
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","set",0xe06058fc,"lime.math._ColorMatrix.ColorMatrix_Impl_.set","lime/math/ColorMatrix.hx",338,0x337975c7)
            	HX_STACK_ARG(this1,"this1")
            	HX_STACK_ARG(index,"index")
            	HX_STACK_ARG(value,"value")
HXLINE( 338)		Int byteOffset = (this1->byteOffset + (index * (int)4));
HXDLIN( 338)		::__hxcpp_memory_set_float(this1->buffer->b,byteOffset,value);
HXDLIN( 338)		return value;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(ColorMatrix_Impl__obj,set,return )


ColorMatrix_Impl__obj::ColorMatrix_Impl__obj()
{
}

bool ColorMatrix_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { outValue = clone_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { outValue = concat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"copyFrom") ) { outValue = copyFrom_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"identity") ) { outValue = identity_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"get_color") ) { outValue = get_color_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_color") ) { outValue = set_color_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getRedTable") ) { outValue = getRedTable_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getBlueTable") ) { outValue = getBlueTable_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getAlphaTable") ) { outValue = getAlphaTable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getGreenTable") ) { outValue = getGreenTable_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_redOffset") ) { outValue = get_redOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redOffset") ) { outValue = set_redOffset_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_blueOffset") ) { outValue = get_blueOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blueOffset") ) { outValue = set_blueOffset_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_alphaOffset") ) { outValue = get_alphaOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alphaOffset") ) { outValue = set_alphaOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_greenOffset") ) { outValue = get_greenOffset_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_greenOffset") ) { outValue = set_greenOffset_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"get_redMultiplier") ) { outValue = get_redMultiplier_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_redMultiplier") ) { outValue = set_redMultiplier_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_blueMultiplier") ) { outValue = get_blueMultiplier_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_blueMultiplier") ) { outValue = set_blueMultiplier_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"get_alphaMultiplier") ) { outValue = get_alphaMultiplier_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_alphaMultiplier") ) { outValue = set_alphaMultiplier_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_greenMultiplier") ) { outValue = get_greenMultiplier_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_greenMultiplier") ) { outValue = set_greenMultiplier_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__toFlashColorTransform") ) { outValue = _hx___toFlashColorTransform_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *ColorMatrix_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo ColorMatrix_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< Float >*/ ,(void *) &ColorMatrix_Impl__obj::_hx___identity,HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void ColorMatrix_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColorMatrix_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ColorMatrix_Impl__obj::_hx___identity,"__identity");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColorMatrix_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColorMatrix_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ColorMatrix_Impl__obj::_hx___identity,"__identity");
};

#endif

hx::Class ColorMatrix_Impl__obj::__mClass;

static ::String ColorMatrix_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("__identity","\x5e","\xb8","\x67","\x5c"),
	HX_HCSTRING("_new","\x61","\x15","\x1f","\x3f"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("concat","\x14","\x09","\xd0","\xc7"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("identity","\x3e","\x45","\x2f","\xb9"),
	HX_HCSTRING("getAlphaTable","\x06","\x68","\xfb","\x87"),
	HX_HCSTRING("getBlueTable","\x9e","\xd3","\x74","\xf2"),
	HX_HCSTRING("getGreenTable","\x81","\x12","\x1b","\x3c"),
	HX_HCSTRING("getRedTable","\xb3","\xab","\x23","\xa0"),
	HX_HCSTRING("__toFlashColorTransform","\x7e","\x99","\xc3","\xed"),
	HX_HCSTRING("get_alphaMultiplier","\x96","\x83","\x8d","\x25"),
	HX_HCSTRING("set_alphaMultiplier","\xa2","\x76","\x2a","\x62"),
	HX_HCSTRING("get_alphaOffset","\x28","\x45","\x25","\x91"),
	HX_HCSTRING("set_alphaOffset","\x34","\xc2","\xf0","\x8c"),
	HX_HCSTRING("get_blueMultiplier","\x84","\x13","\x30","\x6b"),
	HX_HCSTRING("set_blueMultiplier","\xf8","\x45","\xdf","\x47"),
	HX_HCSTRING("get_blueOffset","\x16","\xc6","\x29","\x31"),
	HX_HCSTRING("set_blueOffset","\x8a","\xae","\x49","\x51"),
	HX_HCSTRING("get_color","\xba","\xcd","\x05","\x8e"),
	HX_HCSTRING("set_color","\xc6","\xb9","\x56","\x71"),
	HX_HCSTRING("get_greenMultiplier","\x3b","\xfb","\x4a","\xfa"),
	HX_HCSTRING("set_greenMultiplier","\x47","\xee","\xe7","\x36"),
	HX_HCSTRING("get_greenOffset","\x4d","\xc6","\xba","\x78"),
	HX_HCSTRING("set_greenOffset","\x59","\x43","\x86","\x74"),
	HX_HCSTRING("get_redMultiplier","\x89","\xff","\x59","\x55"),
	HX_HCSTRING("set_redMultiplier","\x95","\xd7","\xc7","\x78"),
	HX_HCSTRING("get_redOffset","\x9b","\x0b","\x02","\x15"),
	HX_HCSTRING("set_redOffset","\xa7","\xed","\x07","\x5a"),
	HX_HCSTRING("get","\x96","\x80","\x4e","\x00"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	::String(null())
};

void ColorMatrix_Impl__obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("lime.math._ColorMatrix.ColorMatrix_Impl_","\xc8","\xe8","\xe8","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColorMatrix_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ColorMatrix_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColorMatrix_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< ColorMatrix_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColorMatrix_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorMatrix_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorMatrix_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColorMatrix_Impl__obj::__boot()
{
{
            	HX_STACK_FRAME("lime.math._ColorMatrix.ColorMatrix_Impl_","boot",0x68b87598,"lime.math._ColorMatrix.ColorMatrix_Impl_.boot","lime/math/ColorMatrix.hx",15,0x337975c7)
HXLINE(  15)		_hx___identity = ::Array_obj< Float >::fromData( _hx_array_data_4,20);
            	}
}

} // end namespace lime
} // end namespace math
} // end namespace _ColorMatrix
