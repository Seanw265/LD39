// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{

void DrawCommandBuffer_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","new",0xdc2c151e,"openfl._internal.renderer.DrawCommandBuffer.new","openfl/_internal/renderer/DrawCommandBuffer.hx",36,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE(  38)		this->types = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  40)		this->b = ::Array_obj< Bool >::__new(0);
HXLINE(  41)		this->i = ::Array_obj< Int >::__new(0);
HXLINE(  42)		this->f = ::Array_obj< Float >::__new(0);
HXLINE(  43)		this->o = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  44)		this->ff = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  45)		this->ii = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  46)		this->ts = ::Array_obj< ::Dynamic>::__new(0);
            	}

Dynamic DrawCommandBuffer_obj::__CreateEmpty() { return new DrawCommandBuffer_obj; }

hx::ObjectPtr< DrawCommandBuffer_obj > DrawCommandBuffer_obj::__new()
{
	hx::ObjectPtr< DrawCommandBuffer_obj > _hx_result = new DrawCommandBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DrawCommandBuffer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DrawCommandBuffer_obj > _hx_result = new DrawCommandBuffer_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::append( ::openfl::_internal::renderer::DrawCommandBuffer other){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","append",0x1b14a7dc,"openfl._internal.renderer.DrawCommandBuffer.append","openfl/_internal/renderer/DrawCommandBuffer.hx",51,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE(  53)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(other);
HXLINE(  55)		{
HXLINE(  55)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  55)			HX_VARI( ::Array< ::Dynamic>,_g1) = other->types;
HXDLIN(  55)			while((_g < _g1->length)){
HXLINE(  55)				HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(  55)				++_g;
HXLINE(  57)				Int _hx_tmp = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(  57)				switch((int)(_hx_tmp)){
            					case (int)0: {
HXLINE(  59)						{
HXLINE(  59)							Int _hx_tmp1 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  59)							switch((int)(_hx_tmp1)){
            								case (int)0: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  59)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  59)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  59)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  59)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  59)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  59)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  59)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  59)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  59)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  59)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  59)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  59)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  59)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  59)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  59)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  59)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(  59)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXDLIN(  59)						 ::openfl::display::BitmapData _hx_tmp2 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(  59)						 ::openfl::geom::Matrix _hx_tmp3 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(  59)						Bool _hx_tmp4 = c->buffer->b->__get(c->bPos);
HXDLIN(  59)						Bool _hx_tmp5 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(  59)						this->beginBitmapFill(_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5);
            					}
            					break;
            					case (int)1: {
HXLINE(  60)						{
HXLINE(  60)							Int _hx_tmp6 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  60)							switch((int)(_hx_tmp6)){
            								case (int)0: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  60)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  60)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  60)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  60)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  60)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  60)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  60)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  60)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  60)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  60)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  60)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  60)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  60)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  60)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  60)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  60)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(  60)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXDLIN(  60)						Int _hx_tmp7 = c1->buffer->i->__get(c1->iPos);
HXDLIN(  60)						Float _hx_tmp8 = c1->buffer->f->__get(c1->fPos);
HXDLIN(  60)						this->beginFill(_hx_tmp7,_hx_tmp8);
            					}
            					break;
            					case (int)2: {
HXLINE(  61)						{
HXLINE(  61)							Int _hx_tmp9 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  61)							switch((int)(_hx_tmp9)){
            								case (int)0: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  61)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  61)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  61)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  61)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  61)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  61)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  61)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  61)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  61)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  61)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  61)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  61)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  61)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  61)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  61)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  61)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(  61)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXDLIN(  61)						Int _hx_tmp10 = (c2->iiPos + (int)1);
HXDLIN(  61)						Int _hx_tmp11 = (c2->oPos + (int)1);
HXDLIN(  61)						Int _hx_tmp12 = (c2->oPos + (int)2);
HXDLIN(  61)						Int _hx_tmp13 = (c2->oPos + (int)3);
HXDLIN(  61)						this->beginGradientFill(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< Int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get(_hx_tmp10).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get(_hx_tmp11)) ),c2->buffer->o->__get(_hx_tmp12),c2->buffer->o->__get(_hx_tmp13),c2->buffer->f->__get(c2->fPos));
            					}
            					break;
            					case (int)3: {
HXLINE(  62)						{
HXLINE(  62)							Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  62)							switch((int)(_hx_tmp14)){
            								case (int)0: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  62)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  62)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  62)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  62)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  62)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  62)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  62)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  62)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  62)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  62)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  62)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  62)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  62)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  62)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  62)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  62)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(  62)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXDLIN(  62)						Float _hx_tmp15 = c3->buffer->f->__get(c3->fPos);
HXDLIN(  62)						Float _hx_tmp16 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(  62)						Float _hx_tmp17 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(  62)						Float _hx_tmp18 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(  62)						Float _hx_tmp19 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(  62)						Float _hx_tmp20 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(  62)						this->cubicCurveTo(_hx_tmp15,_hx_tmp16,_hx_tmp17,_hx_tmp18,_hx_tmp19,_hx_tmp20);
            					}
            					break;
            					case (int)4: {
HXLINE(  63)						{
HXLINE(  63)							Int _hx_tmp21 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  63)							switch((int)(_hx_tmp21)){
            								case (int)0: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  63)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  63)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  63)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  63)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  63)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  63)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  63)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  63)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  63)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  63)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  63)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  63)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  63)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  63)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  63)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  63)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(  63)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXDLIN(  63)						Float _hx_tmp22 = c4->buffer->f->__get(c4->fPos);
HXDLIN(  63)						Float _hx_tmp23 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(  63)						Float _hx_tmp24 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(  63)						Float _hx_tmp25 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(  63)						this->curveTo(_hx_tmp22,_hx_tmp23,_hx_tmp24,_hx_tmp25);
            					}
            					break;
            					case (int)5: {
HXLINE(  64)						{
HXLINE(  64)							Int _hx_tmp26 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  64)							switch((int)(_hx_tmp26)){
            								case (int)0: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  64)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  64)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  64)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  64)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  64)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  64)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  64)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  64)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  64)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  64)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  64)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  64)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  64)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  64)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  64)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  64)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(  64)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXDLIN(  64)						Float _hx_tmp27 = c5->buffer->f->__get(c5->fPos);
HXDLIN(  64)						Float _hx_tmp28 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(  64)						Float _hx_tmp29 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(  64)						this->drawCircle(_hx_tmp27,_hx_tmp28,_hx_tmp29);
            					}
            					break;
            					case (int)6: {
HXLINE(  65)						{
HXLINE(  65)							Int _hx_tmp30 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  65)							switch((int)(_hx_tmp30)){
            								case (int)0: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  65)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  65)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  65)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  65)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  65)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  65)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  65)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  65)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  65)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  65)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  65)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  65)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  65)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  65)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  65)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  65)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(  65)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXDLIN(  65)						Float _hx_tmp31 = c6->buffer->f->__get(c6->fPos);
HXDLIN(  65)						Float _hx_tmp32 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(  65)						Float _hx_tmp33 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(  65)						Float _hx_tmp34 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(  65)						this->drawEllipse(_hx_tmp31,_hx_tmp32,_hx_tmp33,_hx_tmp34);
            					}
            					break;
            					case (int)7: {
HXLINE(  66)						{
HXLINE(  66)							Int _hx_tmp35 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  66)							switch((int)(_hx_tmp35)){
            								case (int)0: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  66)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  66)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  66)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  66)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  66)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  66)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  66)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  66)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  66)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  66)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  66)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  66)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  66)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  66)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  66)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  66)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_PATH_dyn();
HXDLIN(  66)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXDLIN(  66)						Int _hx_tmp36 = (c7->oPos + (int)1);
HXDLIN(  66)						Int _hx_tmp37 = (c7->oPos + (int)2);
HXDLIN(  66)						this->drawPath(( (::Array< Int >)(c7->buffer->o->__get(c7->oPos)) ),( (::Array< Float >)(c7->buffer->o->__get(_hx_tmp36)) ),( (::String)(c7->buffer->o->__get(_hx_tmp37)) ));
            					}
            					break;
            					case (int)8: {
HXLINE(  67)						{
HXLINE(  67)							Int _hx_tmp38 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  67)							switch((int)(_hx_tmp38)){
            								case (int)0: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  67)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  67)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  67)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  67)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  67)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  67)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  67)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  67)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  67)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  67)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  67)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  67)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  67)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  67)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  67)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  67)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(  67)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXDLIN(  67)						Float _hx_tmp39 = c8->buffer->f->__get(c8->fPos);
HXDLIN(  67)						Float _hx_tmp40 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(  67)						Float _hx_tmp41 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(  67)						Float _hx_tmp42 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(  67)						this->drawRect(_hx_tmp39,_hx_tmp40,_hx_tmp41,_hx_tmp42);
            					}
            					break;
            					case (int)9: {
HXLINE(  68)						{
HXLINE(  68)							Int _hx_tmp43 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  68)							switch((int)(_hx_tmp43)){
            								case (int)0: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  68)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  68)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  68)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  68)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  68)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  68)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  68)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  68)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  68)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  68)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  68)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  68)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  68)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  68)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  68)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  68)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(  68)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXDLIN(  68)						Float _hx_tmp44 = c9->buffer->f->__get(c9->fPos);
HXDLIN(  68)						Float _hx_tmp45 = c9->buffer->f->__get((c9->fPos + (int)1));
HXDLIN(  68)						Float _hx_tmp46 = c9->buffer->f->__get((c9->fPos + (int)2));
HXDLIN(  68)						Float _hx_tmp47 = c9->buffer->f->__get((c9->fPos + (int)3));
HXDLIN(  68)						Float _hx_tmp48 = c9->buffer->f->__get((c9->fPos + (int)4));
HXDLIN(  68)						this->drawRoundRect(_hx_tmp44,_hx_tmp45,_hx_tmp46,_hx_tmp47,_hx_tmp48,c9->buffer->o->__get(c9->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE(  69)						{
HXLINE(  69)							Int _hx_tmp49 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  69)							switch((int)(_hx_tmp49)){
            								case (int)0: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  69)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  69)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  69)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  69)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  69)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  69)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  69)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  69)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  69)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  69)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  69)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  69)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  69)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  69)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  69)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  69)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TILES_dyn();
HXDLIN(  69)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXDLIN(  69)						 ::openfl::display::Tilesheet _hx_tmp50 = c10->buffer->ts->__get(c10->tsPos).StaticCast<  ::openfl::display::Tilesheet >();
HXDLIN(  69)						::Array< Float > _hx_tmp51 = c10->buffer->ff->__get(c10->ffPos).StaticCast< ::Array< Float > >();
HXDLIN(  69)						Bool _hx_tmp52 = c10->buffer->b->__get(c10->bPos);
HXDLIN(  69)						Int _hx_tmp53 = c10->buffer->i->__get(c10->iPos);
HXDLIN(  69)						 ::openfl::display::Shader _hx_tmp54 = ( ( ::openfl::display::Shader)(c10->buffer->o->__get(c10->oPos)) );
HXDLIN(  69)						Int _hx_tmp55 = c10->buffer->i->__get((c10->iPos + (int)1));
HXDLIN(  69)						this->drawTiles(_hx_tmp50,_hx_tmp51,_hx_tmp52,_hx_tmp53,_hx_tmp54,_hx_tmp55);
            					}
            					break;
            					case (int)11: {
HXLINE(  70)						{
HXLINE(  70)							Int _hx_tmp56 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  70)							switch((int)(_hx_tmp56)){
            								case (int)0: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  70)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  70)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  70)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  70)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  70)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  70)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  70)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  70)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  70)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  70)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  70)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  70)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  70)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  70)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  70)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  70)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(  70)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXDLIN(  70)						Int _hx_tmp57 = (c11->oPos + (int)1);
HXDLIN(  70)						Int _hx_tmp58 = (c11->oPos + (int)2);
HXDLIN(  70)						Int _hx_tmp59 = (c11->oPos + (int)3);
HXDLIN(  70)						this->drawTriangles(( (::Array< Float >)(c11->buffer->o->__get(c11->oPos)) ),( (::Array< Int >)(c11->buffer->o->__get(_hx_tmp57)) ),( (::Array< Float >)(c11->buffer->o->__get(_hx_tmp58)) ),c11->buffer->o->__get(_hx_tmp59));
            					}
            					break;
            					case (int)12: {
HXLINE(  71)						{
HXLINE(  71)							Int _hx_tmp60 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  71)							switch((int)(_hx_tmp60)){
            								case (int)0: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  71)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  71)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  71)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  71)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  71)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  71)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  71)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  71)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  71)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  71)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  71)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  71)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  71)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  71)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  71)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  71)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXDLIN(  71)						this->endFill();
            					}
            					break;
            					case (int)13: {
HXLINE(  72)						{
HXLINE(  72)							Int _hx_tmp61 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  72)							switch((int)(_hx_tmp61)){
            								case (int)0: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  72)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  72)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  72)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  72)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  72)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  72)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  72)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  72)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  72)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  72)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  72)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  72)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  72)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  72)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  72)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  72)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(  72)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXDLIN(  72)						Int _hx_tmp62 = (c12->oPos + (int)1);
HXDLIN(  72)						Int _hx_tmp63 = (c12->bPos + (int)1);
HXDLIN(  72)						this->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c12->buffer->o->__get(c12->oPos)) ),( ( ::openfl::geom::Matrix)(c12->buffer->o->__get(_hx_tmp62)) ),c12->buffer->b->__get(c12->bPos),c12->buffer->b->__get(_hx_tmp63));
            					}
            					break;
            					case (int)14: {
HXLINE(  73)						{
HXLINE(  73)							Int _hx_tmp64 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  73)							switch((int)(_hx_tmp64)){
            								case (int)0: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  73)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  73)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  73)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  73)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  73)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  73)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  73)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  73)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  73)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  73)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  73)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  73)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  73)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  73)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  73)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  73)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(  73)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXDLIN(  73)						Int _hx_tmp65 = (c13->iiPos + (int)1);
HXDLIN(  73)						Int _hx_tmp66 = (c13->oPos + (int)1);
HXDLIN(  73)						Int _hx_tmp67 = (c13->oPos + (int)2);
HXDLIN(  73)						Int _hx_tmp68 = (c13->oPos + (int)3);
HXDLIN(  73)						this->lineGradientStyle(c13->buffer->o->__get(c13->oPos),c13->buffer->ii->__get(c13->iiPos).StaticCast< ::Array< Int > >(),c13->buffer->ff->__get(c13->ffPos).StaticCast< ::Array< Float > >(),c13->buffer->ii->__get(_hx_tmp65).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c13->buffer->o->__get(_hx_tmp66)) ),c13->buffer->o->__get(_hx_tmp67),c13->buffer->o->__get(_hx_tmp68),c13->buffer->f->__get(c13->fPos));
            					}
            					break;
            					case (int)15: {
HXLINE(  74)						{
HXLINE(  74)							Int _hx_tmp69 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  74)							switch((int)(_hx_tmp69)){
            								case (int)0: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  74)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  74)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  74)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  74)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  74)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  74)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  74)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  74)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  74)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  74)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  74)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  74)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  74)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  74)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  74)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  74)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(  74)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXDLIN(  74)						Int _hx_tmp70 = (c14->oPos + (int)1);
HXDLIN(  74)						Int _hx_tmp71 = (c14->oPos + (int)2);
HXDLIN(  74)						Int _hx_tmp72 = (c14->oPos + (int)3);
HXDLIN(  74)						Int _hx_tmp73 = (c14->fPos + (int)1);
HXDLIN(  74)						this->lineStyle(c14->buffer->o->__get(c14->oPos),c14->buffer->i->__get(c14->iPos),c14->buffer->f->__get(c14->fPos),c14->buffer->b->__get(c14->bPos),c14->buffer->o->__get(_hx_tmp70),c14->buffer->o->__get(_hx_tmp71),c14->buffer->o->__get(_hx_tmp72),c14->buffer->f->__get(_hx_tmp73));
            					}
            					break;
            					case (int)16: {
HXLINE(  75)						{
HXLINE(  75)							Int _hx_tmp74 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  75)							switch((int)(_hx_tmp74)){
            								case (int)0: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  75)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  75)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  75)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  75)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  75)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  75)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  75)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  75)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  75)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  75)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  75)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  75)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  75)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  75)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  75)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  75)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(  75)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c15,"c") = data;
HXDLIN(  75)						Float _hx_tmp75 = c15->buffer->f->__get(c15->fPos);
HXDLIN(  75)						Float _hx_tmp76 = c15->buffer->f->__get((c15->fPos + (int)1));
HXDLIN(  75)						this->lineTo(_hx_tmp75,_hx_tmp76);
            					}
            					break;
            					case (int)17: {
HXLINE(  76)						{
HXLINE(  76)							Int _hx_tmp77 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  76)							switch((int)(_hx_tmp77)){
            								case (int)0: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  76)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  76)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  76)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  76)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  76)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  76)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  76)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  76)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  76)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  76)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  76)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  76)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  76)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  76)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  76)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  76)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(  76)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c16,"c") = data;
HXDLIN(  76)						Float _hx_tmp78 = c16->buffer->f->__get(c16->fPos);
HXDLIN(  76)						Float _hx_tmp79 = c16->buffer->f->__get((c16->fPos + (int)1));
HXDLIN(  76)						this->moveTo(_hx_tmp78,_hx_tmp79);
            					}
            					break;
            					case (int)18: {
HXLINE(  77)						{
HXLINE(  77)							Int _hx_tmp80 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(  77)							switch((int)(_hx_tmp80)){
            								case (int)0: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  77)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(  77)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  77)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  77)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)5);
HXDLIN(  77)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(  77)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->bPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->iPos,(int)2);
HXDLIN(  77)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)2);
HXDLIN(  77)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  77)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(  77)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)4);
HXDLIN(  77)									hx::AddEq(data->iPos,(int)1);
HXDLIN(  77)									hx::AddEq(data->fPos,(int)2);
HXDLIN(  77)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(  77)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(  77)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(  77)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn();
HXDLIN(  77)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c17,"c") = data;
HXDLIN(  77)						this->overrideMatrix(( ( ::openfl::geom::Matrix)(c17->buffer->o->__get(c17->oPos)) ));
            					}
            					break;
            					default:{
            					}
            				}
            			}
            		}
HXLINE(  84)		data->destroy();
HXLINE(  85)		return other;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandBuffer_obj,append,return )

void DrawCommandBuffer_obj::beginBitmapFill( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,Bool repeat,Bool smooth){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","beginBitmapFill",0x90133359,"openfl._internal.renderer.DrawCommandBuffer.beginBitmapFill","openfl/_internal/renderer/DrawCommandBuffer.hx",90,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE(  92)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn());
HXLINE(  93)		this->o->push(bitmap);
HXLINE(  94)		this->o->push(matrix);
HXLINE(  95)		this->b->push(repeat);
HXLINE(  96)		this->b->push(smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,beginBitmapFill,(void))

void DrawCommandBuffer_obj::beginFill(Int color,Float alpha){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","beginFill",0x6ae7148a,"openfl._internal.renderer.DrawCommandBuffer.beginFill","openfl/_internal/renderer/DrawCommandBuffer.hx",100,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
HXLINE( 102)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn());
HXLINE( 103)		this->i->push(color);
HXLINE( 104)		this->f->push(alpha);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,beginFill,(void))

void DrawCommandBuffer_obj::beginGradientFill( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","beginGradientFill",0x7d0b119a,"openfl._internal.renderer.DrawCommandBuffer.beginGradientFill","openfl/_internal/renderer/DrawCommandBuffer.hx",109,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 111)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn());
HXLINE( 112)		this->o->push(type);
HXLINE( 113)		this->ii->push(colors);
HXLINE( 114)		this->ff->push(alphas);
HXLINE( 115)		this->ii->push(ratios);
HXLINE( 116)		this->o->push(matrix);
HXLINE( 117)		this->o->push(spreadMethod);
HXLINE( 118)		this->o->push(interpolationMethod);
HXLINE( 119)		this->f->push(focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,beginGradientFill,(void))

void DrawCommandBuffer_obj::clear(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","clear",0xfe5ce1cb,"openfl._internal.renderer.DrawCommandBuffer.clear","openfl/_internal/renderer/DrawCommandBuffer.hx",124,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 126)		this->types->removeRange((int)0,this->types->length);
HXLINE( 128)		this->b->removeRange((int)0,this->b->length);
HXLINE( 129)		this->i->removeRange((int)0,this->i->length);
HXLINE( 130)		this->f->removeRange((int)0,this->f->length);
HXLINE( 131)		this->o->splice((int)0,this->o->get_length());
HXLINE( 132)		this->ff->removeRange((int)0,this->ff->length);
HXLINE( 133)		this->ii->removeRange((int)0,this->ii->length);
HXLINE( 134)		this->ts->removeRange((int)0,this->ts->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,clear,(void))

 ::openfl::_internal::renderer::DrawCommandBuffer DrawCommandBuffer_obj::copy(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","copy",0xc3289d37,"openfl._internal.renderer.DrawCommandBuffer.copy","openfl/_internal/renderer/DrawCommandBuffer.hx",139,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 141)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandBuffer,copy) =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
HXLINE( 142)		copy->append(hx::ObjectPtr<OBJ_>(this));
HXLINE( 143)		return copy;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,copy,return )

void DrawCommandBuffer_obj::cubicCurveTo(Float controlX1,Float controlY1,Float controlX2,Float controlY2,Float anchorX,Float anchorY){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","cubicCurveTo",0x96d43b62,"openfl._internal.renderer.DrawCommandBuffer.cubicCurveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",148,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX1,"controlX1")
            	HX_STACK_ARG(controlY1,"controlY1")
            	HX_STACK_ARG(controlX2,"controlX2")
            	HX_STACK_ARG(controlY2,"controlY2")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 150)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn());
HXLINE( 151)		this->f->push(controlX1);
HXLINE( 152)		this->f->push(controlY1);
HXLINE( 153)		this->f->push(controlX2);
HXLINE( 154)		this->f->push(controlY2);
HXLINE( 155)		this->f->push(anchorX);
HXLINE( 156)		this->f->push(anchorY);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,cubicCurveTo,(void))

void DrawCommandBuffer_obj::curveTo(Float controlX,Float controlY,Float anchorX,Float anchorY){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","curveTo",0x1bf4dbc8,"openfl._internal.renderer.DrawCommandBuffer.curveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",160,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(controlX,"controlX")
            	HX_STACK_ARG(controlY,"controlY")
            	HX_STACK_ARG(anchorX,"anchorX")
            	HX_STACK_ARG(anchorY,"anchorY")
HXLINE( 162)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn());
HXLINE( 163)		this->f->push(controlX);
HXLINE( 164)		this->f->push(controlY);
HXLINE( 165)		this->f->push(anchorX);
HXLINE( 166)		this->f->push(anchorY);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,curveTo,(void))

void DrawCommandBuffer_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","destroy",0x71f2a8b8,"openfl._internal.renderer.DrawCommandBuffer.destroy","openfl/_internal/renderer/DrawCommandBuffer.hx",171,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 173)		this->clear();
HXLINE( 175)		this->types = null();
HXLINE( 177)		this->b = null();
HXLINE( 178)		this->i = null();
HXLINE( 179)		this->f = null();
HXLINE( 180)		this->o = null();
HXLINE( 181)		this->ff = null();
HXLINE( 182)		this->ii = null();
HXLINE( 183)		this->ts = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,destroy,(void))

void DrawCommandBuffer_obj::drawCircle(Float x,Float y,Float radius){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawCircle",0x40b9dc36,"openfl._internal.renderer.DrawCommandBuffer.drawCircle","openfl/_internal/renderer/DrawCommandBuffer.hx",188,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(radius,"radius")
HXLINE( 190)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn());
HXLINE( 191)		this->f->push(x);
HXLINE( 192)		this->f->push(y);
HXLINE( 193)		this->f->push(radius);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DrawCommandBuffer_obj,drawCircle,(void))

void DrawCommandBuffer_obj::drawEllipse(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawEllipse",0x77b6b7f8,"openfl._internal.renderer.DrawCommandBuffer.drawEllipse","openfl/_internal/renderer/DrawCommandBuffer.hx",198,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 200)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn());
HXLINE( 201)		this->f->push(x);
HXLINE( 202)		this->f->push(y);
HXLINE( 203)		this->f->push(width);
HXLINE( 204)		this->f->push(height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawEllipse,(void))

void DrawCommandBuffer_obj::drawPath(::Array< Int > commands,::Array< Float > data,::String winding){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawPath",0xd03b5a4b,"openfl._internal.renderer.DrawCommandBuffer.drawPath","openfl/_internal/renderer/DrawCommandBuffer.hx",209,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(commands,"commands")
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(winding,"winding")
HXLINE( 211)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_PATH_dyn());
HXLINE( 212)		this->o->push(commands);
HXLINE( 213)		this->o->push(data);
HXLINE( 214)		this->o->push(winding);
            	}


HX_DEFINE_DYNAMIC_FUNC3(DrawCommandBuffer_obj,drawPath,(void))

void DrawCommandBuffer_obj::drawRect(Float x,Float y,Float width,Float height){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawRect",0xd190c1ca,"openfl._internal.renderer.DrawCommandBuffer.drawRect","openfl/_internal/renderer/DrawCommandBuffer.hx",219,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE( 221)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn());
HXLINE( 222)		this->f->push(x);
HXLINE( 223)		this->f->push(y);
HXLINE( 224)		this->f->push(width);
HXLINE( 225)		this->f->push(height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawRect,(void))

void DrawCommandBuffer_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawRoundRect",0xb613a22c,"openfl._internal.renderer.DrawCommandBuffer.drawRoundRect","openfl/_internal/renderer/DrawCommandBuffer.hx",229,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 231)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn());
HXLINE( 232)		this->f->push(x);
HXLINE( 233)		this->f->push(y);
HXLINE( 234)		this->f->push(width);
HXLINE( 235)		this->f->push(height);
HXLINE( 236)		this->f->push(ellipseWidth);
HXLINE( 237)		this->o->push(ellipseHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,drawRoundRect,(void))

void DrawCommandBuffer_obj::drawTiles( ::openfl::display::Tilesheet sheet,::Array< Float > tileData,Bool smooth,Int flags, ::openfl::display::Shader shader,Int count){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawTiles",0xb6919a1f,"openfl._internal.renderer.DrawCommandBuffer.drawTiles","openfl/_internal/renderer/DrawCommandBuffer.hx",242,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sheet,"sheet")
            	HX_STACK_ARG(tileData,"tileData")
            	HX_STACK_ARG(smooth,"smooth")
            	HX_STACK_ARG(flags,"flags")
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(count,"count")
HXLINE( 244)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TILES_dyn());
HXLINE( 245)		this->ts->push(sheet);
HXLINE( 246)		this->ff->push(tileData);
HXLINE( 247)		this->b->push(smooth);
HXLINE( 248)		this->i->push(flags);
HXLINE( 249)		this->o->push(shader);
HXLINE( 250)		this->i->push(count);
            	}


HX_DEFINE_DYNAMIC_FUNC6(DrawCommandBuffer_obj,drawTiles,(void))

void DrawCommandBuffer_obj::drawTriangles(::Array< Float > vertices,::Array< Int > indices,::Array< Float > uvtData, ::Dynamic culling){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","drawTriangles",0xb1d12245,"openfl._internal.renderer.DrawCommandBuffer.drawTriangles","openfl/_internal/renderer/DrawCommandBuffer.hx",255,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(vertices,"vertices")
            	HX_STACK_ARG(indices,"indices")
            	HX_STACK_ARG(uvtData,"uvtData")
            	HX_STACK_ARG(culling,"culling")
HXLINE( 257)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn());
HXLINE( 258)		this->o->push(vertices);
HXLINE( 259)		this->o->push(indices);
HXLINE( 260)		this->o->push(uvtData);
HXLINE( 261)		this->o->push(culling);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,drawTriangles,(void))

void DrawCommandBuffer_obj::endFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","endFill",0x734d03bc,"openfl._internal.renderer.DrawCommandBuffer.endFill","openfl/_internal/renderer/DrawCommandBuffer.hx",268,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 268)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,endFill,(void))

void DrawCommandBuffer_obj::lineBitmapStyle( ::openfl::display::BitmapData bitmap, ::openfl::geom::Matrix matrix,Bool repeat,Bool smooth){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineBitmapStyle",0x6b2ca8ec,"openfl._internal.renderer.DrawCommandBuffer.lineBitmapStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",273,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmap,"bitmap")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(repeat,"repeat")
            	HX_STACK_ARG(smooth,"smooth")
HXLINE( 275)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn());
HXLINE( 276)		this->o->push(bitmap);
HXLINE( 277)		this->o->push(matrix);
HXLINE( 278)		this->b->push(repeat);
HXLINE( 279)		this->b->push(smooth);
            	}


HX_DEFINE_DYNAMIC_FUNC4(DrawCommandBuffer_obj,lineBitmapStyle,(void))

void DrawCommandBuffer_obj::lineGradientStyle( ::Dynamic type,::Array< Int > colors,::Array< Float > alphas,::Array< Int > ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineGradientStyle",0x10f9f9cb,"openfl._internal.renderer.DrawCommandBuffer.lineGradientStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",284,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE( 286)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn());
HXLINE( 287)		this->o->push(type);
HXLINE( 288)		this->ii->push(colors);
HXLINE( 289)		this->ff->push(alphas);
HXLINE( 290)		this->ii->push(ratios);
HXLINE( 291)		this->o->push(matrix);
HXLINE( 292)		this->o->push(spreadMethod);
HXLINE( 293)		this->o->push(interpolationMethod);
HXLINE( 294)		this->f->push(focalPointRatio);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,lineGradientStyle,(void))

void DrawCommandBuffer_obj::lineStyle( ::Dynamic thickness,Int color,Float alpha,Bool pixelHinting, ::Dynamic scaleMode, ::Dynamic caps, ::Dynamic joints,Float miterLimit){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineStyle",0xa96a0fdb,"openfl._internal.renderer.DrawCommandBuffer.lineStyle","openfl/_internal/renderer/DrawCommandBuffer.hx",299,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(thickness,"thickness")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(alpha,"alpha")
            	HX_STACK_ARG(pixelHinting,"pixelHinting")
            	HX_STACK_ARG(scaleMode,"scaleMode")
            	HX_STACK_ARG(caps,"caps")
            	HX_STACK_ARG(joints,"joints")
            	HX_STACK_ARG(miterLimit,"miterLimit")
HXLINE( 301)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn());
HXLINE( 302)		this->o->push(thickness);
HXLINE( 303)		this->i->push(color);
HXLINE( 304)		this->f->push(alpha);
HXLINE( 305)		this->b->push(pixelHinting);
HXLINE( 306)		this->o->push(scaleMode);
HXLINE( 307)		this->o->push(caps);
HXLINE( 308)		this->o->push(joints);
HXLINE( 309)		this->f->push(miterLimit);
            	}


HX_DEFINE_DYNAMIC_FUNC8(DrawCommandBuffer_obj,lineStyle,(void))

void DrawCommandBuffer_obj::lineTo(Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","lineTo",0x77e10c91,"openfl._internal.renderer.DrawCommandBuffer.lineTo","openfl/_internal/renderer/DrawCommandBuffer.hx",314,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 316)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn());
HXLINE( 317)		this->f->push(x);
HXLINE( 318)		this->f->push(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,lineTo,(void))

void DrawCommandBuffer_obj::moveTo(Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","moveTo",0x57ed98ee,"openfl._internal.renderer.DrawCommandBuffer.moveTo","openfl/_internal/renderer/DrawCommandBuffer.hx",323,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 325)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn());
HXLINE( 326)		this->f->push(x);
HXLINE( 327)		this->f->push(y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(DrawCommandBuffer_obj,moveTo,(void))

void DrawCommandBuffer_obj::overrideMatrix( ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","overrideMatrix",0xe20325af,"openfl._internal.renderer.DrawCommandBuffer.overrideMatrix","openfl/_internal/renderer/DrawCommandBuffer.hx",332,0xbc8e6e11)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 334)		this->types->push(::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn());
HXLINE( 335)		this->o->push(matrix);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DrawCommandBuffer_obj,overrideMatrix,(void))

Int DrawCommandBuffer_obj::get_length(){
            	HX_STACK_FRAME("openfl._internal.renderer.DrawCommandBuffer","get_length",0x3877f3b1,"openfl._internal.renderer.DrawCommandBuffer.get_length","openfl/_internal/renderer/DrawCommandBuffer.hx",349,0xbc8e6e11)
            	HX_STACK_THIS(this)
HXLINE( 349)		return this->types->length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DrawCommandBuffer_obj,get_length,return )


DrawCommandBuffer_obj::DrawCommandBuffer_obj()
{
}

void DrawCommandBuffer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DrawCommandBuffer);
	HX_MARK_MEMBER_NAME(types,"types");
	HX_MARK_MEMBER_NAME(b,"b");
	HX_MARK_MEMBER_NAME(f,"f");
	HX_MARK_MEMBER_NAME(ff,"ff");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(ii,"ii");
	HX_MARK_MEMBER_NAME(o,"o");
	HX_MARK_MEMBER_NAME(ts,"ts");
	HX_MARK_END_CLASS();
}

void DrawCommandBuffer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(types,"types");
	HX_VISIT_MEMBER_NAME(b,"b");
	HX_VISIT_MEMBER_NAME(f,"f");
	HX_VISIT_MEMBER_NAME(ff,"ff");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(ii,"ii");
	HX_VISIT_MEMBER_NAME(o,"o");
	HX_VISIT_MEMBER_NAME(ts,"ts");
}

hx::Val DrawCommandBuffer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { return hx::Val( b); }
		if (HX_FIELD_EQ(inName,"f") ) { return hx::Val( f); }
		if (HX_FIELD_EQ(inName,"i") ) { return hx::Val( i); }
		if (HX_FIELD_EQ(inName,"o") ) { return hx::Val( o); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ff") ) { return hx::Val( ff); }
		if (HX_FIELD_EQ(inName,"ii") ) { return hx::Val( ii); }
		if (HX_FIELD_EQ(inName,"ts") ) { return hx::Val( ts); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { return hx::Val( types); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_length()); }
		if (HX_FIELD_EQ(inName,"append") ) { return hx::Val( append_dyn()); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return hx::Val( lineTo_dyn()); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return hx::Val( moveTo_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curveTo") ) { return hx::Val( curveTo_dyn()); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		if (HX_FIELD_EQ(inName,"endFill") ) { return hx::Val( endFill_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawPath") ) { return hx::Val( drawPath_dyn()); }
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"beginFill") ) { return hx::Val( beginFill_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTiles") ) { return hx::Val( drawTiles_dyn()); }
		if (HX_FIELD_EQ(inName,"lineStyle") ) { return hx::Val( lineStyle_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawCircle") ) { return hx::Val( drawCircle_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"drawEllipse") ) { return hx::Val( drawEllipse_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { return hx::Val( cubicCurveTo_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { return hx::Val( drawRoundRect_dyn()); }
		if (HX_FIELD_EQ(inName,"drawTriangles") ) { return hx::Val( drawTriangles_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { return hx::Val( overrideMatrix_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"beginBitmapFill") ) { return hx::Val( beginBitmapFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineBitmapStyle") ) { return hx::Val( lineBitmapStyle_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"beginGradientFill") ) { return hx::Val( beginGradientFill_dyn()); }
		if (HX_FIELD_EQ(inName,"lineGradientStyle") ) { return hx::Val( lineGradientStyle_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DrawCommandBuffer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< ::Array< Bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< ::Array< Int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"o") ) { o=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ff") ) { ff=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ii") ) { ii=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ts") ) { ts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"types") ) { types=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DrawCommandBuffer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"));
	outFields->push(HX_HCSTRING("b","\x62","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("f","\x66","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ff","\x40","\x59","\x00","\x00"));
	outFields->push(HX_HCSTRING("i","\x69","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00"));
	outFields->push(HX_HCSTRING("o","\x6f","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("ts","\x7f","\x65","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DrawCommandBuffer_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,types),HX_HCSTRING("types","\x79","\x70","\xcb","\x1a")},
	{hx::fsObject /*Array< bool >*/ ,(int)offsetof(DrawCommandBuffer_obj,b),HX_HCSTRING("b","\x62","\x00","\x00","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(DrawCommandBuffer_obj,f),HX_HCSTRING("f","\x66","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ff),HX_HCSTRING("ff","\x40","\x59","\x00","\x00")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(DrawCommandBuffer_obj,i),HX_HCSTRING("i","\x69","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ii),HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(DrawCommandBuffer_obj,o),HX_HCSTRING("o","\x6f","\x00","\x00","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DrawCommandBuffer_obj,ts),HX_HCSTRING("ts","\x7f","\x65","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DrawCommandBuffer_obj_sStaticStorageInfo = 0;
#endif

static ::String DrawCommandBuffer_obj_sMemberFields[] = {
	HX_HCSTRING("types","\x79","\x70","\xcb","\x1a"),
	HX_HCSTRING("b","\x62","\x00","\x00","\x00"),
	HX_HCSTRING("f","\x66","\x00","\x00","\x00"),
	HX_HCSTRING("ff","\x40","\x59","\x00","\x00"),
	HX_HCSTRING("i","\x69","\x00","\x00","\x00"),
	HX_HCSTRING("ii","\xe0","\x5b","\x00","\x00"),
	HX_HCSTRING("o","\x6f","\x00","\x00","\x00"),
	HX_HCSTRING("ts","\x7f","\x65","\x00","\x00"),
	HX_HCSTRING("append","\xda","\xe1","\xd3","\x8f"),
	HX_HCSTRING("beginBitmapFill","\x9b","\xc9","\x07","\x6a"),
	HX_HCSTRING("beginFill","\x4c","\xad","\x95","\x8c"),
	HX_HCSTRING("beginGradientFill","\x5c","\x3c","\x03","\x2e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("drawCircle","\x34","\xed","\xd0","\x97"),
	HX_HCSTRING("drawEllipse","\x3a","\x85","\xce","\x54"),
	HX_HCSTRING("drawPath","\xc9","\x8f","\xbb","\x5e"),
	HX_HCSTRING("drawRect","\x48","\xf7","\x10","\x60"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("drawTiles","\xe1","\x32","\x40","\xd8"),
	HX_HCSTRING("drawTriangles","\x07","\x44","\x68","\xde"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("lineBitmapStyle","\x2e","\x3f","\x21","\x45"),
	HX_HCSTRING("lineGradientStyle","\x8d","\x24","\xf2","\xc1"),
	HX_HCSTRING("lineStyle","\x9d","\xa8","\x18","\xcb"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	::String(null()) };

static void DrawCommandBuffer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DrawCommandBuffer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DrawCommandBuffer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DrawCommandBuffer_obj::__mClass,"__mClass");
};

#endif

hx::Class DrawCommandBuffer_obj::__mClass;

void DrawCommandBuffer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.DrawCommandBuffer","\x2c","\xee","\x3f","\x7e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DrawCommandBuffer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DrawCommandBuffer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DrawCommandBuffer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DrawCommandBuffer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DrawCommandBuffer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DrawCommandBuffer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
