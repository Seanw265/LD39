// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_openfl__internal_renderer_GraphicsPaths
#include <openfl/_internal/renderer/GraphicsPaths.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{

void GraphicsPaths_obj::__construct() { }

Dynamic GraphicsPaths_obj::__CreateEmpty() { return new GraphicsPaths_obj; }

hx::ObjectPtr< GraphicsPaths_obj > GraphicsPaths_obj::__new()
{
	hx::ObjectPtr< GraphicsPaths_obj > _hx_result = new GraphicsPaths_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic GraphicsPaths_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GraphicsPaths_obj > _hx_result = new GraphicsPaths_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float GraphicsPaths_obj::SIN45;

Float GraphicsPaths_obj::TAN22;

void GraphicsPaths_obj::ellipse(::Array< Float > points,Float x,Float y,Float rx,Float ry,Int segmentCount){
            	HX_STACK_FRAME("openfl._internal.renderer.GraphicsPaths","ellipse",0xbdd66678,"openfl._internal.renderer.GraphicsPaths.ellipse","openfl/_internal/renderer/GraphicsPaths.hx",16,0x5cb26635)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(rx,"rx")
            	HX_STACK_ARG(ry,"ry")
            	HX_STACK_ARG(segmentCount,"segmentCount")
HXLINE(  18)		HX_VARI( Float,seg) = ((Float)(::Math_obj::PI * (int)2) / (Float)segmentCount);
HXLINE(  20)		{
HXLINE(  20)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(  20)			HX_VARI( Int,_g) = (segmentCount + (int)1);
HXDLIN(  20)			while((_g1 < _g)){
HXLINE(  20)				HX_VARI( Int,i) = _g1++;
HXLINE(  22)				Float _hx_tmp = ::Math_obj::sin((seg * i));
HXDLIN(  22)				points->push((x + (_hx_tmp * rx)));
HXLINE(  23)				Float _hx_tmp1 = ::Math_obj::cos((seg * i));
HXDLIN(  23)				points->push((y + (_hx_tmp1 * ry)));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GraphicsPaths_obj,ellipse,(void))

void GraphicsPaths_obj::cubicCurveTo(::Array< Float > points,Float cx,Float cy,Float cx2,Float cy2,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.GraphicsPaths","cubicCurveTo",0xe18f5406,"openfl._internal.renderer.GraphicsPaths.cubicCurveTo","openfl/_internal/renderer/GraphicsPaths.hx",35,0x5cb26635)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(cx2,"cx2")
            	HX_STACK_ARG(cy2,"cy2")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  38)		HX_VARI( Float,dt) = (int)0;
HXLINE(  39)		HX_VARI( Float,dt2) = (int)0;
HXLINE(  40)		HX_VARI( Float,dt3) = (int)0;
HXLINE(  41)		HX_VARI( Float,t2) = (int)0;
HXLINE(  42)		HX_VARI( Float,t3) = (int)0;
HXLINE(  44)		HX_VARI( Float,fromX) = points->__get((points->length - (int)2));
HXLINE(  45)		HX_VARI( Float,fromY) = points->__get((points->length - (int)1));
HXLINE(  47)		HX_VARI( Float,px) = (int)0;
HXLINE(  48)		HX_VARI( Float,py) = (int)0;
HXLINE(  50)		HX_VARI( Float,tmp) = (int)0;
HXLINE(  52)		{
HXLINE(  52)			HX_VARI( Int,_g1) = (int)1;
HXDLIN(  52)			while((_g1 < (int)21)){
HXLINE(  52)				HX_VARI( Int,i) = _g1++;
HXLINE(  54)				tmp = ((Float)i / (Float)(int)20);
HXLINE(  56)				dt = ((int)1 - tmp);
HXLINE(  57)				dt2 = (dt * dt);
HXLINE(  58)				dt3 = (dt2 * dt);
HXLINE(  60)				t2 = (tmp * tmp);
HXLINE(  61)				t3 = (t2 * tmp);
HXLINE(  63)				px = ((((dt3 * fromX) + ((((int)3 * dt2) * tmp) * cx)) + ((((int)3 * dt) * t2) * cx2)) + (t3 * x));
HXLINE(  64)				py = ((((dt3 * fromY) + ((((int)3 * dt2) * tmp) * cy)) + ((((int)3 * dt) * t2) * cy2)) + (t3 * y));
HXLINE(  66)				points->push(px);
HXLINE(  67)				points->push(py);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(GraphicsPaths_obj,cubicCurveTo,(void))

void GraphicsPaths_obj::curveTo(::Array< Float > points,Float cx,Float cy,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.GraphicsPaths","curveTo",0x80d885a4,"openfl._internal.renderer.GraphicsPaths.curveTo","openfl/_internal/renderer/GraphicsPaths.hx",77,0x5cb26635)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(  79)		HX_VARI( Float,xa) = (int)0;
HXLINE(  80)		HX_VARI( Float,ya) = (int)0;
HXLINE(  83)		HX_VARI( Float,fromX) = points->__get((points->length - (int)2));
HXLINE(  84)		HX_VARI( Float,fromY) = points->__get((points->length - (int)1));
HXLINE(  86)		HX_VARI( Float,px) = (int)0;
HXLINE(  87)		HX_VARI( Float,py) = (int)0;
HXLINE(  89)		HX_VARI( Float,tmp) = (int)0;
HXLINE(  91)		{
HXLINE(  91)			HX_VARI( Int,_g1) = (int)1;
HXDLIN(  91)			while((_g1 < (int)21)){
HXLINE(  91)				HX_VARI( Int,i) = _g1++;
HXLINE(  93)				tmp = ((Float)i / (Float)(int)20);
HXLINE(  95)				xa = (fromX + ((cx - fromX) * tmp));
HXLINE(  96)				ya = (fromY + ((cy - fromY) * tmp));
HXLINE(  98)				px = (xa + (((cx + ((x - cx) * tmp)) - xa) * tmp));
HXLINE(  99)				py = (ya + (((cy + ((y - cy) * tmp)) - ya) * tmp));
HXLINE( 101)				points->push(px);
HXLINE( 102)				points->push(py);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(GraphicsPaths_obj,curveTo,(void))

void GraphicsPaths_obj::roundRectangle(::Array< Float > points,Float x,Float y,Float width,Float height,Float rx,Float ry){
            	HX_STACK_FRAME("openfl._internal.renderer.GraphicsPaths","roundRectangle",0x1ea263a7,"openfl._internal.renderer.GraphicsPaths.roundRectangle","openfl/_internal/renderer/GraphicsPaths.hx",112,0x5cb26635)
            	HX_STACK_ARG(points,"points")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(rx,"rx")
            	HX_STACK_ARG(ry,"ry")
HXLINE( 114)		HX_VARI( Float,xe) = (x + width);
HXLINE( 115)		HX_VARI( Float,ye) = (y + height);
HXLINE( 116)		HX_VARI( Float,cx1) = (-(rx) + (rx * ::openfl::_internal::renderer::GraphicsPaths_obj::SIN45));
HXLINE( 117)		HX_VARI( Float,cx2) = (-(rx) + (rx * ::openfl::_internal::renderer::GraphicsPaths_obj::TAN22));
HXLINE( 118)		HX_VARI( Float,cy1) = (-(ry) + (ry * ::openfl::_internal::renderer::GraphicsPaths_obj::SIN45));
HXLINE( 119)		HX_VARI( Float,cy2) = (-(ry) + (ry * ::openfl::_internal::renderer::GraphicsPaths_obj::TAN22));
HXLINE( 121)		points->push(xe);
HXLINE( 122)		points->push((ye - ry));
HXLINE( 123)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,xe,(ye + cy2),(xe + cx1),(ye + cy1));
HXLINE( 124)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,(xe + cx2),ye,(xe - rx),ye);
HXLINE( 125)		points->push((x + rx));
HXLINE( 126)		points->push(ye);
HXLINE( 127)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,(x - cx2),ye,(x - cx1),(ye + cy1));
HXLINE( 128)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,x,(ye + cy2),x,(ye - ry));
HXLINE( 129)		points->push(x);
HXLINE( 130)		points->push((y + ry));
HXLINE( 131)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,x,(y - cy2),(x - cx1),(y - cy1));
HXLINE( 132)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,(x - cx2),y,(x + rx),y);
HXLINE( 133)		points->push((xe - rx));
HXLINE( 134)		points->push(y);
HXLINE( 135)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,(xe + cx2),y,(xe + cx1),(y - cy1));
HXLINE( 136)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(points,xe,(y - cy2),xe,(y + ry));
HXLINE( 137)		points->push(xe);
HXLINE( 138)		points->push((ye - ry));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(GraphicsPaths_obj,roundRectangle,(void))


GraphicsPaths_obj::GraphicsPaths_obj()
{
}

bool GraphicsPaths_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = SIN45; return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = TAN22; return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ellipse") ) { outValue = ellipse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"curveTo") ) { outValue = curveTo_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { outValue = cubicCurveTo_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"roundRectangle") ) { outValue = roundRectangle_dyn(); return true; }
	}
	return false;
}

bool GraphicsPaths_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GraphicsPaths_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GraphicsPaths_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &GraphicsPaths_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &GraphicsPaths_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GraphicsPaths_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GraphicsPaths_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GraphicsPaths_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(GraphicsPaths_obj::TAN22,"TAN22");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GraphicsPaths_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GraphicsPaths_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GraphicsPaths_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(GraphicsPaths_obj::TAN22,"TAN22");
};

#endif

hx::Class GraphicsPaths_obj::__mClass;

static ::String GraphicsPaths_obj_sStaticFields[] = {
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("ellipse","\xde","\x40","\x86","\x0b"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("roundRectangle","\x01","\x42","\x1b","\x34"),
	::String(null())
};

void GraphicsPaths_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.GraphicsPaths","\x08","\x5c","\xf8","\x59");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GraphicsPaths_obj::__GetStatic;
	__mClass->mSetStaticField = &GraphicsPaths_obj::__SetStatic;
	__mClass->mMarkFunc = GraphicsPaths_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GraphicsPaths_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GraphicsPaths_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GraphicsPaths_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphicsPaths_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphicsPaths_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GraphicsPaths_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.GraphicsPaths","boot",0x489f3a58,"openfl._internal.renderer.GraphicsPaths.boot","openfl/_internal/renderer/GraphicsPaths.hx",7,0x5cb26635)
HXLINE(   7)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.GraphicsPaths","boot",0x489f3a58,"openfl._internal.renderer.GraphicsPaths.boot","openfl/_internal/renderer/GraphicsPaths.hx",8,0x5cb26635)
HXLINE(   8)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
