// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_PolyK
#include <openfl/_internal/renderer/PolyK.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{

void PolyK_obj::__construct() { }

Dynamic PolyK_obj::__CreateEmpty() { return new PolyK_obj; }

hx::ObjectPtr< PolyK_obj > PolyK_obj::__new()
{
	hx::ObjectPtr< PolyK_obj > _hx_result = new PolyK_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic PolyK_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PolyK_obj > _hx_result = new PolyK_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< Int > PolyK_obj::triangulate(::Array< Int > tgs,::Array< Float > p){
            	HX_STACK_FRAME("openfl._internal.renderer.PolyK","triangulate",0x1b342ee2,"openfl._internal.renderer.PolyK.triangulate","openfl/_internal/renderer/PolyK.hx",36,0x666fd399)
            	HX_STACK_ARG(tgs,"tgs")
            	HX_STACK_ARG(p,"p")
HXLINE(  38)		HX_VARI( Bool,sign) = true;
HXLINE(  40)		HX_VARI( Int,n) = ((int)p->length >> (int)(int)1);
HXLINE(  41)		if ((n < (int)3)) {
HXLINE(  41)			return ::Array_obj< Int >::__new(0);
            		}
HXLINE(  44)		HX_VARI( ::Array< Int >,_g) = ::Array_obj< Int >::__new(0);
HXDLIN(  44)		{
HXLINE(  44)			HX_VARI( Int,_g2) = (int)0;
HXDLIN(  44)			while((_g2 < n)){
HXLINE(  44)				HX_VARI( Int,i) = _g2++;
HXDLIN(  44)				_g->push(i);
            			}
            		}
HXDLIN(  44)		HX_VARI( ::Array< Int >,avl) = _g;
HXLINE(  46)		HX_VARI_NAME( Int,i1,"i") = (int)0;
HXLINE(  47)		HX_VARI( Int,al) = n;
HXLINE(  48)		HX_VARI( Bool,earFound) = false;
HXLINE(  50)		while((al > (int)3)){
HXLINE(  52)			HX_VARI( Int,i0) = avl->__get(hx::Mod(i1,al));
HXLINE(  53)			HX_VARI_NAME( Int,i11,"i1") = avl->__get(hx::Mod((i1 + (int)1),al));
HXLINE(  54)			HX_VARI( Int,i2) = avl->__get(hx::Mod((i1 + (int)2),al));
HXLINE(  56)			HX_VARI( Float,ax) = p->__get(((int)2 * i0));
HXDLIN(  56)			HX_VARI( Float,ay) = p->__get((((int)2 * i0) + (int)1));
HXLINE(  57)			HX_VARI( Float,bx) = p->__get(((int)2 * i11));
HXDLIN(  57)			HX_VARI( Float,by) = p->__get((((int)2 * i11) + (int)1));
HXLINE(  58)			HX_VARI( Float,cx) = p->__get(((int)2 * i2));
HXDLIN(  58)			HX_VARI( Float,cy) = p->__get((((int)2 * i2) + (int)1));
HXLINE(  60)			earFound = false;
HXLINE(  62)			if (::openfl::_internal::renderer::PolyK_obj::_convex(ax,ay,bx,by,cx,cy,sign)) {
HXLINE(  64)				earFound = true;
HXLINE(  66)				{
HXLINE(  66)					HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN(  66)					HX_VARI( Int,_g1) = al;
HXDLIN(  66)					while((_g21 < _g1)){
HXLINE(  66)						HX_VARI( Int,j) = _g21++;
HXLINE(  68)						HX_VARI( Int,vi) = avl->__get(j);
HXLINE(  69)						Bool _hx_tmp;
HXDLIN(  69)						Bool _hx_tmp1;
HXDLIN(  69)						if ((vi != i0)) {
HXLINE(  69)							_hx_tmp1 = (vi == i11);
            						}
            						else {
HXLINE(  69)							_hx_tmp1 = true;
            						}
HXDLIN(  69)						if (!(_hx_tmp1)) {
HXLINE(  69)							_hx_tmp = (vi == i2);
            						}
            						else {
HXLINE(  69)							_hx_tmp = true;
            						}
HXDLIN(  69)						if (_hx_tmp) {
HXLINE(  69)							continue;
            						}
HXLINE(  71)						Float _hx_tmp2 = p->__get(((int)2 * vi));
HXDLIN(  71)						Float _hx_tmp3 = p->__get((((int)2 * vi) + (int)1));
HXDLIN(  71)						Bool _hx_tmp4 = ::openfl::_internal::renderer::PolyK_obj::_PointInTriangle(_hx_tmp2,_hx_tmp3,ax,ay,bx,by,cx,cy);
HXDLIN(  71)						if (_hx_tmp4) {
HXLINE(  73)							earFound = false;
HXLINE(  74)							goto _hx_goto_2;
            						}
            					}
            					_hx_goto_2:;
            				}
            			}
HXLINE(  82)			if (earFound) {
HXLINE(  84)				tgs->push(i0);
HXLINE(  85)				tgs->push(i11);
HXLINE(  86)				tgs->push(i2);
HXLINE(  87)				avl->removeRange(hx::Mod((i1 + (int)1),al),(int)1);
HXLINE(  88)				--al;
HXLINE(  89)				i1 = (int)0;
            			}
            			else {
HXLINE(  91)				Int _hx_tmp5 = i1++;
HXDLIN(  91)				if ((_hx_tmp5 > ((int)3 * al))) {
HXLINE(  93)					if (sign) {
HXLINE(  95)						tgs = ::Array_obj< Int >::__new(0);
HXLINE(  96)						HX_VARI_NAME( ::Array< Int >,_g11,"_g1") = ::Array_obj< Int >::__new(0);
HXDLIN(  96)						{
HXLINE(  96)							HX_VARI( Int,_g3) = (int)0;
HXDLIN(  96)							while((_g3 < n)){
HXLINE(  96)								HX_VARI( Int,k) = _g3++;
HXDLIN(  96)								_g11->push(k);
            							}
            						}
HXDLIN(  96)						avl = _g11;
HXLINE(  98)						i1 = (int)0;
HXLINE(  99)						al = n;
HXLINE( 100)						sign = false;
            					}
            					else {
HXLINE( 104)						::haxe::Log_obj::trace(HX_("Warning: shape too complex to fill",2b,09,68,93),hx::SourceInfo(HX_("PolyK.hx",bf,93,4f,f3),104,HX_("openfl._internal.renderer.PolyK",24,f1,79,0a),HX_("triangulate",2c,65,9d,e9)));
HXLINE( 105)						return ::Array_obj< Int >::__new(0);
            					}
            				}
            			}
            		}
HXLINE( 113)		Int _hx_tmp6 = avl->__get((int)0);
HXDLIN( 113)		tgs->push(_hx_tmp6);
HXLINE( 114)		Int _hx_tmp7 = avl->__get((int)1);
HXDLIN( 114)		tgs->push(_hx_tmp7);
HXLINE( 115)		Int _hx_tmp8 = avl->__get((int)2);
HXDLIN( 115)		tgs->push(_hx_tmp8);
HXLINE( 116)		return tgs;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PolyK_obj,triangulate,return )

Bool PolyK_obj::_PointInTriangle(Float px,Float py,Float ax,Float ay,Float bx,Float by,Float cx,Float cy){
            	HX_STACK_FRAME("openfl._internal.renderer.PolyK","_PointInTriangle",0xd3388d28,"openfl._internal.renderer.PolyK._PointInTriangle","openfl/_internal/renderer/PolyK.hx",121,0x666fd399)
            	HX_STACK_ARG(px,"px")
            	HX_STACK_ARG(py,"py")
            	HX_STACK_ARG(ax,"ax")
            	HX_STACK_ARG(ay,"ay")
            	HX_STACK_ARG(bx,"bx")
            	HX_STACK_ARG(by,"by")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
HXLINE( 123)		HX_VARI( Int,v0x) = ::Std_obj::_hx_int((cx - ax));
HXLINE( 124)		HX_VARI( Int,v0y) = ::Std_obj::_hx_int((cy - ay));
HXLINE( 125)		HX_VARI( Int,v1x) = ::Std_obj::_hx_int((bx - ax));
HXLINE( 126)		HX_VARI( Int,v1y) = ::Std_obj::_hx_int((by - ay));
HXLINE( 127)		HX_VARI( Int,v2x) = ::Std_obj::_hx_int((px - ax));
HXLINE( 128)		HX_VARI( Int,v2y) = ::Std_obj::_hx_int((py - ay));
HXLINE( 130)		HX_VARI( Int,dot00) = ((v0x * v0x) + (v0y * v0y));
HXLINE( 131)		HX_VARI( Int,dot01) = ((v0x * v1x) + (v0y * v1y));
HXLINE( 132)		HX_VARI( Int,dot02) = ((v0x * v2x) + (v0y * v2y));
HXLINE( 133)		HX_VARI( Int,dot11) = ((v1x * v1x) + (v1y * v1y));
HXLINE( 134)		HX_VARI( Int,dot12) = ((v1x * v2x) + (v1y * v2y));
HXLINE( 136)		HX_VARI( Float,invDenom) = ((Float)(int)1 / (Float)((dot00 * dot11) - (dot01 * dot01)));
HXLINE( 137)		HX_VARI( Float,u) = (((dot11 * dot02) - (dot01 * dot12)) * invDenom);
HXLINE( 138)		HX_VARI( Float,v) = (((dot00 * dot12) - (dot01 * dot02)) * invDenom);
HXLINE( 140)		Bool _hx_tmp;
HXDLIN( 140)		if ((u >= (int)0)) {
HXLINE( 140)			_hx_tmp = (v >= (int)0);
            		}
            		else {
HXLINE( 140)			_hx_tmp = false;
            		}
HXDLIN( 140)		if (_hx_tmp) {
HXLINE( 140)			return ((u + v) < (int)1);
            		}
            		else {
HXLINE( 140)			return false;
            		}
HXDLIN( 140)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(PolyK_obj,_PointInTriangle,return )

Bool PolyK_obj::_convex(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Bool sign){
            	HX_STACK_FRAME("openfl._internal.renderer.PolyK","_convex",0x16abbfbc,"openfl._internal.renderer.PolyK._convex","openfl/_internal/renderer/PolyK.hx",147,0x666fd399)
            	HX_STACK_ARG(ax,"ax")
            	HX_STACK_ARG(ay,"ay")
            	HX_STACK_ARG(bx,"bx")
            	HX_STACK_ARG(by,"by")
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(sign,"sign")
HXLINE( 147)		return (((((ay - by) * (cx - bx)) + ((bx - ax) * (cy - by))) >= (int)0) == sign);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(PolyK_obj,_convex,return )


PolyK_obj::PolyK_obj()
{
}

bool PolyK_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"_convex") ) { outValue = _convex_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"triangulate") ) { outValue = triangulate_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_PointInTriangle") ) { outValue = _PointInTriangle_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PolyK_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PolyK_obj_sStaticStorageInfo = 0;
#endif

static void PolyK_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PolyK_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PolyK_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PolyK_obj::__mClass,"__mClass");
};

#endif

hx::Class PolyK_obj::__mClass;

static ::String PolyK_obj_sStaticFields[] = {
	HX_HCSTRING("triangulate","\x2c","\x65","\x9d","\xe9"),
	HX_HCSTRING("_PointInTriangle","\x9e","\x4a","\x14","\x04"),
	HX_HCSTRING("_convex","\x06","\x89","\x55","\x36"),
	::String(null())
};

void PolyK_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.PolyK","\x24","\xf1","\x79","\x0a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PolyK_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PolyK_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PolyK_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PolyK_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PolyK_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PolyK_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PolyK_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
