// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoGraphics_obj::__construct() { }

Dynamic CairoGraphics_obj::__CreateEmpty() { return new CairoGraphics_obj; }

hx::ObjectPtr< CairoGraphics_obj > CairoGraphics_obj::__new()
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CairoGraphics_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoGraphics_obj > _hx_result = new CairoGraphics_obj();
	_hx_result->__construct();
	return _hx_result;
}

Float CairoGraphics_obj::SIN45;

Float CairoGraphics_obj::TAN22;

 ::openfl::display::BitmapData CairoGraphics_obj::bitmapFill;

Bool CairoGraphics_obj::bitmapRepeat;

 ::openfl::geom::Rectangle CairoGraphics_obj::bounds;

 ::lime::graphics::cairo::Cairo CairoGraphics_obj::cairo;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::fillCommands;

 ::Dynamic CairoGraphics_obj::fillPattern;

 ::openfl::geom::Matrix CairoGraphics_obj::fillPatternMatrix;

 ::openfl::display::Graphics CairoGraphics_obj::graphics;

Bool CairoGraphics_obj::hasFill;

Bool CairoGraphics_obj::hasStroke;

Bool CairoGraphics_obj::hitTesting;

 ::openfl::geom::Matrix CairoGraphics_obj::inversePendingMatrix;

 ::openfl::geom::Matrix CairoGraphics_obj::pendingMatrix;

 ::openfl::_internal::renderer::DrawCommandBuffer CairoGraphics_obj::strokeCommands;

 ::Dynamic CairoGraphics_obj::strokePattern;

void CairoGraphics_obj::closePath(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","closePath",0x6dffa481,"openfl._internal.renderer.cairo.CairoGraphics.closePath","openfl/_internal/renderer/cairo/CairoGraphics.hx",58,0x744ae94c)
HXLINE(  60)		Bool _hx_tmp = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern );
HXDLIN(  60)		if (_hx_tmp) {
HXLINE(  62)			return;
            		}
HXLINE(  66)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE(  67)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE(  68)		Bool _hx_tmp1 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(  68)		if (_hx_tmp1) {
HXLINE(  68)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            		}
HXLINE(  69)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,closePath,(void))

 ::Dynamic CairoGraphics_obj::createGradientPattern( ::Dynamic type,::cpp::VirtualArray colors,::cpp::VirtualArray alphas,::cpp::VirtualArray ratios, ::openfl::geom::Matrix matrix, ::Dynamic spreadMethod, ::Dynamic interpolationMethod,Float focalPointRatio){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","createGradientPattern",0x9888a3a8,"openfl._internal.renderer.cairo.CairoGraphics.createGradientPattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",74,0x744ae94c)
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(colors,"colors")
            	HX_STACK_ARG(alphas,"alphas")
            	HX_STACK_ARG(ratios,"ratios")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(spreadMethod,"spreadMethod")
            	HX_STACK_ARG(interpolationMethod,"interpolationMethod")
            	HX_STACK_ARG(focalPointRatio,"focalPointRatio")
HXLINE(  76)		HX_VARI(  ::Dynamic,pattern) = null();
HXLINE(  78)		 ::Dynamic _hx_switch_0 = type;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(  93)			Bool _hx_tmp = hx::IsNull( matrix );
HXDLIN(  93)			if (_hx_tmp) {
HXLINE(  93)				matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            			}
HXLINE(  95)			HX_VARI(  ::openfl::geom::Point,point1) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)-819.2),(int)0));
HXLINE(  96)			HX_VARI(  ::openfl::geom::Point,point2) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)819.2),(int)0));
HXLINE(  98)			hx::AddEq(point1->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE(  99)			hx::AddEq(point2->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE( 100)			hx::AddEq(point1->y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 101)			hx::AddEq(point2->y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE( 103)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createLinear(point1->x,point1->y,point2->x,point2->y);
HXLINE(  91)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)1) ){
HXLINE(  82)			Bool _hx_tmp1 = hx::IsNull( matrix );
HXDLIN(  82)			if (_hx_tmp1) {
HXLINE(  82)				matrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            			}
HXLINE(  84)			HX_VARI(  ::openfl::geom::Point,point) = matrix->transformPoint( ::openfl::geom::Point_obj::__new(((Float)1638.4),(int)0));
HXLINE(  86)			HX_VARI( Float,x) = (matrix->tx + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->x);
HXLINE(  87)			HX_VARI( Float,y) = (matrix->ty + ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds->y);
HXLINE(  89)			Float _hx_tmp2 = ((Float)(point->x - matrix->tx) / (Float)(int)2);
HXDLIN(  89)			pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRadial(x,y,(int)0,x,y,_hx_tmp2);
HXLINE(  80)			goto _hx_goto_0;
            		}
            		_hx_goto_0:;
HXLINE( 107)		{
HXLINE( 107)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 107)			HX_VARI( Int,_g) = colors->get_length();
HXDLIN( 107)			while((_g1 < _g)){
HXLINE( 107)				HX_VARI( Int,i) = _g1++;
HXLINE( 109)				HX_VARI( Int,rgb) = ( (Int)(colors->__get(i)) );
HXLINE( 110)				HX_VARI( Float,alpha) = ( (Float)(alphas->__get(i)) );
HXLINE( 111)				HX_VARI( Float,r) = ((Float)hx::UShr(((int)rgb & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 112)				HX_VARI( Float,g) = ((Float)hx::UShr(((int)rgb & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 113)				HX_VARI( Float,b) = ((Float)((int)rgb & (int)(int)255) / (Float)(int)255);
HXLINE( 115)				HX_VARI( Float,ratio) = ((Float)ratios->__get(i) / (Float)(int)255);
HXLINE( 116)				Bool _hx_tmp3 = (ratio < (int)0);
HXDLIN( 116)				if (_hx_tmp3) {
HXLINE( 116)					ratio = (int)0;
            				}
HXLINE( 117)				Bool _hx_tmp4 = (ratio > (int)1);
HXDLIN( 117)				if (_hx_tmp4) {
HXLINE( 117)					ratio = (int)1;
            				}
HXLINE( 119)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::addColorStopRGBA(pattern,ratio,r,g,b,alpha);
            			}
            		}
HXLINE( 123)		HX_VARI(  ::lime::math::Matrix3,mat) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::get_matrix(pattern);
HXLINE( 125)		mat->tx = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 126)		mat->ty = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 128)		::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(pattern,mat);
HXLINE( 130)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(CairoGraphics_obj,createGradientPattern,return )

 ::Dynamic CairoGraphics_obj::createImagePattern( ::openfl::display::BitmapData bitmapFill, ::openfl::geom::Matrix matrix,Bool bitmapRepeat){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","createImagePattern",0x42487dcd,"openfl._internal.renderer.cairo.CairoGraphics.createImagePattern","openfl/_internal/renderer/cairo/CairoGraphics.hx",135,0x744ae94c)
            	HX_STACK_ARG(bitmapFill,"bitmapFill")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(bitmapRepeat,"bitmapRepeat")
HXLINE( 137)		 ::Dynamic _hx_tmp = bitmapFill->getSurface();
HXDLIN( 137)		HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(_hx_tmp);
HXLINE( 139)		if (bitmapRepeat) {
HXLINE( 141)			::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_extend(pattern,(int)1);
            		}
HXLINE( 145)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = matrix;
HXLINE( 147)		return pattern;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,createImagePattern,return )

void CairoGraphics_obj::drawRoundRect(Float x,Float y,Float width,Float height,Float ellipseWidth, ::Dynamic ellipseHeight){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","drawRoundRect",0xa42fd4f2,"openfl._internal.renderer.cairo.CairoGraphics.drawRoundRect","openfl/_internal/renderer/cairo/CairoGraphics.hx",152,0x744ae94c)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(ellipseWidth,"ellipseWidth")
            	HX_STACK_ARG(ellipseHeight,"ellipseHeight")
HXLINE( 154)		Bool _hx_tmp = hx::IsNull( ellipseHeight );
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 154)			ellipseHeight = ellipseWidth;
            		}
HXLINE( 156)		hx::MultEq(ellipseWidth,((Float)0.5));
HXLINE( 157)		hx::MultEq(ellipseHeight,((Float)0.5));
HXLINE( 159)		Bool _hx_tmp1 = (ellipseWidth > ((Float)width / (Float)(int)2));
HXDLIN( 159)		if (_hx_tmp1) {
HXLINE( 159)			ellipseWidth = ((Float)width / (Float)(int)2);
            		}
HXLINE( 160)		Bool _hx_tmp2 = hx::IsGreater( ellipseHeight,((Float)height / (Float)(int)2) );
HXDLIN( 160)		if (_hx_tmp2) {
HXLINE( 160)			ellipseHeight = ((Float)height / (Float)(int)2);
            		}
HXLINE( 162)		HX_VARI( Float,xe) = (x + width);
HXDLIN( 162)		HX_VARI( Float,ye) = (y + height);
HXDLIN( 162)		HX_VARI( Float,cx1) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 162)		HX_VARI( Float,cx2) = (-(ellipseWidth) + (ellipseWidth * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXDLIN( 162)		HX_VARI( Float,cy1) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::SIN45));
HXDLIN( 162)		HX_VARI( Float,cy2) = (-(ellipseHeight) + (ellipseHeight * ::openfl::_internal::renderer::cairo::CairoGraphics_obj::TAN22));
HXLINE( 169)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(xe,(ye - ellipseHeight));
HXLINE( 170)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(ye + cy2),(xe + cx1),(ye + cy1));
HXLINE( 171)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),ye,(xe - ellipseWidth),ye);
HXLINE( 172)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((x + ellipseWidth),ye);
HXLINE( 173)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),ye,(x - cx1),(ye + cy1));
HXLINE( 174)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(ye + cy2),x,(ye - ellipseHeight));
HXLINE( 175)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x,(y + ellipseHeight));
HXLINE( 176)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(x,(y - cy2),(x - cx1),(y - cy1));
HXLINE( 177)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((x - cx2),y,(x + ellipseWidth),y);
HXLINE( 178)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((xe - ellipseWidth),y);
HXLINE( 179)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo((xe + cx2),y,(xe + cx1),(y - cy1));
HXLINE( 180)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(xe,(y - cy2),xe,(y + ellipseHeight));
HXLINE( 181)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(xe,(ye - ellipseHeight));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,drawRoundRect,(void))

void CairoGraphics_obj::endFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","endFill",0x21233e02,"openfl._internal.renderer.cairo.CairoGraphics.endFill","openfl/_internal/renderer/cairo/CairoGraphics.hx",186,0x744ae94c)
HXLINE( 188)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 189)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands,false);
HXLINE( 190)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endFill,(void))

void CairoGraphics_obj::endStroke(){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","endStroke",0xaaf640f7,"openfl._internal.renderer.cairo.CairoGraphics.endStroke","openfl/_internal/renderer/cairo/CairoGraphics.hx",195,0x744ae94c)
HXLINE( 197)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 198)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::playCommands(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands,true);
HXLINE( 199)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 200)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CairoGraphics_obj,endStroke,(void))

Bool CairoGraphics_obj::hitTest( ::openfl::display::Graphics graphics,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","hitTest",0xddc21649,"openfl._internal.renderer.cairo.CairoGraphics.hitTest","openfl/_internal/renderer/cairo/CairoGraphics.hx",205,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 208)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE( 209)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE( 211)		Bool _hx_tmp;
HXDLIN( 211)		Bool _hx_tmp1;
HXDLIN( 211)		Bool _hx_tmp2;
HXDLIN( 211)		Bool _hx_tmp3;
HXDLIN( 211)		Int _hx_tmp4 = graphics->_hx___commands->get_length();
HXDLIN( 211)		if ((_hx_tmp4 != (int)0)) {
HXLINE( 211)			_hx_tmp3 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE( 211)			_hx_tmp3 = true;
            		}
HXDLIN( 211)		if (!(_hx_tmp3)) {
HXLINE( 211)			_hx_tmp2 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width == (int)0);
            		}
            		else {
HXLINE( 211)			_hx_tmp2 = true;
            		}
HXDLIN( 211)		if (!(_hx_tmp2)) {
HXLINE( 211)			_hx_tmp1 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height == (int)0);
            		}
            		else {
HXLINE( 211)			_hx_tmp1 = true;
            		}
HXDLIN( 211)		if (!(_hx_tmp1)) {
HXLINE( 211)			_hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->contains(x,y));
            		}
            		else {
HXLINE( 211)			_hx_tmp = true;
            		}
HXDLIN( 211)		if (_hx_tmp) {
HXLINE( 213)			return false;
            		}
            		else {
HXLINE( 217)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = true;
HXLINE( 219)			hx::SubEq(x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x);
HXLINE( 220)			hx::SubEq(y,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE( 222)			Bool _hx_tmp5 = hx::IsNull( graphics->_hx___cairo );
HXDLIN( 222)			if (_hx_tmp5) {
HXLINE( 224)				Int _hx_tmp6 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXDLIN( 224)				Int _hx_tmp7 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
HXDLIN( 224)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp6,_hx_tmp7,true,null());
HXLINE( 225)				HX_VARI(  ::Dynamic,surface) = bitmap->getSurface();
HXLINE( 226)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface);
            			}
HXLINE( 231)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE( 233)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE( 234)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE( 236)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 237)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE( 239)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE( 240)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE( 242)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 244)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE( 246)			{
HXLINE( 246)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 246)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN( 246)				while((_g < _g1->length)){
HXLINE( 246)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 246)					++_g;
HXLINE( 248)					Int _hx_tmp8 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 248)					switch((int)(_hx_tmp8)){
            						case (int)0: case (int)1: case (int)2: {
HXLINE( 314)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 315)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 317)							Bool _hx_tmp9;
HXDLIN( 317)							Bool _hx_tmp10 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 317)							if (_hx_tmp10) {
HXLINE( 317)								_hx_tmp9 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 317)								_hx_tmp9 = false;
            							}
HXDLIN( 317)							if (_hx_tmp9) {
HXLINE( 319)								data->destroy();
HXLINE( 320)								return true;
            							}
HXLINE( 324)							Bool _hx_tmp11;
HXDLIN( 324)							Bool _hx_tmp12 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 324)							if (_hx_tmp12) {
HXLINE( 324)								_hx_tmp11 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 324)								_hx_tmp11 = false;
            							}
HXDLIN( 324)							if (_hx_tmp11) {
HXLINE( 326)								data->destroy();
HXLINE( 327)								return true;
            							}
HXLINE( 331)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE( 333)								{
HXLINE( 333)									Int _hx_tmp13 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 333)									switch((int)(_hx_tmp13)){
            										case (int)0: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 333)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 333)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 333)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 333)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)3);
            										}
            										break;
            										case (int)8: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)9: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)5);
HXDLIN( 333)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 333)											hx::AddEq(data->tsPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->bPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->iPos,(int)2);
HXDLIN( 333)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)11: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)12: {
            										}
            										break;
            										case (int)13: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 333)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)14: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 333)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 333)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 333)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 333)											hx::AddEq(data->fPos,(int)2);
HXDLIN( 333)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 333)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 333)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 333)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 333)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 334)								 ::openfl::display::BitmapData _hx_tmp14 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 334)								 ::openfl::geom::Matrix _hx_tmp15 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 334)								Bool _hx_tmp16 = c->buffer->b->__get(c->bPos);
HXDLIN( 334)								Bool _hx_tmp17 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 334)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(_hx_tmp14,_hx_tmp15,_hx_tmp16,_hx_tmp17);
HXLINE( 335)								 ::openfl::display::BitmapData _hx_tmp18 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 335)								 ::openfl::geom::Matrix _hx_tmp19 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 335)								Bool _hx_tmp20 = c->buffer->b->__get(c->bPos);
HXDLIN( 335)								Bool _hx_tmp21 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 335)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
            							}
            							else {
HXLINE( 337)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE( 339)									{
HXLINE( 339)										Int _hx_tmp22 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 339)										switch((int)(_hx_tmp22)){
            											case (int)0: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 339)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 339)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 339)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 339)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)3);
            											}
            											break;
            											case (int)8: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)9: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)5);
HXDLIN( 339)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE( 339)												hx::AddEq(data->tsPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->bPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->iPos,(int)2);
HXDLIN( 339)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)11: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)12: {
            											}
            											break;
            											case (int)13: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 339)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)14: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 339)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 339)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 339)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 339)												hx::AddEq(data->fPos,(int)2);
HXDLIN( 339)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)16: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE( 339)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)18: {
HXLINE( 339)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 339)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 339)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 340)									Int _hx_tmp23 = (c1->iiPos + (int)1);
HXDLIN( 340)									Int _hx_tmp24 = (c1->oPos + (int)1);
HXDLIN( 340)									Int _hx_tmp25 = (c1->oPos + (int)2);
HXDLIN( 340)									Int _hx_tmp26 = (c1->oPos + (int)3);
HXDLIN( 340)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp23).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp24)) ),c1->buffer->o->__get(_hx_tmp25),c1->buffer->o->__get(_hx_tmp26),c1->buffer->f->__get(c1->fPos));
HXLINE( 341)									Int _hx_tmp27 = (c1->iiPos + (int)1);
HXDLIN( 341)									Int _hx_tmp28 = (c1->oPos + (int)1);
HXDLIN( 341)									Int _hx_tmp29 = (c1->oPos + (int)2);
HXDLIN( 341)									Int _hx_tmp30 = (c1->oPos + (int)3);
HXDLIN( 341)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp27).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp28)) ),c1->buffer->o->__get(_hx_tmp29),c1->buffer->o->__get(_hx_tmp30),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE( 345)									{
HXLINE( 345)										Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 345)										switch((int)(_hx_tmp31)){
            											case (int)0: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 345)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE( 345)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 345)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 345)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)3);
            											}
            											break;
            											case (int)8: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)9: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)5);
HXDLIN( 345)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE( 345)												hx::AddEq(data->tsPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->bPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->iPos,(int)2);
HXDLIN( 345)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)11: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)12: {
            											}
            											break;
            											case (int)13: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)2);
HXDLIN( 345)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)14: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 345)												hx::AddEq(data->iiPos,(int)2);
HXDLIN( 345)												hx::AddEq(data->ffPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)4);
HXDLIN( 345)												hx::AddEq(data->iPos,(int)1);
HXDLIN( 345)												hx::AddEq(data->fPos,(int)2);
HXDLIN( 345)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)16: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE( 345)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)18: {
HXLINE( 345)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE( 345)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 345)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 346)									Int _hx_tmp32 = c2->buffer->i->__get(c2->iPos);
HXDLIN( 346)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(_hx_tmp32,(int)1);
HXLINE( 347)									Int _hx_tmp33 = c2->buffer->i->__get(c2->iPos);
HXDLIN( 347)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(_hx_tmp33,(int)1);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 252)							{
HXLINE( 252)								Int _hx_tmp34 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 252)								switch((int)(_hx_tmp34)){
            									case (int)0: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 252)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 252)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 252)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 252)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 252)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 252)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 252)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 252)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 252)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 252)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 252)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 252)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 252)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 252)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 252)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 252)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 252)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 253)							Float _hx_tmp35 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 253)							Float _hx_tmp36 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 253)							Float _hx_tmp37 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 253)							Float _hx_tmp38 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 253)							Float _hx_tmp39 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN( 253)							Float _hx_tmp40 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 253)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(_hx_tmp35,_hx_tmp36,_hx_tmp37,_hx_tmp38,_hx_tmp39,_hx_tmp40);
HXLINE( 254)							Float _hx_tmp41 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 254)							Float _hx_tmp42 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 254)							Float _hx_tmp43 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 254)							Float _hx_tmp44 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 254)							Float _hx_tmp45 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN( 254)							Float _hx_tmp46 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 254)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(_hx_tmp41,_hx_tmp42,_hx_tmp43,_hx_tmp44,_hx_tmp45,_hx_tmp46);
            						}
            						break;
            						case (int)4: {
HXLINE( 258)							{
HXLINE( 258)								Int _hx_tmp47 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 258)								switch((int)(_hx_tmp47)){
            									case (int)0: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 258)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 258)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 258)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 258)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 258)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 258)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 258)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 258)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 258)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 258)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 258)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 258)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 258)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 258)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 258)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 258)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 258)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 259)							Float _hx_tmp48 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 259)							Float _hx_tmp49 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 259)							Float _hx_tmp50 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 259)							Float _hx_tmp51 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 259)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(_hx_tmp48,_hx_tmp49,_hx_tmp50,_hx_tmp51);
HXLINE( 260)							Float _hx_tmp52 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 260)							Float _hx_tmp53 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 260)							Float _hx_tmp54 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 260)							Float _hx_tmp55 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 260)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(_hx_tmp52,_hx_tmp53,_hx_tmp54,_hx_tmp55);
            						}
            						break;
            						case (int)5: {
HXLINE( 353)							{
HXLINE( 353)								Int _hx_tmp56 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 353)								switch((int)(_hx_tmp56)){
            									case (int)0: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 353)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 353)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 353)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 353)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 353)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 353)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 353)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 353)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 353)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 353)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 353)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 353)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 353)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 353)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 353)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 353)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 353)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 354)							Float _hx_tmp57 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 354)							Float _hx_tmp58 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 354)							Float _hx_tmp59 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 354)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(_hx_tmp57,_hx_tmp58,_hx_tmp59);
HXLINE( 355)							Float _hx_tmp60 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 355)							Float _hx_tmp61 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 355)							Float _hx_tmp62 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 355)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(_hx_tmp60,_hx_tmp61,_hx_tmp62);
            						}
            						break;
            						case (int)6: {
HXLINE( 359)							{
HXLINE( 359)								Int _hx_tmp63 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 359)								switch((int)(_hx_tmp63)){
            									case (int)0: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 359)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 359)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 359)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 359)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 359)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 360)							Float _hx_tmp64 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 360)							Float _hx_tmp65 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 360)							Float _hx_tmp66 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN( 360)							Float _hx_tmp67 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN( 360)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(_hx_tmp64,_hx_tmp65,_hx_tmp66,_hx_tmp67);
HXLINE( 361)							Float _hx_tmp68 = c6->buffer->f->__get(c6->fPos);
HXDLIN( 361)							Float _hx_tmp69 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN( 361)							Float _hx_tmp70 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN( 361)							Float _hx_tmp71 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN( 361)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(_hx_tmp68,_hx_tmp69,_hx_tmp70,_hx_tmp71);
            						}
            						break;
            						case (int)8: {
HXLINE( 365)							{
HXLINE( 365)								Int _hx_tmp72 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 365)								switch((int)(_hx_tmp72)){
            									case (int)0: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 365)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 365)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 365)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 365)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 365)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 365)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 365)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 365)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 365)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 365)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 365)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 365)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 365)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 365)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 365)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 365)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 365)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 366)							Float _hx_tmp73 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 366)							Float _hx_tmp74 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 366)							Float _hx_tmp75 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 366)							Float _hx_tmp76 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 366)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(_hx_tmp73,_hx_tmp74,_hx_tmp75,_hx_tmp76);
HXLINE( 367)							Float _hx_tmp77 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 367)							Float _hx_tmp78 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 367)							Float _hx_tmp79 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 367)							Float _hx_tmp80 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 367)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(_hx_tmp77,_hx_tmp78,_hx_tmp79,_hx_tmp80);
            						}
            						break;
            						case (int)9: {
HXLINE( 371)							{
HXLINE( 371)								Int _hx_tmp81 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 371)								switch((int)(_hx_tmp81)){
            									case (int)0: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 371)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 371)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 371)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 371)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 371)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 371)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 371)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 371)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 371)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 371)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 371)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 371)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 371)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 371)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 371)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 371)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 371)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 372)							Float _hx_tmp82 = c8->buffer->f->__get(c8->fPos);
HXDLIN( 372)							Float _hx_tmp83 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN( 372)							Float _hx_tmp84 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 372)							Float _hx_tmp85 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 372)							Float _hx_tmp86 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 372)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(_hx_tmp82,_hx_tmp83,_hx_tmp84,_hx_tmp85,_hx_tmp86,c8->buffer->o->__get(c8->oPos));
HXLINE( 373)							Float _hx_tmp87 = c8->buffer->f->__get(c8->fPos);
HXDLIN( 373)							Float _hx_tmp88 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN( 373)							Float _hx_tmp89 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 373)							Float _hx_tmp90 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 373)							Float _hx_tmp91 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 373)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(_hx_tmp87,_hx_tmp88,_hx_tmp89,_hx_tmp90,_hx_tmp91,c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)12: {
HXLINE( 291)							{
HXLINE( 291)								{
HXLINE( 291)									Int _hx_tmp92 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 291)									switch((int)(_hx_tmp92)){
            										case (int)0: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 291)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE( 291)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 291)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 291)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)3);
            										}
            										break;
            										case (int)8: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)9: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)5);
HXDLIN( 291)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE( 291)											hx::AddEq(data->tsPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->bPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->iPos,(int)2);
HXDLIN( 291)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)11: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)12: {
            										}
            										break;
            										case (int)13: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)2);
HXDLIN( 291)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)14: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 291)											hx::AddEq(data->iiPos,(int)2);
HXDLIN( 291)											hx::AddEq(data->ffPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)4);
HXDLIN( 291)											hx::AddEq(data->iPos,(int)1);
HXDLIN( 291)											hx::AddEq(data->fPos,(int)2);
HXDLIN( 291)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)16: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE( 291)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)18: {
HXLINE( 291)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE( 291)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE( 292)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE( 293)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE( 295)							Bool _hx_tmp93;
HXDLIN( 295)							Bool _hx_tmp94 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 295)							if (_hx_tmp94) {
HXLINE( 295)								_hx_tmp93 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            							}
            							else {
HXLINE( 295)								_hx_tmp93 = false;
            							}
HXDLIN( 295)							if (_hx_tmp93) {
HXLINE( 297)								data->destroy();
HXLINE( 298)								return true;
            							}
HXLINE( 302)							Bool _hx_tmp95;
HXDLIN( 302)							Bool _hx_tmp96 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 302)							if (_hx_tmp96) {
HXLINE( 302)								_hx_tmp95 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            							}
            							else {
HXLINE( 302)								_hx_tmp95 = false;
            							}
HXDLIN( 302)							if (_hx_tmp95) {
HXLINE( 304)								data->destroy();
HXLINE( 305)								return true;
            							}
HXLINE( 309)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE( 310)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)13: {
HXLINE( 286)							{
HXLINE( 286)								Int _hx_tmp97 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 286)								switch((int)(_hx_tmp97)){
            									case (int)0: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 286)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 286)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 286)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 286)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 286)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 286)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 286)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 286)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 286)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 286)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 286)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 286)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 286)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 286)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 286)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 286)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 286)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 287)							Int _hx_tmp98 = (c9->oPos + (int)1);
HXDLIN( 287)							Int _hx_tmp99 = (c9->bPos + (int)1);
HXDLIN( 287)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c9->buffer->o->__get(c9->oPos)) ),( ( ::openfl::geom::Matrix)(c9->buffer->o->__get(_hx_tmp98)) ),c9->buffer->b->__get(c9->bPos),c9->buffer->b->__get(_hx_tmp99));
            						}
            						break;
            						case (int)14: {
HXLINE( 281)							{
HXLINE( 281)								Int _hx_tmp100 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 281)								switch((int)(_hx_tmp100)){
            									case (int)0: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 281)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 281)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 281)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 281)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 282)							Int _hx_tmp101 = (c10->iiPos + (int)1);
HXDLIN( 282)							Int _hx_tmp102 = (c10->oPos + (int)1);
HXDLIN( 282)							Int _hx_tmp103 = (c10->oPos + (int)2);
HXDLIN( 282)							Int _hx_tmp104 = (c10->oPos + (int)3);
HXDLIN( 282)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c10->buffer->o->__get(c10->oPos),c10->buffer->ii->__get(c10->iiPos).StaticCast< ::Array< Int > >(),c10->buffer->ff->__get(c10->ffPos).StaticCast< ::Array< Float > >(),c10->buffer->ii->__get(_hx_tmp101).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c10->buffer->o->__get(_hx_tmp102)) ),c10->buffer->o->__get(_hx_tmp103),c10->buffer->o->__get(_hx_tmp104),c10->buffer->f->__get(c10->fPos));
            						}
            						break;
            						case (int)15: {
HXLINE( 276)							{
HXLINE( 276)								Int _hx_tmp105 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 276)								switch((int)(_hx_tmp105)){
            									case (int)0: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 276)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 276)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 276)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 276)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 276)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 276)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 276)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 276)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 276)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 276)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 276)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 276)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 276)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 276)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 276)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 276)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 276)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 277)							Int _hx_tmp106 = (c11->oPos + (int)1);
HXDLIN( 277)							Int _hx_tmp107 = (c11->oPos + (int)2);
HXDLIN( 277)							Int _hx_tmp108 = (c11->oPos + (int)3);
HXDLIN( 277)							Int _hx_tmp109 = (c11->fPos + (int)1);
HXDLIN( 277)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c11->buffer->o->__get(c11->oPos),c11->buffer->i->__get(c11->iPos),(int)1,c11->buffer->b->__get(c11->bPos),c11->buffer->o->__get(_hx_tmp106),c11->buffer->o->__get(_hx_tmp107),c11->buffer->o->__get(_hx_tmp108),c11->buffer->f->__get(_hx_tmp109));
            						}
            						break;
            						case (int)16: {
HXLINE( 264)							{
HXLINE( 264)								Int _hx_tmp110 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 264)								switch((int)(_hx_tmp110)){
            									case (int)0: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 264)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 264)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 264)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 264)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 264)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 264)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 264)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 264)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 264)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 264)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 264)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 264)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 264)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 264)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 264)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 264)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 264)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 265)							Float _hx_tmp111 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 265)							Float _hx_tmp112 = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 265)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(_hx_tmp111,_hx_tmp112);
HXLINE( 266)							Float _hx_tmp113 = c12->buffer->f->__get(c12->fPos);
HXDLIN( 266)							Float _hx_tmp114 = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 266)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(_hx_tmp113,_hx_tmp114);
            						}
            						break;
            						case (int)17: {
HXLINE( 270)							{
HXLINE( 270)								Int _hx_tmp115 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 270)								switch((int)(_hx_tmp115)){
            									case (int)0: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 270)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 270)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 270)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 270)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 270)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 270)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 270)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 270)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 270)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 270)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 270)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 270)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 270)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 270)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 270)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 270)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 270)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 271)							Float _hx_tmp116 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 271)							Float _hx_tmp117 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 271)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(_hx_tmp116,_hx_tmp117);
HXLINE( 272)							Float _hx_tmp118 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 272)							Float _hx_tmp119 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 272)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(_hx_tmp118,_hx_tmp119);
            						}
            						break;
            						default:{
HXLINE( 377)							{
HXLINE( 377)								Int _hx_tmp120 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 377)								switch((int)(_hx_tmp120)){
            									case (int)0: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 377)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 377)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 377)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 377)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 377)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 377)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 377)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 377)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 377)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 377)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 377)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 377)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 377)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 377)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 377)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 377)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE( 383)			Int _hx_tmp121 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length();
HXDLIN( 383)			if ((_hx_tmp121 > (int)0)) {
HXLINE( 385)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE( 389)			Int _hx_tmp122 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length();
HXDLIN( 389)			if ((_hx_tmp122 > (int)0)) {
HXLINE( 391)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE( 395)			data->destroy();
HXLINE( 397)			Bool _hx_tmp123;
HXDLIN( 397)			Bool _hx_tmp124 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
HXDLIN( 397)			if (_hx_tmp124) {
HXLINE( 397)				_hx_tmp123 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inFill(x,y);
            			}
            			else {
HXLINE( 397)				_hx_tmp123 = false;
            			}
HXDLIN( 397)			if (_hx_tmp123) {
HXLINE( 399)				return true;
            			}
HXLINE( 403)			Bool _hx_tmp125;
HXDLIN( 403)			Bool _hx_tmp126 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
HXDLIN( 403)			if (_hx_tmp126) {
HXLINE( 403)				_hx_tmp125 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->inStroke(x,y);
            			}
            			else {
HXLINE( 403)				_hx_tmp125 = false;
            			}
HXDLIN( 403)			if (_hx_tmp125) {
HXLINE( 405)				return true;
            			}
            		}
HXLINE( 412)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(CairoGraphics_obj,hitTest,return )

Bool CairoGraphics_obj::isCCW(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","isCCW",0x5353f111,"openfl._internal.renderer.cairo.CairoGraphics.isCCW","openfl/_internal/renderer/cairo/CairoGraphics.hx",419,0x744ae94c)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE( 419)		return ((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(CairoGraphics_obj,isCCW,return )

 ::Dynamic CairoGraphics_obj::normalizeUVT(::Array< Float > uvt,hx::Null< Bool >  __o_skipT){
Bool skipT = __o_skipT.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","normalizeUVT",0xc9c604e2,"openfl._internal.renderer.cairo.CairoGraphics.normalizeUVT","openfl/_internal/renderer/cairo/CairoGraphics.hx",424,0x744ae94c)
            	HX_STACK_ARG(uvt,"uvt")
            	HX_STACK_ARG(skipT,"skipT")
HXLINE( 426)		HX_VARI( Float,max) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 427)		HX_VARI( Float,tmp) = ::Math_obj::NEGATIVE_INFINITY;
HXLINE( 428)		HX_VARI( Int,len) = uvt->length;
HXLINE( 430)		{
HXLINE( 430)			HX_VARI( Int,_g1) = (int)1;
HXDLIN( 430)			HX_VARI( Int,_g) = (len + (int)1);
HXDLIN( 430)			while((_g1 < _g)){
HXLINE( 430)				HX_VARI( Int,t) = _g1++;
HXLINE( 432)				Bool _hx_tmp;
HXDLIN( 432)				if (skipT) {
HXLINE( 432)					_hx_tmp = (hx::Mod(t,(int)3) == (int)0);
            				}
            				else {
HXLINE( 432)					_hx_tmp = false;
            				}
HXDLIN( 432)				if (_hx_tmp) {
HXLINE( 434)					continue;
            				}
HXLINE( 438)				tmp = uvt->__get((t - (int)1));
HXLINE( 440)				Bool _hx_tmp1 = (max < tmp);
HXDLIN( 440)				if (_hx_tmp1) {
HXLINE( 442)					max = tmp;
            				}
            			}
            		}
HXLINE( 448)		HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN( 448)		this1->__SetSizeExact(null());
HXDLIN( 448)		HX_VARI( ::Array< Float >,result) = this1;
HXLINE( 450)		{
HXLINE( 450)			HX_VARI_NAME( Int,_g11,"_g1") = (int)1;
HXDLIN( 450)			HX_VARI_NAME( Int,_g2,"_g") = (len + (int)1);
HXDLIN( 450)			while((_g11 < _g2)){
HXLINE( 450)				HX_VARI_NAME( Int,t1,"t") = _g11++;
HXLINE( 452)				Bool _hx_tmp2;
HXDLIN( 452)				if (skipT) {
HXLINE( 452)					_hx_tmp2 = (hx::Mod(t1,(int)3) == (int)0);
            				}
            				else {
HXLINE( 452)					_hx_tmp2 = false;
            				}
HXDLIN( 452)				if (_hx_tmp2) {
HXLINE( 454)					continue;
            				}
HXLINE( 458)				Float _hx_tmp3 = ((Float)uvt->__get((t1 - (int)1)) / (Float)max);
HXDLIN( 458)				result->push(_hx_tmp3);
            			}
            		}
HXLINE( 462)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("max",a4,0a,53,00),max)
            			->setFixed(1,HX_("uvt",f3,2e,59,00),result));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,normalizeUVT,return )

void CairoGraphics_obj::playCommands( ::openfl::_internal::renderer::DrawCommandBuffer commands,hx::Null< Bool >  __o_stroke){
Bool stroke = __o_stroke.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","playCommands",0xcc85aa58,"openfl._internal.renderer.cairo.CairoGraphics.playCommands","openfl/_internal/renderer/cairo/CairoGraphics.hx",467,0x744ae94c)
            	HX_STACK_ARG(commands,"commands")
            	HX_STACK_ARG(stroke,"stroke")
HXLINE( 469)		Int _hx_tmp = commands->get_length();
HXDLIN( 469)		if ((_hx_tmp == (int)0)) {
HXLINE( 469)			return;
            		}
HXLINE( 471)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics->_hx___bounds;
HXLINE( 473)		HX_VARI( Float,offsetX) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 474)		HX_VARI( Float,offsetY) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 476)		HX_VARI( Float,positionX) = ((Float)0.0);
HXLINE( 477)		HX_VARI( Float,positionY) = ((Float)0.0);
HXLINE( 479)		HX_VARI( Bool,closeGap) = false;
HXLINE( 480)		HX_VARI( Float,startX) = ((Float)0.0);
HXLINE( 481)		HX_VARI( Float,startY) = ((Float)0.0);
HXLINE( 483)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_fillRule((int)1);
HXLINE( 484)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)3);
HXLINE( 486)		HX_VARI( Bool,hasPath) = false;
HXLINE( 488)		HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(commands);
HXLINE( 490)		{
HXLINE( 490)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 490)			HX_VARI( ::Array< ::Dynamic>,_g1) = commands->types;
HXDLIN( 490)			while((_g < _g1->length)){
HXLINE( 490)				HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 490)				++_g;
HXLINE( 492)				Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 492)				switch((int)(_hx_tmp1)){
            					case (int)0: {
HXLINE( 674)						{
HXLINE( 674)							Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 674)							switch((int)(_hx_tmp2)){
            								case (int)0: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 674)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 674)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 674)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 674)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 674)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 674)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 674)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 674)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 674)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 674)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 674)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 674)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 674)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 674)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 674)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 674)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 674)						HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 675)						 ::openfl::display::BitmapData _hx_tmp3 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 675)						 ::openfl::geom::Matrix _hx_tmp4 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 675)						Bool _hx_tmp5 = c->buffer->b->__get(c->bPos);
HXDLIN( 675)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(_hx_tmp3,_hx_tmp4,_hx_tmp5);
HXLINE( 677)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXLINE( 678)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapRepeat = c->buffer->b->__get(c->bPos);
HXLINE( 680)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            					}
            					break;
            					case (int)1: {
HXLINE( 684)						{
HXLINE( 684)							Int _hx_tmp6 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 684)							switch((int)(_hx_tmp6)){
            								case (int)0: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 684)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 684)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 684)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 684)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 684)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 684)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 684)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 684)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 684)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 684)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 684)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 684)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 684)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 684)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 684)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 684)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 684)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 685)						Bool _hx_tmp7 = (c1->buffer->f->__get(c1->fPos) < ((Float)0.005));
HXDLIN( 685)						if (_hx_tmp7) {
HXLINE( 687)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
            						}
            						else {
HXLINE( 691)							Bool _hx_tmp8 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern );
HXDLIN( 691)							if (_hx_tmp8) {
HXLINE( 693)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            							}
HXLINE( 697)							Float _hx_tmp9 = ((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXDLIN( 697)							Float _hx_tmp10 = ((Float)hx::UShr(((int)c1->buffer->i->__get(c1->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXDLIN( 697)							Float _hx_tmp11 = ((Float)((int)c1->buffer->i->__get(c1->iPos) & (int)(int)255) / (Float)(int)255);
HXDLIN( 697)							Float _hx_tmp12 = c1->buffer->f->__get(c1->fPos);
HXDLIN( 697)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12);
HXLINE( 698)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
            						}
HXLINE( 702)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)2: {
HXLINE( 706)						{
HXLINE( 706)							Int _hx_tmp13 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 706)							switch((int)(_hx_tmp13)){
            								case (int)0: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 706)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 706)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 706)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 706)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 706)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 706)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 706)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 706)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 706)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 706)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 706)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 706)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 706)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 706)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 706)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 706)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN( 706)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 707)						Bool _hx_tmp14 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern );
HXDLIN( 707)						if (_hx_tmp14) {
HXLINE( 709)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix = null();
            						}
HXLINE( 713)						Int _hx_tmp15 = (c2->iiPos + (int)1);
HXDLIN( 713)						Int _hx_tmp16 = (c2->oPos + (int)1);
HXDLIN( 713)						Int _hx_tmp17 = (c2->oPos + (int)2);
HXDLIN( 713)						Int _hx_tmp18 = (c2->oPos + (int)3);
HXDLIN( 713)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c2->buffer->o->__get(c2->oPos),c2->buffer->ii->__get(c2->iiPos).StaticCast< ::Array< Int > >(),c2->buffer->ff->__get(c2->ffPos).StaticCast< ::Array< Float > >(),c2->buffer->ii->__get(_hx_tmp15).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c2->buffer->o->__get(_hx_tmp16)) ),c2->buffer->o->__get(_hx_tmp17),c2->buffer->o->__get(_hx_tmp18),c2->buffer->f->__get(c2->fPos));
HXLINE( 715)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = true;
HXLINE( 716)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            					}
            					break;
            					case (int)3: {
HXLINE( 496)						{
HXLINE( 496)							Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 496)							switch((int)(_hx_tmp19)){
            								case (int)0: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 496)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 496)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 496)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 496)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 496)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 496)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 496)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 496)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 496)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 496)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 496)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 496)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 496)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 496)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 496)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 496)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 496)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 497)						hasPath = true;
HXLINE( 498)						Float _hx_tmp20 = (c3->buffer->f->__get(c3->fPos) - offsetX);
HXDLIN( 498)						Float _hx_tmp21 = (c3->buffer->f->__get((c3->fPos + (int)1)) - offsetY);
HXDLIN( 498)						Float _hx_tmp22 = (c3->buffer->f->__get((c3->fPos + (int)2)) - offsetX);
HXDLIN( 498)						Float _hx_tmp23 = (c3->buffer->f->__get((c3->fPos + (int)3)) - offsetY);
HXDLIN( 498)						Float _hx_tmp24 = (c3->buffer->f->__get((c3->fPos + (int)4)) - offsetX);
HXDLIN( 498)						Float _hx_tmp25 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN( 498)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(_hx_tmp20,_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24,(_hx_tmp25 - offsetY));
            					}
            					break;
            					case (int)4: {
HXLINE( 502)						{
HXLINE( 502)							Int _hx_tmp26 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 502)							switch((int)(_hx_tmp26)){
            								case (int)0: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 502)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 502)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 502)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 502)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 502)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 502)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 502)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 502)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 502)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 502)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 502)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 502)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 502)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 502)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 502)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 502)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 502)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 503)						hasPath = true;
HXLINE( 504)						Float _hx_tmp27 = (c4->buffer->f->__get(c4->fPos) - offsetX);
HXDLIN( 504)						Float _hx_tmp28 = (c4->buffer->f->__get((c4->fPos + (int)1)) - offsetY);
HXDLIN( 504)						Float _hx_tmp29 = (c4->buffer->f->__get((c4->fPos + (int)2)) - offsetX);
HXDLIN( 504)						Float _hx_tmp30 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN( 504)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(_hx_tmp27,_hx_tmp28,_hx_tmp29,(_hx_tmp30 - offsetY));
            					}
            					break;
            					case (int)5: {
HXLINE( 508)						{
HXLINE( 508)							Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 508)							switch((int)(_hx_tmp31)){
            								case (int)0: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 508)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 508)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 508)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 508)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 508)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 508)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 508)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 508)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 508)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 508)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 508)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 508)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 508)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 508)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 508)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 508)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 508)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 509)						hasPath = true;
HXLINE( 510)						Float _hx_tmp32 = ((c5->buffer->f->__get(c5->fPos) - offsetX) + c5->buffer->f->__get((c5->fPos + (int)2)));
HXDLIN( 510)						Float _hx_tmp33 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 510)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(_hx_tmp32,(_hx_tmp33 - offsetY));
HXLINE( 511)						Float _hx_tmp34 = (c5->buffer->f->__get(c5->fPos) - offsetX);
HXDLIN( 511)						Float _hx_tmp35 = (c5->buffer->f->__get((c5->fPos + (int)1)) - offsetY);
HXDLIN( 511)						Float _hx_tmp36 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 511)						Float _hx_tmp37 = (::Math_obj::PI * (int)2);
HXDLIN( 511)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->arc(_hx_tmp34,_hx_tmp35,_hx_tmp36,(int)0,_hx_tmp37);
            					}
            					break;
            					case (int)6: {
HXLINE( 521)						{
HXLINE( 521)							Int _hx_tmp38 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 521)							switch((int)(_hx_tmp38)){
            								case (int)0: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 521)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 521)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 521)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 521)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 521)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 521)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 521)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 521)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 521)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 521)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 521)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 521)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 521)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 521)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 521)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 521)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 521)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 522)						hasPath = true;
HXLINE( 524)						HX_VARI( Float,x) = c6->buffer->f->__get(c6->fPos);
HXLINE( 525)						HX_VARI( Float,y) = c6->buffer->f->__get((c6->fPos + (int)1));
HXLINE( 526)						HX_VARI( Float,width) = c6->buffer->f->__get((c6->fPos + (int)2));
HXLINE( 527)						HX_VARI( Float,height) = c6->buffer->f->__get((c6->fPos + (int)3));
HXLINE( 529)						hx::SubEq(x,offsetX);
HXLINE( 530)						hx::SubEq(y,offsetY);
HXLINE( 532)						HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN( 532)						HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN( 532)						HX_VARI( Float,xe) = (x + width);
HXDLIN( 532)						HX_VARI( Float,ye) = (y + height);
HXDLIN( 532)						HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN( 532)						HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE( 540)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x,ym);
HXLINE( 541)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE( 542)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE( 543)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE( 544)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            					}
            					break;
            					case (int)8: {
HXLINE( 515)						{
HXLINE( 515)							Int _hx_tmp39 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 515)							switch((int)(_hx_tmp39)){
            								case (int)0: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 515)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 515)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 515)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 515)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 515)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 515)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 515)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 515)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 515)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 515)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 515)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 515)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 515)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 515)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 515)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 515)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 515)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 516)						hasPath = true;
HXLINE( 517)						Float _hx_tmp40 = (c7->buffer->f->__get(c7->fPos) - offsetX);
HXDLIN( 517)						Float _hx_tmp41 = (c7->buffer->f->__get((c7->fPos + (int)1)) - offsetY);
HXDLIN( 517)						Float _hx_tmp42 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 517)						Float _hx_tmp43 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 517)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->rectangle(_hx_tmp40,_hx_tmp41,_hx_tmp42,_hx_tmp43);
            					}
            					break;
            					case (int)9: {
HXLINE( 548)						{
HXLINE( 548)							Int _hx_tmp44 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 548)							switch((int)(_hx_tmp44)){
            								case (int)0: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 548)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 548)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 548)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 548)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 548)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 548)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 548)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 548)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 548)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 548)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 548)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 548)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 548)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 548)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 548)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 548)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 548)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 549)						hasPath = true;
HXLINE( 550)						Float _hx_tmp45 = (c8->buffer->f->__get(c8->fPos) - offsetX);
HXDLIN( 550)						Float _hx_tmp46 = (c8->buffer->f->__get((c8->fPos + (int)1)) - offsetY);
HXDLIN( 550)						Float _hx_tmp47 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN( 550)						Float _hx_tmp48 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN( 550)						Float _hx_tmp49 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN( 550)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(_hx_tmp45,_hx_tmp46,_hx_tmp47,_hx_tmp48,_hx_tmp49,c8->buffer->o->__get(c8->oPos));
            					}
            					break;
            					case (int)10: {
HXLINE( 885)						{
HXLINE( 885)							Int _hx_tmp50 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 885)							switch((int)(_hx_tmp50)){
            								case (int)0: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 885)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 885)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 885)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 885)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 885)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 885)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 885)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 885)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 885)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 885)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 885)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 885)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 885)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 885)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 885)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 885)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TILES_dyn();
HXDLIN( 885)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 886)						HX_VARI( Bool,useScale) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)1) > (int)0);
HXLINE( 887)						HX_VARI( Bool,useRotation) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)2) > (int)0);
HXLINE( 888)						HX_VARI_NAME( Float,offsetX1,"offsetX") = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x;
HXLINE( 889)						HX_VARI_NAME( Float,offsetY1,"offsetY") = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y;
HXLINE( 891)						HX_VARI( Bool,useTransform) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)16) > (int)0);
HXLINE( 892)						HX_VARI( Bool,useRGB) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)4) > (int)0);
HXLINE( 893)						HX_VARI( Bool,useAlpha) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)8) > (int)0);
HXLINE( 894)						HX_VARI( Bool,useRect) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)32) > (int)0);
HXLINE( 895)						HX_VARI( Bool,useOrigin) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)64) > (int)0);
HXLINE( 896)						HX_VARI( Bool,useBlendAdd) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)65536) > (int)0);
HXLINE( 897)						HX_VARI( Bool,useBlendOverlay) = (((int)c9->buffer->i->__get(c9->iPos) & (int)(int)4194304) > (int)0);
HXLINE( 899)						if (useTransform) {
HXLINE( 899)							useScale = false;
HXDLIN( 899)							useRotation = false;
            						}
HXLINE( 901)						HX_VARI( Int,scaleIndex) = (int)0;
HXLINE( 902)						HX_VARI( Int,rotationIndex) = (int)0;
HXLINE( 904)						HX_VARI( Int,alphaIndex) = (int)0;
HXLINE( 905)						HX_VARI( Int,transformIndex) = (int)0;
HXLINE( 907)						HX_VARI( Int,numValues) = (int)3;
HXLINE( 909)						if (useRect) {
HXLINE( 909)							if (useOrigin) {
HXLINE( 909)								numValues = (int)8;
            							}
            							else {
HXLINE( 909)								numValues = (int)6;
            							}
            						}
HXLINE( 910)						if (useScale) {
HXLINE( 910)							scaleIndex = numValues;
HXDLIN( 910)							++numValues;
            						}
HXLINE( 911)						if (useRotation) {
HXLINE( 911)							rotationIndex = numValues;
HXDLIN( 911)							++numValues;
            						}
HXLINE( 912)						if (useTransform) {
HXLINE( 912)							transformIndex = numValues;
HXDLIN( 912)							hx::AddEq(numValues,(int)4);
            						}
HXLINE( 913)						if (useRGB) {
HXLINE( 913)							hx::AddEq(numValues,(int)3);
            						}
HXLINE( 914)						if (useAlpha) {
HXLINE( 914)							alphaIndex = numValues;
HXDLIN( 914)							++numValues;
            						}
HXLINE( 916)						HX_VARI( Int,totalCount) = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->length;
HXLINE( 917)						Bool _hx_tmp51;
HXDLIN( 917)						if ((c9->buffer->i->__get((c9->iPos + (int)1)) >= (int)0)) {
HXLINE( 917)							_hx_tmp51 = (totalCount > c9->buffer->i->__get((c9->iPos + (int)1)));
            						}
            						else {
HXLINE( 917)							_hx_tmp51 = false;
            						}
HXDLIN( 917)						if (_hx_tmp51) {
HXLINE( 917)							totalCount = c9->buffer->i->__get((c9->iPos + (int)1));
            						}
HXLINE( 918)						::Std_obj::_hx_int(((Float)totalCount / (Float)numValues));
HXLINE( 919)						HX_VARI( Int,index) = (int)0;
HXLINE( 921)						HX_VARI(  ::openfl::geom::Rectangle,rect) = null();
HXLINE( 922)						HX_VARI(  ::openfl::geom::Point,center) = null();
HXLINE( 923)						HX_VARI( Int,previousTileID) = (int)-1;
HXLINE( 925)						HX_VAR(  ::Dynamic,surface);
HXLINE( 926)						c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >()->_hx___bitmap->_hx___sync();
HXLINE( 927)						surface = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >()->_hx___bitmap->getSurface();
HXLINE( 929)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->save();
HXLINE( 931)						if (useBlendAdd) {
HXLINE( 933)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)12);
            						}
HXLINE( 937)						if (useBlendOverlay) {
HXLINE( 939)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)16);
            						}
HXLINE( 943)						while((index < totalCount)){
HXLINE( 958)							Float _hx_tmp52 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)2));
HXDLIN( 958)							HX_VARI( Int,i) = ::Std_obj::_hx_int(_hx_tmp52);
HXLINE( 962)							HX_VAR( Int,tileID);
HXDLIN( 962)							if (!(useRect)) {
HXLINE( 962)								tileID = i;
            							}
            							else {
HXLINE( 962)								tileID = (int)-1;
            							}
HXLINE( 964)							Bool _hx_tmp53;
HXDLIN( 964)							if (!(useRect)) {
HXLINE( 964)								_hx_tmp53 = (tileID != previousTileID);
            							}
            							else {
HXLINE( 964)								_hx_tmp53 = false;
            							}
HXDLIN( 964)							if (_hx_tmp53) {
HXLINE( 966)								rect = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >()->_hx___tileRects->__get(tileID).StaticCast<  ::openfl::geom::Rectangle >();
HXLINE( 967)								center = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >()->_hx___centerPoints->__get(tileID).StaticCast<  ::openfl::geom::Point >();
HXLINE( 969)								previousTileID = tileID;
            							}
            							else {
HXLINE( 971)								if (useRect) {
HXLINE( 973)									rect = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >()->_hx___rectTile;
HXLINE( 974)									Float _hx_tmp54 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)2));
HXDLIN( 974)									Float _hx_tmp55 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)3));
HXDLIN( 974)									Float _hx_tmp56 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)4));
HXDLIN( 974)									Float _hx_tmp57 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)5));
HXDLIN( 974)									rect->setTo(_hx_tmp54,_hx_tmp55,_hx_tmp56,_hx_tmp57);
HXLINE( 975)									center = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >()->_hx___point;
HXLINE( 977)									if (useOrigin) {
HXLINE( 979)										Float _hx_tmp58 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)6));
HXDLIN( 979)										Float _hx_tmp59 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)7));
HXDLIN( 979)										center->setTo(_hx_tmp58,_hx_tmp59);
            									}
            									else {
HXLINE( 983)										center->setTo((int)0,(int)0);
            									}
            								}
            							}
HXLINE( 989)							Bool _hx_tmp60;
HXDLIN( 989)							Bool _hx_tmp61;
HXDLIN( 989)							Bool _hx_tmp62;
HXDLIN( 989)							Bool _hx_tmp63 = hx::IsNotNull( rect );
HXDLIN( 989)							if (_hx_tmp63) {
HXLINE( 989)								_hx_tmp62 = (rect->width > (int)0);
            							}
            							else {
HXLINE( 989)								_hx_tmp62 = false;
            							}
HXDLIN( 989)							if (_hx_tmp62) {
HXLINE( 989)								_hx_tmp61 = (rect->height > (int)0);
            							}
            							else {
HXLINE( 989)								_hx_tmp61 = false;
            							}
HXDLIN( 989)							if (_hx_tmp61) {
HXLINE( 989)								_hx_tmp60 = hx::IsNotNull( center );
            							}
            							else {
HXLINE( 989)								_hx_tmp60 = false;
            							}
HXDLIN( 989)							if (_hx_tmp60) {
HXLINE( 995)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->identityMatrix();
HXLINE( 997)								if (useTransform) {
HXLINE( 999)									HX_VARI(  ::lime::math::Matrix3,matrix) =  ::lime::math::Matrix3_obj::__new(c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + transformIndex)),c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get(((index + transformIndex) + (int)1)),c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get(((index + transformIndex) + (int)2)),c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get(((index + transformIndex) + (int)3)),(int)0,(int)0);
HXLINE(1000)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix(matrix);
            								}
HXLINE(1004)								Float _hx_tmp64 = (c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get(index) - offsetX1);
HXDLIN(1004)								Float _hx_tmp65 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + (int)1));
HXDLIN(1004)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(_hx_tmp64,(_hx_tmp65 - offsetY1));
HXLINE(1006)								if (useRotation) {
HXLINE(1008)									Float _hx_tmp66 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + rotationIndex));
HXDLIN(1008)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->rotate(_hx_tmp66);
            								}
HXLINE(1012)								if (useScale) {
HXLINE(1014)									HX_VARI( Float,scale) = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + scaleIndex));
HXLINE(1015)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->scale(scale,scale);
            								}
HXLINE(1019)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->setSourceSurface(surface,(int)0,(int)0);
HXLINE(1021)								if (useAlpha) {
HXLINE(1023)									Bool _hx_tmp67 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(1023)									if (_hx_tmp67) {
HXLINE(1023)										Float _hx_tmp68 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >()->__get((index + alphaIndex));
HXDLIN(1023)										::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->paintWithAlpha(_hx_tmp68);
            									}
            								}
            								else {
HXLINE(1027)									Bool _hx_tmp69 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(1027)									if (_hx_tmp69) {
HXLINE(1027)										::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->paint();
            									}
            								}
            							}
HXLINE(1035)							hx::AddEq(index,numValues);
            						}
HXLINE(1039)						Bool _hx_tmp70;
HXDLIN(1039)						if (!(useBlendAdd)) {
HXLINE(1039)							_hx_tmp70 = useBlendOverlay;
            						}
            						else {
HXLINE(1039)							_hx_tmp70 = true;
            						}
HXDLIN(1039)						if (_hx_tmp70) {
HXLINE(1041)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)2);
            						}
HXLINE(1045)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->restore();
            					}
            					break;
            					case (int)11: {
HXLINE( 720)						{
HXLINE( 720)							Int _hx_tmp71 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 720)							switch((int)(_hx_tmp71)){
            								case (int)0: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 720)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 720)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 720)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 720)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 720)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 720)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 720)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 720)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 720)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 720)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 720)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 720)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 720)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 720)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 720)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 720)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 720)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 721)						HX_VARI( ::Array< Float >,v) = ( (::Array< Float >)(c10->buffer->o->__get(c10->oPos)) );
HXLINE( 722)						HX_VARI( ::Array< Int >,ind) = ( (::Array< Int >)(c10->buffer->o->__get((c10->oPos + (int)1))) );
HXLINE( 723)						HX_VARI( ::Array< Float >,uvt) = ( (::Array< Float >)(c10->buffer->o->__get((c10->oPos + (int)2))) );
HXLINE( 724)						HX_VARI( Bool,colorFill) = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill );
HXLINE( 726)						Bool _hx_tmp72;
HXDLIN( 726)						if (colorFill) {
HXLINE( 726)							_hx_tmp72 = hx::IsNotNull( uvt );
            						}
            						else {
HXLINE( 726)							_hx_tmp72 = false;
            						}
HXDLIN( 726)						if (_hx_tmp72) {
HXLINE( 728)							goto _hx_goto_5;
            						}
HXLINE( 732)						HX_VARI_NAME( Int,width1,"width") = (int)0;
HXLINE( 733)						HX_VARI_NAME( Int,height1,"height") = (int)0;
HXLINE( 735)						if (!(colorFill)) {
HXLINE( 739)							Bool _hx_tmp73 = hx::IsNull( uvt );
HXDLIN( 739)							if (_hx_tmp73) {
HXLINE( 741)								HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN( 741)								this1->__SetSizeExact(null());
HXDLIN( 741)								uvt = this1;
HXLINE( 743)								{
HXLINE( 743)									HX_VARI( Int,_g3) = (int)0;
HXDLIN( 743)									Float _hx_tmp74 = ((Float)v->length / (Float)(int)2);
HXDLIN( 743)									HX_VARI( Int,_g2) = ::Std_obj::_hx_int(_hx_tmp74);
HXDLIN( 743)									while((_g3 < _g2)){
HXLINE( 743)										HX_VARI_NAME( Int,i1,"i") = _g3++;
HXLINE( 745)										{
HXLINE( 745)											Float x1 = ((Float)v->__get((i1 * (int)2)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width);
HXDLIN( 745)											uvt->push(x1);
            										}
HXLINE( 746)										{
HXLINE( 746)											Float x2 = ((Float)v->__get(((i1 * (int)2) + (int)1)) / (Float)::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height);
HXDLIN( 746)											uvt->push(x2);
            										}
            									}
            								}
            							}
HXLINE( 752)							HX_VARI( Bool,skipT) = (( (::Array< Float >)(c10->buffer->o->__get((c10->oPos + (int)2))) )->length != v->length);
HXLINE( 753)							HX_VARI(  ::Dynamic,normalizedUVT) = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::normalizeUVT(uvt,skipT);
HXLINE( 754)							HX_VARI( Float,maxUVT) = ( (Float)(normalizedUVT->__Field(HX_("max",a4,0a,53,00),hx::paccDynamic)) );
HXLINE( 755)							uvt = ( (::Array< Float >)(normalizedUVT->__Field(HX_("uvt",f3,2e,59,00),hx::paccDynamic)) );
HXLINE( 757)							if ((maxUVT > (int)1)) {
HXLINE( 758)								width1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXLINE( 759)								height1 = ::Std_obj::_hx_int(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
            							}
            							else {
HXLINE( 764)								width1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->width;
HXLINE( 765)								height1 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill->height;
            							}
            						}
HXLINE( 771)						HX_VARI_NAME( Int,i2,"i") = (int)0;
HXLINE( 772)						HX_VARI( Int,l) = ind->length;
HXLINE( 774)						HX_VAR( Int,a_);
HXDLIN( 774)						HX_VAR( Int,b_);
HXDLIN( 774)						HX_VAR( Int,c_);
HXLINE( 775)						HX_VAR( Int,iax);
HXDLIN( 775)						HX_VAR( Int,iay);
HXDLIN( 775)						HX_VAR( Int,ibx);
HXDLIN( 775)						HX_VAR( Int,iby);
HXDLIN( 775)						HX_VAR( Int,icx);
HXDLIN( 775)						HX_VAR( Int,icy);
HXLINE( 776)						HX_VAR_NAME( Float,x11,"x1");
HXDLIN( 776)						HX_VAR( Float,y1);
HXDLIN( 776)						HX_VAR_NAME( Float,x21,"x2");
HXDLIN( 776)						HX_VAR( Float,y2);
HXDLIN( 776)						HX_VAR( Float,x3);
HXDLIN( 776)						HX_VAR( Float,y3);
HXLINE( 777)						HX_VAR( Float,uvx1);
HXDLIN( 777)						HX_VAR( Float,uvy1);
HXDLIN( 777)						HX_VAR( Float,uvx2);
HXDLIN( 777)						HX_VAR( Float,uvy2);
HXDLIN( 777)						HX_VAR( Float,uvx3);
HXDLIN( 777)						HX_VAR( Float,uvy3);
HXLINE( 778)						HX_VAR( Float,denom);
HXLINE( 779)						HX_VAR( Float,t1);
HXDLIN( 779)						HX_VAR( Float,t2);
HXDLIN( 779)						HX_VAR( Float,t3);
HXDLIN( 779)						HX_VAR( Float,t4);
HXLINE( 780)						HX_VAR( Float,dx);
HXDLIN( 780)						HX_VAR( Float,dy);
HXLINE( 782)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_antialias((int)1);
HXLINE( 784)						while((i2 < l)){
HXLINE( 786)							a_ = i2;
HXLINE( 787)							b_ = (i2 + (int)1);
HXLINE( 788)							c_ = (i2 + (int)2);
HXLINE( 790)							iax = (ind->__get(a_) * (int)2);
HXLINE( 791)							iay = ((ind->__get(a_) * (int)2) + (int)1);
HXLINE( 792)							ibx = (ind->__get(b_) * (int)2);
HXLINE( 793)							iby = ((ind->__get(b_) * (int)2) + (int)1);
HXLINE( 794)							icx = (ind->__get(c_) * (int)2);
HXLINE( 795)							icy = ((ind->__get(c_) * (int)2) + (int)1);
HXLINE( 797)							x11 = v->__get(iax);
HXLINE( 798)							y1 = v->__get(iay);
HXLINE( 799)							x21 = v->__get(ibx);
HXLINE( 800)							y2 = v->__get(iby);
HXLINE( 801)							x3 = v->__get(icx);
HXLINE( 802)							y3 = v->__get(icy);
HXLINE( 804)							 ::Dynamic _hx_switch_0 = c10->buffer->o->__get((c10->oPos + (int)3));
            							if (  (_hx_switch_0==(int)0) ){
HXLINE( 817)								if (((((x21 - x11) * (y3 - y1)) - ((y2 - y1) * (x3 - x11))) < (int)0)) {
HXLINE( 819)									hx::AddEq(i2,(int)3);
HXLINE( 820)									continue;
            								}
HXLINE( 817)								goto _hx_goto_9;
            							}
            							if (  (_hx_switch_0==(int)2) ){
HXLINE( 808)								if (!(((((x21 - x11) * (y3 - y1)) - ((y2 - y1) * (x3 - x11))) < (int)0))) {
HXLINE( 810)									hx::AddEq(i2,(int)3);
HXLINE( 811)									continue;
            								}
HXLINE( 808)								goto _hx_goto_9;
            							}
            							/* default */{
            							}
            							_hx_goto_9:;
HXLINE( 828)							if (colorFill) {
HXLINE( 830)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 831)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x11,y1);
HXLINE( 832)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x21,y2);
HXLINE( 833)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 834)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 835)								Bool _hx_tmp75 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 835)								if (_hx_tmp75) {
HXLINE( 835)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            								}
HXLINE( 836)								hx::AddEq(i2,(int)3);
HXLINE( 837)								continue;
            							}
HXLINE( 841)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->identityMatrix();
HXLINE( 844)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->newPath();
HXLINE( 845)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(x11,y1);
HXLINE( 846)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x21,y2);
HXLINE( 847)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(x3,y3);
HXLINE( 848)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
HXLINE( 851)							uvx1 = (uvt->__get(iax) * width1);
HXLINE( 852)							uvx2 = (uvt->__get(ibx) * width1);
HXLINE( 853)							uvx3 = (uvt->__get(icx) * width1);
HXLINE( 854)							uvy1 = (uvt->__get(iay) * height1);
HXLINE( 855)							uvy2 = (uvt->__get(iby) * height1);
HXLINE( 856)							uvy3 = (uvt->__get(icy) * height1);
HXLINE( 858)							denom = ((((uvx1 * (uvy3 - uvy2)) - (uvx2 * uvy3)) + (uvx3 * uvy2)) + ((uvx2 - uvx3) * uvy1));
HXLINE( 860)							if ((denom == (int)0)) {
HXLINE( 862)								hx::AddEq(i2,(int)3);
HXLINE( 863)								continue;
            							}
HXLINE( 867)							t1 = ((Float)-(((((uvy1 * (x3 - x21)) - (uvy2 * x3)) + (uvy3 * x21)) + ((uvy2 - uvy3) * x11))) / (Float)denom);
HXLINE( 868)							t2 = ((Float)((((uvy2 * y3) + (uvy1 * (y2 - y3))) - (uvy3 * y2)) + ((uvy3 - uvy2) * y1)) / (Float)denom);
HXLINE( 869)							t3 = ((Float)((((uvx1 * (x3 - x21)) - (uvx2 * x3)) + (uvx3 * x21)) + ((uvx2 - uvx3) * x11)) / (Float)denom);
HXLINE( 870)							t4 = ((Float)-(((((uvx2 * y3) + (uvx1 * (y2 - y3))) - (uvx3 * y2)) + ((uvx3 - uvx2) * y1))) / (Float)denom);
HXLINE( 871)							dx = ((Float)(((uvx1 * ((uvy3 * x21) - (uvy2 * x3))) + (uvy1 * ((uvx2 * x3) - (uvx3 * x21)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * x11)) / (Float)denom);
HXLINE( 872)							dy = ((Float)(((uvx1 * ((uvy3 * y2) - (uvy2 * y3))) + (uvy1 * ((uvx2 * y3) - (uvx3 * y2)))) + (((uvx3 * uvy2) - (uvx2 * uvy3)) * y1)) / (Float)denom);
HXLINE( 875)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_matrix( ::lime::math::Matrix3_obj::__new(t1,t2,t3,t4,dx,dy));
HXLINE( 876)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE( 877)							Bool _hx_tmp76 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN( 877)							if (_hx_tmp76) {
HXLINE( 877)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fill();
            							}
HXLINE( 879)							hx::AddEq(i2,(int)3);
            						}
            					}
            					break;
            					case (int)13: {
HXLINE( 660)						{
HXLINE( 660)							Int _hx_tmp77 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 660)							switch((int)(_hx_tmp77)){
            								case (int)0: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 660)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 660)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 660)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 660)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 660)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 660)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 660)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 660)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 660)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 660)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 660)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 660)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 660)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 660)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 660)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 660)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN( 660)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 661)						Bool _hx_tmp78;
HXDLIN( 661)						if (stroke) {
HXLINE( 661)							_hx_tmp78 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 661)							_hx_tmp78 = false;
            						}
HXDLIN( 661)						if (_hx_tmp78) {
HXLINE( 663)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath();
            						}
HXLINE( 667)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 668)						Int _hx_tmp79 = (c11->oPos + (int)1);
HXDLIN( 668)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createImagePattern(( ( ::openfl::display::BitmapData)(c11->buffer->o->__get(c11->oPos)) ),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp79)) ),c11->buffer->b->__get(c11->bPos));
HXLINE( 670)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)14: {
HXLINE( 646)						{
HXLINE( 646)							Int _hx_tmp80 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 646)							switch((int)(_hx_tmp80)){
            								case (int)0: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 646)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 646)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 646)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 646)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 646)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 646)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 646)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 646)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 646)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 646)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 646)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 646)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 646)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 646)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 646)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 646)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN( 646)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 647)						Bool _hx_tmp81;
HXDLIN( 647)						if (stroke) {
HXLINE( 647)							_hx_tmp81 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 647)							_hx_tmp81 = false;
            						}
HXDLIN( 647)						if (_hx_tmp81) {
HXLINE( 649)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath();
            						}
HXLINE( 653)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 654)						Int _hx_tmp82 = (c12->iiPos + (int)1);
HXDLIN( 654)						Int _hx_tmp83 = (c12->oPos + (int)1);
HXDLIN( 654)						Int _hx_tmp84 = (c12->oPos + (int)2);
HXDLIN( 654)						Int _hx_tmp85 = (c12->oPos + (int)3);
HXDLIN( 654)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::createGradientPattern(c12->buffer->o->__get(c12->oPos),c12->buffer->ii->__get(c12->iiPos).StaticCast< ::Array< Int > >(),c12->buffer->ff->__get(c12->ffPos).StaticCast< ::Array< Float > >(),c12->buffer->ii->__get(_hx_tmp82).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c12->buffer->o->__get(_hx_tmp83)) ),c12->buffer->o->__get(_hx_tmp84),c12->buffer->o->__get(_hx_tmp85),c12->buffer->f->__get(c12->fPos));
HXLINE( 656)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
            					}
            					break;
            					case (int)15: {
HXLINE( 575)						{
HXLINE( 575)							Int _hx_tmp86 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 575)							switch((int)(_hx_tmp86)){
            								case (int)0: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 575)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 575)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 575)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 575)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 575)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 575)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 575)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 575)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 575)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 575)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 575)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 575)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 575)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 575)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 575)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 575)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 575)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 576)						Bool _hx_tmp87;
HXDLIN( 576)						if (stroke) {
HXLINE( 576)							_hx_tmp87 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            						}
            						else {
HXLINE( 576)							_hx_tmp87 = false;
            						}
HXDLIN( 576)						if (_hx_tmp87) {
HXLINE( 578)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::closePath();
            						}
HXLINE( 582)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo((positionX - offsetX),(positionY - offsetY));
HXLINE( 584)						Bool _hx_tmp88 = hx::IsNull( c13->buffer->o->__get(c13->oPos) );
HXDLIN( 584)						if (_hx_tmp88) {
HXLINE( 586)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
            						}
            						else {
HXLINE( 590)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = true;
HXLINE( 592)							Float _hx_tmp89;
HXDLIN( 592)							if (hx::IsGreater( c13->buffer->o->__get(c13->oPos),(int)0 )) {
HXLINE( 592)								_hx_tmp89 = c13->buffer->o->__get(c13->oPos);
            							}
            							else {
HXLINE( 592)								_hx_tmp89 = (int)1;
            							}
HXDLIN( 592)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineWidth(_hx_tmp89);
HXLINE( 594)							Bool _hx_tmp90 = hx::IsNull( c13->buffer->o->__get((c13->oPos + (int)3)) );
HXDLIN( 594)							if (_hx_tmp90) {
HXLINE( 596)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin((int)1);
            							}
            							else {
HXLINE( 600)								HX_VARI_NAME(  ::Dynamic,_g21,"_g2") = c13->buffer->o->__get((c13->oPos + (int)3));
HXDLIN( 600)								Int _hx_tmp91;
HXDLIN( 600)								 ::Dynamic _hx_switch_1 = _g21;
            								if (  (_hx_switch_1==(int)0) ){
HXLINE( 600)									_hx_tmp91 = (int)2;
HXDLIN( 600)									goto _hx_goto_10;
            								}
            								if (  (_hx_switch_1==(int)1) ){
HXLINE( 600)									_hx_tmp91 = (int)0;
HXDLIN( 600)									goto _hx_goto_10;
            								}
            								/* default */{
HXLINE( 600)									_hx_tmp91 = (int)1;
            								}
            								_hx_goto_10:;
HXDLIN( 600)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineJoin(_hx_tmp91);
            							}
HXLINE( 610)							Bool _hx_tmp92 = hx::IsNull( c13->buffer->o->__get((c13->oPos + (int)2)) );
HXDLIN( 610)							if (_hx_tmp92) {
HXLINE( 612)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap((int)1);
            							}
            							else {
HXLINE( 616)								HX_VARI_NAME(  ::Dynamic,_g22,"_g2") = c13->buffer->o->__get((c13->oPos + (int)2));
HXDLIN( 616)								Int _hx_tmp93;
HXDLIN( 616)								 ::Dynamic _hx_switch_2 = _g22;
            								if (  (_hx_switch_2==(int)0) ){
HXLINE( 616)									_hx_tmp93 = (int)0;
HXDLIN( 616)									goto _hx_goto_11;
            								}
            								if (  (_hx_switch_2==(int)2) ){
HXLINE( 616)									_hx_tmp93 = (int)2;
HXDLIN( 616)									goto _hx_goto_11;
            								}
            								/* default */{
HXLINE( 616)									_hx_tmp93 = (int)1;
            								}
            								_hx_goto_11:;
HXDLIN( 616)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_lineCap(_hx_tmp93);
            							}
HXLINE( 626)							Int _hx_tmp94 = (c13->fPos + (int)1);
HXDLIN( 626)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_miterLimit(c13->buffer->f->__get(_hx_tmp94));
HXLINE( 628)							HX_VARI( Float,r) = ((Float)hx::UShr(((int)c13->buffer->i->__get(c13->iPos) & (int)(int)16711680),(int)16) / (Float)(int)255);
HXLINE( 629)							HX_VARI( Float,g) = ((Float)hx::UShr(((int)c13->buffer->i->__get(c13->iPos) & (int)(int)65280),(int)8) / (Float)(int)255);
HXLINE( 630)							HX_VARI( Float,b) = ((Float)((int)c13->buffer->i->__get(c13->iPos) & (int)(int)255) / (Float)(int)255);
HXLINE( 632)							Bool _hx_tmp95 = (c13->buffer->f->__get(c13->fPos) == (int)1);
HXDLIN( 632)							if (_hx_tmp95) {
HXLINE( 634)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGB(r,g,b);
            							}
            							else {
HXLINE( 638)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createRGBA(r,g,b,c13->buffer->f->__get(c13->fPos));
            							}
            						}
            					}
            					break;
            					case (int)16: {
HXLINE( 554)						{
HXLINE( 554)							Int _hx_tmp96 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 554)							switch((int)(_hx_tmp96)){
            								case (int)0: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 554)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 554)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 554)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 554)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 554)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 554)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 554)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 554)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 554)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 554)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 554)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 554)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 554)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 554)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 554)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 554)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 554)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE( 555)						hasPath = true;
HXLINE( 556)						Float _hx_tmp97 = (c14->buffer->f->__get(c14->fPos) - offsetX);
HXDLIN( 556)						Float _hx_tmp98 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN( 556)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo(_hx_tmp97,(_hx_tmp98 - offsetY));
HXLINE( 558)						positionX = c14->buffer->f->__get(c14->fPos);
HXLINE( 559)						positionY = c14->buffer->f->__get((c14->fPos + (int)1));
            					}
            					break;
            					case (int)17: {
HXLINE( 563)						{
HXLINE( 563)							Int _hx_tmp99 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 563)							switch((int)(_hx_tmp99)){
            								case (int)0: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 563)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE( 563)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 563)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 563)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)5);
HXDLIN( 563)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE( 563)									hx::AddEq(data->tsPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->bPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->iPos,(int)2);
HXDLIN( 563)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)2);
HXDLIN( 563)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 563)									hx::AddEq(data->iiPos,(int)2);
HXDLIN( 563)									hx::AddEq(data->ffPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)4);
HXDLIN( 563)									hx::AddEq(data->iPos,(int)1);
HXDLIN( 563)									hx::AddEq(data->fPos,(int)2);
HXDLIN( 563)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE( 563)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE( 563)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE( 563)						data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 563)						HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c15,"c") = data;
HXLINE( 564)						Float _hx_tmp100 = (c15->buffer->f->__get(c15->fPos) - offsetX);
HXDLIN( 564)						Float _hx_tmp101 = c15->buffer->f->__get((c15->fPos + (int)1));
HXDLIN( 564)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(_hx_tmp100,(_hx_tmp101 - offsetY));
HXLINE( 566)						positionX = c15->buffer->f->__get(c15->fPos);
HXLINE( 567)						positionY = c15->buffer->f->__get((c15->fPos + (int)1));
HXLINE( 569)						closeGap = true;
HXLINE( 570)						startX = c15->buffer->f->__get(c15->fPos);
HXLINE( 571)						startY = c15->buffer->f->__get((c15->fPos + (int)1));
            					}
            					break;
            					default:{
HXLINE(1049)						{
HXLINE(1049)							Int _hx_tmp102 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1049)							switch((int)(_hx_tmp102)){
            								case (int)0: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)2);
HXDLIN(1049)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)1: {
HXLINE(1049)									hx::AddEq(data->iPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)2: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)4);
HXDLIN(1049)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(1049)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)3: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)6);
            								}
            								break;
            								case (int)4: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)5: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)3);
            								}
            								break;
            								case (int)6: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)7: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)3);
            								}
            								break;
            								case (int)8: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)4);
            								}
            								break;
            								case (int)9: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)5);
HXDLIN(1049)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)10: {
HXLINE(1049)									hx::AddEq(data->tsPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->bPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->iPos,(int)2);
HXDLIN(1049)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								case (int)11: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)4);
            								}
            								break;
            								case (int)12: {
            								}
            								break;
            								case (int)13: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)2);
HXDLIN(1049)									hx::AddEq(data->bPos,(int)2);
            								}
            								break;
            								case (int)14: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)4);
HXDLIN(1049)									hx::AddEq(data->iiPos,(int)2);
HXDLIN(1049)									hx::AddEq(data->ffPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->fPos,(int)1);
            								}
            								break;
            								case (int)15: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)4);
HXDLIN(1049)									hx::AddEq(data->iPos,(int)1);
HXDLIN(1049)									hx::AddEq(data->fPos,(int)2);
HXDLIN(1049)									hx::AddEq(data->bPos,(int)1);
            								}
            								break;
            								case (int)16: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)17: {
HXLINE(1049)									hx::AddEq(data->fPos,(int)2);
            								}
            								break;
            								case (int)18: {
HXLINE(1049)									hx::AddEq(data->oPos,(int)1);
            								}
            								break;
            								default:{
            								}
            							}
            						}
HXLINE(1049)						data->prev = type;
            					}
            				}
            			}
            			_hx_goto_5:;
            		}
HXLINE(1055)		data->destroy();
HXLINE(1057)		if (hasPath) {
HXLINE(1059)			Bool _hx_tmp103;
HXDLIN(1059)			if (stroke) {
HXLINE(1059)				_hx_tmp103 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke;
            			}
            			else {
HXLINE(1059)				_hx_tmp103 = false;
            			}
HXDLIN(1059)			if (_hx_tmp103) {
HXLINE(1061)				Bool _hx_tmp104;
HXDLIN(1061)				if (::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill) {
HXLINE(1061)					_hx_tmp104 = closeGap;
            				}
            				else {
HXLINE(1061)					_hx_tmp104 = false;
            				}
HXDLIN(1061)				if (_hx_tmp104) {
HXLINE(1063)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->lineTo((startX - offsetX),(startY - offsetY));
            				}
            				else {
HXLINE(1065)					Bool _hx_tmp105;
HXDLIN(1065)					Bool _hx_tmp106;
HXDLIN(1065)					if (closeGap) {
HXLINE(1065)						_hx_tmp106 = (positionX == startX);
            					}
            					else {
HXLINE(1065)						_hx_tmp106 = false;
            					}
HXDLIN(1065)					if (_hx_tmp106) {
HXLINE(1065)						_hx_tmp105 = (positionY == startY);
            					}
            					else {
HXLINE(1065)						_hx_tmp105 = false;
            					}
HXDLIN(1065)					if (_hx_tmp105) {
HXLINE(1067)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            					}
            				}
HXLINE(1071)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern);
HXLINE(1072)				Bool _hx_tmp107 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(1072)				if (_hx_tmp107) {
HXLINE(1072)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->strokePreserve();
            				}
            			}
HXLINE(1076)			Bool _hx_tmp108;
HXDLIN(1076)			if (!(stroke)) {
HXLINE(1076)				_hx_tmp108 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill;
            			}
            			else {
HXLINE(1076)				_hx_tmp108 = false;
            			}
HXDLIN(1076)			if (_hx_tmp108) {
HXLINE(1078)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x),-(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y));
HXLINE(1080)				Bool _hx_tmp109 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix );
HXDLIN(1080)				if (_hx_tmp109) {
HXLINE(1082)					HX_VARI_NAME(  ::openfl::geom::Matrix,matrix1,"matrix") = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPatternMatrix->clone();
HXLINE(1083)					matrix1->invert();
HXLINE(1085)					Bool _hx_tmp110 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix );
HXDLIN(1085)					if (_hx_tmp110) {
HXLINE(1087)						matrix1->concat(::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix);
            					}
HXLINE(1091)					 ::Dynamic _hx_tmp111 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern;
HXDLIN(1091)					 ::lime::math::Matrix3 _hx_tmp112 = matrix1->_hx___toMatrix3();
HXDLIN(1091)					::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_matrix(_hx_tmp111,_hx_tmp112);
            				}
HXLINE(1095)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_source(::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern);
HXLINE(1097)				Bool _hx_tmp113 = hx::IsNotNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix );
HXDLIN(1097)				if (_hx_tmp113) {
HXLINE(1099)					 ::lime::math::Matrix3 _hx_tmp114 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::pendingMatrix->_hx___toMatrix3();
HXDLIN(1099)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->transform(_hx_tmp114);
HXLINE(1100)					Bool _hx_tmp115 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(1100)					if (_hx_tmp115) {
HXLINE(1100)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
HXLINE(1101)					 ::lime::math::Matrix3 _hx_tmp116 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::inversePendingMatrix->_hx___toMatrix3();
HXDLIN(1101)					::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->transform(_hx_tmp116);
            				}
            				else {
HXLINE(1105)					Bool _hx_tmp117 = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting);
HXDLIN(1105)					if (_hx_tmp117) {
HXLINE(1105)						::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->fillPreserve();
            					}
            				}
HXLINE(1109)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->translate(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->x,::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->y);
HXLINE(1110)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->closePath();
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,playCommands,(void))

void CairoGraphics_obj::quadraticCurveTo(Float cx,Float cy,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","quadraticCurveTo",0x01a3b18e,"openfl._internal.renderer.cairo.CairoGraphics.quadraticCurveTo","openfl/_internal/renderer/cairo/CairoGraphics.hx",1118,0x744ae94c)
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1120)		HX_VARI(  ::lime::math::Vector2,current) = null();
HXLINE(1122)		Bool _hx_tmp = !(::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_hasCurrentPoint());
HXDLIN(1122)		if (_hx_tmp) {
HXLINE(1124)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->moveTo(cx,cy);
HXLINE(1125)			current =  ::lime::math::Vector2_obj::__new(cx,cy);
            		}
            		else {
HXLINE(1129)			current = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->get_currentPoint();
            		}
HXLINE(1133)		HX_VARI( Float,cx1) = (current->x + (((Float)0.66666666666666663) * (cx - current->x)));
HXLINE(1134)		HX_VARI( Float,cy1) = (current->y + (((Float)0.66666666666666663) * (cy - current->y)));
HXLINE(1138)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->curveTo(cx1,cy1,(x + (((Float)0.66666666666666663) * (cx - x))),(y + (((Float)0.66666666666666663) * (cy - y))),x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CairoGraphics_obj,quadraticCurveTo,(void))

void CairoGraphics_obj::render( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","render",0x3c3e61d2,"openfl._internal.renderer.cairo.CairoGraphics.render","openfl/_internal/renderer/cairo/CairoGraphics.hx",1143,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1146)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::graphics = graphics;
HXLINE(1148)		if (!(graphics->_hx___dirty)) {
HXLINE(1148)			return;
            		}
HXLINE(1150)		::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds = graphics->_hx___bounds;
HXLINE(1152)		Bool _hx_tmp;
HXDLIN(1152)		Bool _hx_tmp1;
HXDLIN(1152)		Bool _hx_tmp2;
HXDLIN(1152)		Bool _hx_tmp3;
HXDLIN(1152)		Bool _hx_tmp4 = !(!(graphics->_hx___visible));
HXDLIN(1152)		if (_hx_tmp4) {
HXLINE(1152)			Int _hx_tmp5 = graphics->_hx___commands->get_length();
HXDLIN(1152)			_hx_tmp3 = (_hx_tmp5 == (int)0);
            		}
            		else {
HXLINE(1152)			_hx_tmp3 = true;
            		}
HXDLIN(1152)		if (!(_hx_tmp3)) {
HXLINE(1152)			_hx_tmp2 = hx::IsNull( ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds );
            		}
            		else {
HXLINE(1152)			_hx_tmp2 = true;
            		}
HXDLIN(1152)		if (!(_hx_tmp2)) {
HXLINE(1152)			_hx_tmp1 = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width < (int)1);
            		}
            		else {
HXLINE(1152)			_hx_tmp1 = true;
            		}
HXDLIN(1152)		if (!(_hx_tmp1)) {
HXLINE(1152)			_hx_tmp = (::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height < (int)1);
            		}
            		else {
HXLINE(1152)			_hx_tmp = true;
            		}
HXDLIN(1152)		if (_hx_tmp) {
HXLINE(1154)			graphics->_hx___cairo = null();
HXLINE(1155)			graphics->_hx___bitmap = null();
            		}
            		else {
HXLINE(1159)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hitTesting = false;
HXLINE(1161)			Bool _hx_tmp6 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(1161)			if (_hx_tmp6) {
HXLINE(1163)				HX_VARI(  ::Dynamic,surface) = graphics->_hx___cairo->get_target();
HXLINE(1165)				Bool _hx_tmp7;
HXDLIN(1165)				Float _hx_tmp8 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width;
HXDLIN(1165)				Int _hx_tmp9 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_width(surface);
HXDLIN(1165)				if ((_hx_tmp8 == _hx_tmp9)) {
HXLINE(1165)					Float _hx_tmp10 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height;
HXDLIN(1165)					Int _hx_tmp11 = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::get_height(surface);
HXDLIN(1165)					_hx_tmp7 = (_hx_tmp10 != _hx_tmp11);
            				}
            				else {
HXLINE(1165)					_hx_tmp7 = true;
            				}
HXDLIN(1165)				if (_hx_tmp7) {
HXLINE(1167)					graphics->_hx___cairo = null();
            				}
            			}
HXLINE(1173)			Bool _hx_tmp12;
HXDLIN(1173)			Bool _hx_tmp13 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(1173)			if (_hx_tmp13) {
HXLINE(1173)				_hx_tmp12 = hx::IsNull( graphics->_hx___bitmap );
            			}
            			else {
HXLINE(1173)				_hx_tmp12 = true;
            			}
HXDLIN(1173)			if (_hx_tmp12) {
HXLINE(1175)				Int _hx_tmp14 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->width);
HXDLIN(1175)				Int _hx_tmp15 = ::Math_obj::floor(::openfl::_internal::renderer::cairo::CairoGraphics_obj::bounds->height);
HXDLIN(1175)				HX_VARI(  ::openfl::display::BitmapData,bitmap) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp14,_hx_tmp15,true,(int)0);
HXLINE(1176)				HX_VARI_NAME(  ::Dynamic,surface1,"surface") = bitmap->getSurface();
HXLINE(1177)				graphics->_hx___cairo =  ::lime::graphics::cairo::Cairo_obj::__new(surface1);
HXLINE(1178)				graphics->_hx___bitmap = bitmap;
            			}
HXLINE(1182)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo = graphics->_hx___cairo;
HXLINE(1184)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)0);
HXLINE(1185)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->paint();
HXLINE(1186)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::cairo->set_operator((int)2);
HXLINE(1188)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->clear();
HXLINE(1189)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->clear();
HXLINE(1191)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1192)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasStroke = false;
HXLINE(1194)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillPattern = null();
HXLINE(1195)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokePattern = null();
HXLINE(1197)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE(1199)			{
HXLINE(1199)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1199)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1199)				while((_g < _g1->length)){
HXLINE(1199)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(1199)					++_g;
HXLINE(1201)					Int _hx_tmp16 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1201)					switch((int)(_hx_tmp16)){
            						case (int)0: case (int)1: case (int)2: {
HXLINE(1252)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1253)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1255)							if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn() )) {
HXLINE(1257)								{
HXLINE(1257)									Int _hx_tmp17 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1257)									switch((int)(_hx_tmp17)){
            										case (int)0: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1257)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1257)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1257)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1257)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)3);
            										}
            										break;
            										case (int)8: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)9: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)5);
HXDLIN(1257)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1257)											hx::AddEq(data->tsPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->bPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->iPos,(int)2);
HXDLIN(1257)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)11: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)12: {
            										}
            										break;
            										case (int)13: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1257)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)14: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1257)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1257)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1257)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1257)											hx::AddEq(data->fPos,(int)2);
HXDLIN(1257)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)16: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1257)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)18: {
HXLINE(1257)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE(1257)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN(1257)								HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1258)								 ::openfl::display::BitmapData _hx_tmp18 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1258)								 ::openfl::geom::Matrix _hx_tmp19 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(1258)								Bool _hx_tmp20 = c->buffer->b->__get(c->bPos);
HXDLIN(1258)								Bool _hx_tmp21 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(1258)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginBitmapFill(_hx_tmp18,_hx_tmp19,_hx_tmp20,_hx_tmp21);
HXLINE(1259)								 ::openfl::display::BitmapData _hx_tmp22 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN(1259)								 ::openfl::geom::Matrix _hx_tmp23 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN(1259)								Bool _hx_tmp24 = c->buffer->b->__get(c->bPos);
HXDLIN(1259)								Bool _hx_tmp25 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN(1259)								::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginBitmapFill(_hx_tmp22,_hx_tmp23,_hx_tmp24,_hx_tmp25);
            							}
            							else {
HXLINE(1261)								if (hx::IsEq( type,::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn() )) {
HXLINE(1263)									{
HXLINE(1263)										Int _hx_tmp26 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1263)										switch((int)(_hx_tmp26)){
            											case (int)0: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1263)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE(1263)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1263)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1263)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)3);
            											}
            											break;
            											case (int)8: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)9: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)5);
HXDLIN(1263)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE(1263)												hx::AddEq(data->tsPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->bPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->iPos,(int)2);
HXDLIN(1263)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)11: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)12: {
            											}
            											break;
            											case (int)13: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1263)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)14: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1263)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1263)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1263)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1263)												hx::AddEq(data->fPos,(int)2);
HXDLIN(1263)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)16: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE(1263)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)18: {
HXLINE(1263)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE(1263)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_GRADIENT_FILL_dyn();
HXDLIN(1263)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1264)									Int _hx_tmp27 = (c1->iiPos + (int)1);
HXDLIN(1264)									Int _hx_tmp28 = (c1->oPos + (int)1);
HXDLIN(1264)									Int _hx_tmp29 = (c1->oPos + (int)2);
HXDLIN(1264)									Int _hx_tmp30 = (c1->oPos + (int)3);
HXDLIN(1264)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp27).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp28)) ),c1->buffer->o->__get(_hx_tmp29),c1->buffer->o->__get(_hx_tmp30),c1->buffer->f->__get(c1->fPos));
HXLINE(1265)									Int _hx_tmp31 = (c1->iiPos + (int)1);
HXDLIN(1265)									Int _hx_tmp32 = (c1->oPos + (int)1);
HXDLIN(1265)									Int _hx_tmp33 = (c1->oPos + (int)2);
HXDLIN(1265)									Int _hx_tmp34 = (c1->oPos + (int)3);
HXDLIN(1265)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginGradientFill(c1->buffer->o->__get(c1->oPos),c1->buffer->ii->__get(c1->iiPos).StaticCast< ::Array< Int > >(),c1->buffer->ff->__get(c1->ffPos).StaticCast< ::Array< Float > >(),c1->buffer->ii->__get(_hx_tmp31).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c1->buffer->o->__get(_hx_tmp32)) ),c1->buffer->o->__get(_hx_tmp33),c1->buffer->o->__get(_hx_tmp34),c1->buffer->f->__get(c1->fPos));
            								}
            								else {
HXLINE(1269)									{
HXLINE(1269)										Int _hx_tmp35 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1269)										switch((int)(_hx_tmp35)){
            											case (int)0: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1269)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)1: {
HXLINE(1269)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)2: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1269)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1269)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)3: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)6);
            											}
            											break;
            											case (int)4: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)5: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)3);
            											}
            											break;
            											case (int)6: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)7: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)3);
            											}
            											break;
            											case (int)8: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)4);
            											}
            											break;
            											case (int)9: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)5);
HXDLIN(1269)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)10: {
HXLINE(1269)												hx::AddEq(data->tsPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->bPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->iPos,(int)2);
HXDLIN(1269)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											case (int)11: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)4);
            											}
            											break;
            											case (int)12: {
            											}
            											break;
            											case (int)13: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)2);
HXDLIN(1269)												hx::AddEq(data->bPos,(int)2);
            											}
            											break;
            											case (int)14: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1269)												hx::AddEq(data->iiPos,(int)2);
HXDLIN(1269)												hx::AddEq(data->ffPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->fPos,(int)1);
            											}
            											break;
            											case (int)15: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)4);
HXDLIN(1269)												hx::AddEq(data->iPos,(int)1);
HXDLIN(1269)												hx::AddEq(data->fPos,(int)2);
HXDLIN(1269)												hx::AddEq(data->bPos,(int)1);
            											}
            											break;
            											case (int)16: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)17: {
HXLINE(1269)												hx::AddEq(data->fPos,(int)2);
            											}
            											break;
            											case (int)18: {
HXLINE(1269)												hx::AddEq(data->oPos,(int)1);
            											}
            											break;
            											default:{
            											}
            										}
            									}
HXLINE(1269)									data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN(1269)									HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1270)									Int _hx_tmp36 = c2->buffer->i->__get(c2->iPos);
HXDLIN(1270)									Float _hx_tmp37 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1270)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->beginFill(_hx_tmp36,_hx_tmp37);
HXLINE(1271)									Int _hx_tmp38 = c2->buffer->i->__get(c2->iPos);
HXDLIN(1271)									Float _hx_tmp39 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1271)									::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->beginFill(_hx_tmp38,_hx_tmp39);
            								}
            							}
            						}
            						break;
            						case (int)3: {
HXLINE(1205)							{
HXLINE(1205)								Int _hx_tmp40 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1205)								switch((int)(_hx_tmp40)){
            									case (int)0: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1205)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1205)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1205)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1205)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1205)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1205)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1205)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1205)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1205)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1205)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1205)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1205)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1205)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1205)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1205)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1205)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1205)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1206)							Float _hx_tmp41 = c3->buffer->f->__get(c3->fPos);
HXDLIN(1206)							Float _hx_tmp42 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(1206)							Float _hx_tmp43 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(1206)							Float _hx_tmp44 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(1206)							Float _hx_tmp45 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(1206)							Float _hx_tmp46 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(1206)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->cubicCurveTo(_hx_tmp41,_hx_tmp42,_hx_tmp43,_hx_tmp44,_hx_tmp45,_hx_tmp46);
HXLINE(1207)							Float _hx_tmp47 = c3->buffer->f->__get(c3->fPos);
HXDLIN(1207)							Float _hx_tmp48 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN(1207)							Float _hx_tmp49 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN(1207)							Float _hx_tmp50 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN(1207)							Float _hx_tmp51 = c3->buffer->f->__get((c3->fPos + (int)4));
HXDLIN(1207)							Float _hx_tmp52 = c3->buffer->f->__get((c3->fPos + (int)5));
HXDLIN(1207)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->cubicCurveTo(_hx_tmp47,_hx_tmp48,_hx_tmp49,_hx_tmp50,_hx_tmp51,_hx_tmp52);
            						}
            						break;
            						case (int)4: {
HXLINE(1211)							{
HXLINE(1211)								Int _hx_tmp53 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1211)								switch((int)(_hx_tmp53)){
            									case (int)0: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1211)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1211)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1211)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1211)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1211)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1211)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1211)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1211)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1211)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1211)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1211)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1211)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1211)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1211)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1211)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1211)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1211)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1212)							Float _hx_tmp54 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1212)							Float _hx_tmp55 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1212)							Float _hx_tmp56 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1212)							Float _hx_tmp57 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1212)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->curveTo(_hx_tmp54,_hx_tmp55,_hx_tmp56,_hx_tmp57);
HXLINE(1213)							Float _hx_tmp58 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1213)							Float _hx_tmp59 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1213)							Float _hx_tmp60 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1213)							Float _hx_tmp61 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1213)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->curveTo(_hx_tmp58,_hx_tmp59,_hx_tmp60,_hx_tmp61);
            						}
            						break;
            						case (int)5: {
HXLINE(1277)							{
HXLINE(1277)								Int _hx_tmp62 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1277)								switch((int)(_hx_tmp62)){
            									case (int)0: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1277)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1277)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1277)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1277)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1277)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1277)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1277)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1277)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1277)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1277)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1277)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1277)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1278)							Float _hx_tmp63 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1278)							Float _hx_tmp64 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1278)							Float _hx_tmp65 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1278)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawCircle(_hx_tmp63,_hx_tmp64,_hx_tmp65);
HXLINE(1279)							Float _hx_tmp66 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1279)							Float _hx_tmp67 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1279)							Float _hx_tmp68 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1279)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawCircle(_hx_tmp66,_hx_tmp67,_hx_tmp68);
            						}
            						break;
            						case (int)6: {
HXLINE(1283)							{
HXLINE(1283)								Int _hx_tmp69 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1283)								switch((int)(_hx_tmp69)){
            									case (int)0: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1283)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1283)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1283)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1283)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1283)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1283)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1283)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1283)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1283)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1283)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1283)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1283)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1284)							Float _hx_tmp70 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1284)							Float _hx_tmp71 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1284)							Float _hx_tmp72 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(1284)							Float _hx_tmp73 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(1284)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawEllipse(_hx_tmp70,_hx_tmp71,_hx_tmp72,_hx_tmp73);
HXLINE(1285)							Float _hx_tmp74 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1285)							Float _hx_tmp75 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1285)							Float _hx_tmp76 = c6->buffer->f->__get((c6->fPos + (int)2));
HXDLIN(1285)							Float _hx_tmp77 = c6->buffer->f->__get((c6->fPos + (int)3));
HXDLIN(1285)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawEllipse(_hx_tmp74,_hx_tmp75,_hx_tmp76,_hx_tmp77);
            						}
            						break;
            						case (int)8: {
HXLINE(1289)							{
HXLINE(1289)								Int _hx_tmp78 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1289)								switch((int)(_hx_tmp78)){
            									case (int)0: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1289)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1289)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1289)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1289)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1289)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1289)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1289)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1289)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1289)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1289)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1289)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1289)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1289)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1289)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1289)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1289)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1289)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1290)							Float _hx_tmp79 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1290)							Float _hx_tmp80 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1290)							Float _hx_tmp81 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(1290)							Float _hx_tmp82 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(1290)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRect(_hx_tmp79,_hx_tmp80,_hx_tmp81,_hx_tmp82);
HXLINE(1291)							Float _hx_tmp83 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1291)							Float _hx_tmp84 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1291)							Float _hx_tmp85 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN(1291)							Float _hx_tmp86 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN(1291)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRect(_hx_tmp83,_hx_tmp84,_hx_tmp85,_hx_tmp86);
            						}
            						break;
            						case (int)9: {
HXLINE(1295)							{
HXLINE(1295)								Int _hx_tmp87 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1295)								switch((int)(_hx_tmp87)){
            									case (int)0: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1295)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1295)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1295)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1295)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1295)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1295)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1295)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1295)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1295)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1295)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1295)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE(1296)							Float _hx_tmp88 = c8->buffer->f->__get(c8->fPos);
HXDLIN(1296)							Float _hx_tmp89 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(1296)							Float _hx_tmp90 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(1296)							Float _hx_tmp91 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(1296)							Float _hx_tmp92 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(1296)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawRoundRect(_hx_tmp88,_hx_tmp89,_hx_tmp90,_hx_tmp91,_hx_tmp92,c8->buffer->o->__get(c8->oPos));
HXLINE(1297)							Float _hx_tmp93 = c8->buffer->f->__get(c8->fPos);
HXDLIN(1297)							Float _hx_tmp94 = c8->buffer->f->__get((c8->fPos + (int)1));
HXDLIN(1297)							Float _hx_tmp95 = c8->buffer->f->__get((c8->fPos + (int)2));
HXDLIN(1297)							Float _hx_tmp96 = c8->buffer->f->__get((c8->fPos + (int)3));
HXDLIN(1297)							Float _hx_tmp97 = c8->buffer->f->__get((c8->fPos + (int)4));
HXDLIN(1297)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->drawRoundRect(_hx_tmp93,_hx_tmp94,_hx_tmp95,_hx_tmp96,_hx_tmp97,c8->buffer->o->__get(c8->oPos));
            						}
            						break;
            						case (int)10: {
HXLINE(1301)							{
HXLINE(1301)								Int _hx_tmp98 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1301)								switch((int)(_hx_tmp98)){
            									case (int)0: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1301)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1301)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1301)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1301)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1301)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1301)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1301)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1301)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1301)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1301)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1301)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1301)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1301)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1301)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1301)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1301)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TILES_dyn();
HXDLIN(1301)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE(1302)							 ::openfl::display::Tilesheet _hx_tmp99 = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >();
HXDLIN(1302)							::Array< Float > _hx_tmp100 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >();
HXDLIN(1302)							Bool _hx_tmp101 = c9->buffer->b->__get(c9->bPos);
HXDLIN(1302)							Int _hx_tmp102 = c9->buffer->i->__get(c9->iPos);
HXDLIN(1302)							Int _hx_tmp103 = c9->buffer->i->__get((c9->iPos + (int)1));
HXDLIN(1302)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawTiles(_hx_tmp99,_hx_tmp100,_hx_tmp101,_hx_tmp102,null(),_hx_tmp103);
            						}
            						break;
            						case (int)11: {
HXLINE(1306)							{
HXLINE(1306)								Int _hx_tmp104 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1306)								switch((int)(_hx_tmp104)){
            									case (int)0: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1306)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1306)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1306)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1306)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1306)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1306)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1306)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1306)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1306)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1306)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1306)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1306)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1306)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1306)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1306)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1306)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN(1306)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE(1307)							Int _hx_tmp105 = (c10->oPos + (int)1);
HXDLIN(1307)							Int _hx_tmp106 = (c10->oPos + (int)2);
HXDLIN(1307)							Int _hx_tmp107 = (c10->oPos + (int)3);
HXDLIN(1307)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->drawTriangles(( (::Array< Float >)(c10->buffer->o->__get(c10->oPos)) ),( (::Array< Int >)(c10->buffer->o->__get(_hx_tmp105)) ),( (::Array< Float >)(c10->buffer->o->__get(_hx_tmp106)) ),c10->buffer->o->__get(_hx_tmp107));
            						}
            						break;
            						case (int)12: {
HXLINE(1229)							{
HXLINE(1229)								{
HXLINE(1229)									Int _hx_tmp108 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1229)									switch((int)(_hx_tmp108)){
            										case (int)0: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1229)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)1: {
HXLINE(1229)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)2: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1229)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1229)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)3: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)6);
            										}
            										break;
            										case (int)4: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)5: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)3);
            										}
            										break;
            										case (int)6: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)7: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)3);
            										}
            										break;
            										case (int)8: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)4);
            										}
            										break;
            										case (int)9: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)5);
HXDLIN(1229)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)10: {
HXLINE(1229)											hx::AddEq(data->tsPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->bPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->iPos,(int)2);
HXDLIN(1229)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										case (int)11: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)4);
            										}
            										break;
            										case (int)12: {
            										}
            										break;
            										case (int)13: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)2);
HXDLIN(1229)											hx::AddEq(data->bPos,(int)2);
            										}
            										break;
            										case (int)14: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1229)											hx::AddEq(data->iiPos,(int)2);
HXDLIN(1229)											hx::AddEq(data->ffPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->fPos,(int)1);
            										}
            										break;
            										case (int)15: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)4);
HXDLIN(1229)											hx::AddEq(data->iPos,(int)1);
HXDLIN(1229)											hx::AddEq(data->fPos,(int)2);
HXDLIN(1229)											hx::AddEq(data->bPos,(int)1);
            										}
            										break;
            										case (int)16: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)17: {
HXLINE(1229)											hx::AddEq(data->fPos,(int)2);
            										}
            										break;
            										case (int)18: {
HXLINE(1229)											hx::AddEq(data->oPos,(int)1);
            										}
            										break;
            										default:{
            										}
            									}
            								}
HXLINE(1229)								data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
            							}
HXLINE(1230)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
HXLINE(1231)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
HXLINE(1232)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::hasFill = false;
HXLINE(1233)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::bitmapFill = null();
            						}
            						break;
            						case (int)13: {
HXLINE(1242)							{
HXLINE(1242)								Int _hx_tmp109 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1242)								switch((int)(_hx_tmp109)){
            									case (int)0: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1242)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1242)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1242)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1242)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1242)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1242)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1242)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1242)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1242)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1242)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1242)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1242)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1242)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1242)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1242)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1242)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_BITMAP_STYLE_dyn();
HXDLIN(1242)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE(1243)							Int _hx_tmp110 = (c11->oPos + (int)1);
HXDLIN(1243)							Int _hx_tmp111 = (c11->bPos + (int)1);
HXDLIN(1243)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineBitmapStyle(( ( ::openfl::display::BitmapData)(c11->buffer->o->__get(c11->oPos)) ),( ( ::openfl::geom::Matrix)(c11->buffer->o->__get(_hx_tmp110)) ),c11->buffer->b->__get(c11->bPos),c11->buffer->b->__get(_hx_tmp111));
            						}
            						break;
            						case (int)14: {
HXLINE(1237)							{
HXLINE(1237)								Int _hx_tmp112 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1237)								switch((int)(_hx_tmp112)){
            									case (int)0: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1237)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1237)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1237)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1237)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1237)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1237)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1237)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1237)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1237)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1237)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1237)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_GRADIENT_STYLE_dyn();
HXDLIN(1237)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE(1238)							Int _hx_tmp113 = (c12->iiPos + (int)1);
HXDLIN(1238)							Int _hx_tmp114 = (c12->oPos + (int)1);
HXDLIN(1238)							Int _hx_tmp115 = (c12->oPos + (int)2);
HXDLIN(1238)							Int _hx_tmp116 = (c12->oPos + (int)3);
HXDLIN(1238)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineGradientStyle(c12->buffer->o->__get(c12->oPos),c12->buffer->ii->__get(c12->iiPos).StaticCast< ::Array< Int > >(),c12->buffer->ff->__get(c12->ffPos).StaticCast< ::Array< Float > >(),c12->buffer->ii->__get(_hx_tmp113).StaticCast< ::Array< Int > >(),( ( ::openfl::geom::Matrix)(c12->buffer->o->__get(_hx_tmp114)) ),c12->buffer->o->__get(_hx_tmp115),c12->buffer->o->__get(_hx_tmp116),c12->buffer->f->__get(c12->fPos));
            						}
            						break;
            						case (int)15: {
HXLINE(1247)							{
HXLINE(1247)								Int _hx_tmp117 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1247)								switch((int)(_hx_tmp117)){
            									case (int)0: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1247)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1247)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1247)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1247)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1247)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1247)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1247)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1247)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1247)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1247)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1247)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1247)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1247)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1247)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1247)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1247)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN(1247)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE(1248)							Int _hx_tmp118 = (c13->oPos + (int)1);
HXDLIN(1248)							Int _hx_tmp119 = (c13->oPos + (int)2);
HXDLIN(1248)							Int _hx_tmp120 = (c13->oPos + (int)3);
HXDLIN(1248)							Int _hx_tmp121 = (c13->fPos + (int)1);
HXDLIN(1248)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineStyle(c13->buffer->o->__get(c13->oPos),c13->buffer->i->__get(c13->iPos),c13->buffer->f->__get(c13->fPos),c13->buffer->b->__get(c13->bPos),c13->buffer->o->__get(_hx_tmp118),c13->buffer->o->__get(_hx_tmp119),c13->buffer->o->__get(_hx_tmp120),c13->buffer->f->__get(_hx_tmp121));
            						}
            						break;
            						case (int)16: {
HXLINE(1217)							{
HXLINE(1217)								Int _hx_tmp122 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1217)								switch((int)(_hx_tmp122)){
            									case (int)0: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1217)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1217)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1217)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1217)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1217)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1217)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1217)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1217)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1217)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1217)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1217)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1217)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1217)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1217)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1217)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1217)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1217)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE(1218)							Float _hx_tmp123 = c14->buffer->f->__get(c14->fPos);
HXDLIN(1218)							Float _hx_tmp124 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(1218)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->lineTo(_hx_tmp123,_hx_tmp124);
HXLINE(1219)							Float _hx_tmp125 = c14->buffer->f->__get(c14->fPos);
HXDLIN(1219)							Float _hx_tmp126 = c14->buffer->f->__get((c14->fPos + (int)1));
HXDLIN(1219)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->lineTo(_hx_tmp125,_hx_tmp126);
            						}
            						break;
            						case (int)17: {
HXLINE(1223)							{
HXLINE(1223)								Int _hx_tmp127 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1223)								switch((int)(_hx_tmp127)){
            									case (int)0: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1223)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1223)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1223)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1223)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1223)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1223)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1223)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1223)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1223)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1223)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1223)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1223)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1223)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1223)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1223)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1223)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1223)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c15,"c") = data;
HXLINE(1224)							Float _hx_tmp128 = c15->buffer->f->__get(c15->fPos);
HXDLIN(1224)							Float _hx_tmp129 = c15->buffer->f->__get((c15->fPos + (int)1));
HXDLIN(1224)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->moveTo(_hx_tmp128,_hx_tmp129);
HXLINE(1225)							Float _hx_tmp130 = c15->buffer->f->__get(c15->fPos);
HXDLIN(1225)							Float _hx_tmp131 = c15->buffer->f->__get((c15->fPos + (int)1));
HXDLIN(1225)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->moveTo(_hx_tmp130,_hx_tmp131);
            						}
            						break;
            						default:{
HXLINE(1311)							{
HXLINE(1311)								Int _hx_tmp132 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1311)								switch((int)(_hx_tmp132)){
            									case (int)0: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1311)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1311)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1311)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1311)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1311)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1311)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1311)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1311)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1311)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1311)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1311)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1311)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1311)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1311)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1311)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1311)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1317)			Int _hx_tmp133 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::fillCommands->get_length();
HXDLIN(1317)			if ((_hx_tmp133 > (int)0)) {
HXLINE(1319)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endFill();
            			}
HXLINE(1323)			Int _hx_tmp134 = ::openfl::_internal::renderer::cairo::CairoGraphics_obj::strokeCommands->get_length();
HXDLIN(1323)			if ((_hx_tmp134 > (int)0)) {
HXLINE(1325)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::endStroke();
            			}
HXLINE(1329)			data->destroy();
HXLINE(1331)			graphics->_hx___bitmap->image->dirty = true;
            		}
HXLINE(1335)		graphics->set___dirty(false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,render,(void))

void CairoGraphics_obj::renderMask( ::openfl::display::Graphics graphics, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","renderMask",0x2ed81fde,"openfl._internal.renderer.cairo.CairoGraphics.renderMask","openfl/_internal/renderer/cairo/CairoGraphics.hx",1344,0x744ae94c)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1344)		Int _hx_tmp = graphics->_hx___commands->get_length();
HXDLIN(1344)		if ((_hx_tmp != (int)0)) {
HXLINE(1346)			HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1354)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE(1356)			{
HXLINE(1356)				HX_VARI( Int,_g) = (int)0;
HXDLIN(1356)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN(1356)				while((_g < _g1->length)){
HXLINE(1356)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN(1356)					++_g;
HXLINE(1358)					Int _hx_tmp1 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1358)					switch((int)(_hx_tmp1)){
            						case (int)3: {
HXLINE(1362)							{
HXLINE(1362)								Int _hx_tmp2 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1362)								switch((int)(_hx_tmp2)){
            									case (int)0: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1362)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1362)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1362)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1362)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1362)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1362)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1362)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1362)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1362)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1362)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1362)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1362)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1362)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1362)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1362)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1362)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN(1362)							HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE(1363)							Float _hx_tmp3 = c->buffer->f->__get(c->fPos);
HXDLIN(1363)							Float _hx_tmp4 = c->buffer->f->__get((c->fPos + (int)1));
HXDLIN(1363)							Float _hx_tmp5 = c->buffer->f->__get((c->fPos + (int)2));
HXDLIN(1363)							Float _hx_tmp6 = c->buffer->f->__get((c->fPos + (int)3));
HXDLIN(1363)							Float _hx_tmp7 = c->buffer->f->__get((c->fPos + (int)4));
HXDLIN(1363)							Float _hx_tmp8 = c->buffer->f->__get((c->fPos + (int)5));
HXDLIN(1363)							cairo->curveTo(_hx_tmp3,_hx_tmp4,_hx_tmp5,_hx_tmp6,_hx_tmp7,_hx_tmp8);
            						}
            						break;
            						case (int)4: {
HXLINE(1369)							{
HXLINE(1369)								Int _hx_tmp9 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1369)								switch((int)(_hx_tmp9)){
            									case (int)0: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1369)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1369)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1369)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1369)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1369)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1369)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1369)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1369)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1369)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1369)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1369)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1369)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1369)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1369)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1369)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1369)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN(1369)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE(1370)							Float _hx_tmp10 = c1->buffer->f->__get(c1->fPos);
HXDLIN(1370)							Float _hx_tmp11 = c1->buffer->f->__get((c1->fPos + (int)1));
HXDLIN(1370)							Float _hx_tmp12 = c1->buffer->f->__get((c1->fPos + (int)2));
HXDLIN(1370)							Float _hx_tmp13 = c1->buffer->f->__get((c1->fPos + (int)3));
HXDLIN(1370)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::quadraticCurveTo(_hx_tmp10,_hx_tmp11,_hx_tmp12,_hx_tmp13);
            						}
            						break;
            						case (int)5: {
HXLINE(1376)							{
HXLINE(1376)								Int _hx_tmp14 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1376)								switch((int)(_hx_tmp14)){
            									case (int)0: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1376)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1376)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1376)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1376)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1376)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1376)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1376)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1376)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1376)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1376)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1376)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1376)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1376)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1376)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1376)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1376)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN(1376)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE(1377)							Float _hx_tmp15 = c2->buffer->f->__get(c2->fPos);
HXDLIN(1377)							Float _hx_tmp16 = c2->buffer->f->__get((c2->fPos + (int)1));
HXDLIN(1377)							Float _hx_tmp17 = c2->buffer->f->__get((c2->fPos + (int)2));
HXDLIN(1377)							Float _hx_tmp18 = (::Math_obj::PI * (int)2);
HXDLIN(1377)							cairo->arc(_hx_tmp15,_hx_tmp16,_hx_tmp17,(int)0,_hx_tmp18);
            						}
            						break;
            						case (int)6: {
HXLINE(1381)							{
HXLINE(1381)								Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1381)								switch((int)(_hx_tmp19)){
            									case (int)0: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1381)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1381)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1381)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1381)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1381)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1381)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1381)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1381)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1381)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1381)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1381)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1381)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1381)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1381)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1381)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1381)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN(1381)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE(1383)							HX_VARI( Float,x) = c3->buffer->f->__get(c3->fPos);
HXLINE(1384)							HX_VARI( Float,y) = c3->buffer->f->__get((c3->fPos + (int)1));
HXLINE(1385)							HX_VARI( Float,width) = c3->buffer->f->__get((c3->fPos + (int)2));
HXLINE(1386)							HX_VARI( Float,height) = c3->buffer->f->__get((c3->fPos + (int)3));
HXLINE(1388)							hx::SubEq(x,(int)0);
HXLINE(1389)							hx::SubEq(y,(int)0);
HXLINE(1391)							HX_VARI( Float,ox) = (((Float)width / (Float)(int)2) * ((Float).5522848));
HXDLIN(1391)							HX_VARI( Float,oy) = (((Float)height / (Float)(int)2) * ((Float).5522848));
HXDLIN(1391)							HX_VARI( Float,xe) = (x + width);
HXDLIN(1391)							HX_VARI( Float,ye) = (y + height);
HXDLIN(1391)							HX_VARI( Float,xm) = (x + ((Float)width / (Float)(int)2));
HXDLIN(1391)							HX_VARI( Float,ym) = (y + ((Float)height / (Float)(int)2));
HXLINE(1401)							cairo->moveTo(x,ym);
HXLINE(1402)							cairo->curveTo(x,(ym - oy),(xm - ox),y,xm,y);
HXLINE(1403)							cairo->curveTo((xm + ox),y,xe,(ym - oy),xe,ym);
HXLINE(1404)							cairo->curveTo(xe,(ym + oy),(xm + ox),ye,xm,ye);
HXLINE(1405)							cairo->curveTo((xm - ox),ye,x,(ym + oy),x,ym);
            						}
            						break;
            						case (int)8: {
HXLINE(1410)							{
HXLINE(1410)								Int _hx_tmp20 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1410)								switch((int)(_hx_tmp20)){
            									case (int)0: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1410)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1410)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1410)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1410)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1410)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1410)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1410)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1410)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1410)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1410)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1410)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1410)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1410)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1410)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1410)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1410)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN(1410)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE(1411)							Float _hx_tmp21 = c4->buffer->f->__get(c4->fPos);
HXDLIN(1411)							Float _hx_tmp22 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN(1411)							Float _hx_tmp23 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN(1411)							Float _hx_tmp24 = c4->buffer->f->__get((c4->fPos + (int)3));
HXDLIN(1411)							cairo->rectangle(_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24);
            						}
            						break;
            						case (int)9: {
HXLINE(1415)							{
HXLINE(1415)								Int _hx_tmp25 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1415)								switch((int)(_hx_tmp25)){
            									case (int)0: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1415)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1415)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1415)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1415)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1415)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1415)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1415)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1415)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1415)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1415)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1415)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1415)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1415)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1415)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1415)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1415)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN(1415)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE(1416)							Float _hx_tmp26 = c5->buffer->f->__get(c5->fPos);
HXDLIN(1416)							Float _hx_tmp27 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN(1416)							Float _hx_tmp28 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN(1416)							Float _hx_tmp29 = c5->buffer->f->__get((c5->fPos + (int)3));
HXDLIN(1416)							Float _hx_tmp30 = c5->buffer->f->__get((c5->fPos + (int)4));
HXDLIN(1416)							::openfl::_internal::renderer::cairo::CairoGraphics_obj::drawRoundRect(_hx_tmp26,_hx_tmp27,_hx_tmp28,_hx_tmp29,_hx_tmp30,c5->buffer->o->__get(c5->oPos));
            						}
            						break;
            						case (int)16: {
HXLINE(1420)							{
HXLINE(1420)								Int _hx_tmp31 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1420)								switch((int)(_hx_tmp31)){
            									case (int)0: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1420)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1420)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1420)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1420)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1420)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1420)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1420)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1420)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1420)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1420)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1420)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1420)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1420)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1420)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1420)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1420)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN(1420)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE(1421)							Float _hx_tmp32 = c6->buffer->f->__get(c6->fPos);
HXDLIN(1421)							Float _hx_tmp33 = c6->buffer->f->__get((c6->fPos + (int)1));
HXDLIN(1421)							cairo->lineTo(_hx_tmp32,_hx_tmp33);
            						}
            						break;
            						case (int)17: {
HXLINE(1427)							{
HXLINE(1427)								Int _hx_tmp34 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1427)								switch((int)(_hx_tmp34)){
            									case (int)0: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1427)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1427)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1427)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1427)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1427)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1427)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1427)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1427)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1427)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1427)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1427)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1427)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1427)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1427)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1427)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1427)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN(1427)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE(1428)							Float _hx_tmp35 = c7->buffer->f->__get(c7->fPos);
HXDLIN(1428)							Float _hx_tmp36 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN(1428)							cairo->moveTo(_hx_tmp35,_hx_tmp36);
            						}
            						break;
            						default:{
HXLINE(1434)							{
HXLINE(1434)								Int _hx_tmp37 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN(1434)								switch((int)(_hx_tmp37)){
            									case (int)0: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1434)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE(1434)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1434)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1434)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)5);
HXDLIN(1434)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE(1434)										hx::AddEq(data->tsPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->bPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->iPos,(int)2);
HXDLIN(1434)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)2);
HXDLIN(1434)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1434)										hx::AddEq(data->iiPos,(int)2);
HXDLIN(1434)										hx::AddEq(data->ffPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)4);
HXDLIN(1434)										hx::AddEq(data->iPos,(int)1);
HXDLIN(1434)										hx::AddEq(data->fPos,(int)2);
HXDLIN(1434)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE(1434)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE(1434)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE(1434)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE(1440)			data->destroy();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoGraphics_obj,renderMask,(void))


CairoGraphics_obj::CairoGraphics_obj()
{
}

bool CairoGraphics_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = SIN45; return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = TAN22; return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { outValue = cairo; return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { outValue = bounds; return true; }
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { outValue = hasFill; return true; }
		if (HX_FIELD_EQ(inName,"endFill") ) { outValue = endFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hitTest") ) { outValue = hitTest_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { outValue = graphics; return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { outValue = hasStroke; return true; }
		if (HX_FIELD_EQ(inName,"closePath") ) { outValue = closePath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endStroke") ) { outValue = endStroke_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { outValue = bitmapFill; return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { outValue = hitTesting; return true; }
		if (HX_FIELD_EQ(inName,"renderMask") ) { outValue = renderMask_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { outValue = fillPattern; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { outValue = bitmapRepeat; return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { outValue = fillCommands; return true; }
		if (HX_FIELD_EQ(inName,"normalizeUVT") ) { outValue = normalizeUVT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"playCommands") ) { outValue = playCommands_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { outValue = pendingMatrix; return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { outValue = strokePattern; return true; }
		if (HX_FIELD_EQ(inName,"drawRoundRect") ) { outValue = drawRoundRect_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { outValue = strokeCommands; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"quadraticCurveTo") ) { outValue = quadraticCurveTo_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { outValue = fillPatternMatrix; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createImagePattern") ) { outValue = createImagePattern_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { outValue = inversePendingMatrix; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createGradientPattern") ) { outValue = createGradientPattern_dyn(); return true; }
	}
	return false;
}

bool CairoGraphics_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"cairo") ) { cairo=ioValue.Cast<  ::lime::graphics::cairo::Cairo >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bounds") ) { bounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasFill") ) { hasFill=ioValue.Cast< Bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"graphics") ) { graphics=ioValue.Cast<  ::openfl::display::Graphics >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"hasStroke") ) { hasStroke=ioValue.Cast< Bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bitmapFill") ) { bitmapFill=ioValue.Cast<  ::openfl::display::BitmapData >(); return true; }
		if (HX_FIELD_EQ(inName,"hitTesting") ) { hitTesting=ioValue.Cast< Bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fillPattern") ) { fillPattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"bitmapRepeat") ) { bitmapRepeat=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"fillCommands") ) { fillCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pendingMatrix") ) { pendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		if (HX_FIELD_EQ(inName,"strokePattern") ) { strokePattern=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strokeCommands") ) { strokeCommands=ioValue.Cast<  ::openfl::_internal::renderer::DrawCommandBuffer >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillPatternMatrix") ) { fillPatternMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"inversePendingMatrix") ) { inversePendingMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoGraphics_obj_sMemberStorageInfo = 0;
static hx::StaticInfo CairoGraphics_obj_sStaticStorageInfo[] = {
	{hx::fsFloat,(void *) &CairoGraphics_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &CairoGraphics_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(void *) &CairoGraphics_obj::bitmapFill,HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35")},
	{hx::fsBool,(void *) &CairoGraphics_obj::bitmapRepeat,HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &CairoGraphics_obj::bounds,HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(void *) &CairoGraphics_obj::cairo,HX_HCSTRING("cairo","\x88","\x30","\x19","\x41")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::fillCommands,HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::fillPattern,HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::fillPatternMatrix,HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(void *) &CairoGraphics_obj::graphics,HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasFill,HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hasStroke,HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52")},
	{hx::fsBool,(void *) &CairoGraphics_obj::hitTesting,HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::inversePendingMatrix,HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &CairoGraphics_obj::pendingMatrix,HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5")},
	{hx::fsObject /*::openfl::_internal::renderer::DrawCommandBuffer*/ ,(void *) &CairoGraphics_obj::strokeCommands,HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67")},
	{hx::fsObject /*Dynamic*/ ,(void *) &CairoGraphics_obj::strokePattern,HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void CairoGraphics_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_MARK_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoGraphics_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::TAN22,"TAN22");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapFill,"bitmapFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bitmapRepeat,"bitmapRepeat");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::bounds,"bounds");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::cairo,"cairo");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillCommands,"fillCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPattern,"fillPattern");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::fillPatternMatrix,"fillPatternMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::graphics,"graphics");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasFill,"hasFill");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hasStroke,"hasStroke");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::hitTesting,"hitTesting");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::inversePendingMatrix,"inversePendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::pendingMatrix,"pendingMatrix");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokeCommands,"strokeCommands");
	HX_VISIT_MEMBER_NAME(CairoGraphics_obj::strokePattern,"strokePattern");
};

#endif

hx::Class CairoGraphics_obj::__mClass;

static ::String CairoGraphics_obj_sStaticFields[] = {
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("bitmapFill","\x12","\x2e","\x19","\x35"),
	HX_HCSTRING("bitmapRepeat","\xaa","\x38","\x9c","\x11"),
	HX_HCSTRING("bounds","\x75","\x86","\x1d","\x66"),
	HX_HCSTRING("cairo","\x88","\x30","\x19","\x41"),
	HX_HCSTRING("fillCommands","\x6b","\xf6","\xc9","\xc2"),
	HX_HCSTRING("fillPattern","\x0d","\x86","\x12","\x35"),
	HX_HCSTRING("fillPatternMatrix","\x2e","\xb8","\xae","\x97"),
	HX_HCSTRING("graphics","\xcb","\xf8","\x67","\x12"),
	HX_HCSTRING("hasFill","\xfd","\xee","\xff","\x12"),
	HX_HCSTRING("hasStroke","\xb2","\x66","\x1d","\x52"),
	HX_HCSTRING("hitTesting","\xbd","\x65","\x48","\x19"),
	HX_HCSTRING("inversePendingMatrix","\x28","\x14","\x8c","\xbb"),
	HX_HCSTRING("pendingMatrix","\xf8","\x9d","\x96","\xb5"),
	HX_HCSTRING("strokeCommands","\xa0","\x98","\x2a","\x67"),
	HX_HCSTRING("strokePattern","\x78","\xe1","\x21","\x7e"),
	HX_HCSTRING("closePath","\x7d","\x65","\x20","\x14"),
	HX_HCSTRING("createGradientPattern","\xa4","\xee","\x44","\xf6"),
	HX_HCSTRING("createImagePattern","\x51","\xbd","\x5d","\xfb"),
	HX_HCSTRING("drawRoundRect","\xee","\xc3","\xaa","\xe2"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("endStroke","\xf3","\x01","\x17","\x51"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("isCCW","\x0d","\x84","\x49","\xc1"),
	HX_HCSTRING("normalizeUVT","\x66","\x09","\x2f","\x47"),
	HX_HCSTRING("playCommands","\xdc","\xae","\xee","\x49"),
	HX_HCSTRING("quadraticCurveTo","\x12","\x48","\xc3","\x82"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderMask","\x62","\x3b","\x60","\xe5"),
	::String(null())
};

void CairoGraphics_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoGraphics","\x72","\x72","\xef","\x3c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoGraphics_obj::__GetStatic;
	__mClass->mSetStaticField = &CairoGraphics_obj::__SetStatic;
	__mClass->mMarkFunc = CairoGraphics_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoGraphics_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoGraphics_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoGraphics_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoGraphics_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoGraphics_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CairoGraphics_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",38,0x744ae94c)
HXLINE(  38)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",39,0x744ae94c)
HXLINE(  39)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",45,0x744ae94c)
HXLINE(  45)		fillCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoGraphics","boot",0x820ca3ae,"openfl._internal.renderer.cairo.CairoGraphics.boot","openfl/_internal/renderer/cairo/CairoGraphics.hx",54,0x744ae94c)
HXLINE(  54)		strokeCommands =  ::openfl::_internal::renderer::DrawCommandBuffer_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
