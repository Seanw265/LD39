// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoShape
#include <openfl/_internal/renderer/cairo/CairoShape.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace cairo{

void CairoShape_obj::__construct() { }

Dynamic CairoShape_obj::__CreateEmpty() { return new CairoShape_obj; }

hx::ObjectPtr< CairoShape_obj > CairoShape_obj::__new()
{
	hx::ObjectPtr< CairoShape_obj > _hx_result = new CairoShape_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic CairoShape_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CairoShape_obj > _hx_result = new CairoShape_obj();
	_hx_result->__construct();
	return _hx_result;
}

void CairoShape_obj::render( ::openfl::display::DisplayObject shape, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.cairo.CairoShape","render",0x363dce2a,"openfl._internal.renderer.cairo.CairoShape.render","openfl/_internal/renderer/cairo/CairoShape.hx",15,0xfc9b2624)
            	HX_STACK_ARG(shape,"shape")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  18)		Bool _hx_tmp;
HXDLIN(  18)		if (!(!(shape->_hx___renderable))) {
HXLINE(  18)			_hx_tmp = (shape->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE(  18)			_hx_tmp = true;
            		}
HXDLIN(  18)		if (_hx_tmp) {
HXLINE(  18)			return;
            		}
HXLINE(  20)		HX_VARI(  ::openfl::display::Graphics,graphics) = shape->_hx___graphics;
HXLINE(  22)		Bool _hx_tmp1 = hx::IsNotNull( graphics );
HXDLIN(  22)		if (_hx_tmp1) {
HXLINE(  24)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(graphics,renderSession);
HXLINE(  25)			HX_VARI(  ::openfl::geom::Rectangle,bounds) = graphics->_hx___bounds;
HXLINE(  27)			Bool _hx_tmp2;
HXDLIN(  27)			Bool _hx_tmp3;
HXDLIN(  27)			Bool _hx_tmp4;
HXDLIN(  27)			Bool _hx_tmp5;
HXDLIN(  27)			Bool _hx_tmp6 = hx::IsNotNull( graphics->_hx___cairo );
HXDLIN(  27)			if (_hx_tmp6) {
HXLINE(  27)				_hx_tmp5 = graphics->_hx___visible;
            			}
            			else {
HXLINE(  27)				_hx_tmp5 = false;
            			}
HXDLIN(  27)			if (_hx_tmp5) {
HXLINE(  27)				_hx_tmp4 = hx::IsNotNull( bounds );
            			}
            			else {
HXLINE(  27)				_hx_tmp4 = false;
            			}
HXDLIN(  27)			if (_hx_tmp4) {
HXLINE(  27)				_hx_tmp3 = (bounds->width >= (int)1);
            			}
            			else {
HXLINE(  27)				_hx_tmp3 = false;
            			}
HXDLIN(  27)			if (_hx_tmp3) {
HXLINE(  27)				_hx_tmp2 = (bounds->height >= (int)1);
            			}
            			else {
HXLINE(  27)				_hx_tmp2 = false;
            			}
HXDLIN(  27)			if (_hx_tmp2) {
HXLINE(  29)				Bool _hx_tmp7 = hx::IsNotNull( shape->_hx___mask );
HXDLIN(  29)				if (_hx_tmp7) {
HXLINE(  31)					renderSession->maskManager->pushMask(shape->_hx___mask);
            				}
HXLINE(  35)				HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(  36)				HX_VARI(  ::openfl::geom::Rectangle,scrollRect) = shape->get_scrollRect();
HXLINE(  37)				HX_VARI(  ::openfl::geom::Matrix,transform) = shape->_hx___renderTransform;
HXLINE(  39)				Bool _hx_tmp8 = renderSession->roundPixels;
HXDLIN(  39)				if (_hx_tmp8) {
HXLINE(  41)					HX_VARI(  ::lime::math::Matrix3,matrix) = transform->_hx___toMatrix3();
HXLINE(  42)					matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE(  43)					matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE(  44)					cairo->set_matrix(matrix);
            				}
            				else {
HXLINE(  48)					 ::lime::math::Matrix3 _hx_tmp9 = transform->_hx___toMatrix3();
HXDLIN(  48)					cairo->set_matrix(_hx_tmp9);
            				}
HXLINE(  52)				 ::Dynamic _hx_tmp10 = graphics->_hx___cairo->get_target();
HXDLIN(  52)				cairo->setSourceSurface(_hx_tmp10,graphics->_hx___bounds->x,graphics->_hx___bounds->y);
HXLINE(  54)				Bool _hx_tmp11 = hx::IsNotNull( scrollRect );
HXDLIN(  54)				if (_hx_tmp11) {
HXLINE(  56)					cairo->pushGroup();
HXLINE(  57)					cairo->newPath();
HXLINE(  58)					Float _hx_tmp12 = (graphics->_hx___bounds->x + scrollRect->x);
HXDLIN(  58)					Float _hx_tmp13 = (graphics->_hx___bounds->y + scrollRect->y);
HXDLIN(  58)					cairo->rectangle(_hx_tmp12,_hx_tmp13,scrollRect->width,scrollRect->height);
HXLINE(  59)					cairo->fill();
HXLINE(  60)					cairo->popGroupToSource();
            				}
HXLINE(  64)				cairo->paintWithAlpha(shape->_hx___worldAlpha);
HXLINE(  66)				Bool _hx_tmp14 = hx::IsNotNull( shape->_hx___mask );
HXDLIN(  66)				if (_hx_tmp14) {
HXLINE(  68)					renderSession->maskManager->popMask();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CairoShape_obj,render,(void))


CairoShape_obj::CairoShape_obj()
{
}

bool CairoShape_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CairoShape_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CairoShape_obj_sStaticStorageInfo = 0;
#endif

static void CairoShape_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CairoShape_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CairoShape_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CairoShape_obj::__mClass,"__mClass");
};

#endif

hx::Class CairoShape_obj::__mClass;

static ::String CairoShape_obj_sStaticFields[] = {
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	::String(null())
};

void CairoShape_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.cairo.CairoShape","\x1a","\xeb","\xc9","\x00");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CairoShape_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CairoShape_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CairoShape_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CairoShape_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CairoShape_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CairoShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CairoShape_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace cairo
