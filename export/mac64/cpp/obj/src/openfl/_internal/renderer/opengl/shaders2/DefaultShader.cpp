// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_DefaultShader
#include <openfl/_internal/renderer/opengl/shaders2/DefaultShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace shaders2{

void DefaultShader_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.DefaultShader","new",0x163fb452,"openfl._internal.renderer.opengl.shaders2.DefaultShader.new","openfl/_internal/renderer/opengl/shaders2/DefaultShader.hx",33,0xc5ee6bbd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  34)		super::__construct(gl);
HXLINE(  36)		this->vertexSrc = ::openfl::_internal::renderer::opengl::shaders2::DefaultShader_obj::VERTEX_SRC;
HXLINE(  38)		this->fragmentSrc = ::Array_obj< ::String >::__new(29)->init(0,HX_("#ifdef GL_ES",2d,5e,36,de))->init(1,HX_("precision lowp float;",81,5f,ad,9a))->init(2,HX_("#endif",75,ed,f7,6e))->init(3,((HX_("uniform sampler2D ",72,47,f0,ca) + HX_("openfl_uSampler0",0e,4f,96,4d)) + HX_(";",3b,00,00,00)))->init(4,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColorMultiplier",9e,72,0d,28)) + HX_(";",3b,00,00,00)))->init(5,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColorOffset",30,10,2f,e8)) + HX_(";",3b,00,00,00)))->init(6,((HX_("uniform bool ",ca,cc,4a,c0) + HX_("openfl_uUseColorTransform",8a,6c,2b,8b)) + HX_(";",3b,00,00,00)))->init(7,((HX_("varying vec2 ",52,87,16,2a) + HX_("openfl_vTexCoord",35,1d,f8,7e)) + HX_(";",3b,00,00,00)))->init(8,((HX_("varying vec4 ",10,89,16,2a) + HX_("openfl_vColor",1c,b5,8b,21)) + HX_(";",3b,00,00,00)))->init(9,HX_("vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {",a7,0a,a9,f9))->init(10,((HX_("\tif(!",9f,28,50,74) + HX_("openfl_uUseColorTransform",8a,6c,2b,8b)) + HX_(") {",c4,38,1f,00)))->init(11,HX_("\t\treturn color * tint;",1d,03,3b,f6))->init(12,HX_("\t}",54,08,00,00))->init(13,HX_("\tvec4 unmultiply;",67,51,79,04))->init(14,HX_("\tif (color.a == 0.0) {",da,6c,38,fb))->init(15,HX_("\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);",e0,9d,d0,58))->init(16,HX_("\t} else {",a0,a3,6f,68))->init(17,HX_("   \tunmultiply = vec4(color.rgb / color.a, color.a);",58,e0,4f,fe))->init(18,HX_("\t}",54,08,00,00))->init(19,HX_("   vec4 result = unmultiply * tint * multiplier;",32,67,2e,56))->init(20,HX_("   result = result + offset;",d6,2b,93,f8))->init(21,HX_("   result = clamp(result, 0., 1.);",65,22,a3,fc))->init(22,HX_("   result = vec4(result.rgb * result.a, result.a);",1e,90,43,04))->init(23,HX_("   return result;",6e,cd,02,a1))->init(24,HX_("}",7d,00,00,00))->init(25,HX_("void main(void) {",4d,18,fb,21))->init(26,((((HX_("   vec4 tc = texture2D(",cf,35,87,8c) + HX_("openfl_uSampler0",0e,4f,96,4d)) + HX_(", ",74,26,00,00)) + HX_("openfl_vTexCoord",35,1d,f8,7e)) + HX_(");",f2,23,00,00)))->init(27,((((((HX_("   gl_FragColor = colorTransform(tc, ",56,ec,dc,67) + HX_("openfl_vColor",1c,b5,8b,21)) + HX_(", ",74,26,00,00)) + HX_("openfl_uColorMultiplier",9e,72,0d,28)) + HX_(", ",74,26,00,00)) + HX_("openfl_uColorOffset",30,10,2f,e8)) + HX_(");",f2,23,00,00)))->init(28,HX_("}",7d,00,00,00));
HXLINE(  76)		this->init(null());
            	}

Dynamic DefaultShader_obj::__CreateEmpty() { return new DefaultShader_obj; }

hx::ObjectPtr< DefaultShader_obj > DefaultShader_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< DefaultShader_obj > _hx_result = new DefaultShader_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic DefaultShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DefaultShader_obj > _hx_result = new DefaultShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void DefaultShader_obj::init(hx::Null< Bool >  __o_force){
Bool force = __o_force.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.DefaultShader","init",0x5e36cade,"openfl._internal.renderer.opengl.shaders2.DefaultShader.init","openfl/_internal/renderer/opengl/shaders2/DefaultShader.hx",80,0xc5ee6bbd)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE(  81)		this->super::init(force);
HXLINE(  83)		this->getAttribLocation(HX_("openfl_aPosition",7b,19,f2,d0));
HXLINE(  84)		this->getAttribLocation(HX_("openfl_aTexCoord0",10,9c,05,d4));
HXLINE(  85)		this->getAttribLocation(HX_("openfl_aColor",51,21,0d,bc));
HXLINE(  86)		this->getUniformLocation(HX_("openfl_uProjectionMatrix",16,8b,ff,93));
HXLINE(  87)		this->getUniformLocation(HX_("openfl_uSampler0",0e,4f,96,4d));
HXLINE(  88)		this->getUniformLocation(HX_("openfl_uColorMultiplier",9e,72,0d,28));
HXLINE(  89)		this->getUniformLocation(HX_("openfl_uColorOffset",30,10,2f,e8));
HXLINE(  90)		this->getUniformLocation(HX_("openfl_uUseColorTransform",8a,6c,2b,8b));
            	}


::Array< ::String > DefaultShader_obj::VERTEX_SRC;


DefaultShader_obj::DefaultShader_obj()
{
}

hx::Val DefaultShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool DefaultShader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"VERTEX_SRC") ) { outValue = VERTEX_SRC; return true; }
	}
	return false;
}

bool DefaultShader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"VERTEX_SRC") ) { VERTEX_SRC=ioValue.Cast< ::Array< ::String > >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DefaultShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo DefaultShader_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::String >*/ ,(void *) &DefaultShader_obj::VERTEX_SRC,HX_HCSTRING("VERTEX_SRC","\x29","\x91","\x36","\xec")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DefaultShader_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void DefaultShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DefaultShader_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DefaultShader_obj::VERTEX_SRC,"VERTEX_SRC");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DefaultShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DefaultShader_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DefaultShader_obj::VERTEX_SRC,"VERTEX_SRC");
};

#endif

hx::Class DefaultShader_obj::__mClass;

static ::String DefaultShader_obj_sStaticFields[] = {
	HX_HCSTRING("VERTEX_SRC","\x29","\x91","\x36","\xec"),
	::String(null())
};

void DefaultShader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.shaders2.DefaultShader","\x60","\xe3","\x5e","\x34");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DefaultShader_obj::__GetStatic;
	__mClass->mSetStaticField = &DefaultShader_obj::__SetStatic;
	__mClass->mMarkFunc = DefaultShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DefaultShader_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DefaultShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DefaultShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DefaultShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DefaultShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DefaultShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DefaultShader_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.DefaultShader","boot",0x59971400,"openfl._internal.renderer.opengl.shaders2.DefaultShader.boot","openfl/_internal/renderer/opengl/shaders2/DefaultShader.hx",8,0xc5ee6bbd)
HXLINE(   8)		VERTEX_SRC = ::Array_obj< ::String >::__new(15)->init(0,((HX_("attribute vec2 ",fe,43,ff,be) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(";",3b,00,00,00)))->init(1,((HX_("attribute vec2 ",fe,43,ff,be) + HX_("openfl_aTexCoord0",10,9c,05,d4)) + HX_(";",3b,00,00,00)))->init(2,((HX_("attribute vec4 ",bc,45,ff,be) + HX_("openfl_aColor",51,21,0d,bc)) + HX_(";",3b,00,00,00)))->init(3,((HX_("uniform mat3 ",41,cb,75,0c) + HX_("openfl_uProjectionMatrix",16,8b,ff,93)) + HX_(";",3b,00,00,00)))->init(4,((HX_("uniform bool ",ca,cc,4a,c0) + HX_("openfl_uUseColorTransform",8a,6c,2b,8b)) + HX_(";",3b,00,00,00)))->init(5,((HX_("varying vec2 ",52,87,16,2a) + HX_("openfl_vTexCoord",35,1d,f8,7e)) + HX_(";",3b,00,00,00)))->init(6,((HX_("varying vec4 ",10,89,16,2a) + HX_("openfl_vColor",1c,b5,8b,21)) + HX_(";",3b,00,00,00)))->init(7,HX_("void main(void) {",4d,18,fb,21))->init(8,((((HX_("   gl_Position = vec4((",60,ee,15,d9) + HX_("openfl_uProjectionMatrix",16,8b,ff,93)) + HX_(" * vec3(",53,97,95,f8)) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(", 1.0)).xy, 0.0, 1.0);",63,9b,3b,23)))->init(9,((((HX_("   ",20,64,18,00) + HX_("openfl_vTexCoord",35,1d,f8,7e)) + HX_(" = ",63,7d,18,00)) + HX_("openfl_aTexCoord0",10,9c,05,d4)) + HX_(";",3b,00,00,00)))->init(10,((HX_("   if(",8b,f5,b4,4d) + HX_("openfl_uUseColorTransform",8a,6c,2b,8b)) + HX_(")",29,00,00,00)))->init(11,((((HX_("   \t",e9,37,3f,15) + HX_("openfl_vColor",1c,b5,8b,21)) + HX_(" = ",63,7d,18,00)) + HX_("openfl_aColor",51,21,0d,bc)) + HX_(";",3b,00,00,00)))->init(12,HX_("   else",d9,d8,01,ae))->init(13,((((((((HX_("   \t",e9,37,3f,15) + HX_("openfl_vColor",1c,b5,8b,21)) + HX_(" = vec4(",85,68,ad,0e)) + HX_("openfl_aColor",51,21,0d,bc)) + HX_(".bgr * ",97,32,8d,41)) + HX_("openfl_aColor",51,21,0d,bc)) + HX_(".a, ",a7,91,b1,1e)) + HX_("openfl_aColor",51,21,0d,bc)) + HX_(".a);",25,8f,b1,1e)))->init(14,HX_("}",7d,00,00,00));
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace shaders2
