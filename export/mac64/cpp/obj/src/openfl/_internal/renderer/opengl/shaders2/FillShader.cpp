// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_FillShader
#include <openfl/_internal/renderer/opengl/shaders2/FillShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif

static const ::String _hx_array_data_0[] = {
	HX_("#ifdef GL_ES",2d,5e,36,de),HX_("precision lowp float;",81,5f,ad,9a),HX_("#endif",75,ed,f7,6e),HX_("varying vec4 vColor;",7e,af,e3,9c),HX_("void main(void) {",4d,18,fb,21),HX_("   gl_FragColor = vColor;",42,33,42,c5),HX_("}",7d,00,00,00),
};
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace shaders2{

void FillShader_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.FillShader","new",0x70a7c120,"openfl._internal.renderer.opengl.shaders2.FillShader.new","openfl/_internal/renderer/opengl/shaders2/FillShader.hx",9,0xd620b091)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  10)		super::__construct(gl);
HXLINE(  12)		this->vertexSrc = ::Array_obj< ::String >::__new(20)->init(0,((HX_("attribute vec2 ",fe,43,ff,be) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(";",3b,00,00,00)))->init(1,((HX_("uniform mat3 ",41,cb,75,0c) + HX_("openfl_uTranslationMatrix",6c,2c,b6,64)) + HX_(";",3b,00,00,00)))->init(2,((HX_("uniform mat3 ",41,cb,75,0c) + HX_("openfl_uProjectionMatrix",16,8b,ff,93)) + HX_(";",3b,00,00,00)))->init(3,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColor",bd,58,30,bb)) + HX_(";",3b,00,00,00)))->init(4,((HX_("uniform float ",70,08,5a,60) + HX_("openfl_uAlpha",b8,8e,6a,92)) + HX_(";",3b,00,00,00)))->init(5,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColorMultiplier",9e,72,0d,28)) + HX_(";",3b,00,00,00)))->init(6,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColorOffset",30,10,2f,e8)) + HX_(";",3b,00,00,00)))->init(7,HX_("varying vec4 vColor;",7e,af,e3,9c))->init(8,HX_("vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {",28,3f,37,fc))->init(9,HX_("   vec4 result = color * multiplier;",e1,00,43,c5))->init(10,HX_("   result.a *= alpha;",5a,0d,d7,2b))->init(11,HX_("   result = result + offset;",d6,2b,93,f8))->init(12,HX_("   result = clamp(result, 0., 1.);",65,22,a3,fc))->init(13,HX_("   result = vec4(result.rgb * result.a, result.a);",1e,90,43,04))->init(14,HX_("   return result;",6e,cd,02,a1))->init(15,HX_("}",7d,00,00,00))->init(16,HX_("void main(void) {",4d,18,fb,21))->init(17,((((((HX_("   gl_Position = vec4((",60,ee,15,d9) + HX_("openfl_uProjectionMatrix",16,8b,ff,93)) + HX_(" * ",d6,6c,18,00)) + HX_("openfl_uTranslationMatrix",6c,2c,b6,64)) + HX_(" * vec3(",53,97,95,f8)) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(", 1.0)).xy, 0.0, 1.0);",63,9b,3b,23)))->init(18,((((((((HX_("   vColor = colorTransform(",e9,4a,56,f6) + HX_("openfl_uColor",bd,58,30,bb)) + HX_(", ",74,26,00,00)) + HX_("openfl_uAlpha",b8,8e,6a,92)) + HX_(", ",74,26,00,00)) + HX_("openfl_uColorMultiplier",9e,72,0d,28)) + HX_(", ",74,26,00,00)) + HX_("openfl_uColorOffset",30,10,2f,e8)) + HX_(");",f2,23,00,00)))->init(19,HX_("}",7d,00,00,00));
HXLINE(  40)		this->fragmentSrc = ::Array_obj< ::String >::fromData( _hx_array_data_0,7);
HXLINE(  52)		this->init(null());
            	}

Dynamic FillShader_obj::__CreateEmpty() { return new FillShader_obj; }

hx::ObjectPtr< FillShader_obj > FillShader_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< FillShader_obj > _hx_result = new FillShader_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic FillShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FillShader_obj > _hx_result = new FillShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void FillShader_obj::init(hx::Null< Bool >  __o_force){
Bool force = __o_force.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.FillShader","init",0x1ed9f250,"openfl._internal.renderer.opengl.shaders2.FillShader.init","openfl/_internal/renderer/opengl/shaders2/FillShader.hx",55,0xd620b091)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE(  56)		this->super::init(force);
HXLINE(  58)		this->getAttribLocation(HX_("openfl_aPosition",7b,19,f2,d0));
HXLINE(  59)		this->getUniformLocation(HX_("openfl_uTranslationMatrix",6c,2c,b6,64));
HXLINE(  60)		this->getUniformLocation(HX_("openfl_uProjectionMatrix",16,8b,ff,93));
HXLINE(  61)		this->getUniformLocation(HX_("openfl_uColor",bd,58,30,bb));
HXLINE(  62)		this->getUniformLocation(HX_("openfl_uColorMultiplier",9e,72,0d,28));
HXLINE(  63)		this->getUniformLocation(HX_("openfl_uColorOffset",30,10,2f,e8));
            	}



FillShader_obj::FillShader_obj()
{
}

hx::Val FillShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FillShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *FillShader_obj_sStaticStorageInfo = 0;
#endif

static ::String FillShader_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void FillShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FillShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FillShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FillShader_obj::__mClass,"__mClass");
};

#endif

hx::Class FillShader_obj::__mClass;

void FillShader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.shaders2.FillShader","\x2e","\xf1","\xb0","\xab");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FillShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FillShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FillShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FillShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FillShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FillShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace shaders2
