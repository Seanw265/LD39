// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_PatternFillShader
#include <openfl/_internal/renderer/opengl/shaders2/PatternFillShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace shaders2{

void PatternFillShader_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.PatternFillShader","new",0xd3020c04,"openfl._internal.renderer.opengl.shaders2.PatternFillShader.new","openfl/_internal/renderer/opengl/shaders2/PatternFillShader.hx",9,0x30c52bcb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  10)		super::__construct(gl);
HXLINE(  12)		this->vertexSrc = ::Array_obj< ::String >::__new(9)->init(0,((HX_("attribute vec2 ",fe,43,ff,be) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(";",3b,00,00,00)))->init(1,((HX_("uniform mat3 ",41,cb,75,0c) + HX_("openfl_uTranslationMatrix",6c,2c,b6,64)) + HX_(";",3b,00,00,00)))->init(2,((HX_("uniform mat3 ",41,cb,75,0c) + HX_("openfl_uProjectionMatrix",16,8b,ff,93)) + HX_(";",3b,00,00,00)))->init(3,((HX_("uniform mat3 ",41,cb,75,0c) + HX_("openfl_uPatternMatrix",0b,1e,03,6f)) + HX_(";",3b,00,00,00)))->init(4,HX_("varying vec2 vPosition;",ee,b5,db,87))->init(5,HX_("void main(void) {",4d,18,fb,21))->init(6,((((((HX_("   gl_Position = vec4((",60,ee,15,d9) + HX_("openfl_uProjectionMatrix",16,8b,ff,93)) + HX_(" * ",d6,6c,18,00)) + HX_("openfl_uTranslationMatrix",6c,2c,b6,64)) + HX_(" * vec3(",53,97,95,f8)) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(", 1.0)).xy, 0.0, 1.0);",63,9b,3b,23)))->init(7,((((HX_("   vPosition = (",04,90,c7,1a) + HX_("openfl_uPatternMatrix",0b,1e,03,6f)) + HX_(" * vec3(",53,97,95,f8)) + HX_("openfl_aPosition",7b,19,f2,d0)) + HX_(", 1)).xy;",89,e7,3a,7c)))->init(8,HX_("}",7d,00,00,00));
HXLINE(  27)		this->fragmentSrc = ::Array_obj< ::String >::__new(24)->init(0,HX_("#ifdef GL_ES",2d,5e,36,de))->init(1,HX_("precision lowp float;",81,5f,ad,9a))->init(2,HX_("#endif",75,ed,f7,6e))->init(3,((HX_("uniform float ",70,08,5a,60) + HX_("openfl_uAlpha",b8,8e,6a,92)) + HX_(";",3b,00,00,00)))->init(4,((HX_("uniform vec2 ",16,f7,a8,3d) + HX_("openfl_uPatternTL",22,20,65,da)) + HX_(";",3b,00,00,00)))->init(5,((HX_("uniform vec2 ",16,f7,a8,3d) + HX_("openfl_uPatternBR",7a,10,65,da)) + HX_(";",3b,00,00,00)))->init(6,((HX_("uniform sampler2D ",72,47,f0,ca) + HX_("openfl_uSampler0",0e,4f,96,4d)) + HX_(";",3b,00,00,00)))->init(7,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColorMultiplier",9e,72,0d,28)) + HX_(";",3b,00,00,00)))->init(8,((HX_("uniform vec4 ",d4,f8,a8,3d) + HX_("openfl_uColorOffset",30,10,2f,e8)) + HX_(";",3b,00,00,00)))->init(9,HX_("varying vec2 vPosition;",ee,b5,db,87))->init(10,HX_("vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {",28,3f,37,fc))->init(11,HX_("   vec4 unmultiply = vec4(color.rgb / color.a, color.a);",0f,f7,2c,dd))->init(12,HX_("   vec4 result = unmultiply * multiplier;",c7,00,c8,17))->init(13,HX_("   result.a *= alpha;",5a,0d,d7,2b))->init(14,HX_("   result = result + offset;",d6,2b,93,f8))->init(15,HX_("   result = clamp(result, 0., 1.);",65,22,a3,fc))->init(16,HX_("   result = vec4(result.rgb * result.a, result.a);",1e,90,43,04))->init(17,HX_("   return result;",6e,cd,02,a1))->init(18,HX_("}",7d,00,00,00))->init(19,HX_("void main(void) {",4d,18,fb,21))->init(20,((((HX_("   vec2 pos = mix(",3d,20,89,8c) + HX_("openfl_uPatternTL",22,20,65,da)) + HX_(", ",74,26,00,00)) + HX_("openfl_uPatternBR",7a,10,65,da)) + HX_(", vPosition);",fd,ba,9c,09)))->init(21,((HX_("   vec4 tcol = texture2D(",d2,ac,26,f7) + HX_("openfl_uSampler0",0e,4f,96,4d)) + HX_(", pos);",92,03,b3,b7)))->init(22,((((((HX_("   gl_FragColor = colorTransform(tcol, ",33,4b,b4,f6) + HX_("openfl_uAlpha",b8,8e,6a,92)) + HX_(", ",74,26,00,00)) + HX_("openfl_uColorMultiplier",9e,72,0d,28)) + HX_(", ",74,26,00,00)) + HX_("openfl_uColorOffset",30,10,2f,e8)) + HX_(");",f2,23,00,00)))->init(23,HX_("}",7d,00,00,00));
HXLINE(  59)		this->init(null());
            	}

Dynamic PatternFillShader_obj::__CreateEmpty() { return new PatternFillShader_obj; }

hx::ObjectPtr< PatternFillShader_obj > PatternFillShader_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< PatternFillShader_obj > _hx_result = new PatternFillShader_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic PatternFillShader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PatternFillShader_obj > _hx_result = new PatternFillShader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void PatternFillShader_obj::init(hx::Null< Bool >  __o_force){
Bool force = __o_force.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.PatternFillShader","init",0xcb812eec,"openfl._internal.renderer.opengl.shaders2.PatternFillShader.init","openfl/_internal/renderer/opengl/shaders2/PatternFillShader.hx",62,0x30c52bcb)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE(  63)		this->super::init(force);
HXLINE(  65)		this->getAttribLocation(HX_("openfl_aPosition",7b,19,f2,d0));
HXLINE(  67)		this->getUniformLocation(HX_("openfl_uTranslationMatrix",6c,2c,b6,64));
HXLINE(  68)		this->getUniformLocation(HX_("openfl_uPatternMatrix",0b,1e,03,6f));
HXLINE(  69)		this->getUniformLocation(HX_("openfl_uProjectionMatrix",16,8b,ff,93));
HXLINE(  70)		this->getUniformLocation(HX_("openfl_uSampler0",0e,4f,96,4d));
HXLINE(  71)		this->getUniformLocation(HX_("openfl_uPatternTL",22,20,65,da));
HXLINE(  72)		this->getUniformLocation(HX_("openfl_uPatternBR",7a,10,65,da));
HXLINE(  73)		this->getUniformLocation(HX_("openfl_uAlpha",b8,8e,6a,92));
HXLINE(  74)		this->getUniformLocation(HX_("openfl_uColorMultiplier",9e,72,0d,28));
HXLINE(  75)		this->getUniformLocation(HX_("openfl_uColorOffset",30,10,2f,e8));
            	}



PatternFillShader_obj::PatternFillShader_obj()
{
}

hx::Val PatternFillShader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PatternFillShader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PatternFillShader_obj_sStaticStorageInfo = 0;
#endif

static ::String PatternFillShader_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void PatternFillShader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PatternFillShader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PatternFillShader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PatternFillShader_obj::__mClass,"__mClass");
};

#endif

hx::Class PatternFillShader_obj::__mClass;

void PatternFillShader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.shaders2.PatternFillShader","\x12","\xfa","\x0a","\xdd");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PatternFillShader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PatternFillShader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PatternFillShader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PatternFillShader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PatternFillShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PatternFillShader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace shaders2
