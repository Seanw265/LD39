// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_crypto_Md5
#include <haxe/crypto/Md5.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLShader
#include <lime/graphics/opengl/GLShader.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_ShaderManager
#include <openfl/_internal/renderer/opengl/utils/ShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexArray
#include <openfl/_internal/renderer/opengl/utils/VertexArray.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexAttribute
#include <openfl/_internal/renderer/opengl/utils/VertexAttribute.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_GLShaderParameter
#include <openfl/display/GLShaderParameter.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace shaders2{

void Shader_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","new",0xad7101bd,"openfl._internal.renderer.opengl.shaders2.Shader.new","openfl/_internal/renderer/opengl/shaders2/Shader.hx",20,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  36)		this->wrapT = (int)33071;
HXLINE(  35)		this->wrapS = (int)33071;
HXLINE(  30)		this->compiled = false;
HXLINE(  29)		this->uniforms =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  28)		this->attributes =  ::haxe::ds::StringMap_obj::__new();
HXLINE(  44)		this->ID = ::openfl::_internal::renderer::opengl::shaders2::Shader_obj::UID++;
HXLINE(  45)		this->gl = gl;
HXLINE(  47)		this->program = null();
            	}

Dynamic Shader_obj::__CreateEmpty() { return new Shader_obj; }

hx::ObjectPtr< Shader_obj > Shader_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic Shader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Shader_obj > _hx_result = new Shader_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void Shader_obj::init(hx::Null< Bool >  __o_force){
Bool force = __o_force.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","init",0x12293b13,"openfl._internal.renderer.opengl.shaders2.Shader.init","openfl/_internal/renderer/opengl/shaders2/Shader.hx",50,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(force,"force")
HXLINE(  52)		Bool _hx_tmp;
HXDLIN(  52)		if (this->compiled) {
HXLINE(  52)			_hx_tmp = !(force);
            		}
            		else {
HXLINE(  52)			_hx_tmp = false;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  52)			return;
            		}
HXLINE(  54)		Bool _hx_tmp1 = hx::IsNotNull( this->vertexSrc );
HXDLIN(  54)		if (_hx_tmp1) {
HXLINE(  55)			this->vertexString = this->vertexSrc->join(HX_("\n",0a,00,00,00));
            		}
HXLINE(  57)		Bool _hx_tmp2 = hx::IsNotNull( this->fragmentSrc );
HXDLIN(  57)		if (_hx_tmp2) {
HXLINE(  58)			this->fragmentString = this->fragmentSrc->join(HX_("\n",0a,00,00,00));
            		}
HXLINE(  61)		Bool _hx_tmp3;
HXDLIN(  61)		Bool _hx_tmp4 = hx::IsNotNull( this->vertexString );
HXDLIN(  61)		if (_hx_tmp4) {
HXLINE(  61)			_hx_tmp3 = hx::IsNull( this->fragmentString );
            		}
            		else {
HXLINE(  61)			_hx_tmp3 = true;
            		}
HXDLIN(  61)		if (_hx_tmp3) {
HXLINE(  62)			HX_STACK_DO_THROW(HX_("No vertex or fragment source provided",f8,cc,dc,61));
            		}
HXLINE(  65)		this->program = ::openfl::_internal::renderer::opengl::shaders2::Shader_obj::compileProgram(this->gl,this->vertexString,this->fragmentString);
HXLINE(  66)		Bool _hx_tmp5 = hx::IsNotNull( this->program );
HXDLIN(  66)		if (_hx_tmp5) {
HXLINE(  67)			this->compiled = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,init,(void))

void Shader_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","destroy",0x52d3d0d7,"openfl._internal.renderer.opengl.shaders2.Shader.destroy","openfl/_internal/renderer/opengl/shaders2/Shader.hx",71,0x6ac2be14)
            	HX_STACK_THIS(this)
HXLINE(  72)		Bool _hx_tmp = hx::IsNotNull( this->program );
HXDLIN(  72)		if (_hx_tmp) {
HXLINE(  73)			HX_VARI(  ::lime::graphics::opengl::GLProgram,program) = this->program;
HXDLIN(  73)			{
HXLINE(  73)				{
HXLINE(  73)					Int program1 = ( (Int)(program->id) );
HXDLIN(  73)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_program(program1);
            				}
HXDLIN(  73)				program->invalidate();
            			}
            		}
HXLINE(  75)		this->compiled = false;
HXLINE(  76)		this->attributes = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Shader_obj,destroy,(void))

void Shader_obj::applyData( ::haxe::ds::StringMap shaderData, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","applyData",0xc4166bd5,"openfl._internal.renderer.opengl.shaders2.Shader.applyData","openfl/_internal/renderer/opengl/shaders2/Shader.hx",79,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shaderData,"shaderData")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(  80)		Bool _hx_tmp = hx::IsNull( shaderData );
HXDLIN(  80)		if (_hx_tmp) {
HXLINE(  80)			return;
            		}
HXLINE(  82)		HX_VAR(  ::openfl::display::GLShaderParameter,param);
HXLINE(  83)		HX_VAR( Int,u);
HXLINE(  84)		HX_VAR( ::Array< Float >,v);
HXLINE(  85)		HX_VAR(  ::openfl::display::BitmapData,bd);
HXLINE(  86)		{
HXLINE(  86)			HX_VARI(  ::Dynamic,tmp) = shaderData->keys();
HXDLIN(  86)			while(true){
HXLINE(  86)				Bool _hx_tmp1 = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN(  86)				if (_hx_tmp1) {
HXLINE(  86)					goto _hx_goto_0;
            				}
HXDLIN(  86)				HX_VARI( ::String,key) = ( (::String)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE(  87)				u = this->getUniformLocation(key);
HXLINE(  88)				param = shaderData->get(key).StaticCast<  ::openfl::display::GLShaderParameter >();
HXLINE(  89)				Bool _hx_tmp2 = hx::IsNull( param );
HXDLIN(  89)				if (_hx_tmp2) {
HXLINE(  89)					continue;
            				}
HXLINE(  90)				v = param->value;
HXLINE(  91)				bd = param->bitmap;
HXLINE(  92)				Bool _hx_tmp3;
HXDLIN(  92)				Bool _hx_tmp4 = hx::IsNull( v );
HXDLIN(  92)				if (_hx_tmp4) {
HXLINE(  92)					_hx_tmp3 = hx::IsNull( bd );
            				}
            				else {
HXLINE(  92)					_hx_tmp3 = false;
            				}
HXDLIN(  92)				if (_hx_tmp3) {
HXLINE(  92)					continue;
            				}
HXLINE(  94)				{
HXLINE(  94)					HX_VARI( Int,_g) = param->internalType;
HXDLIN(  94)					switch((int)(_g)){
            						case (int)1: {
HXLINE(  96)							HX_VARI_NAME( Int,_g1,"_g") = param->size;
HXDLIN(  96)							switch((int)(_g1)){
            								case (int)1: {
HXLINE(  97)									Float _hx_tmp5 = v->__get((int)0);
HXDLIN(  97)									Int x = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN(  97)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1i(u,x);
            								}
            								break;
            								case (int)2: {
HXLINE(  98)									Float _hx_tmp6 = v->__get((int)0);
HXDLIN(  98)									Int x1 = ::Std_obj::_hx_int(_hx_tmp6);
HXDLIN(  98)									Float _hx_tmp7 = v->__get((int)1);
HXDLIN(  98)									Int y = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN(  98)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform2i(u,x1,y);
            								}
            								break;
            								case (int)3: {
HXLINE(  99)									Float _hx_tmp8 = v->__get((int)0);
HXDLIN(  99)									Int x2 = ::Std_obj::_hx_int(_hx_tmp8);
HXDLIN(  99)									Float _hx_tmp9 = v->__get((int)1);
HXDLIN(  99)									Int y1 = ::Std_obj::_hx_int(_hx_tmp9);
HXDLIN(  99)									Float _hx_tmp10 = v->__get((int)2);
HXDLIN(  99)									Int z = ::Std_obj::_hx_int(_hx_tmp10);
HXDLIN(  99)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform3i(u,x2,y1,z);
            								}
            								break;
            								case (int)4: {
HXLINE( 100)									Float _hx_tmp11 = v->__get((int)0);
HXDLIN( 100)									Int x3 = ::Std_obj::_hx_int(_hx_tmp11);
HXDLIN( 100)									Float _hx_tmp12 = v->__get((int)1);
HXDLIN( 100)									Int y2 = ::Std_obj::_hx_int(_hx_tmp12);
HXDLIN( 100)									Float _hx_tmp13 = v->__get((int)2);
HXDLIN( 100)									Int z1 = ::Std_obj::_hx_int(_hx_tmp13);
HXDLIN( 100)									Float _hx_tmp14 = v->__get((int)3);
HXDLIN( 100)									Int w = ::Std_obj::_hx_int(_hx_tmp14);
HXDLIN( 100)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4i(u,x3,y2,z1,w);
            								}
            								break;
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 103)							HX_VARI_NAME( Int,_g2,"_g") = param->size;
HXDLIN( 103)							switch((int)(_g2)){
            								case (int)1: {
HXLINE( 104)									Float _hx_tmp15 = v->__get((int)0);
HXDLIN( 104)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1f(u,_hx_tmp15);
            								}
            								break;
            								case (int)2: {
HXLINE( 105)									Float _hx_tmp16 = v->__get((int)0);
HXDLIN( 105)									Float _hx_tmp17 = v->__get((int)1);
HXDLIN( 105)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform2f(u,_hx_tmp16,_hx_tmp17);
            								}
            								break;
            								case (int)3: {
HXLINE( 106)									Float _hx_tmp18 = v->__get((int)0);
HXDLIN( 106)									Float _hx_tmp19 = v->__get((int)1);
HXDLIN( 106)									Float _hx_tmp20 = v->__get((int)2);
HXDLIN( 106)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform3f(u,_hx_tmp18,_hx_tmp19,_hx_tmp20);
            								}
            								break;
            								case (int)4: {
HXLINE( 107)									Float _hx_tmp21 = v->__get((int)0);
HXDLIN( 107)									Float _hx_tmp22 = v->__get((int)1);
HXDLIN( 107)									Float _hx_tmp23 = v->__get((int)2);
HXDLIN( 107)									Float _hx_tmp24 = v->__get((int)3);
HXDLIN( 107)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4f(u,_hx_tmp21,_hx_tmp22,_hx_tmp23,_hx_tmp24);
            								}
            								break;
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 110)							HX_VARI_NAME( Int,_g3,"_g") = param->size;
HXDLIN( 110)							switch((int)(_g3)){
            								case (int)2: {
HXLINE( 111)									Bool transpose = param->transpose;
HXDLIN( 111)									HX_VARI( ::cpp::VirtualArray,array) = param->value;
HXDLIN( 111)									HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 111)									Bool _hx_tmp25 = hx::IsNotNull( array );
HXDLIN( 111)									if (_hx_tmp25) {
HXLINE( 111)										HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 111)										_this->byteOffset = (int)0;
HXDLIN( 111)										_this->length = array->get_length();
HXDLIN( 111)										Int _hx_tmp26 = (_this->length * _this->bytesPerElement);
HXDLIN( 111)										_this->byteLength = _hx_tmp26;
HXDLIN( 111)										Int byteLength = _this->byteLength;
HXDLIN( 111)										HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 111)										_this->buffer = this2;
HXDLIN( 111)										_this->copyFromArray(array,null());
HXDLIN( 111)										this1 = _this;
            									}
            									else {
HXLINE( 111)										HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            									}
HXDLIN( 111)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(u,transpose,hx::DynamicPtr(this1->buffer),(int)2);
            								}
            								break;
            								case (int)3: {
HXLINE( 112)									Bool transpose1 = param->transpose;
HXDLIN( 112)									HX_VARI_NAME( ::cpp::VirtualArray,array1,"array") = param->value;
HXDLIN( 112)									HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 112)									Bool _hx_tmp27 = hx::IsNotNull( array1 );
HXDLIN( 112)									if (_hx_tmp27) {
HXLINE( 112)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 112)										_this1->byteOffset = (int)0;
HXDLIN( 112)										_this1->length = array1->get_length();
HXDLIN( 112)										Int _hx_tmp28 = (_this1->length * _this1->bytesPerElement);
HXDLIN( 112)										_this1->byteLength = _hx_tmp28;
HXDLIN( 112)										Int byteLength1 = _this1->byteLength;
HXDLIN( 112)										HX_VARI_NAME(  ::haxe::io::Bytes,this4,"this") = ::haxe::io::Bytes_obj::alloc(byteLength1);
HXDLIN( 112)										_this1->buffer = this4;
HXDLIN( 112)										_this1->copyFromArray(array1,null());
HXDLIN( 112)										this3 = _this1;
            									}
            									else {
HXLINE( 112)										HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            									}
HXDLIN( 112)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(u,transpose1,hx::DynamicPtr(this3->buffer),(int)3);
            								}
            								break;
            								case (int)4: {
HXLINE( 113)									Bool transpose2 = param->transpose;
HXDLIN( 113)									HX_VARI_NAME( ::cpp::VirtualArray,array2,"array") = param->value;
HXDLIN( 113)									HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 113)									Bool _hx_tmp29 = hx::IsNotNull( array2 );
HXDLIN( 113)									if (_hx_tmp29) {
HXLINE( 113)										HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 113)										_this2->byteOffset = (int)0;
HXDLIN( 113)										_this2->length = array2->get_length();
HXDLIN( 113)										Int _hx_tmp30 = (_this2->length * _this2->bytesPerElement);
HXDLIN( 113)										_this2->byteLength = _hx_tmp30;
HXDLIN( 113)										Int byteLength2 = _this2->byteLength;
HXDLIN( 113)										HX_VARI_NAME(  ::haxe::io::Bytes,this6,"this") = ::haxe::io::Bytes_obj::alloc(byteLength2);
HXDLIN( 113)										_this2->buffer = this6;
HXDLIN( 113)										_this2->copyFromArray(array2,null());
HXDLIN( 113)										this5 = _this2;
            									}
            									else {
HXLINE( 113)										HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            									}
HXDLIN( 113)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(u,transpose2,hx::DynamicPtr(this5->buffer),(int)4);
            								}
            								break;
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 116)							Bool _hx_tmp31;
HXDLIN( 116)							Bool _hx_tmp32 = hx::IsNotNull( bd );
HXDLIN( 116)							if (_hx_tmp32) {
HXLINE( 116)								_hx_tmp31 = !(bd->_hx___isValid);
            							}
            							else {
HXLINE( 116)								_hx_tmp31 = true;
            							}
HXDLIN( 116)							if (_hx_tmp31) {
HXLINE( 116)								continue;
            							}
HXLINE( 117)							{
HXLINE( 117)								Int texture = (this->gl->TEXTURE0 + renderSession->activeTextures);
HXDLIN( 117)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_active_texture(texture);
            							}
HXLINE( 118)							{
HXLINE( 118)								Int target = this->gl->TEXTURE_2D;
HXDLIN( 118)								HX_VARI_NAME(  ::lime::graphics::opengl::GLTexture,texture1,"texture") = bd->getTexture(this->gl);
HXDLIN( 118)								{
HXLINE( 118)									Int texture2;
HXDLIN( 118)									Bool _hx_tmp33 = hx::IsNull( texture1 );
HXDLIN( 118)									if (_hx_tmp33) {
HXLINE( 118)										texture2 = (int)0;
            									}
            									else {
HXLINE( 118)										texture2 = texture1->id;
            									}
HXDLIN( 118)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,texture2);
            								}
            							}
HXLINE( 119)							{
HXLINE( 119)								Int x4 = renderSession->activeTextures;
HXDLIN( 119)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1i(u,x4);
            							}
HXLINE( 120)							{
HXLINE( 120)								Int target1 = this->gl->TEXTURE_2D;
HXDLIN( 120)								Int pname = this->gl->TEXTURE_MAG_FILTER;
HXDLIN( 120)								Int param1;
HXDLIN( 120)								if (param->smooth) {
HXLINE( 120)									param1 = this->gl->LINEAR;
            								}
            								else {
HXLINE( 120)									param1 = this->gl->NEAREST;
            								}
HXDLIN( 120)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param1);
            							}
HXLINE( 121)							{
HXLINE( 121)								Int target2 = this->gl->TEXTURE_2D;
HXDLIN( 121)								Int pname1 = this->gl->TEXTURE_MIN_FILTER;
HXDLIN( 121)								Int param2;
HXDLIN( 121)								if (param->smooth) {
HXLINE( 121)									param2 = this->gl->LINEAR;
            								}
            								else {
HXLINE( 121)									param2 = this->gl->NEAREST;
            								}
HXDLIN( 121)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param2);
            							}
HXLINE( 123)							{
HXLINE( 123)								Int target3 = this->gl->TEXTURE_2D;
HXDLIN( 123)								Int pname2 = this->gl->TEXTURE_WRAP_S;
HXDLIN( 123)								Int param3 = param->repeatX;
HXDLIN( 123)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target3,pname2,param3);
            							}
HXLINE( 124)							{
HXLINE( 124)								Int target4 = this->gl->TEXTURE_2D;
HXDLIN( 124)								Int pname3 = this->gl->TEXTURE_WRAP_T;
HXDLIN( 124)								Int param4 = param->repeatY;
HXDLIN( 124)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target4,pname3,param4);
            							}
HXLINE( 126)							renderSession->activeTextures++;
            						}
            						break;
            						default:{
            						}
            					}
            				}
            			}
            			_hx_goto_0:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,applyData,(void))

Int Shader_obj::getAttribLocation(::String attribute){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","getAttribLocation",0x2bea14f2,"openfl._internal.renderer.opengl.shaders2.Shader.getAttribLocation","openfl/_internal/renderer/opengl/shaders2/Shader.hx",132,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(attribute,"attribute")
HXLINE( 133)		Bool _hx_tmp = hx::IsNull( this->program );
HXDLIN( 133)		if (_hx_tmp) {
HXLINE( 134)			HX_STACK_DO_THROW(HX_("Shader isn't initialized",8a,bf,62,0e));
            		}
HXLINE( 136)		Bool _hx_tmp1 = this->attributes->exists(attribute);
HXDLIN( 136)		if (_hx_tmp1) {
HXLINE( 137)			return this->attributes->get(attribute);
            		}
            		else {
HXLINE( 139)			Int program = ( (Int)(this->program->id) );
HXDLIN( 139)			HX_VARI( Int,location) = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_attrib_location(program,attribute)) );
HXLINE( 140)			this->attributes->set(attribute,location);
HXLINE( 141)			return location;
            		}
HXLINE( 136)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,getAttribLocation,return )

Int Shader_obj::getUniformLocation(::String uniform){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","getUniformLocation",0x7fb53ed6,"openfl._internal.renderer.opengl.shaders2.Shader.getUniformLocation","openfl/_internal/renderer/opengl/shaders2/Shader.hx",145,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(uniform,"uniform")
HXLINE( 146)		Bool _hx_tmp = hx::IsNull( this->program );
HXDLIN( 146)		if (_hx_tmp) {
HXLINE( 147)			HX_STACK_DO_THROW(HX_("Shader isn't initialized",8a,bf,62,0e));
            		}
HXLINE( 149)		Bool _hx_tmp1 = this->uniforms->exists(uniform);
HXDLIN( 149)		if (_hx_tmp1) {
HXLINE( 150)			return this->uniforms->get(uniform);
            		}
            		else {
HXLINE( 152)			Int program = ( (Int)(this->program->id) );
HXDLIN( 152)			HX_VARI( Int,location) = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_uniform_location(program,uniform)) );
HXLINE( 153)			this->uniforms->set(uniform,location);
HXLINE( 154)			return location;
            		}
HXLINE( 149)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,getUniformLocation,return )

void Shader_obj::enableVertexAttribute( ::openfl::_internal::renderer::opengl::utils::VertexAttribute attribute,Int stride,Int offset){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","enableVertexAttribute",0x3cb9d972,"openfl._internal.renderer.opengl.shaders2.Shader.enableVertexAttribute","openfl/_internal/renderer/opengl/shaders2/Shader.hx",158,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(attribute,"attribute")
            	HX_STACK_ARG(stride,"stride")
            	HX_STACK_ARG(offset,"offset")
HXLINE( 159)		HX_VARI( Int,location) = this->getAttribLocation(attribute->name);
HXLINE( 160)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable_vertex_attrib_array(location);
HXLINE( 161)		{
HXLINE( 161)			Int size = attribute->components;
HXDLIN( 161)			Int type = attribute->type;
HXDLIN( 161)			Bool normalized = attribute->normalized;
HXDLIN( 161)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(location,size,type,normalized,stride,(offset * (int)4));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Shader_obj,enableVertexAttribute,(void))

void Shader_obj::disableVertexAttribute( ::openfl::_internal::renderer::opengl::utils::VertexAttribute attribute,hx::Null< Bool >  __o_setDefault){
Bool setDefault = __o_setDefault.Default(true);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","disableVertexAttribute",0xb20b27d3,"openfl._internal.renderer.opengl.shaders2.Shader.disableVertexAttribute","openfl/_internal/renderer/opengl/shaders2/Shader.hx",164,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(attribute,"attribute")
            	HX_STACK_ARG(setDefault,"setDefault")
HXLINE( 165)		HX_VARI( Int,location) = this->getAttribLocation(attribute->name);
HXLINE( 166)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable_vertex_attrib_array(location);
HXLINE( 167)		if (setDefault) {
HXLINE( 168)			HX_VARI( Int,_g) = attribute->components;
HXDLIN( 168)			switch((int)(_g)){
            				case (int)1: {
HXLINE( 170)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this1,"this") = attribute->defaultValue;
HXDLIN( 170)					HX_VARI( Int,byte_offset) = ((int)0 * this1->bytesPerElement);
HXDLIN( 170)					HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXDLIN( 170)					HX_VARI_NAME( Int,_g1,"_g") = this1->type;
HXDLIN( 170)					switch((int)(_g1)){
            						case (int)0: {
HXLINE( 170)							HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            						}
            						break;
            						case (int)1: {
HXLINE( 170)							HX_VARI(  ::haxe::io::Bytes,buffer) = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN( 170)							Bool _hx_tmp = hx::IsNotNull( buffer );
HXDLIN( 170)							if (_hx_tmp) {
HXLINE( 170)								HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)1);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN( 170)								HX_VARI( Int,newByteLength) = bufferByteLength;
HXDLIN( 170)								Bool _hx_tmp1 = false;
HXDLIN( 170)								if (_hx_tmp1) {
HXLINE( 170)									newByteLength = (bufferByteLength - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength,_this->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength = _this->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this->buffer = buffer;
HXDLIN( 170)								_this->byteOffset = byte_offset;
HXDLIN( 170)								_this->byteLength = newByteLength;
HXDLIN( 170)								Float _hx_tmp2 = ((Float)newByteLength / (Float)_this->bytesPerElement);
HXDLIN( 170)								_this->length = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 170)								this2 = _this;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            							}
HXDLIN( 170)							view = this2;
            						}
            						break;
            						case (int)2: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer1,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 170)							Bool _hx_tmp3 = hx::IsNotNull( buffer1 );
HXDLIN( 170)							if (_hx_tmp3) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this1->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength1,"bufferByteLength") = buffer1->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN( 170)								Bool _hx_tmp4 = false;
HXDLIN( 170)								if (_hx_tmp4) {
HXLINE( 170)									newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength1,_this1->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength1 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength1 = _this1->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this1->buffer = buffer1;
HXDLIN( 170)								_this1->byteOffset = byte_offset;
HXDLIN( 170)								_this1->byteLength = newByteLength1;
HXDLIN( 170)								Float _hx_tmp5 = ((Float)newByteLength1 / (Float)_this1->bytesPerElement);
HXDLIN( 170)								_this1->length = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN( 170)								this3 = _this1;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            							}
HXDLIN( 170)							view = this3;
            						}
            						break;
            						case (int)3: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 170)							Bool _hx_tmp6 = hx::IsNotNull( buffer2 );
HXDLIN( 170)							if (_hx_tmp6) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)3);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength2,"bufferByteLength") = buffer2->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN( 170)								Bool _hx_tmp7 = false;
HXDLIN( 170)								if (_hx_tmp7) {
HXLINE( 170)									newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength2,_this2->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength2 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength2 = _this2->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this2->buffer = buffer2;
HXDLIN( 170)								_this2->byteOffset = byte_offset;
HXDLIN( 170)								_this2->byteLength = newByteLength2;
HXDLIN( 170)								Float _hx_tmp8 = ((Float)newByteLength2 / (Float)_this2->bytesPerElement);
HXDLIN( 170)								_this2->length = ::Std_obj::_hx_int(_hx_tmp8);
HXDLIN( 170)								this4 = _this2;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            							}
HXDLIN( 170)							view = this4;
            						}
            						break;
            						case (int)4: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 170)							Bool _hx_tmp9 = hx::IsNotNull( buffer3 );
HXDLIN( 170)							if (_hx_tmp9) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength3,"bufferByteLength") = buffer3->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN( 170)								Bool _hx_tmp10 = false;
HXDLIN( 170)								if (_hx_tmp10) {
HXLINE( 170)									newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength3,_this3->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength3 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength3 = _this3->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this3->buffer = buffer3;
HXDLIN( 170)								_this3->byteOffset = byte_offset;
HXDLIN( 170)								_this3->byteLength = newByteLength3;
HXDLIN( 170)								Float _hx_tmp11 = ((Float)newByteLength3 / (Float)_this3->bytesPerElement);
HXDLIN( 170)								_this3->length = ::Std_obj::_hx_int(_hx_tmp11);
HXDLIN( 170)								this5 = _this3;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            							}
HXDLIN( 170)							view = this5;
            						}
            						break;
            						case (int)5: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN( 170)							Bool _hx_tmp12 = hx::IsNotNull( buffer4 );
HXDLIN( 170)							if (_hx_tmp12) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)5);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength4,"bufferByteLength") = buffer4->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN( 170)								Bool _hx_tmp13 = false;
HXDLIN( 170)								if (_hx_tmp13) {
HXLINE( 170)									newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength4,_this4->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength4 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength4 = _this4->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this4->buffer = buffer4;
HXDLIN( 170)								_this4->byteOffset = byte_offset;
HXDLIN( 170)								_this4->byteLength = newByteLength4;
HXDLIN( 170)								Float _hx_tmp14 = ((Float)newByteLength4 / (Float)_this4->bytesPerElement);
HXDLIN( 170)								_this4->length = ::Std_obj::_hx_int(_hx_tmp14);
HXDLIN( 170)								this6 = _this4;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            							}
HXDLIN( 170)							view = this6;
            						}
            						break;
            						case (int)6: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 170)							Bool _hx_tmp15 = hx::IsNotNull( buffer5 );
HXDLIN( 170)							if (_hx_tmp15) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength5,"bufferByteLength") = buffer5->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN( 170)								Bool _hx_tmp16 = false;
HXDLIN( 170)								if (_hx_tmp16) {
HXLINE( 170)									newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength5,_this5->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength5 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength5 = _this5->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this5->buffer = buffer5;
HXDLIN( 170)								_this5->byteOffset = byte_offset;
HXDLIN( 170)								_this5->byteLength = newByteLength5;
HXDLIN( 170)								Float _hx_tmp17 = ((Float)newByteLength5 / (Float)_this5->bytesPerElement);
HXDLIN( 170)								_this5->length = ::Std_obj::_hx_int(_hx_tmp17);
HXDLIN( 170)								this7 = _this5;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            							}
HXDLIN( 170)							view = this7;
            						}
            						break;
            						case (int)7: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN( 170)							Bool _hx_tmp18 = hx::IsNotNull( buffer6 );
HXDLIN( 170)							if (_hx_tmp18) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)7);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength6,"bufferByteLength") = buffer6->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN( 170)								Bool _hx_tmp19 = false;
HXDLIN( 170)								if (_hx_tmp19) {
HXLINE( 170)									newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength6,_this6->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength6 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength6 = _this6->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this6->buffer = buffer6;
HXDLIN( 170)								_this6->byteOffset = byte_offset;
HXDLIN( 170)								_this6->byteLength = newByteLength6;
HXDLIN( 170)								Float _hx_tmp20 = ((Float)newByteLength6 / (Float)_this6->bytesPerElement);
HXDLIN( 170)								_this6->length = ::Std_obj::_hx_int(_hx_tmp20);
HXDLIN( 170)								this8 = _this6;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            							}
HXDLIN( 170)							view = this8;
            						}
            						break;
            						case (int)8: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN( 170)							Bool _hx_tmp21 = hx::IsNotNull( buffer7 );
HXDLIN( 170)							if (_hx_tmp21) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength7,"bufferByteLength") = buffer7->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN( 170)								Bool _hx_tmp22 = false;
HXDLIN( 170)								if (_hx_tmp22) {
HXLINE( 170)									newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength7,_this7->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength7 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength7 = _this7->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this7->buffer = buffer7;
HXDLIN( 170)								_this7->byteOffset = byte_offset;
HXDLIN( 170)								_this7->byteLength = newByteLength7;
HXDLIN( 170)								Float _hx_tmp23 = ((Float)newByteLength7 / (Float)_this7->bytesPerElement);
HXDLIN( 170)								_this7->length = ::Std_obj::_hx_int(_hx_tmp23);
HXDLIN( 170)								this9 = _this7;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN( 170)							view = this9;
            						}
            						break;
            						case (int)9: {
HXLINE( 170)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this1->buffer;
HXDLIN( 170)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this10,"this");
HXDLIN( 170)							Bool _hx_tmp24 = hx::IsNotNull( buffer8 );
HXDLIN( 170)							if (_hx_tmp24) {
HXLINE( 170)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)9);
HXDLIN( 170)								if ((byte_offset < (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE( 170)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 170)								HX_VARI_NAME( Int,bufferByteLength8,"bufferByteLength") = buffer8->length;
HXDLIN( 170)								HX_VARI_NAME( Int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN( 170)								Bool _hx_tmp25 = false;
HXDLIN( 170)								if (_hx_tmp25) {
HXLINE( 170)									newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN( 170)									if ((hx::Mod(bufferByteLength8,_this8->bytesPerElement) != (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 170)									if ((newByteLength8 < (int)0)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 170)									newByteLength8 = _this8->bytesPerElement;
HXDLIN( 170)									if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE( 170)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 170)								_this8->buffer = buffer8;
HXDLIN( 170)								_this8->byteOffset = byte_offset;
HXDLIN( 170)								_this8->byteLength = newByteLength8;
HXDLIN( 170)								Float _hx_tmp26 = ((Float)newByteLength8 / (Float)_this8->bytesPerElement);
HXDLIN( 170)								_this8->length = ::Std_obj::_hx_int(_hx_tmp26);
HXDLIN( 170)								this10 = _this8;
            							}
            							else {
HXLINE( 170)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            							}
HXDLIN( 170)							view = this10;
            						}
            						break;
            					}
HXDLIN( 170)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib1fv(location,hx::DynamicPtr(view->buffer));
            				}
            				break;
            				case (int)2: {
HXLINE( 172)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this11,"this") = attribute->defaultValue;
HXDLIN( 172)					HX_VARI_NAME( Int,byte_offset1,"byte_offset") = ((int)0 * this11->bytesPerElement);
HXDLIN( 172)					HX_VAR_NAME(  ::lime::utils::ArrayBufferView,view1,"view");
HXDLIN( 172)					HX_VARI_NAME( Int,_g2,"_g") = this11->type;
HXDLIN( 172)					switch((int)(_g2)){
            						case (int)0: {
HXLINE( 172)							HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            						}
            						break;
            						case (int)1: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer9,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this12,"this");
HXDLIN( 172)							Bool _hx_tmp27 = hx::IsNotNull( buffer9 );
HXDLIN( 172)							if (_hx_tmp27) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this9,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)1);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this9->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength9,"bufferByteLength") = buffer9->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength9,"newByteLength") = bufferByteLength9;
HXDLIN( 172)								Bool _hx_tmp28 = false;
HXDLIN( 172)								if (_hx_tmp28) {
HXLINE( 172)									newByteLength9 = (bufferByteLength9 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength9,_this9->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength9 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength9 = ((int)2 * _this9->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength9) > bufferByteLength9)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this9->buffer = buffer9;
HXDLIN( 172)								_this9->byteOffset = byte_offset1;
HXDLIN( 172)								_this9->byteLength = newByteLength9;
HXDLIN( 172)								Float _hx_tmp29 = ((Float)newByteLength9 / (Float)_this9->bytesPerElement);
HXDLIN( 172)								_this9->length = ::Std_obj::_hx_int(_hx_tmp29);
HXDLIN( 172)								this12 = _this9;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            							}
HXDLIN( 172)							view1 = this12;
            						}
            						break;
            						case (int)2: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer10,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this13,"this");
HXDLIN( 172)							Bool _hx_tmp30 = hx::IsNotNull( buffer10 );
HXDLIN( 172)							if (_hx_tmp30) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this10,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this10->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength10,"bufferByteLength") = buffer10->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength10,"newByteLength") = bufferByteLength10;
HXDLIN( 172)								Bool _hx_tmp31 = false;
HXDLIN( 172)								if (_hx_tmp31) {
HXLINE( 172)									newByteLength10 = (bufferByteLength10 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength10,_this10->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength10 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength10 = ((int)2 * _this10->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength10) > bufferByteLength10)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this10->buffer = buffer10;
HXDLIN( 172)								_this10->byteOffset = byte_offset1;
HXDLIN( 172)								_this10->byteLength = newByteLength10;
HXDLIN( 172)								Float _hx_tmp32 = ((Float)newByteLength10 / (Float)_this10->bytesPerElement);
HXDLIN( 172)								_this10->length = ::Std_obj::_hx_int(_hx_tmp32);
HXDLIN( 172)								this13 = _this10;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            							}
HXDLIN( 172)							view1 = this13;
            						}
            						break;
            						case (int)3: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer11,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this14,"this");
HXDLIN( 172)							Bool _hx_tmp33 = hx::IsNotNull( buffer11 );
HXDLIN( 172)							if (_hx_tmp33) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this11,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)3);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this11->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength11,"bufferByteLength") = buffer11->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength11,"newByteLength") = bufferByteLength11;
HXDLIN( 172)								Bool _hx_tmp34 = false;
HXDLIN( 172)								if (_hx_tmp34) {
HXLINE( 172)									newByteLength11 = (bufferByteLength11 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength11,_this11->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength11 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength11 = ((int)2 * _this11->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength11) > bufferByteLength11)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this11->buffer = buffer11;
HXDLIN( 172)								_this11->byteOffset = byte_offset1;
HXDLIN( 172)								_this11->byteLength = newByteLength11;
HXDLIN( 172)								Float _hx_tmp35 = ((Float)newByteLength11 / (Float)_this11->bytesPerElement);
HXDLIN( 172)								_this11->length = ::Std_obj::_hx_int(_hx_tmp35);
HXDLIN( 172)								this14 = _this11;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            							}
HXDLIN( 172)							view1 = this14;
            						}
            						break;
            						case (int)4: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer12,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this15,"this");
HXDLIN( 172)							Bool _hx_tmp36 = hx::IsNotNull( buffer12 );
HXDLIN( 172)							if (_hx_tmp36) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this12,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this12->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength12,"bufferByteLength") = buffer12->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength12,"newByteLength") = bufferByteLength12;
HXDLIN( 172)								Bool _hx_tmp37 = false;
HXDLIN( 172)								if (_hx_tmp37) {
HXLINE( 172)									newByteLength12 = (bufferByteLength12 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength12,_this12->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength12 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength12 = ((int)2 * _this12->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength12) > bufferByteLength12)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this12->buffer = buffer12;
HXDLIN( 172)								_this12->byteOffset = byte_offset1;
HXDLIN( 172)								_this12->byteLength = newByteLength12;
HXDLIN( 172)								Float _hx_tmp38 = ((Float)newByteLength12 / (Float)_this12->bytesPerElement);
HXDLIN( 172)								_this12->length = ::Std_obj::_hx_int(_hx_tmp38);
HXDLIN( 172)								this15 = _this12;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            							}
HXDLIN( 172)							view1 = this15;
            						}
            						break;
            						case (int)5: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer13,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this16,"this");
HXDLIN( 172)							Bool _hx_tmp39 = hx::IsNotNull( buffer13 );
HXDLIN( 172)							if (_hx_tmp39) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this13,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)5);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this13->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength13,"bufferByteLength") = buffer13->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength13,"newByteLength") = bufferByteLength13;
HXDLIN( 172)								Bool _hx_tmp40 = false;
HXDLIN( 172)								if (_hx_tmp40) {
HXLINE( 172)									newByteLength13 = (bufferByteLength13 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength13,_this13->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength13 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength13 = ((int)2 * _this13->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength13) > bufferByteLength13)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this13->buffer = buffer13;
HXDLIN( 172)								_this13->byteOffset = byte_offset1;
HXDLIN( 172)								_this13->byteLength = newByteLength13;
HXDLIN( 172)								Float _hx_tmp41 = ((Float)newByteLength13 / (Float)_this13->bytesPerElement);
HXDLIN( 172)								_this13->length = ::Std_obj::_hx_int(_hx_tmp41);
HXDLIN( 172)								this16 = _this13;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            							}
HXDLIN( 172)							view1 = this16;
            						}
            						break;
            						case (int)6: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer14,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this17,"this");
HXDLIN( 172)							Bool _hx_tmp42 = hx::IsNotNull( buffer14 );
HXDLIN( 172)							if (_hx_tmp42) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this14,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this14->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength14,"bufferByteLength") = buffer14->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength14,"newByteLength") = bufferByteLength14;
HXDLIN( 172)								Bool _hx_tmp43 = false;
HXDLIN( 172)								if (_hx_tmp43) {
HXLINE( 172)									newByteLength14 = (bufferByteLength14 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength14,_this14->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength14 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength14 = ((int)2 * _this14->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength14) > bufferByteLength14)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this14->buffer = buffer14;
HXDLIN( 172)								_this14->byteOffset = byte_offset1;
HXDLIN( 172)								_this14->byteLength = newByteLength14;
HXDLIN( 172)								Float _hx_tmp44 = ((Float)newByteLength14 / (Float)_this14->bytesPerElement);
HXDLIN( 172)								_this14->length = ::Std_obj::_hx_int(_hx_tmp44);
HXDLIN( 172)								this17 = _this14;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            							}
HXDLIN( 172)							view1 = this17;
            						}
            						break;
            						case (int)7: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer15,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this18,"this");
HXDLIN( 172)							Bool _hx_tmp45 = hx::IsNotNull( buffer15 );
HXDLIN( 172)							if (_hx_tmp45) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this15,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)7);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this15->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength15,"bufferByteLength") = buffer15->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength15,"newByteLength") = bufferByteLength15;
HXDLIN( 172)								Bool _hx_tmp46 = false;
HXDLIN( 172)								if (_hx_tmp46) {
HXLINE( 172)									newByteLength15 = (bufferByteLength15 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength15,_this15->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength15 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength15 = ((int)2 * _this15->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength15) > bufferByteLength15)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this15->buffer = buffer15;
HXDLIN( 172)								_this15->byteOffset = byte_offset1;
HXDLIN( 172)								_this15->byteLength = newByteLength15;
HXDLIN( 172)								Float _hx_tmp47 = ((Float)newByteLength15 / (Float)_this15->bytesPerElement);
HXDLIN( 172)								_this15->length = ::Std_obj::_hx_int(_hx_tmp47);
HXDLIN( 172)								this18 = _this15;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            							}
HXDLIN( 172)							view1 = this18;
            						}
            						break;
            						case (int)8: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer16,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this19,"this");
HXDLIN( 172)							Bool _hx_tmp48 = hx::IsNotNull( buffer16 );
HXDLIN( 172)							if (_hx_tmp48) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this16,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this16->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength16,"bufferByteLength") = buffer16->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength16,"newByteLength") = bufferByteLength16;
HXDLIN( 172)								Bool _hx_tmp49 = false;
HXDLIN( 172)								if (_hx_tmp49) {
HXLINE( 172)									newByteLength16 = (bufferByteLength16 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength16,_this16->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength16 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength16 = ((int)2 * _this16->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength16) > bufferByteLength16)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this16->buffer = buffer16;
HXDLIN( 172)								_this16->byteOffset = byte_offset1;
HXDLIN( 172)								_this16->byteLength = newByteLength16;
HXDLIN( 172)								Float _hx_tmp50 = ((Float)newByteLength16 / (Float)_this16->bytesPerElement);
HXDLIN( 172)								_this16->length = ::Std_obj::_hx_int(_hx_tmp50);
HXDLIN( 172)								this19 = _this16;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN( 172)							view1 = this19;
            						}
            						break;
            						case (int)9: {
HXLINE( 172)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer17,"buffer") = this11->buffer;
HXDLIN( 172)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this20,"this");
HXDLIN( 172)							Bool _hx_tmp51 = hx::IsNotNull( buffer17 );
HXDLIN( 172)							if (_hx_tmp51) {
HXLINE( 172)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this17,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)9);
HXDLIN( 172)								if ((byte_offset1 < (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								if ((hx::Mod(byte_offset1,_this17->bytesPerElement) != (int)0)) {
HXLINE( 172)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 172)								HX_VARI_NAME( Int,bufferByteLength17,"bufferByteLength") = buffer17->length;
HXDLIN( 172)								HX_VARI_NAME( Int,newByteLength17,"newByteLength") = bufferByteLength17;
HXDLIN( 172)								Bool _hx_tmp52 = false;
HXDLIN( 172)								if (_hx_tmp52) {
HXLINE( 172)									newByteLength17 = (bufferByteLength17 - byte_offset1);
HXDLIN( 172)									if ((hx::Mod(bufferByteLength17,_this17->bytesPerElement) != (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 172)									if ((newByteLength17 < (int)0)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 172)									newByteLength17 = ((int)2 * _this17->bytesPerElement);
HXDLIN( 172)									if (((byte_offset1 + newByteLength17) > bufferByteLength17)) {
HXLINE( 172)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 172)								_this17->buffer = buffer17;
HXDLIN( 172)								_this17->byteOffset = byte_offset1;
HXDLIN( 172)								_this17->byteLength = newByteLength17;
HXDLIN( 172)								Float _hx_tmp53 = ((Float)newByteLength17 / (Float)_this17->bytesPerElement);
HXDLIN( 172)								_this17->length = ::Std_obj::_hx_int(_hx_tmp53);
HXDLIN( 172)								this20 = _this17;
            							}
            							else {
HXLINE( 172)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            							}
HXDLIN( 172)							view1 = this20;
            						}
            						break;
            					}
HXDLIN( 172)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib2fv(location,hx::DynamicPtr(view1->buffer));
            				}
            				break;
            				case (int)3: {
HXLINE( 174)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this21,"this") = attribute->defaultValue;
HXDLIN( 174)					HX_VARI_NAME( Int,byte_offset2,"byte_offset") = ((int)0 * this21->bytesPerElement);
HXDLIN( 174)					HX_VAR_NAME(  ::lime::utils::ArrayBufferView,view2,"view");
HXDLIN( 174)					HX_VARI_NAME( Int,_g3,"_g") = this21->type;
HXDLIN( 174)					switch((int)(_g3)){
            						case (int)0: {
HXLINE( 174)							HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            						}
            						break;
            						case (int)1: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer18,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this22,"this");
HXDLIN( 174)							Bool _hx_tmp54 = hx::IsNotNull( buffer18 );
HXDLIN( 174)							if (_hx_tmp54) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this18,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)1);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this18->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength18,"bufferByteLength") = buffer18->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength18,"newByteLength") = bufferByteLength18;
HXDLIN( 174)								Bool _hx_tmp55 = false;
HXDLIN( 174)								if (_hx_tmp55) {
HXLINE( 174)									newByteLength18 = (bufferByteLength18 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength18,_this18->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength18 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength18 = ((int)3 * _this18->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength18) > bufferByteLength18)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this18->buffer = buffer18;
HXDLIN( 174)								_this18->byteOffset = byte_offset2;
HXDLIN( 174)								_this18->byteLength = newByteLength18;
HXDLIN( 174)								Float _hx_tmp56 = ((Float)newByteLength18 / (Float)_this18->bytesPerElement);
HXDLIN( 174)								_this18->length = ::Std_obj::_hx_int(_hx_tmp56);
HXDLIN( 174)								this22 = _this18;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            							}
HXDLIN( 174)							view2 = this22;
            						}
            						break;
            						case (int)2: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer19,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this23,"this");
HXDLIN( 174)							Bool _hx_tmp57 = hx::IsNotNull( buffer19 );
HXDLIN( 174)							if (_hx_tmp57) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this19,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this19->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength19,"bufferByteLength") = buffer19->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength19,"newByteLength") = bufferByteLength19;
HXDLIN( 174)								Bool _hx_tmp58 = false;
HXDLIN( 174)								if (_hx_tmp58) {
HXLINE( 174)									newByteLength19 = (bufferByteLength19 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength19,_this19->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength19 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength19 = ((int)3 * _this19->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength19) > bufferByteLength19)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this19->buffer = buffer19;
HXDLIN( 174)								_this19->byteOffset = byte_offset2;
HXDLIN( 174)								_this19->byteLength = newByteLength19;
HXDLIN( 174)								Float _hx_tmp59 = ((Float)newByteLength19 / (Float)_this19->bytesPerElement);
HXDLIN( 174)								_this19->length = ::Std_obj::_hx_int(_hx_tmp59);
HXDLIN( 174)								this23 = _this19;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            							}
HXDLIN( 174)							view2 = this23;
            						}
            						break;
            						case (int)3: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer20,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this24,"this");
HXDLIN( 174)							Bool _hx_tmp60 = hx::IsNotNull( buffer20 );
HXDLIN( 174)							if (_hx_tmp60) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this20,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)3);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this20->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength20,"bufferByteLength") = buffer20->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength20,"newByteLength") = bufferByteLength20;
HXDLIN( 174)								Bool _hx_tmp61 = false;
HXDLIN( 174)								if (_hx_tmp61) {
HXLINE( 174)									newByteLength20 = (bufferByteLength20 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength20,_this20->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength20 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength20 = ((int)3 * _this20->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength20) > bufferByteLength20)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this20->buffer = buffer20;
HXDLIN( 174)								_this20->byteOffset = byte_offset2;
HXDLIN( 174)								_this20->byteLength = newByteLength20;
HXDLIN( 174)								Float _hx_tmp62 = ((Float)newByteLength20 / (Float)_this20->bytesPerElement);
HXDLIN( 174)								_this20->length = ::Std_obj::_hx_int(_hx_tmp62);
HXDLIN( 174)								this24 = _this20;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            							}
HXDLIN( 174)							view2 = this24;
            						}
            						break;
            						case (int)4: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer21,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this25,"this");
HXDLIN( 174)							Bool _hx_tmp63 = hx::IsNotNull( buffer21 );
HXDLIN( 174)							if (_hx_tmp63) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this21,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this21->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength21,"bufferByteLength") = buffer21->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength21,"newByteLength") = bufferByteLength21;
HXDLIN( 174)								Bool _hx_tmp64 = false;
HXDLIN( 174)								if (_hx_tmp64) {
HXLINE( 174)									newByteLength21 = (bufferByteLength21 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength21,_this21->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength21 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength21 = ((int)3 * _this21->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength21) > bufferByteLength21)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this21->buffer = buffer21;
HXDLIN( 174)								_this21->byteOffset = byte_offset2;
HXDLIN( 174)								_this21->byteLength = newByteLength21;
HXDLIN( 174)								Float _hx_tmp65 = ((Float)newByteLength21 / (Float)_this21->bytesPerElement);
HXDLIN( 174)								_this21->length = ::Std_obj::_hx_int(_hx_tmp65);
HXDLIN( 174)								this25 = _this21;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            							}
HXDLIN( 174)							view2 = this25;
            						}
            						break;
            						case (int)5: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer22,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this26,"this");
HXDLIN( 174)							Bool _hx_tmp66 = hx::IsNotNull( buffer22 );
HXDLIN( 174)							if (_hx_tmp66) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this22,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)5);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this22->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength22,"bufferByteLength") = buffer22->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength22,"newByteLength") = bufferByteLength22;
HXDLIN( 174)								Bool _hx_tmp67 = false;
HXDLIN( 174)								if (_hx_tmp67) {
HXLINE( 174)									newByteLength22 = (bufferByteLength22 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength22,_this22->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength22 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength22 = ((int)3 * _this22->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength22) > bufferByteLength22)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this22->buffer = buffer22;
HXDLIN( 174)								_this22->byteOffset = byte_offset2;
HXDLIN( 174)								_this22->byteLength = newByteLength22;
HXDLIN( 174)								Float _hx_tmp68 = ((Float)newByteLength22 / (Float)_this22->bytesPerElement);
HXDLIN( 174)								_this22->length = ::Std_obj::_hx_int(_hx_tmp68);
HXDLIN( 174)								this26 = _this22;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            							}
HXDLIN( 174)							view2 = this26;
            						}
            						break;
            						case (int)6: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer23,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this27,"this");
HXDLIN( 174)							Bool _hx_tmp69 = hx::IsNotNull( buffer23 );
HXDLIN( 174)							if (_hx_tmp69) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this23,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this23->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength23,"bufferByteLength") = buffer23->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength23,"newByteLength") = bufferByteLength23;
HXDLIN( 174)								Bool _hx_tmp70 = false;
HXDLIN( 174)								if (_hx_tmp70) {
HXLINE( 174)									newByteLength23 = (bufferByteLength23 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength23,_this23->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength23 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength23 = ((int)3 * _this23->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength23) > bufferByteLength23)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this23->buffer = buffer23;
HXDLIN( 174)								_this23->byteOffset = byte_offset2;
HXDLIN( 174)								_this23->byteLength = newByteLength23;
HXDLIN( 174)								Float _hx_tmp71 = ((Float)newByteLength23 / (Float)_this23->bytesPerElement);
HXDLIN( 174)								_this23->length = ::Std_obj::_hx_int(_hx_tmp71);
HXDLIN( 174)								this27 = _this23;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            							}
HXDLIN( 174)							view2 = this27;
            						}
            						break;
            						case (int)7: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer24,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this28,"this");
HXDLIN( 174)							Bool _hx_tmp72 = hx::IsNotNull( buffer24 );
HXDLIN( 174)							if (_hx_tmp72) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this24,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)7);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this24->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength24,"bufferByteLength") = buffer24->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength24,"newByteLength") = bufferByteLength24;
HXDLIN( 174)								Bool _hx_tmp73 = false;
HXDLIN( 174)								if (_hx_tmp73) {
HXLINE( 174)									newByteLength24 = (bufferByteLength24 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength24,_this24->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength24 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength24 = ((int)3 * _this24->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength24) > bufferByteLength24)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this24->buffer = buffer24;
HXDLIN( 174)								_this24->byteOffset = byte_offset2;
HXDLIN( 174)								_this24->byteLength = newByteLength24;
HXDLIN( 174)								Float _hx_tmp74 = ((Float)newByteLength24 / (Float)_this24->bytesPerElement);
HXDLIN( 174)								_this24->length = ::Std_obj::_hx_int(_hx_tmp74);
HXDLIN( 174)								this28 = _this24;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            							}
HXDLIN( 174)							view2 = this28;
            						}
            						break;
            						case (int)8: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer25,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this29,"this");
HXDLIN( 174)							Bool _hx_tmp75 = hx::IsNotNull( buffer25 );
HXDLIN( 174)							if (_hx_tmp75) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this25,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this25->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength25,"bufferByteLength") = buffer25->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength25,"newByteLength") = bufferByteLength25;
HXDLIN( 174)								Bool _hx_tmp76 = false;
HXDLIN( 174)								if (_hx_tmp76) {
HXLINE( 174)									newByteLength25 = (bufferByteLength25 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength25,_this25->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength25 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength25 = ((int)3 * _this25->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength25) > bufferByteLength25)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this25->buffer = buffer25;
HXDLIN( 174)								_this25->byteOffset = byte_offset2;
HXDLIN( 174)								_this25->byteLength = newByteLength25;
HXDLIN( 174)								Float _hx_tmp77 = ((Float)newByteLength25 / (Float)_this25->bytesPerElement);
HXDLIN( 174)								_this25->length = ::Std_obj::_hx_int(_hx_tmp77);
HXDLIN( 174)								this29 = _this25;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN( 174)							view2 = this29;
            						}
            						break;
            						case (int)9: {
HXLINE( 174)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer26,"buffer") = this21->buffer;
HXDLIN( 174)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this30,"this");
HXDLIN( 174)							Bool _hx_tmp78 = hx::IsNotNull( buffer26 );
HXDLIN( 174)							if (_hx_tmp78) {
HXLINE( 174)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this26,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)9);
HXDLIN( 174)								if ((byte_offset2 < (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								if ((hx::Mod(byte_offset2,_this26->bytesPerElement) != (int)0)) {
HXLINE( 174)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 174)								HX_VARI_NAME( Int,bufferByteLength26,"bufferByteLength") = buffer26->length;
HXDLIN( 174)								HX_VARI_NAME( Int,newByteLength26,"newByteLength") = bufferByteLength26;
HXDLIN( 174)								Bool _hx_tmp79 = false;
HXDLIN( 174)								if (_hx_tmp79) {
HXLINE( 174)									newByteLength26 = (bufferByteLength26 - byte_offset2);
HXDLIN( 174)									if ((hx::Mod(bufferByteLength26,_this26->bytesPerElement) != (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 174)									if ((newByteLength26 < (int)0)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 174)									newByteLength26 = ((int)3 * _this26->bytesPerElement);
HXDLIN( 174)									if (((byte_offset2 + newByteLength26) > bufferByteLength26)) {
HXLINE( 174)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 174)								_this26->buffer = buffer26;
HXDLIN( 174)								_this26->byteOffset = byte_offset2;
HXDLIN( 174)								_this26->byteLength = newByteLength26;
HXDLIN( 174)								Float _hx_tmp80 = ((Float)newByteLength26 / (Float)_this26->bytesPerElement);
HXDLIN( 174)								_this26->length = ::Std_obj::_hx_int(_hx_tmp80);
HXDLIN( 174)								this30 = _this26;
            							}
            							else {
HXLINE( 174)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            							}
HXDLIN( 174)							view2 = this30;
            						}
            						break;
            					}
HXDLIN( 174)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib3fv(location,hx::DynamicPtr(view2->buffer));
            				}
            				break;
            				default:{
HXLINE( 176)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this31,"this") = attribute->defaultValue;
HXDLIN( 176)					HX_VARI_NAME( Int,byte_offset3,"byte_offset") = ((int)0 * this31->bytesPerElement);
HXDLIN( 176)					HX_VAR_NAME(  ::lime::utils::ArrayBufferView,view3,"view");
HXDLIN( 176)					HX_VARI_NAME( Int,_g4,"_g") = this31->type;
HXDLIN( 176)					switch((int)(_g4)){
            						case (int)0: {
HXLINE( 176)							HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            						}
            						break;
            						case (int)1: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer27,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this32,"this");
HXDLIN( 176)							Bool _hx_tmp81 = hx::IsNotNull( buffer27 );
HXDLIN( 176)							if (_hx_tmp81) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this27,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)1);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this27->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength27,"bufferByteLength") = buffer27->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength27,"newByteLength") = bufferByteLength27;
HXDLIN( 176)								Bool _hx_tmp82 = false;
HXDLIN( 176)								if (_hx_tmp82) {
HXLINE( 176)									newByteLength27 = (bufferByteLength27 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength27,_this27->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength27 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength27 = ((int)4 * _this27->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength27) > bufferByteLength27)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this27->buffer = buffer27;
HXDLIN( 176)								_this27->byteOffset = byte_offset3;
HXDLIN( 176)								_this27->byteLength = newByteLength27;
HXDLIN( 176)								Float _hx_tmp83 = ((Float)newByteLength27 / (Float)_this27->bytesPerElement);
HXDLIN( 176)								_this27->length = ::Std_obj::_hx_int(_hx_tmp83);
HXDLIN( 176)								this32 = _this27;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            							}
HXDLIN( 176)							view3 = this32;
            						}
            						break;
            						case (int)2: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer28,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this33,"this");
HXDLIN( 176)							Bool _hx_tmp84 = hx::IsNotNull( buffer28 );
HXDLIN( 176)							if (_hx_tmp84) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this28,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this28->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength28,"bufferByteLength") = buffer28->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength28,"newByteLength") = bufferByteLength28;
HXDLIN( 176)								Bool _hx_tmp85 = false;
HXDLIN( 176)								if (_hx_tmp85) {
HXLINE( 176)									newByteLength28 = (bufferByteLength28 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength28,_this28->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength28 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength28 = ((int)4 * _this28->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength28) > bufferByteLength28)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this28->buffer = buffer28;
HXDLIN( 176)								_this28->byteOffset = byte_offset3;
HXDLIN( 176)								_this28->byteLength = newByteLength28;
HXDLIN( 176)								Float _hx_tmp86 = ((Float)newByteLength28 / (Float)_this28->bytesPerElement);
HXDLIN( 176)								_this28->length = ::Std_obj::_hx_int(_hx_tmp86);
HXDLIN( 176)								this33 = _this28;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            							}
HXDLIN( 176)							view3 = this33;
            						}
            						break;
            						case (int)3: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer29,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this34,"this");
HXDLIN( 176)							Bool _hx_tmp87 = hx::IsNotNull( buffer29 );
HXDLIN( 176)							if (_hx_tmp87) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this29,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)3);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this29->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength29,"bufferByteLength") = buffer29->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength29,"newByteLength") = bufferByteLength29;
HXDLIN( 176)								Bool _hx_tmp88 = false;
HXDLIN( 176)								if (_hx_tmp88) {
HXLINE( 176)									newByteLength29 = (bufferByteLength29 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength29,_this29->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength29 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength29 = ((int)4 * _this29->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength29) > bufferByteLength29)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this29->buffer = buffer29;
HXDLIN( 176)								_this29->byteOffset = byte_offset3;
HXDLIN( 176)								_this29->byteLength = newByteLength29;
HXDLIN( 176)								Float _hx_tmp89 = ((Float)newByteLength29 / (Float)_this29->bytesPerElement);
HXDLIN( 176)								_this29->length = ::Std_obj::_hx_int(_hx_tmp89);
HXDLIN( 176)								this34 = _this29;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            							}
HXDLIN( 176)							view3 = this34;
            						}
            						break;
            						case (int)4: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer30,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this35,"this");
HXDLIN( 176)							Bool _hx_tmp90 = hx::IsNotNull( buffer30 );
HXDLIN( 176)							if (_hx_tmp90) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this30,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this30->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength30,"bufferByteLength") = buffer30->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength30,"newByteLength") = bufferByteLength30;
HXDLIN( 176)								Bool _hx_tmp91 = false;
HXDLIN( 176)								if (_hx_tmp91) {
HXLINE( 176)									newByteLength30 = (bufferByteLength30 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength30,_this30->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength30 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength30 = ((int)4 * _this30->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength30) > bufferByteLength30)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this30->buffer = buffer30;
HXDLIN( 176)								_this30->byteOffset = byte_offset3;
HXDLIN( 176)								_this30->byteLength = newByteLength30;
HXDLIN( 176)								Float _hx_tmp92 = ((Float)newByteLength30 / (Float)_this30->bytesPerElement);
HXDLIN( 176)								_this30->length = ::Std_obj::_hx_int(_hx_tmp92);
HXDLIN( 176)								this35 = _this30;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            							}
HXDLIN( 176)							view3 = this35;
            						}
            						break;
            						case (int)5: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer31,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this36,"this");
HXDLIN( 176)							Bool _hx_tmp93 = hx::IsNotNull( buffer31 );
HXDLIN( 176)							if (_hx_tmp93) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this31,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)5);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this31->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength31,"bufferByteLength") = buffer31->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength31,"newByteLength") = bufferByteLength31;
HXDLIN( 176)								Bool _hx_tmp94 = false;
HXDLIN( 176)								if (_hx_tmp94) {
HXLINE( 176)									newByteLength31 = (bufferByteLength31 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength31,_this31->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength31 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength31 = ((int)4 * _this31->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength31) > bufferByteLength31)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this31->buffer = buffer31;
HXDLIN( 176)								_this31->byteOffset = byte_offset3;
HXDLIN( 176)								_this31->byteLength = newByteLength31;
HXDLIN( 176)								Float _hx_tmp95 = ((Float)newByteLength31 / (Float)_this31->bytesPerElement);
HXDLIN( 176)								_this31->length = ::Std_obj::_hx_int(_hx_tmp95);
HXDLIN( 176)								this36 = _this31;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            							}
HXDLIN( 176)							view3 = this36;
            						}
            						break;
            						case (int)6: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer32,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this37,"this");
HXDLIN( 176)							Bool _hx_tmp96 = hx::IsNotNull( buffer32 );
HXDLIN( 176)							if (_hx_tmp96) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this32,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this32->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength32,"bufferByteLength") = buffer32->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength32,"newByteLength") = bufferByteLength32;
HXDLIN( 176)								Bool _hx_tmp97 = false;
HXDLIN( 176)								if (_hx_tmp97) {
HXLINE( 176)									newByteLength32 = (bufferByteLength32 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength32,_this32->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength32 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength32 = ((int)4 * _this32->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength32) > bufferByteLength32)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this32->buffer = buffer32;
HXDLIN( 176)								_this32->byteOffset = byte_offset3;
HXDLIN( 176)								_this32->byteLength = newByteLength32;
HXDLIN( 176)								Float _hx_tmp98 = ((Float)newByteLength32 / (Float)_this32->bytesPerElement);
HXDLIN( 176)								_this32->length = ::Std_obj::_hx_int(_hx_tmp98);
HXDLIN( 176)								this37 = _this32;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            							}
HXDLIN( 176)							view3 = this37;
            						}
            						break;
            						case (int)7: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer33,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this38,"this");
HXDLIN( 176)							Bool _hx_tmp99 = hx::IsNotNull( buffer33 );
HXDLIN( 176)							if (_hx_tmp99) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this33,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)7);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this33->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength33,"bufferByteLength") = buffer33->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength33,"newByteLength") = bufferByteLength33;
HXDLIN( 176)								Bool _hx_tmp100 = false;
HXDLIN( 176)								if (_hx_tmp100) {
HXLINE( 176)									newByteLength33 = (bufferByteLength33 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength33,_this33->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength33 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength33 = ((int)4 * _this33->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength33) > bufferByteLength33)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this33->buffer = buffer33;
HXDLIN( 176)								_this33->byteOffset = byte_offset3;
HXDLIN( 176)								_this33->byteLength = newByteLength33;
HXDLIN( 176)								Float _hx_tmp101 = ((Float)newByteLength33 / (Float)_this33->bytesPerElement);
HXDLIN( 176)								_this33->length = ::Std_obj::_hx_int(_hx_tmp101);
HXDLIN( 176)								this38 = _this33;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            							}
HXDLIN( 176)							view3 = this38;
            						}
            						break;
            						case (int)8: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer34,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this39,"this");
HXDLIN( 176)							Bool _hx_tmp102 = hx::IsNotNull( buffer34 );
HXDLIN( 176)							if (_hx_tmp102) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this34,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this34->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength34,"bufferByteLength") = buffer34->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength34,"newByteLength") = bufferByteLength34;
HXDLIN( 176)								Bool _hx_tmp103 = false;
HXDLIN( 176)								if (_hx_tmp103) {
HXLINE( 176)									newByteLength34 = (bufferByteLength34 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength34,_this34->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength34 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength34 = ((int)4 * _this34->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength34) > bufferByteLength34)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this34->buffer = buffer34;
HXDLIN( 176)								_this34->byteOffset = byte_offset3;
HXDLIN( 176)								_this34->byteLength = newByteLength34;
HXDLIN( 176)								Float _hx_tmp104 = ((Float)newByteLength34 / (Float)_this34->bytesPerElement);
HXDLIN( 176)								_this34->length = ::Std_obj::_hx_int(_hx_tmp104);
HXDLIN( 176)								this39 = _this34;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN( 176)							view3 = this39;
            						}
            						break;
            						case (int)9: {
HXLINE( 176)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer35,"buffer") = this31->buffer;
HXDLIN( 176)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this40,"this");
HXDLIN( 176)							Bool _hx_tmp105 = hx::IsNotNull( buffer35 );
HXDLIN( 176)							if (_hx_tmp105) {
HXLINE( 176)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this35,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)9);
HXDLIN( 176)								if ((byte_offset3 < (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								if ((hx::Mod(byte_offset3,_this35->bytesPerElement) != (int)0)) {
HXLINE( 176)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN( 176)								HX_VARI_NAME( Int,bufferByteLength35,"bufferByteLength") = buffer35->length;
HXDLIN( 176)								HX_VARI_NAME( Int,newByteLength35,"newByteLength") = bufferByteLength35;
HXDLIN( 176)								Bool _hx_tmp106 = false;
HXDLIN( 176)								if (_hx_tmp106) {
HXLINE( 176)									newByteLength35 = (bufferByteLength35 - byte_offset3);
HXDLIN( 176)									if ((hx::Mod(bufferByteLength35,_this35->bytesPerElement) != (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN( 176)									if ((newByteLength35 < (int)0)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE( 176)									newByteLength35 = ((int)4 * _this35->bytesPerElement);
HXDLIN( 176)									if (((byte_offset3 + newByteLength35) > bufferByteLength35)) {
HXLINE( 176)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN( 176)								_this35->buffer = buffer35;
HXDLIN( 176)								_this35->byteOffset = byte_offset3;
HXDLIN( 176)								_this35->byteLength = newByteLength35;
HXDLIN( 176)								Float _hx_tmp107 = ((Float)newByteLength35 / (Float)_this35->bytesPerElement);
HXDLIN( 176)								_this35->length = ::Std_obj::_hx_int(_hx_tmp107);
HXDLIN( 176)								this40 = _this35;
            							}
            							else {
HXLINE( 176)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            							}
HXDLIN( 176)							view3 = this40;
            						}
            						break;
            					}
HXDLIN( 176)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib4fv(location,hx::DynamicPtr(view3->buffer));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Shader_obj,disableVertexAttribute,(void))

void Shader_obj::bindVertexArray( ::openfl::_internal::renderer::opengl::utils::VertexArray va){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","bindVertexArray",0x3a7531b5,"openfl._internal.renderer.opengl.shaders2.Shader.bindVertexArray","openfl/_internal/renderer/opengl/shaders2/Shader.hx",181,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(va,"va")
HXLINE( 182)		HX_VARI( Int,offset) = (int)0;
HXLINE( 183)		HX_VARI( Int,stride) = va->get_stride();
HXLINE( 185)		{
HXLINE( 185)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 185)			HX_VARI( ::Array< ::Dynamic>,_g1) = va->attributes;
HXDLIN( 185)			while((_g < _g1->length)){
HXLINE( 185)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::VertexAttribute,attribute) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::VertexAttribute >();
HXDLIN( 185)				++_g;
HXLINE( 186)				Bool _hx_tmp = attribute->enabled;
HXDLIN( 186)				if (_hx_tmp) {
HXLINE( 187)					this->enableVertexAttribute(attribute,stride,offset);
HXLINE( 188)					HX_VARI_NAME( Int,_g2,"_g") = attribute->type;
HXDLIN( 188)					Int _hx_tmp1;
HXDLIN( 188)					switch((int)(_g2)){
            						case (int)5120: case (int)5121: {
HXLINE( 188)							_hx_tmp1 = (int)1;
            						}
            						break;
            						case (int)5122: case (int)5123: {
HXLINE( 188)							_hx_tmp1 = (int)2;
            						}
            						break;
            						default:{
HXLINE( 188)							_hx_tmp1 = (int)4;
            						}
            					}
HXDLIN( 188)					Float _hx_tmp2 = ((Float)(attribute->components * _hx_tmp1) / (Float)(int)4);
HXDLIN( 188)					Int _hx_tmp3 = ::Math_obj::floor(_hx_tmp2);
HXDLIN( 188)					hx::AddEq(offset,_hx_tmp3);
            				}
            				else {
HXLINE( 190)					this->disableVertexAttribute(attribute,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,bindVertexArray,(void))

void Shader_obj::unbindVertexArray( ::openfl::_internal::renderer::opengl::utils::VertexArray va){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","unbindVertexArray",0xe5df88bc,"openfl._internal.renderer.opengl.shaders2.Shader.unbindVertexArray","openfl/_internal/renderer/opengl/shaders2/Shader.hx",196,0x6ac2be14)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(va,"va")
HXLINE( 196)		HX_VARI( Int,_g) = (int)0;
HXDLIN( 196)		HX_VARI( ::Array< ::Dynamic>,_g1) = va->attributes;
HXDLIN( 196)		while((_g < _g1->length)){
HXLINE( 196)			HX_VARI(  ::openfl::_internal::renderer::opengl::utils::VertexAttribute,attribute) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::VertexAttribute >();
HXDLIN( 196)			++_g;
HXLINE( 197)			this->disableVertexAttribute(attribute,false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Shader_obj,unbindVertexArray,(void))

Int Shader_obj::UID;

 ::lime::graphics::opengl::GLProgram Shader_obj::compileProgram( ::lime::graphics::GLRenderContext gl,::String vertexSrc,::String fragmentSrc){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","compileProgram",0x7a6c7314,"openfl._internal.renderer.opengl.shaders2.Shader.compileProgram","openfl/_internal/renderer/opengl/shaders2/Shader.hx",202,0x6ac2be14)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(vertexSrc,"vertexSrc")
            	HX_STACK_ARG(fragmentSrc,"fragmentSrc")
HXLINE( 204)		HX_VARI(  ::haxe::ds::StringMap,cache) = ::openfl::_internal::renderer::opengl::utils::ShaderManager_obj::compiledShadersCache;
HXLINE( 205)		HX_VARI( ::String,key) = ::haxe::crypto::Md5_obj::encode((vertexSrc + fragmentSrc));
HXLINE( 207)		Bool _hx_tmp = cache->exists(key);
HXDLIN( 207)		if (_hx_tmp) {
HXLINE( 209)			return cache->get(key).StaticCast<  ::lime::graphics::opengl::GLProgram >();
            		}
HXLINE( 213)		HX_VARI(  ::lime::graphics::opengl::GLShader,vertexShader) = ::openfl::_internal::renderer::opengl::shaders2::Shader_obj::compileShader(gl,vertexSrc,gl->VERTEX_SHADER);
HXLINE( 214)		HX_VARI(  ::lime::graphics::opengl::GLShader,fragmentShader) = ::openfl::_internal::renderer::opengl::shaders2::Shader_obj::compileShader(gl,fragmentSrc,gl->FRAGMENT_SHADER);
HXLINE( 215)		Int _hx_tmp1 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 215)		Int _hx_tmp2 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_program()) );
HXDLIN( 215)		HX_VARI(  ::lime::graphics::opengl::GLProgram,program) =  ::lime::graphics::opengl::GLProgram_obj::__new(_hx_tmp1,_hx_tmp2);
HXLINE( 217)		Bool _hx_tmp3;
HXDLIN( 217)		Bool _hx_tmp4 = hx::IsNotNull( vertexShader );
HXDLIN( 217)		if (_hx_tmp4) {
HXLINE( 217)			_hx_tmp3 = hx::IsNotNull( fragmentShader );
            		}
            		else {
HXLINE( 217)			_hx_tmp3 = false;
            		}
HXDLIN( 217)		if (_hx_tmp3) {
HXLINE( 218)			{
HXLINE( 218)				program->attach(vertexShader);
HXDLIN( 218)				{
HXLINE( 218)					Int program1 = ( (Int)(program->id) );
HXDLIN( 218)					Int shader = ( (Int)(vertexShader->id) );
HXDLIN( 218)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_attach_shader(program1,shader);
            				}
            			}
HXLINE( 219)			{
HXLINE( 219)				program->attach(fragmentShader);
HXDLIN( 219)				{
HXLINE( 219)					Int program2 = ( (Int)(program->id) );
HXDLIN( 219)					Int shader1 = ( (Int)(fragmentShader->id) );
HXDLIN( 219)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_attach_shader(program2,shader1);
            				}
            			}
HXLINE( 220)			{
HXLINE( 220)				Int program3 = ( (Int)(program->id) );
HXDLIN( 220)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_link_program(program3);
            			}
HXLINE( 222)			{
HXLINE( 222)				{
HXLINE( 222)					Int shader2 = ( (Int)(vertexShader->id) );
HXDLIN( 222)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_shader(shader2);
            				}
HXDLIN( 222)				vertexShader->invalidate();
            			}
HXLINE( 223)			{
HXLINE( 223)				{
HXLINE( 223)					Int shader3 = ( (Int)(fragmentShader->id) );
HXDLIN( 223)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_shader(shader3);
            				}
HXDLIN( 223)				fragmentShader->invalidate();
            			}
HXLINE( 225)			Int pname = gl->LINK_STATUS;
HXDLIN( 225)			Int program4 = ( (Int)(program->id) );
HXDLIN( 225)			Int _hx_tmp5 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_program_parameter(program4,pname)) );
HXDLIN( 225)			if ((_hx_tmp5 == (int)0)) {
HXLINE( 226)				Int program5 = ( (Int)(program->id) );
HXDLIN( 226)				::String _hx_tmp6 = ( (::String)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_program_info_log(program5)) );
HXDLIN( 226)				::haxe::Log_obj::trace((HX_("Could not compile the program:\n\t",1d,c1,60,7e) + _hx_tmp6),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),226,HX_("openfl._internal.renderer.opengl.shaders2.Shader",4b,5f,8c,18),HX_("compileProgram",51,31,e3,15)));
HXLINE( 227)				::haxe::Log_obj::trace((((HX_("VERTEX:\n",f4,5a,06,c1) + vertexSrc) + HX_("\nFRAGMENT:\n",ea,e6,92,f4)) + fragmentSrc),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),227,HX_("openfl._internal.renderer.opengl.shaders2.Shader",4b,5f,8c,18),HX_("compileProgram",51,31,e3,15)));
HXLINE( 228)				return null();
            			}
            		}
HXLINE( 232)		cache->set(key,program);
HXLINE( 234)		return program;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Shader_obj,compileProgram,return )

 ::lime::graphics::opengl::GLShader Shader_obj::compileShader( ::lime::graphics::GLRenderContext gl,::String shaderSrc,Int type){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","compileShader",0x5163d895,"openfl._internal.renderer.opengl.shaders2.Shader.compileShader","openfl/_internal/renderer/opengl/shaders2/Shader.hx",237,0x6ac2be14)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(shaderSrc,"shaderSrc")
            	HX_STACK_ARG(type,"type")
HXLINE( 239)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 239)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_shader(type)) );
HXDLIN( 239)		HX_VARI(  ::lime::graphics::opengl::GLShader,shader) =  ::lime::graphics::opengl::GLShader_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE( 240)		{
HXLINE( 240)			Int shader1 = ( (Int)(shader->id) );
HXDLIN( 240)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_shader_source(shader1,shaderSrc);
            		}
HXLINE( 241)		{
HXLINE( 241)			Int shader2 = ( (Int)(shader->id) );
HXDLIN( 241)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_compile_shader(shader2);
            		}
HXLINE( 243)		Int pname = gl->COMPILE_STATUS;
HXDLIN( 243)		Int shader3 = ( (Int)(shader->id) );
HXDLIN( 243)		Int _hx_tmp2 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_shader_parameter(shader3,pname)) );
HXDLIN( 243)		if ((_hx_tmp2 == (int)0)) {
HXLINE( 244)			Int shader4 = ( (Int)(shader->id) );
HXDLIN( 244)			::String _hx_tmp3 = ( (::String)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_shader_info_log(shader4)) );
HXDLIN( 244)			::haxe::Log_obj::trace((HX_("Could not compile the shader:\n\t",cc,68,7a,f1) + _hx_tmp3),hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),244,HX_("openfl._internal.renderer.opengl.shaders2.Shader",4b,5f,8c,18),HX_("compileShader",f8,70,b2,da)));
HXLINE( 245)			::haxe::Log_obj::trace(shaderSrc,hx::SourceInfo(HX_("Shader.hx",99,a8,0b,d1),245,HX_("openfl._internal.renderer.opengl.shaders2.Shader",4b,5f,8c,18),HX_("compileShader",f8,70,b2,da)));
HXLINE( 246)			return null();
            		}
HXLINE( 249)		return shader;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Shader_obj,compileShader,return )


Shader_obj::Shader_obj()
{
}

void Shader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Shader);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(vertexSrc,"vertexSrc");
	HX_MARK_MEMBER_NAME(fragmentSrc,"fragmentSrc");
	HX_MARK_MEMBER_NAME(attributes,"attributes");
	HX_MARK_MEMBER_NAME(uniforms,"uniforms");
	HX_MARK_MEMBER_NAME(compiled,"compiled");
	HX_MARK_MEMBER_NAME(ID,"ID");
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_MEMBER_NAME(wrapS,"wrapS");
	HX_MARK_MEMBER_NAME(wrapT,"wrapT");
	HX_MARK_MEMBER_NAME(smooth,"smooth");
	HX_MARK_MEMBER_NAME(blendMode,"blendMode");
	HX_MARK_MEMBER_NAME(vertexString,"vertexString");
	HX_MARK_MEMBER_NAME(fragmentString,"fragmentString");
	HX_MARK_END_CLASS();
}

void Shader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(vertexSrc,"vertexSrc");
	HX_VISIT_MEMBER_NAME(fragmentSrc,"fragmentSrc");
	HX_VISIT_MEMBER_NAME(attributes,"attributes");
	HX_VISIT_MEMBER_NAME(uniforms,"uniforms");
	HX_VISIT_MEMBER_NAME(compiled,"compiled");
	HX_VISIT_MEMBER_NAME(ID,"ID");
	HX_VISIT_MEMBER_NAME(program,"program");
	HX_VISIT_MEMBER_NAME(wrapS,"wrapS");
	HX_VISIT_MEMBER_NAME(wrapT,"wrapT");
	HX_VISIT_MEMBER_NAME(smooth,"smooth");
	HX_VISIT_MEMBER_NAME(blendMode,"blendMode");
	HX_VISIT_MEMBER_NAME(vertexString,"vertexString");
	HX_VISIT_MEMBER_NAME(fragmentString,"fragmentString");
}

hx::Val Shader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		if (HX_FIELD_EQ(inName,"ID") ) { return hx::Val( ID); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"wrapS") ) { return hx::Val( wrapS); }
		if (HX_FIELD_EQ(inName,"wrapT") ) { return hx::Val( wrapT); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"smooth") ) { return hx::Val( smooth); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { return hx::Val( program); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniforms") ) { return hx::Val( uniforms); }
		if (HX_FIELD_EQ(inName,"compiled") ) { return hx::Val( compiled); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"vertexSrc") ) { return hx::Val( vertexSrc); }
		if (HX_FIELD_EQ(inName,"blendMode") ) { return hx::Val( blendMode); }
		if (HX_FIELD_EQ(inName,"applyData") ) { return hx::Val( applyData_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { return hx::Val( attributes); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fragmentSrc") ) { return hx::Val( fragmentSrc); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vertexString") ) { return hx::Val( vertexString); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fragmentString") ) { return hx::Val( fragmentString); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"bindVertexArray") ) { return hx::Val( bindVertexArray_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getAttribLocation") ) { return hx::Val( getAttribLocation_dyn()); }
		if (HX_FIELD_EQ(inName,"unbindVertexArray") ) { return hx::Val( unbindVertexArray_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getUniformLocation") ) { return hx::Val( getUniformLocation_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"enableVertexAttribute") ) { return hx::Val( enableVertexAttribute_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"disableVertexAttribute") ) { return hx::Val( disableVertexAttribute_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool Shader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"UID") ) { outValue = UID; return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"compileShader") ) { outValue = compileShader_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compileProgram") ) { outValue = compileProgram_dyn(); return true; }
	}
	return false;
}

hx::Val Shader_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ID") ) { ID=inValue.Cast< Int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"wrapS") ) { wrapS=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wrapT") ) { wrapT=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"smooth") ) { smooth=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"program") ) { program=inValue.Cast<  ::lime::graphics::opengl::GLProgram >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uniforms") ) { uniforms=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"compiled") ) { compiled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"vertexSrc") ) { vertexSrc=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blendMode") ) { blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { attributes=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"fragmentSrc") ) { fragmentSrc=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vertexString") ) { vertexString=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fragmentString") ) { fragmentString=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Shader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"UID") ) { UID=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void Shader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("vertexSrc","\xe0","\xb9","\x2b","\x29"));
	outFields->push(HX_HCSTRING("fragmentSrc","\xf4","\xc0","\x3b","\xa4"));
	outFields->push(HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97"));
	outFields->push(HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"));
	outFields->push(HX_HCSTRING("compiled","\x91","\x9f","\xd1","\x7d"));
	outFields->push(HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"));
	outFields->push(HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"));
	outFields->push(HX_HCSTRING("wrapS","\x49","\x57","\x53","\xd0"));
	outFields->push(HX_HCSTRING("wrapT","\x4a","\x57","\x53","\xd0"));
	outFields->push(HX_HCSTRING("smooth","\x2e","\x08","\x6b","\x07"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("vertexString","\x55","\x1b","\x45","\xb1"));
	outFields->push(HX_HCSTRING("fragmentString","\xc1","\xb8","\xeb","\x2d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Shader_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(Shader_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Shader_obj,vertexSrc),HX_HCSTRING("vertexSrc","\xe0","\xb9","\x2b","\x29")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(Shader_obj,fragmentSrc),HX_HCSTRING("fragmentSrc","\xf4","\xc0","\x3b","\xa4")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Shader_obj,attributes),HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Shader_obj,uniforms),HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02")},
	{hx::fsBool,(int)offsetof(Shader_obj,compiled),HX_HCSTRING("compiled","\x91","\x9f","\xd1","\x7d")},
	{hx::fsInt,(int)offsetof(Shader_obj,ID),HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00")},
	{hx::fsObject /*::lime::graphics::opengl::GLProgram*/ ,(int)offsetof(Shader_obj,program),HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3")},
	{hx::fsInt,(int)offsetof(Shader_obj,wrapS),HX_HCSTRING("wrapS","\x49","\x57","\x53","\xd0")},
	{hx::fsInt,(int)offsetof(Shader_obj,wrapT),HX_HCSTRING("wrapT","\x4a","\x57","\x53","\xd0")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,smooth),HX_HCSTRING("smooth","\x2e","\x08","\x6b","\x07")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Shader_obj,blendMode),HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c")},
	{hx::fsString,(int)offsetof(Shader_obj,vertexString),HX_HCSTRING("vertexString","\x55","\x1b","\x45","\xb1")},
	{hx::fsString,(int)offsetof(Shader_obj,fragmentString),HX_HCSTRING("fragmentString","\xc1","\xb8","\xeb","\x2d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Shader_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Shader_obj::UID,HX_HCSTRING("UID","\x70","\xbf","\x40","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Shader_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("vertexSrc","\xe0","\xb9","\x2b","\x29"),
	HX_HCSTRING("fragmentSrc","\xf4","\xc0","\x3b","\xa4"),
	HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97"),
	HX_HCSTRING("uniforms","\xbf","\xcc","\x54","\x02"),
	HX_HCSTRING("compiled","\x91","\x9f","\xd1","\x7d"),
	HX_HCSTRING("ID","\xdb","\x3f","\x00","\x00"),
	HX_HCSTRING("program","\x84","\x4a","\xf9","\xf3"),
	HX_HCSTRING("wrapS","\x49","\x57","\x53","\xd0"),
	HX_HCSTRING("wrapT","\x4a","\x57","\x53","\xd0"),
	HX_HCSTRING("smooth","\x2e","\x08","\x6b","\x07"),
	HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"),
	HX_HCSTRING("vertexString","\x55","\x1b","\x45","\xb1"),
	HX_HCSTRING("fragmentString","\xc1","\xb8","\xeb","\x2d"),
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("applyData","\xb8","\x56","\x32","\x2c"),
	HX_HCSTRING("getAttribLocation","\xd5","\x1a","\x10","\x5d"),
	HX_HCSTRING("getUniformLocation","\x93","\x5f","\xd4","\x4f"),
	HX_HCSTRING("enableVertexAttribute","\xd5","\x0c","\xbc","\xad"),
	HX_HCSTRING("disableVertexAttribute","\x10","\xeb","\xf5","\x22"),
	HX_HCSTRING("bindVertexArray","\xd8","\xe8","\xe4","\xa6"),
	HX_HCSTRING("unbindVertexArray","\x9f","\x8e","\x05","\x17"),
	::String(null()) };

static void Shader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Shader_obj::UID,"UID");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Shader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Shader_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Shader_obj::UID,"UID");
};

#endif

hx::Class Shader_obj::__mClass;

static ::String Shader_obj_sStaticFields[] = {
	HX_HCSTRING("UID","\x70","\xbf","\x40","\x00"),
	HX_HCSTRING("compileProgram","\x51","\x31","\xe3","\x15"),
	HX_HCSTRING("compileShader","\xf8","\x70","\xb2","\xda"),
	::String(null())
};

void Shader_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.shaders2.Shader","\x4b","\x5f","\x8c","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Shader_obj::__GetStatic;
	__mClass->mSetStaticField = &Shader_obj::__SetStatic;
	__mClass->mMarkFunc = Shader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Shader_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Shader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Shader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Shader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Shader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Shader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Shader_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.shaders2.Shader","boot",0x0d898435,"openfl._internal.renderer.opengl.shaders2.Shader.boot","openfl/_internal/renderer/opengl/shaders2/Shader.hx",22,0x6ac2be14)
HXLINE(  22)		UID = (int)0;
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace shaders2
