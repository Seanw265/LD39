// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BlendModeManager
#include <openfl/_internal/renderer/opengl/utils/BlendModeManager.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void BlendModeManager_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.BlendModeManager","new",0x5ae5c54c,"openfl._internal.renderer.opengl.utils.BlendModeManager.new","openfl/_internal/renderer/opengl/utils/BlendModeManager.hx",15,0x974feaa1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  17)		this->gl = gl;
HXLINE(  18)		this->currentBlendMode = null();
            	}

Dynamic BlendModeManager_obj::__CreateEmpty() { return new BlendModeManager_obj; }

hx::ObjectPtr< BlendModeManager_obj > BlendModeManager_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< BlendModeManager_obj > _hx_result = new BlendModeManager_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic BlendModeManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BlendModeManager_obj > _hx_result = new BlendModeManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void BlendModeManager_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.BlendModeManager","destroy",0x43b307e6,"openfl._internal.renderer.opengl.utils.BlendModeManager.destroy","openfl/_internal/renderer/opengl/utils/BlendModeManager.hx",25,0x974feaa1)
            	HX_STACK_THIS(this)
HXLINE(  25)		this->gl = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BlendModeManager_obj,destroy,(void))

Bool BlendModeManager_obj::setBlendMode( ::Dynamic blendMode, ::Dynamic __o_force){
 ::Dynamic force = __o_force.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.BlendModeManager","setBlendMode",0xbabdb1e6,"openfl._internal.renderer.opengl.utils.BlendModeManager.setBlendMode","openfl/_internal/renderer/opengl/utils/BlendModeManager.hx",30,0x974feaa1)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(force,"force")
HXLINE(  32)		Bool _hx_tmp = hx::IsNull( blendMode );
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  34)			blendMode = (int)10;
HXLINE(  35)			force = true;
            		}
HXLINE(  39)		Bool _hx_tmp1;
HXDLIN(  39)		if (!(force)) {
HXLINE(  39)			_hx_tmp1 = hx::IsEq( this->currentBlendMode,blendMode );
            		}
            		else {
HXLINE(  39)			_hx_tmp1 = false;
            		}
HXDLIN(  39)		if (_hx_tmp1) {
HXLINE(  41)			return false;
            		}
HXLINE(  45)		this->currentBlendMode = blendMode;
HXLINE(  47)		 ::Dynamic _hx_switch_0 = blendMode;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE(  51)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32774);
HXLINE(  52)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)1,(int)1);
HXLINE(  49)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)2) ){
HXLINE(  72)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32775);
HXLINE(  73)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)1,(int)1);
HXLINE(  70)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)8) ){
HXLINE(  77)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32776);
HXLINE(  78)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)1,(int)1);
HXLINE(  75)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)9) ){
HXLINE(  56)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32774);
HXLINE(  57)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)774,(int)771);
HXLINE(  54)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)12) ){
HXLINE(  61)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32774);
HXLINE(  62)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)1,(int)769);
HXLINE(  59)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==(int)14) ){
HXLINE(  66)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32779);
HXLINE(  67)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)1,(int)1);
HXLINE(  64)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  83)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_equation((int)32774);
HXLINE(  84)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_blend_func((int)1,(int)771);
            		}
            		_hx_goto_0:;
HXLINE(  88)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BlendModeManager_obj,setBlendMode,return )


BlendModeManager_obj::BlendModeManager_obj()
{
}

void BlendModeManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BlendModeManager);
	HX_MARK_MEMBER_NAME(currentBlendMode,"currentBlendMode");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_END_CLASS();
}

void BlendModeManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentBlendMode,"currentBlendMode");
	HX_VISIT_MEMBER_NAME(gl,"gl");
}

hx::Val BlendModeManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setBlendMode") ) { return hx::Val( setBlendMode_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { return hx::Val( currentBlendMode); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val BlendModeManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"currentBlendMode") ) { currentBlendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BlendModeManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BlendModeManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BlendModeManager_obj,currentBlendMode),HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(BlendModeManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *BlendModeManager_obj_sStaticStorageInfo = 0;
#endif

static ::String BlendModeManager_obj_sMemberFields[] = {
	HX_HCSTRING("currentBlendMode","\xdb","\x58","\x68","\xff"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("setBlendMode","\x52","\xa4","\x87","\x30"),
	::String(null()) };

static void BlendModeManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BlendModeManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BlendModeManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BlendModeManager_obj::__mClass,"__mClass");
};

#endif

hx::Class BlendModeManager_obj::__mClass;

void BlendModeManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.BlendModeManager","\x5a","\x6f","\xb6","\x5c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = BlendModeManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BlendModeManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BlendModeManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BlendModeManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BlendModeManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BlendModeManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
