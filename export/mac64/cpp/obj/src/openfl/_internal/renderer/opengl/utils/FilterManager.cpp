// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_DefaultShader
#include <openfl/_internal/renderer/opengl/shaders2/DefaultShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_FilterManager
#include <openfl/_internal/renderer/opengl/utils/FilterManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_RenderTexture
#include <openfl/_internal/renderer/opengl/utils/RenderTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_ShaderManager
#include <openfl/_internal/renderer/opengl/utils/ShaderManager.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

static const Float _hx_array_data_1[] = {
	0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,
};
static const Float _hx_array_data_2[] = {
	0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0,
};
static const Float _hx_array_data_3[] = {
	1.0,(Float)16777215,1.0,(Float)16777215,1.0,(Float)16777215,1.0,(Float)16777215,
};
static const Int _hx_array_data_4[] = {
	(Int)0,(Int)1,(Int)2,(Int)1,(Int)3,(Int)2,
};
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void FilterManager_obj::__construct( ::lime::graphics::GLRenderContext gl,Bool transparent){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","new",0x6afe6f06,"openfl._internal.renderer.opengl.utils.FilterManager.new","openfl/_internal/renderer/opengl/utils/FilterManager.hx",37,0x7d1f400d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(transparent,"transparent")
HXLINE(  39)		this->transparent = transparent;
HXLINE(  41)		this->filterStack = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  43)		this->offsetX = (int)0;
HXLINE(  44)		this->offsetY = (int)0;
HXLINE(  46)		this->setContext(gl);
            	}

Dynamic FilterManager_obj::__CreateEmpty() { return new FilterManager_obj; }

hx::ObjectPtr< FilterManager_obj > FilterManager_obj::__new( ::lime::graphics::GLRenderContext gl,Bool transparent)
{
	hx::ObjectPtr< FilterManager_obj > _hx_result = new FilterManager_obj();
	_hx_result->__construct(gl,transparent);
	return _hx_result;
}

Dynamic FilterManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FilterManager_obj > _hx_result = new FilterManager_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

void FilterManager_obj::applyFilterPass( ::Dynamic filter, ::openfl::geom::Rectangle filterArea,Int width,Int height){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","applyFilterPass",0xe07e4b5d,"openfl._internal.renderer.opengl.utils.FilterManager.applyFilterPass","openfl/_internal/renderer/opengl/utils/FilterManager.hx",51,0x7d1f400d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filter,"filter")
            	HX_STACK_ARG(filterArea,"filterArea")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	}


HX_DEFINE_DYNAMIC_FUNC4(FilterManager_obj,applyFilterPass,(void))

void FilterManager_obj::begin( ::openfl::_internal::renderer::RenderSession renderSession, ::lime::graphics::opengl::GLFramebuffer buffer){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","begin",0x11e1fe4f,"openfl._internal.renderer.opengl.utils.FilterManager.begin","openfl/_internal/renderer/opengl/utils/FilterManager.hx",102,0x7d1f400d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(buffer,"buffer")
HXLINE( 104)		this->renderSession = renderSession;
HXLINE( 105)		this->defaultShader = renderSession->shaderManager->defaultShader;
HXLINE( 108)		this->width = (int)0;
HXLINE( 109)		this->height = (int)0;
HXLINE( 110)		this->buffer = buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FilterManager_obj,begin,(void))

void FilterManager_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","destroy",0x105c16a0,"openfl._internal.renderer.opengl.utils.FilterManager.destroy","openfl/_internal/renderer/opengl/utils/FilterManager.hx",115,0x7d1f400d)
            	HX_STACK_THIS(this)
HXLINE( 119)		this->filterStack = null();
HXLINE( 121)		this->offsetX = (int)0;
HXLINE( 122)		this->offsetY = (int)0;
HXLINE( 124)		{
HXLINE( 124)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 124)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->texturePool;
HXDLIN( 124)			while((_g < _g1->length)){
HXLINE( 124)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::RenderTexture,texture) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::RenderTexture >();
HXDLIN( 124)				++_g;
HXLINE( 126)				texture->destroy();
            			}
            		}
HXLINE( 130)		this->texturePool = null();
HXLINE( 132)		{
HXLINE( 132)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->vertexBuffer;
HXDLIN( 132)			{
HXLINE( 132)				{
HXLINE( 132)					Int buffer1 = ( (Int)(buffer->id) );
HXDLIN( 132)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_buffer(buffer1);
            				}
HXDLIN( 132)				buffer->invalidate();
            			}
            		}
HXLINE( 133)		{
HXLINE( 133)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer2,"buffer") = this->uvBuffer;
HXDLIN( 133)			{
HXLINE( 133)				{
HXLINE( 133)					Int buffer3 = ( (Int)(buffer2->id) );
HXDLIN( 133)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_buffer(buffer3);
            				}
HXDLIN( 133)				buffer2->invalidate();
            			}
            		}
HXLINE( 134)		{
HXLINE( 134)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer4,"buffer") = this->colorBuffer;
HXDLIN( 134)			{
HXLINE( 134)				{
HXLINE( 134)					Int buffer5 = ( (Int)(buffer4->id) );
HXDLIN( 134)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_buffer(buffer5);
            				}
HXDLIN( 134)				buffer4->invalidate();
            			}
            		}
HXLINE( 135)		{
HXLINE( 135)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer6,"buffer") = this->indexBuffer;
HXDLIN( 135)			{
HXLINE( 135)				{
HXLINE( 135)					Int buffer7 = ( (Int)(buffer6->id) );
HXDLIN( 135)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_buffer(buffer7);
            				}
HXDLIN( 135)				buffer6->invalidate();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterManager_obj,destroy,(void))

void FilterManager_obj::initShaderBuffers(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","initShaderBuffers",0xfb7f8ac4,"openfl._internal.renderer.opengl.utils.FilterManager.initShaderBuffers","openfl/_internal/renderer/opengl/utils/FilterManager.hx",140,0x7d1f400d)
            	HX_STACK_THIS(this)
HXLINE( 142)		HX_VARI(  ::lime::graphics::GLRenderContext,gl) = this->gl;
HXLINE( 144)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 144)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN( 144)		this->vertexBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE( 145)		Int _hx_tmp2 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 145)		Int _hx_tmp3 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN( 145)		this->uvBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp2,_hx_tmp3);
HXLINE( 146)		Int _hx_tmp4 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 146)		Int _hx_tmp5 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN( 146)		this->colorBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp4,_hx_tmp5);
HXLINE( 147)		Int _hx_tmp6 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 147)		Int _hx_tmp7 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN( 147)		this->indexBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp6,_hx_tmp7);
HXLINE( 149)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Float >::fromData( _hx_array_data_1,8);
HXDLIN( 149)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 149)		Bool _hx_tmp8 = hx::IsNotNull( array );
HXDLIN( 149)		if (_hx_tmp8) {
HXLINE( 149)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 149)			_this->byteOffset = (int)0;
HXDLIN( 149)			_this->length = array->get_length();
HXDLIN( 149)			Int _hx_tmp9 = (_this->length * _this->bytesPerElement);
HXDLIN( 149)			_this->byteLength = _hx_tmp9;
HXDLIN( 149)			Int byteLength = _this->byteLength;
HXDLIN( 149)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 149)			_this->buffer = this2;
HXDLIN( 149)			_this->copyFromArray(array,null());
HXDLIN( 149)			this1 = _this;
            		}
            		else {
HXLINE( 149)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 149)		this->vertexArray = this1;
HXLINE( 151)		{
HXLINE( 151)			Int target = gl->ARRAY_BUFFER;
HXDLIN( 151)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->vertexBuffer;
HXDLIN( 151)			{
HXLINE( 151)				Int buffer1;
HXDLIN( 151)				Bool _hx_tmp10 = hx::IsNull( buffer );
HXDLIN( 151)				if (_hx_tmp10) {
HXLINE( 151)					buffer1 = (int)0;
            				}
            				else {
HXLINE( 151)					buffer1 = buffer->id;
            				}
HXDLIN( 151)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            			}
            		}
HXLINE( 152)		{
HXLINE( 152)			Int target1 = gl->ARRAY_BUFFER;
HXDLIN( 152)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = this->vertexArray;
HXDLIN( 152)			Int usage = gl->STATIC_DRAW;
HXDLIN( 152)			{
HXLINE( 152)				Int byteOffset = data->byteOffset;
HXDLIN( 152)				Int size = data->byteLength;
HXDLIN( 152)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target1,hx::DynamicPtr(data->buffer),byteOffset,size,usage);
            			}
            		}
HXLINE( 154)		HX_VARI_NAME( ::cpp::VirtualArray,array1,"array") = ::Array_obj< Float >::fromData( _hx_array_data_2,8);
HXDLIN( 154)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 154)		Bool _hx_tmp11 = hx::IsNotNull( array1 );
HXDLIN( 154)		if (_hx_tmp11) {
HXLINE( 154)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 154)			_this1->byteOffset = (int)0;
HXDLIN( 154)			_this1->length = array1->get_length();
HXDLIN( 154)			Int _hx_tmp12 = (_this1->length * _this1->bytesPerElement);
HXDLIN( 154)			_this1->byteLength = _hx_tmp12;
HXDLIN( 154)			Int byteLength1 = _this1->byteLength;
HXDLIN( 154)			HX_VARI_NAME(  ::haxe::io::Bytes,this4,"this") = ::haxe::io::Bytes_obj::alloc(byteLength1);
HXDLIN( 154)			_this1->buffer = this4;
HXDLIN( 154)			_this1->copyFromArray(array1,null());
HXDLIN( 154)			this3 = _this1;
            		}
            		else {
HXLINE( 154)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 154)		this->uvArray = this3;
HXLINE( 156)		{
HXLINE( 156)			Int target2 = gl->ARRAY_BUFFER;
HXDLIN( 156)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer2,"buffer") = this->uvBuffer;
HXDLIN( 156)			{
HXLINE( 156)				Int buffer3;
HXDLIN( 156)				Bool _hx_tmp13 = hx::IsNull( buffer2 );
HXDLIN( 156)				if (_hx_tmp13) {
HXLINE( 156)					buffer3 = (int)0;
            				}
            				else {
HXLINE( 156)					buffer3 = buffer2->id;
            				}
HXDLIN( 156)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target2,buffer3);
            			}
            		}
HXLINE( 157)		{
HXLINE( 157)			Int target3 = gl->ARRAY_BUFFER;
HXDLIN( 157)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data1,"data") = this->uvArray;
HXDLIN( 157)			Int usage1 = gl->STATIC_DRAW;
HXDLIN( 157)			{
HXLINE( 157)				Int byteOffset1 = data1->byteOffset;
HXDLIN( 157)				Int size1 = data1->byteLength;
HXDLIN( 157)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target3,hx::DynamicPtr(data1->buffer),byteOffset1,size1,usage1);
            			}
            		}
HXLINE( 159)		HX_VARI_NAME( ::cpp::VirtualArray,array2,"array") = ::Array_obj< Float >::fromData( _hx_array_data_3,8);
HXDLIN( 159)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN( 159)		Bool _hx_tmp14 = hx::IsNotNull( array2 );
HXDLIN( 159)		if (_hx_tmp14) {
HXLINE( 159)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 159)			_this2->byteOffset = (int)0;
HXDLIN( 159)			_this2->length = array2->get_length();
HXDLIN( 159)			Int _hx_tmp15 = (_this2->length * _this2->bytesPerElement);
HXDLIN( 159)			_this2->byteLength = _hx_tmp15;
HXDLIN( 159)			Int byteLength2 = _this2->byteLength;
HXDLIN( 159)			HX_VARI_NAME(  ::haxe::io::Bytes,this6,"this") = ::haxe::io::Bytes_obj::alloc(byteLength2);
HXDLIN( 159)			_this2->buffer = this6;
HXDLIN( 159)			_this2->copyFromArray(array2,null());
HXDLIN( 159)			this5 = _this2;
            		}
            		else {
HXLINE( 159)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 159)		this->colorArray = this5;
HXLINE( 161)		{
HXLINE( 161)			Int target4 = gl->ARRAY_BUFFER;
HXDLIN( 161)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer4,"buffer") = this->colorBuffer;
HXDLIN( 161)			{
HXLINE( 161)				Int buffer5;
HXDLIN( 161)				Bool _hx_tmp16 = hx::IsNull( buffer4 );
HXDLIN( 161)				if (_hx_tmp16) {
HXLINE( 161)					buffer5 = (int)0;
            				}
            				else {
HXLINE( 161)					buffer5 = buffer4->id;
            				}
HXDLIN( 161)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target4,buffer5);
            			}
            		}
HXLINE( 162)		{
HXLINE( 162)			Int target5 = gl->ARRAY_BUFFER;
HXDLIN( 162)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data2,"data") = this->colorArray;
HXDLIN( 162)			Int usage2 = gl->STATIC_DRAW;
HXDLIN( 162)			{
HXLINE( 162)				Int byteOffset2 = data2->byteOffset;
HXDLIN( 162)				Int size2 = data2->byteLength;
HXDLIN( 162)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target5,hx::DynamicPtr(data2->buffer),byteOffset2,size2,usage2);
            			}
            		}
HXLINE( 164)		{
HXLINE( 164)			Int target6 = gl->ELEMENT_ARRAY_BUFFER;
HXDLIN( 164)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer6,"buffer") = this->indexBuffer;
HXDLIN( 164)			{
HXLINE( 164)				Int buffer7;
HXDLIN( 164)				Bool _hx_tmp17 = hx::IsNull( buffer6 );
HXDLIN( 164)				if (_hx_tmp17) {
HXLINE( 164)					buffer7 = (int)0;
            				}
            				else {
HXLINE( 164)					buffer7 = buffer6->id;
            				}
HXDLIN( 164)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target6,buffer7);
            			}
            		}
HXLINE( 165)		{
HXLINE( 165)			Int target7 = gl->ELEMENT_ARRAY_BUFFER;
HXDLIN( 165)			HX_VARI_NAME( ::cpp::VirtualArray,array3,"array") = ::Array_obj< Int >::fromData( _hx_array_data_4,6);
HXDLIN( 165)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN( 165)			Bool _hx_tmp18 = hx::IsNotNull( array3 );
HXDLIN( 165)			if (_hx_tmp18) {
HXLINE( 165)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN( 165)				_this3->byteOffset = (int)0;
HXDLIN( 165)				_this3->length = array3->get_length();
HXDLIN( 165)				Int _hx_tmp19 = (_this3->length * _this3->bytesPerElement);
HXDLIN( 165)				_this3->byteLength = _hx_tmp19;
HXDLIN( 165)				Int byteLength3 = _this3->byteLength;
HXDLIN( 165)				HX_VARI_NAME(  ::haxe::io::Bytes,this8,"this") = ::haxe::io::Bytes_obj::alloc(byteLength3);
HXDLIN( 165)				_this3->buffer = this8;
HXDLIN( 165)				_this3->copyFromArray(array3,null());
HXDLIN( 165)				this7 = _this3;
            			}
            			else {
HXLINE( 165)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            			}
HXDLIN( 165)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data3,"data") = this7;
HXDLIN( 165)			Int usage3 = gl->STATIC_DRAW;
HXDLIN( 165)			{
HXLINE( 165)				Int byteOffset3 = data3->byteOffset;
HXDLIN( 165)				Int size3 = data3->byteLength;
HXDLIN( 165)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target7,hx::DynamicPtr(data3->buffer),byteOffset3,size3,usage3);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterManager_obj,initShaderBuffers,(void))

void FilterManager_obj::popFilter(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","popFilter",0xfe0b134f,"openfl._internal.renderer.opengl.utils.FilterManager.popFilter","openfl/_internal/renderer/opengl/utils/FilterManager.hx",170,0x7d1f400d)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(FilterManager_obj,popFilter,(void))

void FilterManager_obj::pushFilter( ::Dynamic filterBlock){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","pushFilter",0xb0cfa74c,"openfl._internal.renderer.opengl.utils.FilterManager.pushFilter","openfl/_internal/renderer/opengl/utils/FilterManager.hx",329,0x7d1f400d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(filterBlock,"filterBlock")
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterManager_obj,pushFilter,(void))

void FilterManager_obj::setContext( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.FilterManager","setContext",0x4411dc87,"openfl._internal.renderer.opengl.utils.FilterManager.setContext","openfl/_internal/renderer/opengl/utils/FilterManager.hx",405,0x7d1f400d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE( 407)		this->gl = gl;
HXLINE( 408)		this->texturePool = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 410)		this->initShaderBuffers();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FilterManager_obj,setContext,(void))


FilterManager_obj::FilterManager_obj()
{
}

void FilterManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FilterManager);
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(colorArray,"colorArray");
	HX_MARK_MEMBER_NAME(colorBuffer,"colorBuffer");
	HX_MARK_MEMBER_NAME(defaultShader,"defaultShader");
	HX_MARK_MEMBER_NAME(filterStack,"filterStack");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(offsetX,"offsetX");
	HX_MARK_MEMBER_NAME(offsetY,"offsetY");
	HX_MARK_MEMBER_NAME(renderSession,"renderSession");
	HX_MARK_MEMBER_NAME(texturePool,"texturePool");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(uvArray,"uvArray");
	HX_MARK_MEMBER_NAME(uvBuffer,"uvBuffer");
	HX_MARK_MEMBER_NAME(vertexArray,"vertexArray");
	HX_MARK_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_END_CLASS();
}

void FilterManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(colorArray,"colorArray");
	HX_VISIT_MEMBER_NAME(colorBuffer,"colorBuffer");
	HX_VISIT_MEMBER_NAME(defaultShader,"defaultShader");
	HX_VISIT_MEMBER_NAME(filterStack,"filterStack");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(offsetX,"offsetX");
	HX_VISIT_MEMBER_NAME(offsetY,"offsetY");
	HX_VISIT_MEMBER_NAME(renderSession,"renderSession");
	HX_VISIT_MEMBER_NAME(texturePool,"texturePool");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(uvArray,"uvArray");
	HX_VISIT_MEMBER_NAME(uvBuffer,"uvBuffer");
	HX_VISIT_MEMBER_NAME(vertexArray,"vertexArray");
	HX_VISIT_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_VISIT_MEMBER_NAME(width,"width");
}

hx::Val FilterManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { return hx::Val( offsetX); }
		if (HX_FIELD_EQ(inName,"offsetY") ) { return hx::Val( offsetY); }
		if (HX_FIELD_EQ(inName,"uvArray") ) { return hx::Val( uvArray); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uvBuffer") ) { return hx::Val( uvBuffer); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"popFilter") ) { return hx::Val( popFilter_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"colorArray") ) { return hx::Val( colorArray); }
		if (HX_FIELD_EQ(inName,"pushFilter") ) { return hx::Val( pushFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"setContext") ) { return hx::Val( setContext_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorBuffer") ) { return hx::Val( colorBuffer); }
		if (HX_FIELD_EQ(inName,"filterStack") ) { return hx::Val( filterStack); }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { return hx::Val( indexBuffer); }
		if (HX_FIELD_EQ(inName,"texturePool") ) { return hx::Val( texturePool); }
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent); }
		if (HX_FIELD_EQ(inName,"vertexArray") ) { return hx::Val( vertexArray); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vertexBuffer") ) { return hx::Val( vertexBuffer); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"defaultShader") ) { return hx::Val( defaultShader); }
		if (HX_FIELD_EQ(inName,"renderSession") ) { return hx::Val( renderSession); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"applyFilterPass") ) { return hx::Val( applyFilterPass_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"initShaderBuffers") ) { return hx::Val( initShaderBuffers_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FilterManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"offsetX") ) { offsetX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetY") ) { offsetY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"uvArray") ) { uvArray=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"uvBuffer") ) { uvBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"colorArray") ) { colorArray=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorBuffer") ) { colorBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"filterStack") ) { filterStack=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texturePool") ) { texturePool=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vertexArray") ) { vertexArray=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vertexBuffer") ) { vertexBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"defaultShader") ) { defaultShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::DefaultShader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderSession") ) { renderSession=inValue.Cast<  ::openfl::_internal::renderer::RenderSession >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FilterManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("colorArray","\x36","\x85","\xfb","\x49"));
	outFields->push(HX_HCSTRING("colorBuffer","\xc3","\x4e","\xbd","\x8a"));
	outFields->push(HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17"));
	outFields->push(HX_HCSTRING("filterStack","\x70","\xbc","\xbd","\x33"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"));
	outFields->push(HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"));
	outFields->push(HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f"));
	outFields->push(HX_HCSTRING("texturePool","\x57","\x7f","\xdb","\x00"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("uvArray","\x78","\xb7","\x28","\xe8"));
	outFields->push(HX_HCSTRING("uvBuffer","\x41","\x16","\x1c","\x54"));
	outFields->push(HX_HCSTRING("vertexArray","\x95","\x37","\xcb","\x39"));
	outFields->push(HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FilterManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(FilterManager_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(FilterManager_obj,colorArray),HX_HCSTRING("colorArray","\x36","\x85","\xfb","\x49")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(FilterManager_obj,colorBuffer),HX_HCSTRING("colorBuffer","\xc3","\x4e","\xbd","\x8a")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::DefaultShader*/ ,(int)offsetof(FilterManager_obj,defaultShader),HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(FilterManager_obj,filterStack),HX_HCSTRING("filterStack","\x70","\xbc","\xbd","\x33")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(FilterManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(FilterManager_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(FilterManager_obj,indexBuffer),HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{hx::fsFloat,(int)offsetof(FilterManager_obj,offsetX),HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7")},
	{hx::fsFloat,(int)offsetof(FilterManager_obj,offsetY),HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7")},
	{hx::fsObject /*::openfl::_internal::renderer::RenderSession*/ ,(int)offsetof(FilterManager_obj,renderSession),HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(FilterManager_obj,texturePool),HX_HCSTRING("texturePool","\x57","\x7f","\xdb","\x00")},
	{hx::fsBool,(int)offsetof(FilterManager_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(FilterManager_obj,uvArray),HX_HCSTRING("uvArray","\x78","\xb7","\x28","\xe8")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(FilterManager_obj,uvBuffer),HX_HCSTRING("uvBuffer","\x41","\x16","\x1c","\x54")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(FilterManager_obj,vertexArray),HX_HCSTRING("vertexArray","\x95","\x37","\xcb","\x39")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(FilterManager_obj,vertexBuffer),HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70")},
	{hx::fsInt,(int)offsetof(FilterManager_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FilterManager_obj_sStaticStorageInfo = 0;
#endif

static ::String FilterManager_obj_sMemberFields[] = {
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("colorArray","\x36","\x85","\xfb","\x49"),
	HX_HCSTRING("colorBuffer","\xc3","\x4e","\xbd","\x8a"),
	HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17"),
	HX_HCSTRING("filterStack","\x70","\xbc","\xbd","\x33"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("offsetX","\x65","\x09","\x65","\xd7"),
	HX_HCSTRING("offsetY","\x66","\x09","\x65","\xd7"),
	HX_HCSTRING("renderSession","\xa0","\x8a","\x85","\x8f"),
	HX_HCSTRING("texturePool","\x57","\x7f","\xdb","\x00"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("uvArray","\x78","\xb7","\x28","\xe8"),
	HX_HCSTRING("uvBuffer","\x41","\x16","\x1c","\x54"),
	HX_HCSTRING("vertexArray","\x95","\x37","\xcb","\x39"),
	HX_HCSTRING("vertexBuffer","\x84","\xaf","\xa9","\x70"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("applyFilterPass","\xb7","\x4b","\x8d","\x16"),
	HX_HCSTRING("begin","\x29","\xea","\x55","\xb0"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("initShaderBuffers","\x9e","\xd5","\x92","\x13"),
	HX_HCSTRING("popFilter","\x29","\xf4","\xaa","\x01"),
	HX_HCSTRING("pushFilter","\x32","\x85","\x14","\xd9"),
	HX_HCSTRING("setContext","\x6d","\xba","\x56","\x6c"),
	::String(null()) };

static void FilterManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FilterManager_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FilterManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FilterManager_obj::__mClass,"__mClass");
};

#endif

hx::Class FilterManager_obj::__mClass;

void FilterManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.FilterManager","\x14","\x34","\x95","\x03");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FilterManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FilterManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FilterManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FilterManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FilterManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FilterManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
