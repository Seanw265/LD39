// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BucketDataType
#include <openfl/_internal/renderer/opengl/utils/BucketDataType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BucketMode
#include <openfl/_internal/renderer/opengl/utils/BucketMode.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucket
#include <openfl/_internal/renderer/opengl/utils/GLBucket.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucketData
#include <openfl/_internal/renderer/opengl/utils/GLBucketData.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GraphicType
#include <openfl/_internal/renderer/opengl/utils/GraphicType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GraphicsRenderer
#include <openfl/_internal/renderer/opengl/utils/GraphicsRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexArray
#include <openfl/_internal/renderer/opengl/utils/VertexArray.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexAttribute
#include <openfl/_internal/renderer/opengl/utils/VertexAttribute.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif

static const Float _hx_array_data_0[] = {
	(Float)0,(Float)0,(Float)0,
};
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void GLBucket_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucket","new",0x3de45b22,"openfl._internal.renderer.opengl.utils.GLBucket.new","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1213,0xd295150c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(1243)		this->uploadTileBuffer = true;
HXLINE(1233)		this->textureSmooth = true;
HXLINE(1232)		this->textureRepeat = false;
HXLINE(1227)		this->lines = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1226)		this->fills = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1222)		this->fillIndex = (int)-1;
HXLINE(1247)		this->gl = gl;
HXLINE(1249)		this->color = ::Array_obj< Float >::fromData( _hx_array_data_0,3);
HXLINE(1250)		this->lastIndex = (int)0;
HXLINE(1251)		this->alpha = (int)1;
HXLINE(1252)		this->dirty = true;
HXLINE(1254)		this->mode = ::openfl::_internal::renderer::opengl::utils::BucketMode_obj::Fill_dyn();
HXLINE(1256)		this->textureMatrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE(1257)		this->textureTL =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE(1258)		this->textureBR =  ::openfl::geom::Point_obj::__new((int)1,(int)1);
            	}

Dynamic GLBucket_obj::__CreateEmpty() { return new GLBucket_obj; }

hx::ObjectPtr< GLBucket_obj > GLBucket_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< GLBucket_obj > _hx_result = new GLBucket_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic GLBucket_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLBucket_obj > _hx_result = new GLBucket_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

 ::openfl::_internal::renderer::opengl::utils::GLBucketData GLBucket_obj::getData(::hx::EnumBase type){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucket","getData",0x5a4019a2,"openfl._internal.renderer.opengl.utils.GLBucket.getData","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1261,0xd295150c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(type,"type")
HXLINE(1262)		HX_VAR( ::Array< ::Dynamic>,data);
HXLINE(1263)		Int _hx_tmp = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1263)		if ((_hx_tmp == (int)1)) {
HXLINE(1265)			data = this->fills;
            		}
            		else {
HXLINE(1267)			data = this->lines;
            		}
HXLINE(1269)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,result) = null();
HXLINE(1270)		HX_VARI( Bool,remove) = false;
HXLINE(1271)		{
HXLINE(1271)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1271)			while((_g < data->length)){
HXLINE(1271)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,d) = data->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1271)				++_g;
HXLINE(1272)				if (d->available) {
HXLINE(1273)					result = d;
HXLINE(1274)					remove = true;
HXLINE(1275)					goto _hx_goto_1;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE(1279)		Bool _hx_tmp1 = hx::IsNull( result );
HXDLIN(1279)		if (_hx_tmp1) {
HXLINE(1280)			result =  ::openfl::_internal::renderer::opengl::utils::GLBucketData_obj::__new(this->gl);
            		}
HXLINE(1283)		result->available = false;
HXLINE(1284)		result->parent = hx::ObjectPtr<OBJ_>(this);
HXLINE(1285)		result->type = type;
HXLINE(1287)		if (remove) {
HXLINE(1287)			data->remove(result);
            		}
HXLINE(1288)		data->push(result);
HXLINE(1290)		Int _hx_tmp2 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN(1290)		switch((int)(_hx_tmp2)){
            			case (int)0: {
HXLINE(1302)				result->vertexArray->attributes = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::primitiveVertexAttributes;
            			}
            			break;
            			case (int)1: {
HXLINE(1292)				Int _hx_tmp3 = ( ( ::hx::EnumBase)(this->mode) )->_hx_getIndex();
HXDLIN(1292)				switch((int)(_hx_tmp3)){
            					case (int)1: case (int)2: {
HXLINE(1294)						result->vertexArray->attributes = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::fillVertexAttributes;
            					}
            					break;
            					case (int)5: {
HXLINE(1297)						result->vertexArray->attributes = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::drawTrianglesVertexAttributes->copy();
HXLINE(1298)						 ::openfl::_internal::renderer::opengl::utils::VertexAttribute _hx_tmp4 = result->vertexArray->attributes->__get((int)2).StaticCast<  ::openfl::_internal::renderer::opengl::utils::VertexAttribute >()->copy();
HXDLIN(1298)						result->vertexArray->attributes[(int)2] = _hx_tmp4;
            					}
            					break;
            					default:{
            					}
            				}
            			}
            			break;
            		}
HXLINE(1307)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(GLBucket_obj,getData,return )

void GLBucket_obj::optimize(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucket","optimize",0x868fc2db,"openfl._internal.renderer.opengl.utils.GLBucket.optimize","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1310,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1310)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1380)		{
HXLINE(1380)			HX_VARI( ::Array< ::Dynamic>,data) = this->lines;
HXDLIN(1380)			Bool _hx_tmp = (data->length > (int)1);
HXDLIN(1380)			if (_hx_tmp) {
HXLINE(1380)				HX_VARI( ::Array< ::Dynamic>,result) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(1380)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,tmp) = null();
HXDLIN(1380)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,last) = null();
HXDLIN(1380)				HX_VARI( Int,idx) = (int)0;
HXDLIN(1380)				HX_VARI( Int,vi) = (int)0;
HXDLIN(1380)				HX_VARI( Int,ii) = (int)0;
HXDLIN(1380)				{
HXLINE(1380)					HX_VARI( Int,_g) = (int)0;
HXDLIN(1380)					while((_g < data->length)){
HXLINE(1380)						HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,d) = data->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1380)						++_g;
HXDLIN(1380)						Bool _hx_tmp1;
HXDLIN(1380)						Bool _hx_tmp2;
HXDLIN(1380)						if (!(d->available)) {
HXLINE(1380)							_hx_tmp2 = d->rawVerts;
            						}
            						else {
HXLINE(1380)							_hx_tmp2 = true;
            						}
HXDLIN(1380)						if (!(_hx_tmp2)) {
HXLINE(1380)							_hx_tmp1 = d->rawIndices;
            						}
            						else {
HXLINE(1380)							_hx_tmp1 = true;
            						}
HXDLIN(1380)						if (_hx_tmp1) {
HXLINE(1380)							Bool _hx_tmp3 = hx::IsNotNull( tmp );
HXDLIN(1380)							if (_hx_tmp3) {
HXLINE(1380)								result->push(tmp);
HXDLIN(1380)								tmp = null();
            							}
HXDLIN(1380)							result->push(d);
HXDLIN(1380)							last = d;
HXDLIN(1380)							continue;
            						}
HXDLIN(1380)						Bool _hx_tmp4;
HXDLIN(1380)						Bool _hx_tmp5 = hx::IsNotNull( last );
HXDLIN(1380)						if (_hx_tmp5) {
HXLINE(1380)							_hx_tmp4 = (last->drawMode == d->drawMode);
            						}
            						else {
HXLINE(1380)							_hx_tmp4 = true;
            						}
HXDLIN(1380)						if (_hx_tmp4) {
HXLINE(1380)							Bool _hx_tmp6 = hx::IsNull( tmp );
HXDLIN(1380)							if (_hx_tmp6) {
HXLINE(1380)								tmp = d;
            							}
            							else {
HXLINE(1380)								vi = tmp->verts->length;
HXDLIN(1380)								ii = tmp->indices->length;
HXDLIN(1380)								{
HXLINE(1380)									HX_VARI( Int,_g2) = (int)0;
HXDLIN(1380)									HX_VARI( Int,_g1) = d->verts->length;
HXDLIN(1380)									while((_g2 < _g1)){
HXLINE(1380)										HX_VARI( Int,j) = _g2++;
HXDLIN(1380)										Int _hx_tmp7 = (j + vi);
HXDLIN(1380)										Float _hx_tmp8 = d->verts->__get(j);
HXDLIN(1380)										tmp->verts[_hx_tmp7] = _hx_tmp8;
            									}
            								}
HXDLIN(1380)								{
HXLINE(1380)									HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN(1380)									HX_VARI_NAME( Int,_g11,"_g1") = d->indices->length;
HXDLIN(1380)									while((_g21 < _g11)){
HXLINE(1380)										HX_VARI_NAME( Int,j1,"j") = _g21++;
HXDLIN(1380)										Int _hx_tmp9 = (j1 + ii);
HXDLIN(1380)										Int _hx_tmp10 = (d->indices->__get(j1) + idx);
HXDLIN(1380)										tmp->indices[_hx_tmp9] = _hx_tmp10;
            									}
            								}
            							}
HXDLIN(1380)							idx = (tmp->indices->__get((tmp->indices->length - (int)1)) + (int)1);
HXDLIN(1380)							last = d;
            						}
            						else {
HXLINE(1380)							Bool _hx_tmp11 = hx::IsNotNull( tmp );
HXDLIN(1380)							if (_hx_tmp11) {
HXLINE(1380)								result->push(tmp);
HXDLIN(1380)								tmp = null();
            							}
HXDLIN(1380)							result->push(d);
HXDLIN(1380)							last = d;
HXDLIN(1380)							continue;
            						}
            					}
            				}
HXDLIN(1380)				Bool _hx_tmp12;
HXDLIN(1380)				if ((result->length == (int)0)) {
HXLINE(1380)					_hx_tmp12 = hx::IsNotNull( tmp );
            				}
            				else {
HXLINE(1380)					_hx_tmp12 = false;
            				}
HXDLIN(1380)				if (_hx_tmp12) {
HXLINE(1380)					result->push(tmp);
            				}
HXDLIN(1380)				Bool _hx_tmp13 = (result->length > (int)0);
HXDLIN(1380)				if (_hx_tmp13) {
HXLINE(1380)					Int _hx_tmp14 = ( ( ::hx::EnumBase)(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Line_dyn()) )->_hx_getIndex();
HXDLIN(1380)					if ((_hx_tmp14 == (int)1)) {
HXLINE(1380)						_gthis->fills = result;
            					}
            					else {
HXLINE(1380)						_gthis->lines = result;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLBucket_obj,optimize,(void))

void GLBucket_obj::reset(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucket","reset",0x11a28911,"openfl._internal.renderer.opengl.utils.GLBucket.reset","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1386,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1387)		{
HXLINE(1387)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1387)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->fills;
HXDLIN(1387)			while((_g < _g1->length)){
HXLINE(1387)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1387)				++_g;
HXLINE(1388)				fill->reset();
            			}
            		}
HXLINE(1391)		{
HXLINE(1391)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1391)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->lines;
HXDLIN(1391)			while((_g2 < _g11->length)){
HXLINE(1391)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,line) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1391)				++_g2;
HXLINE(1392)				line->reset();
            			}
            		}
HXLINE(1395)		this->fillIndex = (int)-1;
HXLINE(1396)		this->uploadTileBuffer = true;
HXLINE(1397)		this->graphicType = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLBucket_obj,reset,(void))

void GLBucket_obj::uploadTile(Int x,Int y,Int w,Int h){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucket","uploadTile",0x0772874d,"openfl._internal.renderer.opengl.utils.GLBucket.uploadTile","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1400,0xd295150c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(w,"w")
            	HX_STACK_ARG(h,"h")
HXLINE(1402)		Bool _hx_tmp = hx::IsNull( this->tileBuffer );
HXDLIN(1402)		if (_hx_tmp) {
HXLINE(1403)			Int _hx_tmp1 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(1403)			Int _hx_tmp2 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN(1403)			this->tileBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp1,_hx_tmp2);
            		}
HXLINE(1407)		this->tile = ::Array_obj< Int >::__new(16)->init(0,x)->init(1,y)->init(2,(int)0)->init(3,(int)0)->init(4,w)->init(5,y)->init(6,(int)1)->init(7,(int)0)->init(8,x)->init(9,h)->init(10,(int)0)->init(11,(int)1)->init(12,w)->init(13,h)->init(14,(int)1)->init(15,(int)1);
HXLINE(1414)		HX_VARI( ::cpp::VirtualArray,array) = this->tile;
HXDLIN(1414)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1414)		Bool _hx_tmp3 = hx::IsNotNull( array );
HXDLIN(1414)		if (_hx_tmp3) {
HXLINE(1414)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN(1414)			_this->byteOffset = (int)0;
HXDLIN(1414)			_this->length = array->get_length();
HXDLIN(1414)			Int _hx_tmp4 = (_this->length * _this->bytesPerElement);
HXDLIN(1414)			_this->byteLength = _hx_tmp4;
HXDLIN(1414)			Int byteLength = _this->byteLength;
HXDLIN(1414)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(1414)			_this->buffer = this2;
HXDLIN(1414)			_this->copyFromArray(array,null());
HXDLIN(1414)			this1 = _this;
            		}
            		else {
HXLINE(1414)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            		}
HXDLIN(1414)		this->glTile = this1;
HXLINE(1416)		{
HXLINE(1416)			Int target = this->gl->ARRAY_BUFFER;
HXDLIN(1416)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->tileBuffer;
HXDLIN(1416)			{
HXLINE(1416)				Int buffer1;
HXDLIN(1416)				Bool _hx_tmp5 = hx::IsNull( buffer );
HXDLIN(1416)				if (_hx_tmp5) {
HXLINE(1416)					buffer1 = (int)0;
            				}
            				else {
HXLINE(1416)					buffer1 = buffer->id;
            				}
HXDLIN(1416)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            			}
            		}
HXLINE(1417)		{
HXLINE(1417)			Int target1 = this->gl->ARRAY_BUFFER;
HXDLIN(1417)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = this->glTile;
HXDLIN(1417)			Int usage = this->gl->STATIC_DRAW;
HXDLIN(1417)			{
HXLINE(1417)				Int byteOffset = data->byteOffset;
HXDLIN(1417)				Int size = data->byteLength;
HXDLIN(1417)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target1,hx::DynamicPtr(data->buffer),byteOffset,size,usage);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(GLBucket_obj,uploadTile,(void))

void GLBucket_obj::upload(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucket","upload",0xe076e47f,"openfl._internal.renderer.opengl.utils.GLBucket.upload","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1421,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1423)		if (hx::IsNotEq( this->mode,::openfl::_internal::renderer::opengl::utils::BucketMode_obj::Line_dyn() )) {
HXLINE(1424)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1424)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->fills;
HXDLIN(1424)			while((_g < _g1->length)){
HXLINE(1424)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1424)				++_g;
HXLINE(1425)				Bool _hx_tmp = !(fill->available);
HXDLIN(1425)				if (_hx_tmp) {
HXLINE(1426)					fill->upload();
            				}
            			}
            		}
HXLINE(1431)		{
HXLINE(1431)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN(1431)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->lines;
HXDLIN(1431)			while((_g2 < _g11->length)){
HXLINE(1431)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,line) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1431)				++_g2;
HXLINE(1432)				Bool _hx_tmp1 = !(line->available);
HXDLIN(1432)				if (_hx_tmp1) {
HXLINE(1433)					line->upload();
            				}
            			}
            		}
HXLINE(1437)		this->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLBucket_obj,upload,(void))


GLBucket_obj::GLBucket_obj()
{
}

void GLBucket_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLBucket);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(graphicType,"graphicType");
	HX_MARK_MEMBER_NAME(lastIndex,"lastIndex");
	HX_MARK_MEMBER_NAME(fillIndex,"fillIndex");
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_MEMBER_NAME(fills,"fills");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(textureMatrix,"textureMatrix");
	HX_MARK_MEMBER_NAME(textureRepeat,"textureRepeat");
	HX_MARK_MEMBER_NAME(textureSmooth,"textureSmooth");
	HX_MARK_MEMBER_NAME(textureTL,"textureTL");
	HX_MARK_MEMBER_NAME(textureBR,"textureBR");
	HX_MARK_MEMBER_NAME(overrideMatrix,"overrideMatrix");
	HX_MARK_MEMBER_NAME(tileBuffer,"tileBuffer");
	HX_MARK_MEMBER_NAME(glTile,"glTile");
	HX_MARK_MEMBER_NAME(tile,"tile");
	HX_MARK_MEMBER_NAME(uploadTileBuffer,"uploadTileBuffer");
	HX_MARK_END_CLASS();
}

void GLBucket_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(graphicType,"graphicType");
	HX_VISIT_MEMBER_NAME(lastIndex,"lastIndex");
	HX_VISIT_MEMBER_NAME(fillIndex,"fillIndex");
	HX_VISIT_MEMBER_NAME(mode,"mode");
	HX_VISIT_MEMBER_NAME(fills,"fills");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(textureMatrix,"textureMatrix");
	HX_VISIT_MEMBER_NAME(textureRepeat,"textureRepeat");
	HX_VISIT_MEMBER_NAME(textureSmooth,"textureSmooth");
	HX_VISIT_MEMBER_NAME(textureTL,"textureTL");
	HX_VISIT_MEMBER_NAME(textureBR,"textureBR");
	HX_VISIT_MEMBER_NAME(overrideMatrix,"overrideMatrix");
	HX_VISIT_MEMBER_NAME(tileBuffer,"tileBuffer");
	HX_VISIT_MEMBER_NAME(glTile,"glTile");
	HX_VISIT_MEMBER_NAME(tile,"tile");
	HX_VISIT_MEMBER_NAME(uploadTileBuffer,"uploadTileBuffer");
}

hx::Val GLBucket_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode); }
		if (HX_FIELD_EQ(inName,"tile") ) { return hx::Val( tile); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { return hx::Val( color); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty); }
		if (HX_FIELD_EQ(inName,"fills") ) { return hx::Val( fills); }
		if (HX_FIELD_EQ(inName,"lines") ) { return hx::Val( lines); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return hx::Val( bitmap); }
		if (HX_FIELD_EQ(inName,"glTile") ) { return hx::Val( glTile); }
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture); }
		if (HX_FIELD_EQ(inName,"getData") ) { return hx::Val( getData_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"optimize") ) { return hx::Val( optimize_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastIndex") ) { return hx::Val( lastIndex); }
		if (HX_FIELD_EQ(inName,"fillIndex") ) { return hx::Val( fillIndex); }
		if (HX_FIELD_EQ(inName,"textureTL") ) { return hx::Val( textureTL); }
		if (HX_FIELD_EQ(inName,"textureBR") ) { return hx::Val( textureBR); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileBuffer") ) { return hx::Val( tileBuffer); }
		if (HX_FIELD_EQ(inName,"uploadTile") ) { return hx::Val( uploadTile_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"graphicType") ) { return hx::Val( graphicType); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureMatrix") ) { return hx::Val( textureMatrix); }
		if (HX_FIELD_EQ(inName,"textureRepeat") ) { return hx::Val( textureRepeat); }
		if (HX_FIELD_EQ(inName,"textureSmooth") ) { return hx::Val( textureSmooth); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { return hx::Val( overrideMatrix); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadTileBuffer") ) { return hx::Val( uploadTileBuffer); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLBucket_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tile") ) { tile=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { color=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fills") ) { fills=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glTile") ) { glTile=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastIndex") ) { lastIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fillIndex") ) { fillIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureTL") ) { textureTL=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureBR") ) { textureBR=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileBuffer") ) { tileBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"graphicType") ) { graphicType=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureMatrix") ) { textureMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureRepeat") ) { textureRepeat=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textureSmooth") ) { textureSmooth=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { overrideMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadTileBuffer") ) { uploadTileBuffer=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLBucket_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("graphicType","\x82","\xed","\xef","\x86"));
	outFields->push(HX_HCSTRING("lastIndex","\xdc","\xc8","\xc1","\x0a"));
	outFields->push(HX_HCSTRING("fillIndex","\x8f","\xc1","\xbb","\x8c"));
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("fills","\x90","\xe4","\x98","\x00"));
	outFields->push(HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"));
	outFields->push(HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("textureMatrix","\x7c","\x09","\xe0","\x4e"));
	outFields->push(HX_HCSTRING("textureRepeat","\x96","\x6a","\x94","\x99"));
	outFields->push(HX_HCSTRING("textureSmooth","\x69","\xdb","\x82","\x9a"));
	outFields->push(HX_HCSTRING("textureTL","\x13","\x3f","\x49","\xaf"));
	outFields->push(HX_HCSTRING("textureBR","\x6b","\x2f","\x49","\xaf"));
	outFields->push(HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9"));
	outFields->push(HX_HCSTRING("tileBuffer","\xce","\x92","\x2b","\x35"));
	outFields->push(HX_HCSTRING("glTile","\xf3","\xc7","\xde","\x95"));
	outFields->push(HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("uploadTileBuffer","\x2f","\x4c","\xf5","\x02"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLBucket_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(GLBucket_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(GLBucket_obj,color),HX_HCSTRING("color","\x63","\x71","\x5c","\x4a")},
	{hx::fsFloat,(int)offsetof(GLBucket_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsBool,(int)offsetof(GLBucket_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::GraphicType*/ ,(int)offsetof(GLBucket_obj,graphicType),HX_HCSTRING("graphicType","\x82","\xed","\xef","\x86")},
	{hx::fsInt,(int)offsetof(GLBucket_obj,lastIndex),HX_HCSTRING("lastIndex","\xdc","\xc8","\xc1","\x0a")},
	{hx::fsInt,(int)offsetof(GLBucket_obj,fillIndex),HX_HCSTRING("fillIndex","\x8f","\xc1","\xbb","\x8c")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::BucketMode*/ ,(int)offsetof(GLBucket_obj,mode),HX_HCSTRING("mode","\x63","\xd3","\x60","\x48")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(GLBucket_obj,fills),HX_HCSTRING("fills","\x90","\xe4","\x98","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(GLBucket_obj,lines),HX_HCSTRING("lines","\xff","\xdd","\x01","\x75")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(GLBucket_obj,bitmap),HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(GLBucket_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(GLBucket_obj,textureMatrix),HX_HCSTRING("textureMatrix","\x7c","\x09","\xe0","\x4e")},
	{hx::fsBool,(int)offsetof(GLBucket_obj,textureRepeat),HX_HCSTRING("textureRepeat","\x96","\x6a","\x94","\x99")},
	{hx::fsBool,(int)offsetof(GLBucket_obj,textureSmooth),HX_HCSTRING("textureSmooth","\x69","\xdb","\x82","\x9a")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(GLBucket_obj,textureTL),HX_HCSTRING("textureTL","\x13","\x3f","\x49","\xaf")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(GLBucket_obj,textureBR),HX_HCSTRING("textureBR","\x6b","\x2f","\x49","\xaf")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(GLBucket_obj,overrideMatrix),HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(GLBucket_obj,tileBuffer),HX_HCSTRING("tileBuffer","\xce","\x92","\x2b","\x35")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLBucket_obj,glTile),HX_HCSTRING("glTile","\xf3","\xc7","\xde","\x95")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(GLBucket_obj,tile),HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c")},
	{hx::fsBool,(int)offsetof(GLBucket_obj,uploadTileBuffer),HX_HCSTRING("uploadTileBuffer","\x2f","\x4c","\xf5","\x02")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLBucket_obj_sStaticStorageInfo = 0;
#endif

static ::String GLBucket_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("color","\x63","\x71","\x5c","\x4a"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("graphicType","\x82","\xed","\xef","\x86"),
	HX_HCSTRING("lastIndex","\xdc","\xc8","\xc1","\x0a"),
	HX_HCSTRING("fillIndex","\x8f","\xc1","\xbb","\x8c"),
	HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"),
	HX_HCSTRING("fills","\x90","\xe4","\x98","\x00"),
	HX_HCSTRING("lines","\xff","\xdd","\x01","\x75"),
	HX_HCSTRING("bitmap","\xef","\x0f","\x0c","\xf1"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("textureMatrix","\x7c","\x09","\xe0","\x4e"),
	HX_HCSTRING("textureRepeat","\x96","\x6a","\x94","\x99"),
	HX_HCSTRING("textureSmooth","\x69","\xdb","\x82","\x9a"),
	HX_HCSTRING("textureTL","\x13","\x3f","\x49","\xaf"),
	HX_HCSTRING("textureBR","\x6b","\x2f","\x49","\xaf"),
	HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9"),
	HX_HCSTRING("tileBuffer","\xce","\x92","\x2b","\x35"),
	HX_HCSTRING("glTile","\xf3","\xc7","\xde","\x95"),
	HX_HCSTRING("tile","\x2e","\xcb","\xfc","\x4c"),
	HX_HCSTRING("uploadTileBuffer","\x2f","\x4c","\xf5","\x02"),
	HX_HCSTRING("getData","\xe0","\x05","\xe6","\x14"),
	HX_HCSTRING("optimize","\xdd","\x8c","\x18","\x1d"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("uploadTile","\xcf","\x55","\x43","\xe9"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	::String(null()) };

static void GLBucket_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLBucket_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLBucket_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLBucket_obj::__mClass,"__mClass");
};

#endif

hx::Class GLBucket_obj::__mClass;

void GLBucket_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.GLBucket","\x30","\xe2","\x53","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLBucket_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLBucket_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLBucket_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLBucket_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLBucket_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLBucket_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
