// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BucketDataType
#include <openfl/_internal/renderer/opengl/utils/BucketDataType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucket
#include <openfl/_internal/renderer/opengl/utils/GLBucket.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucketData
#include <openfl/_internal/renderer/opengl/utils/GLBucketData.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexArray
#include <openfl/_internal/renderer/opengl/utils/VertexArray.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexAttribute
#include <openfl/_internal/renderer/opengl/utils/VertexAttribute.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void GLBucketData_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucketData","new",0x4b51a26c,"openfl._internal.renderer.opengl.utils.GLBucketData.new","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1442,0xd295150c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(1462)		this->available = false;
HXLINE(1460)		this->rawIndices = false;
HXLINE(1455)		this->stride = (int)0;
HXLINE(1454)		this->rawVerts = false;
HXLINE(1452)		this->lastVertsSize = (int)0;
HXLINE(1448)		this->glStart = (int)0;
HXLINE(1447)		this->glLength = (int)0;
HXLINE(1467)		this->gl = gl;
HXLINE(1468)		this->drawMode = gl->TRIANGLE_STRIP;
HXLINE(1469)		this->verts = ::Array_obj< Float >::__new(0);
HXLINE(1470)		this->indices = ::Array_obj< Int >::__new(0);
HXLINE(1471)		this->vertexArray =  ::openfl::_internal::renderer::opengl::utils::VertexArray_obj::__new(::Array_obj< ::Dynamic>::__new(0),null(),null());
            	}

Dynamic GLBucketData_obj::__CreateEmpty() { return new GLBucketData_obj; }

hx::ObjectPtr< GLBucketData_obj > GLBucketData_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< GLBucketData_obj > _hx_result = new GLBucketData_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic GLBucketData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLBucketData_obj > _hx_result = new GLBucketData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void GLBucketData_obj::reset(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucketData","reset",0x4a67b6db,"openfl._internal.renderer.opengl.utils.GLBucketData.reset","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1474,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1475)		this->available = true;
HXLINE(1476)		this->verts = ::Array_obj< Float >::__new(0);
HXLINE(1477)		this->indices = ::Array_obj< Int >::__new(0);
HXLINE(1478)		this->glLength = (int)0;
HXLINE(1479)		this->glStart = (int)0;
HXLINE(1480)		this->stride = (int)0;
HXLINE(1481)		this->rawVerts = false;
HXLINE(1482)		this->rawIndices = false;
HXLINE(1483)		this->drawMode = this->gl->TRIANGLE_STRIP;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLBucketData_obj,reset,(void))

void GLBucketData_obj::upload(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLBucketData","upload",0x5439c775,"openfl._internal.renderer.opengl.utils.GLBucketData.upload","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1486,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1489)		Bool _hx_tmp;
HXDLIN(1489)		Bool _hx_tmp1;
HXDLIN(1489)		Bool _hx_tmp2;
HXDLIN(1489)		if (this->rawVerts) {
HXLINE(1489)			_hx_tmp2 = hx::IsNotNull( this->glVerts );
            		}
            		else {
HXLINE(1489)			_hx_tmp2 = false;
            		}
HXDLIN(1489)		if (_hx_tmp2) {
HXLINE(1489)			_hx_tmp1 = (this->glVerts->length > (int)0);
            		}
            		else {
HXLINE(1489)			_hx_tmp1 = false;
            		}
HXDLIN(1489)		if (!(_hx_tmp1)) {
HXLINE(1489)			_hx_tmp = (this->verts->length > (int)0);
            		}
            		else {
HXLINE(1489)			_hx_tmp = true;
            		}
HXDLIN(1489)		if (_hx_tmp) {
HXLINE(1491)			Bool _hx_tmp3 = !(this->rawVerts);
HXDLIN(1491)			if (_hx_tmp3) {
HXLINE(1491)				HX_VARI( ::cpp::VirtualArray,array) = this->verts;
HXDLIN(1491)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1491)				Bool _hx_tmp4 = hx::IsNotNull( array );
HXDLIN(1491)				if (_hx_tmp4) {
HXLINE(1491)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(1491)					_this->byteOffset = (int)0;
HXDLIN(1491)					_this->length = array->get_length();
HXDLIN(1491)					Int _hx_tmp5 = (_this->length * _this->bytesPerElement);
HXDLIN(1491)					_this->byteLength = _hx_tmp5;
HXDLIN(1491)					Int byteLength = _this->byteLength;
HXDLIN(1491)					HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(1491)					_this->buffer = this2;
HXDLIN(1491)					_this->copyFromArray(array,null());
HXDLIN(1491)					this1 = _this;
            				}
            				else {
HXLINE(1491)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXDLIN(1491)				this->glVerts = this1;
            			}
HXLINE(1493)			this->vertexArray->buffer = this->glVerts->buffer;
HXLINE(1495)			Bool _hx_tmp6 = (this->glVerts->length <= this->lastVertsSize);
HXDLIN(1495)			if (_hx_tmp6) {
HXLINE(1496)				{
HXLINE(1496)					HX_VARI_NAME(  ::openfl::_internal::renderer::opengl::utils::VertexArray,_this1,"_this") = this->vertexArray;
HXDLIN(1496)					{
HXLINE(1496)						Int target = _this1->gl->ARRAY_BUFFER;
HXDLIN(1496)						HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = _this1->glBuffer;
HXDLIN(1496)						{
HXLINE(1496)							Int buffer1;
HXDLIN(1496)							Bool _hx_tmp7 = hx::IsNull( buffer );
HXDLIN(1496)							if (_hx_tmp7) {
HXLINE(1496)								buffer1 = (int)0;
            							}
            							else {
HXLINE(1496)								buffer1 = buffer->id;
            							}
HXDLIN(1496)							::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            						}
            					}
            				}
HXLINE(1497)				HX_VARI( Int,end) = (this->glLength * this->stride);
HXLINE(1498)				Bool _hx_tmp8;
HXDLIN(1498)				if ((this->glLength > (int)0)) {
HXLINE(1498)					_hx_tmp8 = (this->lastVertsSize > end);
            				}
            				else {
HXLINE(1498)					_hx_tmp8 = false;
            				}
HXDLIN(1498)				if (_hx_tmp8) {
HXLINE(1499)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,this3,"this") = this->glVerts;
HXDLIN(1499)					Bool _hx_tmp9 = hx::IsNull( end );
HXDLIN(1499)					HX_VARI( Int,byte_offset) = ((int)0 * this3->bytesPerElement);
HXDLIN(1499)					HX_VAR(  ::lime::utils::ArrayBufferView,view);
HXDLIN(1499)					HX_VARI( Int,_g) = this3->type;
HXDLIN(1499)					switch((int)(_g)){
            						case (int)0: {
HXLINE(1499)							HX_STACK_DO_THROW(HX_("subarray on a blank ArrayBufferView",39,87,fd,19));
            						}
            						break;
            						case (int)1: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer2,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN(1499)							Bool _hx_tmp10 = hx::IsNotNull( buffer2 );
HXDLIN(1499)							if (_hx_tmp10) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this2,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)1);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this2->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI( Int,bufferByteLength) = buffer2->length;
HXDLIN(1499)								HX_VARI( Int,newByteLength) = bufferByteLength;
HXDLIN(1499)								Bool _hx_tmp11 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp11) {
HXLINE(1499)									newByteLength = (bufferByteLength - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength,_this2->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength = (end * _this2->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength) > bufferByteLength)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this2->buffer = buffer2;
HXDLIN(1499)								_this2->byteOffset = byte_offset;
HXDLIN(1499)								_this2->byteLength = newByteLength;
HXDLIN(1499)								Float _hx_tmp12 = ((Float)newByteLength / (Float)_this2->bytesPerElement);
HXDLIN(1499)								_this2->length = ::Std_obj::_hx_int(_hx_tmp12);
HXDLIN(1499)								this4 = _this2;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int8Array",40,53,da,77));
            							}
HXDLIN(1499)							view = this4;
            						}
            						break;
            						case (int)2: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer3,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this5,"this");
HXDLIN(1499)							Bool _hx_tmp13 = hx::IsNotNull( buffer3 );
HXDLIN(1499)							if (_hx_tmp13) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this3,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)2);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this3->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength1,"bufferByteLength") = buffer3->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength1,"newByteLength") = bufferByteLength1;
HXDLIN(1499)								Bool _hx_tmp14 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp14) {
HXLINE(1499)									newByteLength1 = (bufferByteLength1 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength1,_this3->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength1 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength1 = (end * _this3->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength1) > bufferByteLength1)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this3->buffer = buffer3;
HXDLIN(1499)								_this3->byteOffset = byte_offset;
HXDLIN(1499)								_this3->byteLength = newByteLength1;
HXDLIN(1499)								Float _hx_tmp15 = ((Float)newByteLength1 / (Float)_this3->bytesPerElement);
HXDLIN(1499)								_this3->length = ::Std_obj::_hx_int(_hx_tmp15);
HXDLIN(1499)								this5 = _this3;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int16Array",95,b2,95,a7));
            							}
HXDLIN(1499)							view = this5;
            						}
            						break;
            						case (int)3: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer4,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this6,"this");
HXDLIN(1499)							Bool _hx_tmp16 = hx::IsNotNull( buffer4 );
HXDLIN(1499)							if (_hx_tmp16) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this4,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)3);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this4->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength2,"bufferByteLength") = buffer4->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength2,"newByteLength") = bufferByteLength2;
HXDLIN(1499)								Bool _hx_tmp17 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp17) {
HXLINE(1499)									newByteLength2 = (bufferByteLength2 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength2,_this4->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength2 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength2 = (end * _this4->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength2) > bufferByteLength2)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this4->buffer = buffer4;
HXDLIN(1499)								_this4->byteOffset = byte_offset;
HXDLIN(1499)								_this4->byteLength = newByteLength2;
HXDLIN(1499)								Float _hx_tmp18 = ((Float)newByteLength2 / (Float)_this4->bytesPerElement);
HXDLIN(1499)								_this4->length = ::Std_obj::_hx_int(_hx_tmp18);
HXDLIN(1499)								this6 = _this4;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Int32Array",9b,2e,53,61));
            							}
HXDLIN(1499)							view = this6;
            						}
            						break;
            						case (int)4: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer5,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this7,"this");
HXDLIN(1499)							Bool _hx_tmp19 = hx::IsNotNull( buffer5 );
HXDLIN(1499)							if (_hx_tmp19) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this5,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this5->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength3,"bufferByteLength") = buffer5->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength3,"newByteLength") = bufferByteLength3;
HXDLIN(1499)								Bool _hx_tmp20 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp20) {
HXLINE(1499)									newByteLength3 = (bufferByteLength3 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength3,_this5->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength3 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength3 = (end * _this5->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength3) > bufferByteLength3)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this5->buffer = buffer5;
HXDLIN(1499)								_this5->byteOffset = byte_offset;
HXDLIN(1499)								_this5->byteLength = newByteLength3;
HXDLIN(1499)								Float _hx_tmp21 = ((Float)newByteLength3 / (Float)_this5->bytesPerElement);
HXDLIN(1499)								_this5->length = ::Std_obj::_hx_int(_hx_tmp21);
HXDLIN(1499)								this7 = _this5;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            							}
HXDLIN(1499)							view = this7;
            						}
            						break;
            						case (int)5: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer6,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this8,"this");
HXDLIN(1499)							Bool _hx_tmp22 = hx::IsNotNull( buffer6 );
HXDLIN(1499)							if (_hx_tmp22) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this6,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)5);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this6->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength4,"bufferByteLength") = buffer6->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength4,"newByteLength") = bufferByteLength4;
HXDLIN(1499)								Bool _hx_tmp23 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp23) {
HXLINE(1499)									newByteLength4 = (bufferByteLength4 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength4,_this6->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength4 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength4 = (end * _this6->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength4) > bufferByteLength4)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this6->buffer = buffer6;
HXDLIN(1499)								_this6->byteOffset = byte_offset;
HXDLIN(1499)								_this6->byteLength = newByteLength4;
HXDLIN(1499)								Float _hx_tmp24 = ((Float)newByteLength4 / (Float)_this6->bytesPerElement);
HXDLIN(1499)								_this6->length = ::Std_obj::_hx_int(_hx_tmp24);
HXDLIN(1499)								this8 = _this6;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8ClampedArray",6d,2a,7c,f9));
            							}
HXDLIN(1499)							view = this8;
            						}
            						break;
            						case (int)6: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer7,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this9,"this");
HXDLIN(1499)							Bool _hx_tmp25 = hx::IsNotNull( buffer7 );
HXDLIN(1499)							if (_hx_tmp25) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this7,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this7->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength5,"bufferByteLength") = buffer7->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength5,"newByteLength") = bufferByteLength5;
HXDLIN(1499)								Bool _hx_tmp26 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp26) {
HXLINE(1499)									newByteLength5 = (bufferByteLength5 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength5,_this7->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength5 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength5 = (end * _this7->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength5) > bufferByteLength5)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this7->buffer = buffer7;
HXDLIN(1499)								_this7->byteOffset = byte_offset;
HXDLIN(1499)								_this7->byteLength = newByteLength5;
HXDLIN(1499)								Float _hx_tmp27 = ((Float)newByteLength5 / (Float)_this7->bytesPerElement);
HXDLIN(1499)								_this7->length = ::Std_obj::_hx_int(_hx_tmp27);
HXDLIN(1499)								this9 = _this7;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            							}
HXDLIN(1499)							view = this9;
            						}
            						break;
            						case (int)7: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer8,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this10,"this");
HXDLIN(1499)							Bool _hx_tmp28 = hx::IsNotNull( buffer8 );
HXDLIN(1499)							if (_hx_tmp28) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this8,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)7);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this8->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength6,"bufferByteLength") = buffer8->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength6,"newByteLength") = bufferByteLength6;
HXDLIN(1499)								Bool _hx_tmp29 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp29) {
HXLINE(1499)									newByteLength6 = (bufferByteLength6 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength6,_this8->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength6 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength6 = (end * _this8->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength6) > bufferByteLength6)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this8->buffer = buffer8;
HXDLIN(1499)								_this8->byteOffset = byte_offset;
HXDLIN(1499)								_this8->byteLength = newByteLength6;
HXDLIN(1499)								Float _hx_tmp30 = ((Float)newByteLength6 / (Float)_this8->bytesPerElement);
HXDLIN(1499)								_this8->length = ::Std_obj::_hx_int(_hx_tmp30);
HXDLIN(1499)								this10 = _this8;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            							}
HXDLIN(1499)							view = this10;
            						}
            						break;
            						case (int)8: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer9,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this11,"this");
HXDLIN(1499)							Bool _hx_tmp31 = hx::IsNotNull( buffer9 );
HXDLIN(1499)							if (_hx_tmp31) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this9,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this9->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength7,"bufferByteLength") = buffer9->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength7,"newByteLength") = bufferByteLength7;
HXDLIN(1499)								Bool _hx_tmp32 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp32) {
HXLINE(1499)									newByteLength7 = (bufferByteLength7 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength7,_this9->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength7 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength7 = (end * _this9->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength7) > bufferByteLength7)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this9->buffer = buffer9;
HXDLIN(1499)								_this9->byteOffset = byte_offset;
HXDLIN(1499)								_this9->byteLength = newByteLength7;
HXDLIN(1499)								Float _hx_tmp33 = ((Float)newByteLength7 / (Float)_this9->bytesPerElement);
HXDLIN(1499)								_this9->length = ::Std_obj::_hx_int(_hx_tmp33);
HXDLIN(1499)								this11 = _this9;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN(1499)							view = this11;
            						}
            						break;
            						case (int)9: {
HXLINE(1499)							HX_VARI_NAME(  ::haxe::io::Bytes,buffer10,"buffer") = this3->buffer;
HXDLIN(1499)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this12,"this");
HXDLIN(1499)							Bool _hx_tmp34 = hx::IsNotNull( buffer10 );
HXDLIN(1499)							if (_hx_tmp34) {
HXLINE(1499)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this10,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)9);
HXDLIN(1499)								if ((byte_offset < (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								if ((hx::Mod(byte_offset,_this10->bytesPerElement) != (int)0)) {
HXLINE(1499)									HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            								}
HXDLIN(1499)								HX_VARI_NAME( Int,bufferByteLength8,"bufferByteLength") = buffer10->length;
HXDLIN(1499)								HX_VARI_NAME( Int,newByteLength8,"newByteLength") = bufferByteLength8;
HXDLIN(1499)								Bool _hx_tmp35 = hx::IsNull( end );
HXDLIN(1499)								if (_hx_tmp35) {
HXLINE(1499)									newByteLength8 = (bufferByteLength8 - byte_offset);
HXDLIN(1499)									if ((hx::Mod(bufferByteLength8,_this10->bytesPerElement) != (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
HXDLIN(1499)									if ((newByteLength8 < (int)0)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
            								else {
HXLINE(1499)									newByteLength8 = (end * _this10->bytesPerElement);
HXDLIN(1499)									if (((byte_offset + newByteLength8) > bufferByteLength8)) {
HXLINE(1499)										HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            									}
            								}
HXDLIN(1499)								_this10->buffer = buffer10;
HXDLIN(1499)								_this10->byteOffset = byte_offset;
HXDLIN(1499)								_this10->byteLength = newByteLength8;
HXDLIN(1499)								Float _hx_tmp36 = ((Float)newByteLength8 / (Float)_this10->bytesPerElement);
HXDLIN(1499)								_this10->length = ::Std_obj::_hx_int(_hx_tmp36);
HXDLIN(1499)								this12 = _this10;
            							}
            							else {
HXLINE(1499)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float64Array",8f,de,6b,1e));
            							}
HXDLIN(1499)							view = this12;
            						}
            						break;
            					}
HXLINE(1500)					this->vertexArray->upload(view);
            				}
            				else {
HXLINE(1502)					this->vertexArray->upload(this->glVerts);
            				}
            			}
            			else {
HXLINE(1505)				this->vertexArray->setContext(this->gl,this->glVerts);
HXLINE(1506)				this->lastVertsSize = this->glVerts->length;
            			}
            		}
HXLINE(1512)		Bool _hx_tmp37;
HXDLIN(1512)		if ((this->glLength == (int)0)) {
HXLINE(1512)			Bool _hx_tmp38;
HXDLIN(1512)			Bool _hx_tmp39;
HXDLIN(1512)			if (this->rawIndices) {
HXLINE(1512)				_hx_tmp39 = hx::IsNotNull( this->glIndices );
            			}
            			else {
HXLINE(1512)				_hx_tmp39 = false;
            			}
HXDLIN(1512)			if (_hx_tmp39) {
HXLINE(1512)				_hx_tmp38 = (this->glIndices->length > (int)0);
            			}
            			else {
HXLINE(1512)				_hx_tmp38 = false;
            			}
HXDLIN(1512)			if (!(_hx_tmp38)) {
HXLINE(1512)				_hx_tmp37 = (this->indices->length > (int)0);
            			}
            			else {
HXLINE(1512)				_hx_tmp37 = true;
            			}
            		}
            		else {
HXLINE(1512)			_hx_tmp37 = false;
            		}
HXDLIN(1512)		if (_hx_tmp37) {
HXLINE(1514)			Bool _hx_tmp40 = hx::IsNull( this->indexBuffer );
HXDLIN(1514)			if (_hx_tmp40) {
HXLINE(1515)				Int _hx_tmp41 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(1515)				Int _hx_tmp42 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN(1515)				this->indexBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp41,_hx_tmp42);
            			}
HXLINE(1518)			Bool _hx_tmp43 = !(this->rawIndices);
HXDLIN(1518)			if (_hx_tmp43) {
HXLINE(1518)				HX_VARI_NAME( ::cpp::VirtualArray,array1,"array") = this->indices;
HXDLIN(1518)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this13,"this");
HXDLIN(1518)				Bool _hx_tmp44 = hx::IsNotNull( array1 );
HXDLIN(1518)				if (_hx_tmp44) {
HXLINE(1518)					HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this11,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)6);
HXDLIN(1518)					_this11->byteOffset = (int)0;
HXDLIN(1518)					_this11->length = array1->get_length();
HXDLIN(1518)					Int _hx_tmp45 = (_this11->length * _this11->bytesPerElement);
HXDLIN(1518)					_this11->byteLength = _hx_tmp45;
HXDLIN(1518)					Int byteLength1 = _this11->byteLength;
HXDLIN(1518)					HX_VARI_NAME(  ::haxe::io::Bytes,this14,"this") = ::haxe::io::Bytes_obj::alloc(byteLength1);
HXDLIN(1518)					_this11->buffer = this14;
HXDLIN(1518)					_this11->copyFromArray(array1,null());
HXDLIN(1518)					this13 = _this11;
            				}
            				else {
HXLINE(1518)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            				}
HXDLIN(1518)				this->glIndices = this13;
            			}
HXLINE(1519)			{
HXLINE(1519)				Int target1 = this->gl->ELEMENT_ARRAY_BUFFER;
HXDLIN(1519)				HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer11,"buffer") = this->indexBuffer;
HXDLIN(1519)				{
HXLINE(1519)					Int buffer12;
HXDLIN(1519)					Bool _hx_tmp46 = hx::IsNull( buffer11 );
HXDLIN(1519)					if (_hx_tmp46) {
HXLINE(1519)						buffer12 = (int)0;
            					}
            					else {
HXLINE(1519)						buffer12 = buffer11->id;
            					}
HXDLIN(1519)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target1,buffer12);
            				}
            			}
HXLINE(1520)			{
HXLINE(1520)				Int target2 = this->gl->ELEMENT_ARRAY_BUFFER;
HXDLIN(1520)				HX_VARI(  ::lime::utils::ArrayBufferView,data) = this->glIndices;
HXDLIN(1520)				Int usage = this->gl->STREAM_DRAW;
HXDLIN(1520)				{
HXLINE(1520)					Int byteOffset = data->byteOffset;
HXDLIN(1520)					Int size = data->byteLength;
HXDLIN(1520)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target2,hx::DynamicPtr(data->buffer),byteOffset,size,usage);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLBucketData_obj,upload,(void))


GLBucketData_obj::GLBucketData_obj()
{
}

void GLBucketData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLBucketData);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(drawMode,"drawMode");
	HX_MARK_MEMBER_NAME(glLength,"glLength");
	HX_MARK_MEMBER_NAME(glStart,"glStart");
	HX_MARK_MEMBER_NAME(vertexArray,"vertexArray");
	HX_MARK_MEMBER_NAME(glVerts,"glVerts");
	HX_MARK_MEMBER_NAME(lastVertsSize,"lastVertsSize");
	HX_MARK_MEMBER_NAME(verts,"verts");
	HX_MARK_MEMBER_NAME(rawVerts,"rawVerts");
	HX_MARK_MEMBER_NAME(stride,"stride");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(glIndices,"glIndices");
	HX_MARK_MEMBER_NAME(indices,"indices");
	HX_MARK_MEMBER_NAME(rawIndices,"rawIndices");
	HX_MARK_MEMBER_NAME(available,"available");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_END_CLASS();
}

void GLBucketData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(drawMode,"drawMode");
	HX_VISIT_MEMBER_NAME(glLength,"glLength");
	HX_VISIT_MEMBER_NAME(glStart,"glStart");
	HX_VISIT_MEMBER_NAME(vertexArray,"vertexArray");
	HX_VISIT_MEMBER_NAME(glVerts,"glVerts");
	HX_VISIT_MEMBER_NAME(lastVertsSize,"lastVertsSize");
	HX_VISIT_MEMBER_NAME(verts,"verts");
	HX_VISIT_MEMBER_NAME(rawVerts,"rawVerts");
	HX_VISIT_MEMBER_NAME(stride,"stride");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(glIndices,"glIndices");
	HX_VISIT_MEMBER_NAME(indices,"indices");
	HX_VISIT_MEMBER_NAME(rawIndices,"rawIndices");
	HX_VISIT_MEMBER_NAME(available,"available");
	HX_VISIT_MEMBER_NAME(parent,"parent");
}

hx::Val GLBucketData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"verts") ) { return hx::Val( verts); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"stride") ) { return hx::Val( stride); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"glStart") ) { return hx::Val( glStart); }
		if (HX_FIELD_EQ(inName,"glVerts") ) { return hx::Val( glVerts); }
		if (HX_FIELD_EQ(inName,"indices") ) { return hx::Val( indices); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawMode") ) { return hx::Val( drawMode); }
		if (HX_FIELD_EQ(inName,"glLength") ) { return hx::Val( glLength); }
		if (HX_FIELD_EQ(inName,"rawVerts") ) { return hx::Val( rawVerts); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glIndices") ) { return hx::Val( glIndices); }
		if (HX_FIELD_EQ(inName,"available") ) { return hx::Val( available); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rawIndices") ) { return hx::Val( rawIndices); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vertexArray") ) { return hx::Val( vertexArray); }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { return hx::Val( indexBuffer); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lastVertsSize") ) { return hx::Val( lastVertsSize); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLBucketData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::hx::EnumBase >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"verts") ) { verts=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"stride") ) { stride=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::_internal::renderer::opengl::utils::GLBucket >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"glStart") ) { glStart=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glVerts") ) { glVerts=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indices") ) { indices=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawMode") ) { drawMode=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glLength") ) { glLength=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rawVerts") ) { rawVerts=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"glIndices") ) { glIndices=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		if (HX_FIELD_EQ(inName,"available") ) { available=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"rawIndices") ) { rawIndices=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vertexArray") ) { vertexArray=inValue.Cast<  ::openfl::_internal::renderer::opengl::utils::VertexArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lastVertsSize") ) { lastVertsSize=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLBucketData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("drawMode","\x87","\x7d","\xca","\x5c"));
	outFields->push(HX_HCSTRING("glLength","\xeb","\x0c","\xf6","\x61"));
	outFields->push(HX_HCSTRING("glStart","\xfd","\xa3","\xe6","\x00"));
	outFields->push(HX_HCSTRING("vertexArray","\x95","\x37","\xcb","\x39"));
	outFields->push(HX_HCSTRING("glVerts","\x3d","\x16","\x3d","\xb1"));
	outFields->push(HX_HCSTRING("lastVertsSize","\x4d","\x87","\x9c","\x1e"));
	outFields->push(HX_HCSTRING("verts","\xa2","\xe6","\x61","\x34"));
	outFields->push(HX_HCSTRING("rawVerts","\x9a","\x17","\x20","\x96"));
	outFields->push(HX_HCSTRING("stride","\x19","\x20","\x30","\x11"));
	outFields->push(HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"));
	outFields->push(HX_HCSTRING("glIndices","\x82","\xd3","\x0e","\xb1"));
	outFields->push(HX_HCSTRING("indices","\x27","\x47","\x54","\xe3"));
	outFields->push(HX_HCSTRING("rawIndices","\x1f","\xa6","\xba","\xd5"));
	outFields->push(HX_HCSTRING("available","\xc9","\x59","\x83","\x77"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLBucketData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::BucketDataType*/ ,(int)offsetof(GLBucketData_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(GLBucketData_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsInt,(int)offsetof(GLBucketData_obj,drawMode),HX_HCSTRING("drawMode","\x87","\x7d","\xca","\x5c")},
	{hx::fsInt,(int)offsetof(GLBucketData_obj,glLength),HX_HCSTRING("glLength","\xeb","\x0c","\xf6","\x61")},
	{hx::fsInt,(int)offsetof(GLBucketData_obj,glStart),HX_HCSTRING("glStart","\xfd","\xa3","\xe6","\x00")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::VertexArray*/ ,(int)offsetof(GLBucketData_obj,vertexArray),HX_HCSTRING("vertexArray","\x95","\x37","\xcb","\x39")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLBucketData_obj,glVerts),HX_HCSTRING("glVerts","\x3d","\x16","\x3d","\xb1")},
	{hx::fsInt,(int)offsetof(GLBucketData_obj,lastVertsSize),HX_HCSTRING("lastVertsSize","\x4d","\x87","\x9c","\x1e")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(GLBucketData_obj,verts),HX_HCSTRING("verts","\xa2","\xe6","\x61","\x34")},
	{hx::fsBool,(int)offsetof(GLBucketData_obj,rawVerts),HX_HCSTRING("rawVerts","\x9a","\x17","\x20","\x96")},
	{hx::fsInt,(int)offsetof(GLBucketData_obj,stride),HX_HCSTRING("stride","\x19","\x20","\x30","\x11")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(GLBucketData_obj,indexBuffer),HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLBucketData_obj,glIndices),HX_HCSTRING("glIndices","\x82","\xd3","\x0e","\xb1")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(GLBucketData_obj,indices),HX_HCSTRING("indices","\x27","\x47","\x54","\xe3")},
	{hx::fsBool,(int)offsetof(GLBucketData_obj,rawIndices),HX_HCSTRING("rawIndices","\x1f","\xa6","\xba","\xd5")},
	{hx::fsBool,(int)offsetof(GLBucketData_obj,available),HX_HCSTRING("available","\xc9","\x59","\x83","\x77")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::GLBucket*/ ,(int)offsetof(GLBucketData_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLBucketData_obj_sStaticStorageInfo = 0;
#endif

static ::String GLBucketData_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("drawMode","\x87","\x7d","\xca","\x5c"),
	HX_HCSTRING("glLength","\xeb","\x0c","\xf6","\x61"),
	HX_HCSTRING("glStart","\xfd","\xa3","\xe6","\x00"),
	HX_HCSTRING("vertexArray","\x95","\x37","\xcb","\x39"),
	HX_HCSTRING("glVerts","\x3d","\x16","\x3d","\xb1"),
	HX_HCSTRING("lastVertsSize","\x4d","\x87","\x9c","\x1e"),
	HX_HCSTRING("verts","\xa2","\xe6","\x61","\x34"),
	HX_HCSTRING("rawVerts","\x9a","\x17","\x20","\x96"),
	HX_HCSTRING("stride","\x19","\x20","\x30","\x11"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("glIndices","\x82","\xd3","\x0e","\xb1"),
	HX_HCSTRING("indices","\x27","\x47","\x54","\xe3"),
	HX_HCSTRING("rawIndices","\x1f","\xa6","\xba","\xd5"),
	HX_HCSTRING("available","\xc9","\x59","\x83","\x77"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	::String(null()) };

static void GLBucketData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLBucketData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLBucketData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLBucketData_obj::__mClass,"__mClass");
};

#endif

hx::Class GLBucketData_obj::__mClass;

void GLBucketData_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.GLBucketData","\x7a","\x3c","\x65","\x4c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLBucketData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLBucketData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLBucketData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLBucketData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLBucketData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLBucketData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
