// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLGraphicsData
#include <openfl/_internal/renderer/opengl/utils/GLGraphicsData.h>
#endif

static const Float _hx_array_data_0[] = {
	1.0,1.0,1.0,
};
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void GLGraphicsData_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLGraphicsData","new",0xf5d27d4d,"openfl._internal.renderer.opengl.utils.GLGraphicsData.new","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1540,0xd295150c)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(1554)		this->indices = ::Array_obj< Int >::__new(0);
HXLINE(1550)		this->data = ::Array_obj< Float >::__new(0);
HXLINE(1548)		this->lastIndex = (int)0;
HXLINE(1547)		this->mode = (int)0;
HXLINE(1546)		this->dirty = true;
HXLINE(1545)		this->alpha = ((Float)1.0);
HXLINE(1544)		this->tint = ::Array_obj< Float >::fromData( _hx_array_data_0,3);
HXLINE(1561)		this->gl = gl;
HXLINE(1563)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(1563)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN(1563)		this->dataBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE(1564)		Int _hx_tmp2 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(1564)		Int _hx_tmp3 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN(1564)		this->indexBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp2,_hx_tmp3);
            	}

Dynamic GLGraphicsData_obj::__CreateEmpty() { return new GLGraphicsData_obj; }

hx::ObjectPtr< GLGraphicsData_obj > GLGraphicsData_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< GLGraphicsData_obj > _hx_result = new GLGraphicsData_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic GLGraphicsData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GLGraphicsData_obj > _hx_result = new GLGraphicsData_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void GLGraphicsData_obj::reset(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLGraphicsData","reset",0x3afdcbfc,"openfl._internal.renderer.opengl.utils.GLGraphicsData.reset","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1569,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1571)		this->data = ::Array_obj< Float >::__new(0);
HXLINE(1572)		this->indices = ::Array_obj< Int >::__new(0);
HXLINE(1573)		this->lastIndex = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLGraphicsData_obj,reset,(void))

void GLGraphicsData_obj::upload(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GLGraphicsData","upload",0xe6f62f34,"openfl._internal.renderer.opengl.utils.GLGraphicsData.upload","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1578,0xd295150c)
            	HX_STACK_THIS(this)
HXLINE(1580)		HX_VARI(  ::Dynamic,elements) = this->data;
HXDLIN(1580)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1580)		Bool _hx_tmp = hx::IsNotNull( elements );
HXDLIN(1580)		if (_hx_tmp) {
HXLINE(1580)			this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)8);
            		}
            		else {
HXLINE(1580)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(1580)		this->glData = this1;
HXLINE(1581)		{
HXLINE(1581)			Int target = this->gl->ARRAY_BUFFER;
HXDLIN(1581)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->dataBuffer;
HXDLIN(1581)			{
HXLINE(1581)				Int buffer1;
HXDLIN(1581)				Bool _hx_tmp1 = hx::IsNull( buffer );
HXDLIN(1581)				if (_hx_tmp1) {
HXLINE(1581)					buffer1 = (int)0;
            				}
            				else {
HXLINE(1581)					buffer1 = buffer->id;
            				}
HXDLIN(1581)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            			}
            		}
HXLINE(1582)		{
HXLINE(1582)			Int target1 = this->gl->ARRAY_BUFFER;
HXDLIN(1582)			HX_VARI(  ::lime::utils::ArrayBufferView,data) = this->glData;
HXDLIN(1582)			Int usage = this->gl->STATIC_DRAW;
HXDLIN(1582)			{
HXLINE(1582)				Int byteOffset = data->byteOffset;
HXDLIN(1582)				Int size = data->byteLength;
HXDLIN(1582)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target1,hx::DynamicPtr(data->buffer),byteOffset,size,usage);
            			}
            		}
HXLINE(1585)		HX_VARI_NAME(  ::Dynamic,elements1,"elements") = this->indices;
HXDLIN(1585)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this2,"this");
HXDLIN(1585)		Bool _hx_tmp2 = hx::IsNotNull( elements1 );
HXDLIN(1585)		if (_hx_tmp2) {
HXLINE(1585)			this2 =  ::lime::utils::ArrayBufferView_obj::__new(elements1,(int)6);
            		}
            		else {
HXLINE(1585)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint16Array",ea,c2,7c,de));
            		}
HXDLIN(1585)		this->glIndices = this2;
HXLINE(1586)		{
HXLINE(1586)			Int target2 = this->gl->ELEMENT_ARRAY_BUFFER;
HXDLIN(1586)			HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer2,"buffer") = this->indexBuffer;
HXDLIN(1586)			{
HXLINE(1586)				Int buffer3;
HXDLIN(1586)				Bool _hx_tmp3 = hx::IsNull( buffer2 );
HXDLIN(1586)				if (_hx_tmp3) {
HXLINE(1586)					buffer3 = (int)0;
            				}
            				else {
HXLINE(1586)					buffer3 = buffer2->id;
            				}
HXDLIN(1586)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target2,buffer3);
            			}
            		}
HXLINE(1587)		{
HXLINE(1587)			Int target3 = this->gl->ELEMENT_ARRAY_BUFFER;
HXDLIN(1587)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data1,"data") = this->glIndices;
HXDLIN(1587)			Int usage1 = this->gl->STATIC_DRAW;
HXDLIN(1587)			{
HXLINE(1587)				Int byteOffset1 = data1->byteOffset;
HXDLIN(1587)				Int size1 = data1->byteLength;
HXDLIN(1587)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target3,hx::DynamicPtr(data1->buffer),byteOffset1,size1,usage1);
            			}
            		}
HXLINE(1589)		this->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GLGraphicsData_obj,upload,(void))


GLGraphicsData_obj::GLGraphicsData_obj()
{
}

void GLGraphicsData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GLGraphicsData);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(tint,"tint");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(dirty,"dirty");
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_MEMBER_NAME(lastIndex,"lastIndex");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(glData,"glData");
	HX_MARK_MEMBER_NAME(dataBuffer,"dataBuffer");
	HX_MARK_MEMBER_NAME(indices,"indices");
	HX_MARK_MEMBER_NAME(glIndices,"glIndices");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_END_CLASS();
}

void GLGraphicsData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(tint,"tint");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(dirty,"dirty");
	HX_VISIT_MEMBER_NAME(mode,"mode");
	HX_VISIT_MEMBER_NAME(lastIndex,"lastIndex");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(glData,"glData");
	HX_VISIT_MEMBER_NAME(dataBuffer,"dataBuffer");
	HX_VISIT_MEMBER_NAME(indices,"indices");
	HX_VISIT_MEMBER_NAME(glIndices,"glIndices");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
}

hx::Val GLGraphicsData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tint") ) { return hx::Val( tint); }
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode); }
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { return hx::Val( alpha); }
		if (HX_FIELD_EQ(inName,"dirty") ) { return hx::Val( dirty); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"glData") ) { return hx::Val( glData); }
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indices") ) { return hx::Val( indices); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastIndex") ) { return hx::Val( lastIndex); }
		if (HX_FIELD_EQ(inName,"glIndices") ) { return hx::Val( glIndices); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataBuffer") ) { return hx::Val( dataBuffer); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { return hx::Val( indexBuffer); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GLGraphicsData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"tint") ) { tint=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dirty") ) { dirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"glData") ) { glData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"indices") ) { indices=inValue.Cast< ::Array< Int > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"lastIndex") ) { lastIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"glIndices") ) { glIndices=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"dataBuffer") ) { dataBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GLGraphicsData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("tint","\xfb","\xcc","\xfc","\x4c"));
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"));
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("lastIndex","\xdc","\xc8","\xc1","\x0a"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("glData","\xef","\x52","\x45","\x8b"));
	outFields->push(HX_HCSTRING("dataBuffer","\xca","\x82","\x36","\xbc"));
	outFields->push(HX_HCSTRING("indices","\x27","\x47","\x54","\xe3"));
	outFields->push(HX_HCSTRING("glIndices","\x82","\xd3","\x0e","\xb1"));
	outFields->push(HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GLGraphicsData_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(GLGraphicsData_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(GLGraphicsData_obj,tint),HX_HCSTRING("tint","\xfb","\xcc","\xfc","\x4c")},
	{hx::fsFloat,(int)offsetof(GLGraphicsData_obj,alpha),HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21")},
	{hx::fsBool,(int)offsetof(GLGraphicsData_obj,dirty),HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9")},
	{hx::fsInt,(int)offsetof(GLGraphicsData_obj,mode),HX_HCSTRING("mode","\x63","\xd3","\x60","\x48")},
	{hx::fsInt,(int)offsetof(GLGraphicsData_obj,lastIndex),HX_HCSTRING("lastIndex","\xdc","\xc8","\xc1","\x0a")},
	{hx::fsObject /*Array< Float >*/ ,(int)offsetof(GLGraphicsData_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLGraphicsData_obj,glData),HX_HCSTRING("glData","\xef","\x52","\x45","\x8b")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(GLGraphicsData_obj,dataBuffer),HX_HCSTRING("dataBuffer","\xca","\x82","\x36","\xbc")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(GLGraphicsData_obj,indices),HX_HCSTRING("indices","\x27","\x47","\x54","\xe3")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(GLGraphicsData_obj,glIndices),HX_HCSTRING("glIndices","\x82","\xd3","\x0e","\xb1")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(GLGraphicsData_obj,indexBuffer),HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *GLGraphicsData_obj_sStaticStorageInfo = 0;
#endif

static ::String GLGraphicsData_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("tint","\xfb","\xcc","\xfc","\x4c"),
	HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"),
	HX_HCSTRING("dirty","\x12","\x50","\xd0","\xd9"),
	HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"),
	HX_HCSTRING("lastIndex","\xdc","\xc8","\xc1","\x0a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("glData","\xef","\x52","\x45","\x8b"),
	HX_HCSTRING("dataBuffer","\xca","\x82","\x36","\xbc"),
	HX_HCSTRING("indices","\x27","\x47","\x54","\xe3"),
	HX_HCSTRING("glIndices","\x82","\xd3","\x0e","\xb1"),
	HX_HCSTRING("indexBuffer","\xb2","\x65","\xa6","\xf5"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	::String(null()) };

static void GLGraphicsData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GLGraphicsData_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GLGraphicsData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GLGraphicsData_obj::__mClass,"__mClass");
};

#endif

hx::Class GLGraphicsData_obj::__mClass;

void GLGraphicsData_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.GLGraphicsData","\xdb","\xd2","\x84","\x06");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GLGraphicsData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GLGraphicsData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GLGraphicsData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GLGraphicsData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GLGraphicsData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GLGraphicsData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
