// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_TAError
#include <lime/utils/TAError.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_GraphicsPaths
#include <openfl/_internal/renderer/GraphicsPaths.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_PolyK
#include <openfl/_internal/renderer/PolyK.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_DrawTrianglesShader
#include <openfl/_internal/renderer/opengl/shaders2/DrawTrianglesShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_FillShader
#include <openfl/_internal/renderer/opengl/shaders2/FillShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_PatternFillShader
#include <openfl/_internal/renderer/opengl/shaders2/PatternFillShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_PrimitiveShader
#include <openfl/_internal/renderer/opengl/shaders2/PrimitiveShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BlendModeManager
#include <openfl/_internal/renderer/opengl/utils/BlendModeManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BucketDataType
#include <openfl/_internal/renderer/opengl/utils/BucketDataType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_BucketMode
#include <openfl/_internal/renderer/opengl/utils/BucketMode.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_DrawPath
#include <openfl/_internal/renderer/opengl/utils/DrawPath.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_FillType
#include <openfl/_internal/renderer/opengl/utils/FillType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucket
#include <openfl/_internal/renderer/opengl/utils/GLBucket.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLBucketData
#include <openfl/_internal/renderer/opengl/utils/GLBucketData.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLGraphicsData
#include <openfl/_internal/renderer/opengl/utils/GLGraphicsData.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLStack
#include <openfl/_internal/renderer/opengl/utils/GLStack.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GraphicType
#include <openfl/_internal/renderer/opengl/utils/GraphicType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GraphicsRenderer
#include <openfl/_internal/renderer/opengl/utils/GraphicsRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_LineStyle
#include <openfl/_internal/renderer/opengl/utils/LineStyle.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_ShaderManager
#include <openfl/_internal/renderer/opengl/utils/ShaderManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_SpriteBatch
#include <openfl/_internal/renderer/opengl/utils/SpriteBatch.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_StencilManager
#include <openfl/_internal/renderer/opengl/utils/StencilManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexArray
#include <openfl/_internal/renderer/opengl/utils/VertexArray.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexAttribute
#include <openfl/_internal/renderer/opengl/utils/VertexAttribute.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

static const Float _hx_array_data_7[] = {
	(Float)1,(Float)1,(Float)1,
};
static const Int _hx_array_data_14[] = {
	(Int)1,(Int)1,(Int)1,(Int)1,
};
static const Float _hx_array_data_21[] = {
	(Float)1,(Float)1,(Float)1,
};
static const Float _hx_array_data_24[] = {
	(Float)1,(Float)1,(Float)1,
};
static const Float _hx_array_data_25[] = {
	(Float)1,(Float)1,(Float)1,(Float)1,
};
namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void GraphicsRenderer_obj::__construct() { }

Dynamic GraphicsRenderer_obj::__CreateEmpty() { return new GraphicsRenderer_obj; }

hx::ObjectPtr< GraphicsRenderer_obj > GraphicsRenderer_obj::__new()
{
	hx::ObjectPtr< GraphicsRenderer_obj > _hx_result = new GraphicsRenderer_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic GraphicsRenderer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GraphicsRenderer_obj > _hx_result = new GraphicsRenderer_obj();
	_hx_result->__construct();
	return _hx_result;
}

::Array< ::Dynamic> GraphicsRenderer_obj::fillVertexAttributes;

::Array< ::Dynamic> GraphicsRenderer_obj::drawTrianglesVertexAttributes;

::Array< ::Dynamic> GraphicsRenderer_obj::primitiveVertexAttributes;

::Array< ::Dynamic> GraphicsRenderer_obj::graphicsDataPool;

::Array< ::Dynamic> GraphicsRenderer_obj::bucketPool;

Float GraphicsRenderer_obj::SIN45;

Float GraphicsRenderer_obj::TAN22;

 ::openfl::geom::Point GraphicsRenderer_obj::objectPosition;

 ::openfl::geom::Rectangle GraphicsRenderer_obj::objectBounds;

 ::lime::graphics::opengl::GLBuffer GraphicsRenderer_obj::lastVertsBuffer;

::hx::EnumBase GraphicsRenderer_obj::lastBucketMode;

 ::lime::graphics::opengl::GLTexture GraphicsRenderer_obj::lastTexture;

Bool GraphicsRenderer_obj::lastTextureRepeat;

Bool GraphicsRenderer_obj::lastTextureSmooth;

 ::openfl::geom::Matrix GraphicsRenderer_obj::overrideMatrix;

void GraphicsRenderer_obj::buildCircle( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack,hx::Null< Bool >  __o_localCoords){
Bool localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildCircle",0x5396c8ff,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildCircle","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",79,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE(  80)		HX_VARI( ::Array< Float >,rectData) = path->points;
HXLINE(  82)		HX_VARI( Float,x) = rectData->__get((int)0);
HXLINE(  83)		HX_VARI( Float,y) = rectData->__get((int)1);
HXLINE(  84)		HX_VARI( Float,rx) = rectData->__get((int)2);
HXLINE(  85)		HX_VAR( Float,ry);
HXDLIN(  85)		if ((rectData->length == (int)3)) {
HXLINE(  85)			ry = rx;
            		}
            		else {
HXLINE(  85)			ry = rectData->__get((int)3);
            		}
HXLINE(  87)		if (hx::IsEq( path->type,::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Ellipse_dyn() )) {
HXLINE(  88)			hx::DivEq(rx,(int)2);
HXLINE(  89)			hx::DivEq(ry,(int)2);
HXLINE(  90)			hx::AddEq(x,rx);
HXLINE(  91)			hx::AddEq(y,ry);
            		}
HXLINE(  94)		if (localCoords) {
HXLINE(  95)			hx::SubEq(x,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE(  96)			hx::SubEq(y,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
            		}
HXLINE( 100)		HX_VARI( Float,seg) = ((Float)(::Math_obj::PI * (int)2) / (Float)(int)40);
HXLINE( 102)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
HXLINE( 103)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Fill_dyn());
HXLINE( 105)		Bool _hx_tmp = hx::IsNotNull( fill );
HXDLIN( 105)		if (_hx_tmp) {
HXLINE( 106)			HX_VARI( ::Array< Float >,verts) = fill->verts;
HXLINE( 107)			HX_VARI( ::Array< Int >,indices) = fill->indices;
HXLINE( 109)			Float _hx_tmp1 = ((Float)verts->length / (Float)(int)2);
HXDLIN( 109)			HX_VARI( Int,vertPos) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 111)			indices->push(vertPos);
HXLINE( 113)			{
HXLINE( 113)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 113)				while((_g1 < (int)41)){
HXLINE( 113)					HX_VARI( Int,i) = _g1++;
HXLINE( 115)					verts->push(x);
HXLINE( 116)					verts->push(y);
HXLINE( 118)					Float _hx_tmp2 = ::Math_obj::sin((seg * i));
HXDLIN( 118)					verts->push((x + (_hx_tmp2 * rx)));
HXLINE( 119)					Float _hx_tmp3 = ::Math_obj::cos((seg * i));
HXDLIN( 119)					verts->push((y + (_hx_tmp3 * ry)));
HXLINE( 121)					Int _hx_tmp4 = vertPos++;
HXDLIN( 121)					indices->push(_hx_tmp4);
HXLINE( 122)					Int _hx_tmp5 = vertPos++;
HXDLIN( 122)					indices->push(_hx_tmp5);
            				}
            			}
HXLINE( 126)			indices->push((vertPos - (int)1));
            		}
HXLINE( 131)		Bool _hx_tmp6 = (path->line->width > (int)0);
HXDLIN( 131)		if (_hx_tmp6) {
HXLINE( 133)			HX_VARI( ::Array< Float >,tempPoints) = path->points;
HXLINE( 134)			path->points = ::Array_obj< Float >::__new(0);
HXLINE( 136)			{
HXLINE( 136)				HX_VARI( ::Array< Float >,points) = path->points;
HXDLIN( 136)				HX_VARI_NAME( Float,seg1,"seg") = ((Float)(::Math_obj::PI * (int)2) / (Float)(int)40);
HXDLIN( 136)				{
HXLINE( 136)					HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 136)					while((_g11 < (int)41)){
HXLINE( 136)						HX_VARI_NAME( Int,i1,"i") = _g11++;
HXDLIN( 136)						Float _hx_tmp7 = ::Math_obj::sin((seg1 * i1));
HXDLIN( 136)						points->push((x + (_hx_tmp7 * rx)));
HXDLIN( 136)						Float _hx_tmp8 = ::Math_obj::cos((seg1 * i1));
HXDLIN( 136)						points->push((y + (_hx_tmp8 * ry)));
            					}
            				}
            			}
HXLINE( 138)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildLine(path,bucket,null());
HXLINE( 139)			path->points = tempPoints;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,buildCircle,(void))

void GraphicsRenderer_obj::buildComplexPoly( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack,hx::Null< Bool >  __o_localCoords){
Bool localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildComplexPoly",0xd9b80f4d,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildComplexPoly","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",145,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 147)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = null();
HXLINE( 149)		Bool _hx_tmp = (path->points->length >= (int)6);
HXDLIN( 149)		if (_hx_tmp) {
HXLINE( 150)			HX_VARI( ::Array< Float >,points) = path->points->copy();
HXLINE( 152)			if (localCoords) {
HXLINE( 153)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 153)				Float _hx_tmp1 = ((Float)points->length / (Float)(int)2);
HXDLIN( 153)				HX_VARI( Int,_g) = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 153)				while((_g1 < _g)){
HXLINE( 153)					HX_VARI( Int,i) = _g1++;
HXLINE( 154)					hx::SubEq(points[(i * (int)2)],::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 155)					hx::SubEq(points[((i * (int)2) + (int)1)],::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
            				}
            			}
HXLINE( 160)			bucket = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
HXLINE( 161)			HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Fill_dyn());
HXLINE( 162)			fill->drawMode = glStack->gl->TRIANGLE_FAN;
HXLINE( 163)			fill->verts = points;
HXLINE( 165)			HX_VARI( ::Array< Int >,indices) = fill->indices;
HXLINE( 166)			Float _hx_tmp2 = ((Float)points->length / (Float)(int)2);
HXDLIN( 166)			HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE( 167)			{
HXLINE( 167)				HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 167)				while((_g11 < length)){
HXLINE( 167)					HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 169)					indices->push(i1);
            				}
            			}
            		}
HXLINE( 174)		Bool _hx_tmp3 = (path->line->width > (int)0);
HXDLIN( 174)		if (_hx_tmp3) {
HXLINE( 176)			Bool _hx_tmp4 = hx::IsNull( bucket );
HXDLIN( 176)			if (_hx_tmp4) {
HXLINE( 177)				bucket = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
            			}
HXLINE( 179)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildLine(path,bucket,localCoords);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,buildComplexPoly,(void))

void GraphicsRenderer_obj::buildLine( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLBucket bucket,hx::Null< Bool >  __o_localCoords){
Bool localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildLine",0xe6638523,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildLine","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",184,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(bucket,"bucket")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 186)		HX_VARI( ::Array< Float >,points) = path->points;
HXLINE( 187)		if ((points->length == (int)0)) {
HXLINE( 187)			return;
            		}
HXLINE( 189)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,line) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Line_dyn());
HXLINE( 191)		if (localCoords) {
HXLINE( 192)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 192)			Float _hx_tmp = ((Float)points->length / (Float)(int)2);
HXDLIN( 192)			HX_VARI( Int,_g) = ::Std_obj::_hx_int(_hx_tmp);
HXDLIN( 192)			while((_g1 < _g)){
HXLINE( 192)				HX_VARI( Int,i) = _g1++;
HXLINE( 193)				hx::SubEq(points[(i * (int)2)],::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 194)				hx::SubEq(points[((i * (int)2) + (int)1)],::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
            			}
            		}
HXLINE( 211)		HX_VARI(  ::openfl::geom::Point,firstPoint) =  ::openfl::geom::Point_obj::__new(points->__get((int)0),points->__get((int)1));
HXLINE( 212)		Int _hx_tmp1 = (points->length - (int)2);
HXDLIN( 212)		Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 212)		Float _hx_tmp3 = points->__get(_hx_tmp2);
HXDLIN( 212)		Int _hx_tmp4 = (points->length - (int)1);
HXDLIN( 212)		Int _hx_tmp5 = ::Std_obj::_hx_int(_hx_tmp4);
HXDLIN( 212)		HX_VARI(  ::openfl::geom::Point,lastPoint) =  ::openfl::geom::Point_obj::__new(_hx_tmp3,points->__get(_hx_tmp5));
HXLINE( 214)		Bool _hx_tmp6;
HXDLIN( 214)		if ((firstPoint->x == lastPoint->x)) {
HXLINE( 214)			_hx_tmp6 = (firstPoint->y == lastPoint->y);
            		}
            		else {
HXLINE( 214)			_hx_tmp6 = false;
            		}
HXDLIN( 214)		if (_hx_tmp6) {
HXLINE( 216)			points = points->copy();
HXLINE( 218)			points->pop();
HXLINE( 219)			points->pop();
HXLINE( 221)			Int _hx_tmp7 = (points->length - (int)2);
HXDLIN( 221)			Int _hx_tmp8 = ::Std_obj::_hx_int(_hx_tmp7);
HXDLIN( 221)			Float _hx_tmp9 = points->__get(_hx_tmp8);
HXDLIN( 221)			Int _hx_tmp10 = (points->length - (int)1);
HXDLIN( 221)			Int _hx_tmp11 = ::Std_obj::_hx_int(_hx_tmp10);
HXDLIN( 221)			lastPoint =  ::openfl::geom::Point_obj::__new(_hx_tmp9,points->__get(_hx_tmp11));
HXLINE( 223)			HX_VARI( Float,midPointX) = (lastPoint->x + ((firstPoint->x - lastPoint->x) * ((Float)0.5)));
HXLINE( 224)			HX_VARI( Float,midPointY) = (lastPoint->y + ((firstPoint->y - lastPoint->y) * ((Float)0.5)));
HXLINE( 226)			points->unshift(midPointY);
HXLINE( 227)			points->unshift(midPointX);
HXLINE( 228)			points->push(midPointX);
HXLINE( 229)			points->push(midPointY);
            		}
HXLINE( 233)		HX_VARI( ::Array< Float >,verts) = line->verts;
HXLINE( 234)		HX_VARI( ::Array< Int >,indices) = line->indices;
HXLINE( 235)		Float _hx_tmp12 = ((Float)points->length / (Float)(int)2);
HXDLIN( 235)		HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp12);
HXLINE( 236)		HX_VARI( Int,indexCount) = points->length;
HXLINE( 237)		Float _hx_tmp13 = ((Float)verts->length / (Float)(int)6);
HXDLIN( 237)		HX_VARI( Int,indexStart) = ::Std_obj::_hx_int(_hx_tmp13);
HXLINE( 239)		HX_VARI( Float,width) = ((Float)path->line->width / (Float)(int)2);
HXLINE( 241)		HX_VARI(  ::Dynamic,hex) = path->line->color;
HXDLIN( 241)		HX_VAR( ::Array< Float >,color);
HXDLIN( 241)		Bool _hx_tmp14 = hx::IsNull( hex );
HXDLIN( 241)		if (_hx_tmp14) {
HXLINE( 241)			color = ::Array_obj< Float >::fromData( _hx_array_data_7,3);
            		}
            		else {
HXLINE( 241)			color = ::Array_obj< Float >::__new(3)->init(0,((Float)((int)((int)hex >> (int)(int)16) & (int)(int)255) / (Float)(int)255))->init(1,((Float)((int)((int)hex >> (int)(int)8) & (int)(int)255) / (Float)(int)255))->init(2,((Float)((int)hex & (int)(int)255) / (Float)(int)255));
            		}
HXLINE( 242)		HX_VARI(  ::Dynamic,alpha) = path->line->alpha;
HXLINE( 243)		HX_VARI( Float,r) = color->__get((int)0);
HXLINE( 244)		HX_VARI( Float,g) = color->__get((int)1);
HXLINE( 245)		HX_VARI( Float,b) = color->__get((int)2);
HXLINE( 247)		HX_VAR( Float,px);
HXDLIN( 247)		HX_VAR( Float,py);
HXDLIN( 247)		HX_VAR( Float,p1x);
HXDLIN( 247)		HX_VAR( Float,p1y);
HXDLIN( 247)		HX_VAR( Float,p2x);
HXDLIN( 247)		HX_VAR( Float,p2y);
HXDLIN( 247)		HX_VAR( Float,p3x);
HXDLIN( 247)		HX_VAR( Float,p3y);
HXLINE( 248)		HX_VAR( Float,perpx);
HXDLIN( 248)		HX_VAR( Float,perpy);
HXDLIN( 248)		HX_VAR( Float,perp2x);
HXDLIN( 248)		HX_VAR( Float,perp2y);
HXDLIN( 248)		HX_VAR( Float,perp3x);
HXDLIN( 248)		HX_VAR( Float,perp3y);
HXLINE( 249)		HX_VAR( Float,a1);
HXDLIN( 249)		HX_VAR( Float,b1);
HXDLIN( 249)		HX_VAR( Float,c1);
HXDLIN( 249)		HX_VAR( Float,a2);
HXDLIN( 249)		HX_VAR( Float,b2);
HXDLIN( 249)		HX_VAR( Float,c2);
HXLINE( 250)		HX_VAR( Float,denom);
HXDLIN( 250)		HX_VAR( Float,pdist);
HXDLIN( 250)		HX_VAR( Float,dist);
HXLINE( 252)		p1x = points->__get((int)0);
HXLINE( 253)		p1y = points->__get((int)1);
HXLINE( 255)		p2x = points->__get((int)2);
HXLINE( 256)		p2y = points->__get((int)3);
HXLINE( 258)		perpx = -((p1y - p2y));
HXLINE( 259)		perpy = (p1x - p2x);
HXLINE( 261)		Float _hx_tmp15 = ::Math_obj::abs(((perpx * perpx) + (perpy * perpy)));
HXDLIN( 261)		dist = ::Math_obj::sqrt(_hx_tmp15);
HXLINE( 263)		hx::DivEq(perpx,dist);
HXLINE( 264)		hx::DivEq(perpy,dist);
HXLINE( 265)		hx::MultEq(perpx,width);
HXLINE( 266)		hx::MultEq(perpy,width);
HXLINE( 268)		verts->push((p1x - perpx));
HXLINE( 269)		verts->push((p1y - perpy));
HXLINE( 270)		verts->push(r);
HXLINE( 271)		verts->push(g);
HXLINE( 272)		verts->push(b);
HXLINE( 273)		verts->push(alpha);
HXLINE( 275)		verts->push((p1x + perpx));
HXLINE( 276)		verts->push((p1y + perpy));
HXLINE( 277)		verts->push(r);
HXLINE( 278)		verts->push(g);
HXLINE( 279)		verts->push(b);
HXLINE( 280)		verts->push(alpha);
HXLINE( 282)		{
HXLINE( 282)			HX_VARI_NAME( Int,_g11,"_g1") = (int)1;
HXDLIN( 282)			HX_VARI_NAME( Int,_g2,"_g") = (length - (int)1);
HXDLIN( 282)			while((_g11 < _g2)){
HXLINE( 282)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 284)				p1x = points->__get(((i1 - (int)1) * (int)2));
HXLINE( 285)				p1y = points->__get((((i1 - (int)1) * (int)2) + (int)1));
HXLINE( 286)				p2x = points->__get((i1 * (int)2));
HXLINE( 287)				p2y = points->__get(((i1 * (int)2) + (int)1));
HXLINE( 288)				p3x = points->__get(((i1 + (int)1) * (int)2));
HXLINE( 289)				p3y = points->__get((((i1 + (int)1) * (int)2) + (int)1));
HXLINE( 291)				perpx = -((p1y - p2y));
HXLINE( 292)				perpy = (p1x - p2x);
HXLINE( 294)				Float _hx_tmp16 = ::Math_obj::abs(((perpx * perpx) + (perpy * perpy)));
HXDLIN( 294)				dist = ::Math_obj::sqrt(_hx_tmp16);
HXLINE( 295)				hx::DivEq(perpx,dist);
HXLINE( 296)				hx::DivEq(perpy,dist);
HXLINE( 297)				hx::MultEq(perpx,width);
HXLINE( 298)				hx::MultEq(perpy,width);
HXLINE( 300)				perp2x = -((p2y - p3y));
HXLINE( 301)				perp2y = (p2x - p3x);
HXLINE( 303)				Float _hx_tmp17 = ::Math_obj::abs(((perp2x * perp2x) + (perp2y * perp2y)));
HXDLIN( 303)				dist = ::Math_obj::sqrt(_hx_tmp17);
HXLINE( 304)				hx::DivEq(perp2x,dist);
HXLINE( 305)				hx::DivEq(perp2y,dist);
HXLINE( 306)				hx::MultEq(perp2x,width);
HXLINE( 307)				hx::MultEq(perp2y,width);
HXLINE( 309)				a1 = ((-(perpy) + p1y) - (-(perpy) + p2y));
HXLINE( 310)				b1 = ((-(perpx) + p2x) - (-(perpx) + p1x));
HXLINE( 311)				c1 = (((-(perpx) + p1x) * (-(perpy) + p2y)) - ((-(perpx) + p2x) * (-(perpy) + p1y)));
HXLINE( 312)				a2 = ((-(perp2y) + p3y) - (-(perp2y) + p2y));
HXLINE( 313)				b2 = ((-(perp2x) + p2x) - (-(perp2x) + p3x));
HXLINE( 314)				c2 = (((-(perp2x) + p3x) * (-(perp2y) + p2y)) - ((-(perp2x) + p2x) * (-(perp2y) + p3y)));
HXLINE( 316)				denom = ((a1 * b2) - (a2 * b1));
HXLINE( 318)				Float _hx_tmp18 = ::Math_obj::abs(denom);
HXDLIN( 318)				if ((_hx_tmp18 < ((Float)0.1))) {
HXLINE( 320)					hx::AddEq(denom,((Float)10.1));
HXLINE( 322)					verts->push((p2x - perpx));
HXLINE( 323)					verts->push((p2y - perpy));
HXLINE( 324)					verts->push(r);
HXLINE( 325)					verts->push(g);
HXLINE( 326)					verts->push(b);
HXLINE( 327)					verts->push(alpha);
HXLINE( 329)					verts->push((p2x + perpx));
HXLINE( 330)					verts->push((p2y + perpy));
HXLINE( 331)					verts->push(r);
HXLINE( 332)					verts->push(g);
HXLINE( 333)					verts->push(b);
HXLINE( 334)					verts->push(alpha);
HXLINE( 336)					continue;
            				}
HXLINE( 340)				px = ((Float)((b1 * c2) - (b2 * c1)) / (Float)denom);
HXLINE( 341)				py = ((Float)((a2 * c1) - (a1 * c2)) / (Float)denom);
HXLINE( 343)				pdist = ((((px - p2x) * (px - p2x)) + (py - p2y)) + (py - p2y));
HXLINE( 345)				if ((pdist > (int)19600)) {
HXLINE( 347)					perp3x = (perpx - perp2x);
HXLINE( 348)					perp3y = (perpy - perp2y);
HXLINE( 350)					Float _hx_tmp19 = ::Math_obj::abs(((perp3x * perp3x) + (perp3y * perp3y)));
HXDLIN( 350)					dist = ::Math_obj::sqrt(_hx_tmp19);
HXLINE( 351)					hx::DivEq(perp3x,dist);
HXLINE( 352)					hx::DivEq(perp3y,dist);
HXLINE( 353)					hx::MultEq(perp3x,width);
HXLINE( 354)					hx::MultEq(perp3y,width);
HXLINE( 356)					verts->push((p2x - perp3x));
HXLINE( 357)					verts->push((p2y - perp3y));
HXLINE( 358)					verts->push(r);
HXLINE( 359)					verts->push(g);
HXLINE( 360)					verts->push(b);
HXLINE( 361)					verts->push(alpha);
HXLINE( 363)					verts->push((p2x + perp3x));
HXLINE( 364)					verts->push((p2y + perp3y));
HXLINE( 365)					verts->push(r);
HXLINE( 366)					verts->push(g);
HXLINE( 367)					verts->push(b);
HXLINE( 368)					verts->push(alpha);
HXLINE( 370)					verts->push((p2x - perp3x));
HXLINE( 371)					verts->push((p2y - perp3y));
HXLINE( 372)					verts->push(r);
HXLINE( 373)					verts->push(g);
HXLINE( 374)					verts->push(b);
HXLINE( 375)					verts->push(alpha);
HXLINE( 377)					++indexCount;
            				}
            				else {
HXLINE( 381)					verts->push(px);
HXLINE( 382)					verts->push(py);
HXLINE( 383)					verts->push(r);
HXLINE( 384)					verts->push(g);
HXLINE( 385)					verts->push(b);
HXLINE( 386)					verts->push(alpha);
HXLINE( 388)					verts->push((p2x - (px - p2x)));
HXLINE( 389)					verts->push((p2y - (py - p2y)));
HXLINE( 390)					verts->push(r);
HXLINE( 391)					verts->push(g);
HXLINE( 392)					verts->push(b);
HXLINE( 393)					verts->push(alpha);
            				}
            			}
            		}
HXLINE( 399)		p1x = points->__get(((length - (int)2) * (int)2));
HXLINE( 400)		p1y = points->__get((((length - (int)2) * (int)2) + (int)1));
HXLINE( 401)		p2x = points->__get(((length - (int)1) * (int)2));
HXLINE( 402)		p2y = points->__get((((length - (int)1) * (int)2) + (int)1));
HXLINE( 403)		perpx = -((p1y - p2y));
HXLINE( 404)		perpy = (p1x - p2x);
HXLINE( 406)		Float _hx_tmp20 = ::Math_obj::abs(((perpx * perpx) + (perpy * perpy)));
HXDLIN( 406)		dist = ::Math_obj::sqrt(_hx_tmp20);
HXLINE( 407)		Bool _hx_tmp21 = !(::Math_obj::isFinite(dist));
HXDLIN( 407)		if (_hx_tmp21) {
HXLINE( 407)			::haxe::Log_obj::trace(((perpx * perpx) + (perpy * perpy)),hx::SourceInfo(HX_("GraphicsRenderer.hx",30,ee,00,cc),407,HX_("openfl._internal.renderer.opengl.utils.GraphicsRenderer",0f,64,e5,d1),HX_("buildLine",42,4e,ef,e7)));
            		}
HXLINE( 408)		hx::DivEq(perpx,dist);
HXLINE( 409)		hx::DivEq(perpy,dist);
HXLINE( 410)		hx::MultEq(perpx,width);
HXLINE( 411)		hx::MultEq(perpy,width);
HXLINE( 413)		verts->push((p2x - perpx));
HXLINE( 414)		verts->push((p2y - perpy));
HXLINE( 415)		verts->push(r);
HXLINE( 416)		verts->push(g);
HXLINE( 417)		verts->push(b);
HXLINE( 418)		verts->push(alpha);
HXLINE( 420)		verts->push((p2x + perpx));
HXLINE( 421)		verts->push((p2y + perpy));
HXLINE( 422)		verts->push(r);
HXLINE( 423)		verts->push(g);
HXLINE( 424)		verts->push(b);
HXLINE( 425)		verts->push(alpha);
HXLINE( 427)		indices->push(indexStart);
HXLINE( 429)		{
HXLINE( 429)			HX_VARI_NAME( Int,_g12,"_g1") = (int)0;
HXDLIN( 429)			HX_VARI_NAME( Int,_g3,"_g") = indexCount;
HXDLIN( 429)			while((_g12 < _g3)){
HXLINE( 429)				++_g12;
HXLINE( 431)				Int _hx_tmp22 = indexStart++;
HXDLIN( 431)				indices->push(_hx_tmp22);
            			}
            		}
HXLINE( 435)		indices->push((indexStart - (int)1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,buildLine,(void))

void GraphicsRenderer_obj::buildPoly( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildPoly",0xe90ceb7b,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildPoly","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",438,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
HXLINE( 439)		if ((path->points->length < (int)6)) {
HXLINE( 439)			return;
            		}
HXLINE( 440)		HX_VARI( ::Array< Float >,points) = path->points;
HXLINE( 442)		HX_VARI( Int,l) = points->length;
HXLINE( 443)		HX_VARI( Float,sx) = points->__get((int)0);
HXDLIN( 443)		HX_VARI( Float,sy) = points->__get((int)1);
HXLINE( 444)		HX_VARI( Float,ex) = points->__get((l - (int)2));
HXDLIN( 444)		HX_VARI( Float,ey) = points->__get((l - (int)1));
HXLINE( 446)		Bool _hx_tmp;
HXDLIN( 446)		if ((sx == ex)) {
HXLINE( 446)			_hx_tmp = (sy != ey);
            		}
            		else {
HXLINE( 446)			_hx_tmp = true;
            		}
HXDLIN( 446)		if (_hx_tmp) {
HXLINE( 447)			points->push(sx);
HXLINE( 448)			points->push(sy);
            		}
HXLINE( 451)		Float _hx_tmp1 = ((Float)points->length / (Float)(int)2);
HXDLIN( 451)		HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 453)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
HXLINE( 454)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Fill_dyn());
HXLINE( 455)		HX_VARI( ::Array< Float >,verts) = fill->verts;
HXLINE( 456)		HX_VARI( ::Array< Int >,indices) = fill->indices;
HXLINE( 458)		Bool _hx_tmp2 = hx::IsNotNull( fill );
HXDLIN( 458)		if (_hx_tmp2) {
HXLINE( 459)			HX_VARI( ::Array< Int >,triangles) = ::Array_obj< Int >::__new();
HXLINE( 460)			::openfl::_internal::renderer::PolyK_obj::triangulate(triangles,points);
HXLINE( 461)			HX_VARI( Float,vertPos) = ((Float)verts->length / (Float)(int)2);
HXLINE( 463)			HX_VARI( Int,i) = (int)0;
HXLINE( 464)			while((i < triangles->length)){
HXLINE( 466)				Float _hx_tmp3 = (triangles->__get(i) + vertPos);
HXDLIN( 466)				Int _hx_tmp4 = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN( 466)				indices->push(_hx_tmp4);
HXLINE( 467)				Float _hx_tmp5 = (triangles->__get(i) + vertPos);
HXDLIN( 467)				Int _hx_tmp6 = ::Std_obj::_hx_int(_hx_tmp5);
HXDLIN( 467)				indices->push(_hx_tmp6);
HXLINE( 468)				Int _hx_tmp7 = triangles->__get((i + (int)1));
HXDLIN( 468)				Int _hx_tmp8 = ::Std_obj::_hx_int((_hx_tmp7 + vertPos));
HXDLIN( 468)				indices->push(_hx_tmp8);
HXLINE( 469)				Int _hx_tmp9 = triangles->__get((i + (int)2));
HXDLIN( 469)				Int _hx_tmp10 = ::Std_obj::_hx_int((_hx_tmp9 + vertPos));
HXDLIN( 469)				indices->push(_hx_tmp10);
HXLINE( 470)				Int _hx_tmp11 = triangles->__get((i + (int)2));
HXDLIN( 470)				Int _hx_tmp12 = ::Std_obj::_hx_int((_hx_tmp11 + vertPos));
HXDLIN( 470)				indices->push(_hx_tmp12);
HXLINE( 471)				hx::AddEq(i,(int)3);
            			}
HXLINE( 475)			{
HXLINE( 475)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 475)				while((_g1 < length)){
HXLINE( 475)					HX_VARI_NAME( Int,i1,"i") = _g1++;
HXLINE( 477)					Float _hx_tmp13 = points->__get((i1 * (int)2));
HXDLIN( 477)					verts->push(_hx_tmp13);
HXLINE( 478)					Float _hx_tmp14 = points->__get(((i1 * (int)2) + (int)1));
HXDLIN( 478)					verts->push(_hx_tmp14);
            				}
            			}
            		}
HXLINE( 483)		Bool _hx_tmp15 = (path->line->width > (int)0);
HXDLIN( 483)		if (_hx_tmp15) {
HXLINE( 485)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildLine(path,bucket,null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GraphicsRenderer_obj,buildPoly,(void))

void GraphicsRenderer_obj::buildRectangle( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack,hx::Null< Bool >  __o_localCoords){
Bool localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildRectangle",0xede73ca0,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRectangle","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",490,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 491)		HX_VARI( ::Array< Float >,rectData) = path->points;
HXLINE( 492)		HX_VARI( Float,x) = rectData->__get((int)0);
HXLINE( 493)		HX_VARI( Float,y) = rectData->__get((int)1);
HXLINE( 494)		HX_VARI( Float,width) = rectData->__get((int)2);
HXLINE( 495)		HX_VARI( Float,height) = rectData->__get((int)3);
HXLINE( 497)		if (localCoords) {
HXLINE( 498)			hx::SubEq(x,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 499)			hx::SubEq(y,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
            		}
HXLINE( 502)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
HXLINE( 503)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Fill_dyn());
HXLINE( 505)		Bool _hx_tmp = hx::IsNotNull( fill );
HXDLIN( 505)		if (_hx_tmp) {
HXLINE( 506)			HX_VARI( ::Array< Float >,verts) = fill->verts;
HXLINE( 507)			HX_VARI( ::Array< Int >,indices) = fill->indices;
HXLINE( 509)			Float _hx_tmp1 = ((Float)verts->length / (Float)(int)2);
HXDLIN( 509)			HX_VARI( Int,vertPos) = ::Std_obj::_hx_int(_hx_tmp1);
HXLINE( 511)			verts->push(x);
HXLINE( 512)			verts->push(y);
HXLINE( 513)			verts->push((x + width));
HXLINE( 514)			verts->push(y);
HXLINE( 515)			verts->push(x);
HXLINE( 516)			verts->push((y + height));
HXLINE( 517)			verts->push((x + width));
HXLINE( 518)			verts->push((y + height));
HXLINE( 520)			indices->push(vertPos);
HXLINE( 521)			indices->push(vertPos);
HXLINE( 522)			indices->push((vertPos + (int)1));
HXLINE( 523)			indices->push((vertPos + (int)2));
HXLINE( 524)			indices->push((vertPos + (int)3));
HXLINE( 525)			indices->push((vertPos + (int)3));
            		}
HXLINE( 529)		Bool _hx_tmp2 = (path->line->width > (int)0);
HXDLIN( 529)		if (_hx_tmp2) {
HXLINE( 531)			HX_VARI( ::Array< Float >,tempPoints) = path->points;
HXLINE( 532)			path->points = ::Array_obj< Float >::__new(10)->init(0,x)->init(1,y)->init(2,(x + width))->init(3,y)->init(4,(x + width))->init(5,(y + height))->init(6,x)->init(7,(y + height))->init(8,x)->init(9,y);
HXLINE( 533)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildLine(path,bucket,null());
HXLINE( 534)			path->points = tempPoints;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,buildRectangle,(void))

void GraphicsRenderer_obj::buildRoundedRectangle( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack,hx::Null< Bool >  __o_localCoords){
Bool localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildRoundedRectangle",0x47de3df1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildRoundedRectangle","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",539,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 540)		HX_VARI( ::Array< Float >,points) = path->points->copy();
HXLINE( 541)		HX_VARI( Float,x) = points->__get((int)0);
HXLINE( 542)		HX_VARI( Float,y) = points->__get((int)1);
HXLINE( 543)		HX_VARI( Float,width) = points->__get((int)2);
HXLINE( 544)		HX_VARI( Float,height) = points->__get((int)3);
HXLINE( 545)		HX_VARI( Float,rx) = points->__get((int)4);
HXLINE( 546)		HX_VARI( Float,ry) = points->__get((int)5);
HXLINE( 548)		if (localCoords) {
HXLINE( 549)			hx::SubEq(x,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 550)			hx::SubEq(y,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
            		}
HXLINE( 553)		HX_VARI( ::Array< Float >,recPoints) = ::Array_obj< Float >::__new(0);
HXLINE( 554)		::openfl::_internal::renderer::GraphicsPaths_obj::roundRectangle(recPoints,x,y,width,height,rx,ry);
HXLINE( 556)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
HXLINE( 557)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Fill_dyn());
HXLINE( 559)		Bool _hx_tmp = hx::IsNotNull( fill );
HXDLIN( 559)		if (_hx_tmp) {
HXLINE( 560)			HX_VARI( ::Array< Float >,verts) = fill->verts;
HXLINE( 561)			HX_VARI( ::Array< Int >,indices) = fill->indices;
HXLINE( 563)			HX_VARI( Float,vecPos) = ((Float)verts->length / (Float)(int)2);
HXLINE( 565)			HX_VARI( ::Array< Int >,triangles) = ::Array_obj< Int >::__new();
HXLINE( 566)			::openfl::_internal::renderer::PolyK_obj::triangulate(triangles,recPoints);
HXLINE( 568)			HX_VARI( Int,i) = (int)0;
HXLINE( 569)			while((i < triangles->length)){
HXLINE( 571)				Float _hx_tmp1 = (triangles->__get(i) + vecPos);
HXDLIN( 571)				Int _hx_tmp2 = ::Std_obj::_hx_int(_hx_tmp1);
HXDLIN( 571)				indices->push(_hx_tmp2);
HXLINE( 572)				Float _hx_tmp3 = (triangles->__get(i) + vecPos);
HXDLIN( 572)				Int _hx_tmp4 = ::Std_obj::_hx_int(_hx_tmp3);
HXDLIN( 572)				indices->push(_hx_tmp4);
HXLINE( 573)				Int _hx_tmp5 = triangles->__get((i + (int)1));
HXDLIN( 573)				Int _hx_tmp6 = ::Std_obj::_hx_int((_hx_tmp5 + vecPos));
HXDLIN( 573)				indices->push(_hx_tmp6);
HXLINE( 574)				Int _hx_tmp7 = triangles->__get((i + (int)2));
HXDLIN( 574)				Int _hx_tmp8 = ::Std_obj::_hx_int((_hx_tmp7 + vecPos));
HXDLIN( 574)				indices->push(_hx_tmp8);
HXLINE( 575)				Int _hx_tmp9 = triangles->__get((i + (int)2));
HXDLIN( 575)				Int _hx_tmp10 = ::Std_obj::_hx_int((_hx_tmp9 + vecPos));
HXDLIN( 575)				indices->push(_hx_tmp10);
HXLINE( 576)				hx::AddEq(i,(int)3);
            			}
HXLINE( 580)			i = (int)0;
HXLINE( 581)			while((i < recPoints->length)){
HXLINE( 583)				Float _hx_tmp11 = recPoints->__get(i);
HXDLIN( 583)				verts->push(_hx_tmp11);
HXLINE( 584)				Int _hx_tmp12 = ++i;
HXDLIN( 584)				Float _hx_tmp13 = recPoints->__get(_hx_tmp12);
HXDLIN( 584)				verts->push(_hx_tmp13);
HXLINE( 585)				++i;
            			}
            		}
HXLINE( 589)		Bool _hx_tmp14 = (path->line->width > (int)0);
HXDLIN( 589)		if (_hx_tmp14) {
HXLINE( 591)			HX_VARI( ::Array< Float >,tempPoints) = path->points;
HXLINE( 592)			path->points = recPoints;
HXLINE( 593)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildLine(path,bucket,null());
HXLINE( 594)			path->points = tempPoints;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,buildRoundedRectangle,(void))

void GraphicsRenderer_obj::buildDrawTriangles( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::display::DisplayObject object, ::openfl::_internal::renderer::opengl::utils::GLStack glStack,hx::Null< Bool >  __o_localCoords){
Bool localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildDrawTriangles",0xec6e38f8,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTriangles","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",599,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 601)		HX_VARI( ::cpp::VirtualArray,args) = ::Type_obj::enumParameters(path->type);
HXLINE( 603)		HX_VARI( ::Array< Float >,vertices) = ( (::Array< Float >)(args->__get((int)0)) );
HXLINE( 604)		HX_VARI( ::Array< Int >,indices) = ( (::Array< Int >)(args->__get((int)1)) );
HXLINE( 605)		HX_VARI( ::Array< Float >,uvtData) = ( (::Array< Float >)(args->__get((int)2)) );
HXLINE( 606)		HX_VARI(  ::Dynamic,culling) = args->__get((int)3);
HXLINE( 607)		HX_VARI( ::Array< Int >,colors) = ( (::Array< Int >)(args->__get((int)4)) );
HXLINE( 610)		HX_VAR( Float,a);
HXDLIN( 610)		HX_VAR( Float,b);
HXDLIN( 610)		HX_VAR( Float,c);
HXDLIN( 610)		HX_VAR( Float,d);
HXDLIN( 610)		HX_VAR( Float,tx);
HXDLIN( 610)		HX_VAR( Float,ty);
HXLINE( 612)		if (localCoords) {
HXLINE( 613)			a = ((Float)1.0);
HXLINE( 614)			b = ((Float)0.0);
HXLINE( 615)			c = ((Float)0.0);
HXLINE( 616)			d = ((Float)1.0);
HXLINE( 617)			tx = ((Float)0.0);
HXLINE( 618)			ty = ((Float)0.0);
            		}
            		else {
HXLINE( 620)			a = object->_hx___worldTransform->a;
HXLINE( 621)			b = object->_hx___worldTransform->b;
HXLINE( 622)			c = object->_hx___worldTransform->c;
HXLINE( 623)			d = object->_hx___worldTransform->d;
HXLINE( 624)			tx = object->_hx___worldTransform->tx;
HXLINE( 625)			ty = object->_hx___worldTransform->ty;
            		}
HXLINE( 628)		HX_VAR( Bool,hasColors);
HXDLIN( 628)		Bool _hx_tmp = hx::IsNotNull( colors );
HXDLIN( 628)		if (_hx_tmp) {
HXLINE( 628)			hasColors = (colors->length > (int)0);
            		}
            		else {
HXLINE( 628)			hasColors = false;
            		}
HXLINE( 630)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
HXLINE( 631)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = bucket->getData(::openfl::_internal::renderer::opengl::utils::BucketDataType_obj::Fill_dyn());
HXLINE( 632)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::VertexAttribute,colorAttrib) = fill->vertexArray->attributes->__get((int)2).StaticCast<  ::openfl::_internal::renderer::opengl::utils::VertexAttribute >();
HXLINE( 633)		colorAttrib->enabled = hasColors;
HXLINE( 634)		HX_VARI( ::cpp::VirtualArray,array) = ::Array_obj< Int >::fromData( _hx_array_data_14,4);
HXDLIN( 634)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 634)		Bool _hx_tmp1 = hx::IsNotNull( array );
HXDLIN( 634)		if (_hx_tmp1) {
HXLINE( 634)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 634)			_this->byteOffset = (int)0;
HXDLIN( 634)			_this->length = array->get_length();
HXDLIN( 634)			Int _hx_tmp2 = (_this->length * _this->bytesPerElement);
HXDLIN( 634)			_this->byteLength = _hx_tmp2;
HXDLIN( 634)			Int byteLength = _this->byteLength;
HXDLIN( 634)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 634)			_this->buffer = this2;
HXDLIN( 634)			_this->copyFromArray(array,null());
HXDLIN( 634)			this1 = _this;
            		}
            		else {
HXLINE( 634)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN( 634)		colorAttrib->defaultValue = this1;
HXLINE( 636)		fill->rawVerts = true;
HXLINE( 637)		fill->glLength = indices->length;
HXLINE( 638)		Int _hx_tmp3 = fill->vertexArray->get_stride();
HXDLIN( 638)		fill->stride = ::Std_obj::_hx_int(((Float)_hx_tmp3 / (Float)(int)4));
HXLINE( 640)		HX_VARI( Int,vertsLength) = (fill->glLength * fill->stride);
HXLINE( 641)		HX_VAR(  ::lime::utils::ArrayBufferView,verts);
HXLINE( 643)		Bool _hx_tmp4;
HXDLIN( 643)		Bool _hx_tmp5 = hx::IsNotNull( fill->glVerts );
HXDLIN( 643)		if (_hx_tmp5) {
HXLINE( 643)			_hx_tmp4 = (fill->glVerts->length < vertsLength);
            		}
            		else {
HXLINE( 643)			_hx_tmp4 = true;
            		}
HXDLIN( 643)		if (_hx_tmp4) {
HXLINE( 644)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN( 644)			Bool _hx_tmp6 = hx::IsNotNull( vertsLength );
HXDLIN( 644)			if (_hx_tmp6) {
HXLINE( 644)				this3 =  ::lime::utils::ArrayBufferView_obj::__new(vertsLength,(int)8);
            			}
            			else {
HXLINE( 644)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN( 644)			verts = this3;
HXLINE( 645)			fill->glVerts = verts;
            		}
            		else {
HXLINE( 647)			verts = fill->glVerts;
            		}
HXLINE( 650)		HX_VARI(  ::haxe::io::Bytes,buffer) = verts->buffer;
HXDLIN( 650)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this4,"this");
HXDLIN( 650)		Bool _hx_tmp7 = hx::IsNotNull( buffer );
HXDLIN( 650)		if (_hx_tmp7) {
HXLINE( 650)			HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)7);
HXDLIN( 650)			if ((hx::Mod((int)0,_this1->bytesPerElement) != (int)0)) {
HXLINE( 650)				HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            			}
HXDLIN( 650)			HX_VARI( Int,bufferByteLength) = buffer->length;
HXDLIN( 650)			{
HXLINE( 650)				if ((hx::Mod(bufferByteLength,_this1->bytesPerElement) != (int)0)) {
HXLINE( 650)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
HXDLIN( 650)				if ((bufferByteLength < (int)0)) {
HXLINE( 650)					HX_STACK_DO_THROW(::lime::utils::TAError_obj::RangeError_dyn());
            				}
            			}
HXDLIN( 650)			_this1->buffer = buffer;
HXDLIN( 650)			_this1->byteOffset = (int)0;
HXDLIN( 650)			_this1->byteLength = bufferByteLength;
HXDLIN( 650)			Float _hx_tmp8 = ((Float)bufferByteLength / (Float)_this1->bytesPerElement);
HXDLIN( 650)			_this1->length = ::Std_obj::_hx_int(_hx_tmp8);
HXDLIN( 650)			this4 = _this1;
            		}
            		else {
HXLINE( 650)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint32Array",f0,3e,3a,98));
            		}
HXDLIN( 650)		HX_VARI(  ::lime::utils::ArrayBufferView,glColors) = this4;
HXLINE( 652)		HX_VARI( Int,v0) = (int)0;
HXDLIN( 652)		HX_VARI( Int,v1) = (int)0;
HXDLIN( 652)		HX_VARI( Int,v2) = (int)0;
HXLINE( 653)		HX_VARI( Int,i0) = (int)0;
HXDLIN( 653)		HX_VARI( Int,i1) = (int)0;
HXDLIN( 653)		HX_VARI( Int,i2) = (int)0;
HXLINE( 655)		HX_VARI( Float,x0) = ((Float)0.0);
HXDLIN( 655)		HX_VARI( Float,y0) = ((Float)0.0);
HXLINE( 656)		HX_VARI( Float,x1) = ((Float)0.0);
HXDLIN( 656)		HX_VARI( Float,y1) = ((Float)0.0);
HXLINE( 657)		HX_VARI( Float,x2) = ((Float)0.0);
HXDLIN( 657)		HX_VARI( Float,y2) = ((Float)0.0);
HXLINE( 659)		HX_VARI( Int,idx) = (int)0;
HXLINE( 660)		{
HXLINE( 660)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 660)			Float _hx_tmp9 = ((Float)indices->length / (Float)(int)3);
HXDLIN( 660)			HX_VARI( Int,_g) = ::Std_obj::_hx_int(_hx_tmp9);
HXDLIN( 660)			while((_g1 < _g)){
HXLINE( 660)				HX_VARI( Int,i) = _g1++;
HXLINE( 662)				i0 = indices->__get((i * (int)3));
HXDLIN( 662)				i1 = indices->__get(((i * (int)3) + (int)1));
HXDLIN( 662)				i2 = indices->__get(((i * (int)3) + (int)2));
HXLINE( 663)				v0 = (i0 * (int)2);
HXDLIN( 663)				v1 = (i1 * (int)2);
HXDLIN( 663)				v2 = (i2 * (int)2);
HXLINE( 665)				x0 = vertices->__get(v0);
HXDLIN( 665)				y0 = vertices->__get((v0 + (int)1));
HXLINE( 666)				x1 = vertices->__get(v1);
HXDLIN( 666)				y1 = vertices->__get((v1 + (int)1));
HXLINE( 667)				x2 = vertices->__get(v2);
HXDLIN( 667)				y2 = vertices->__get((v2 + (int)1));
HXLINE( 669)				if (localCoords) {
HXLINE( 670)					hx::SubEq(x0,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 671)					hx::SubEq(y0,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
HXLINE( 672)					hx::SubEq(x1,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 673)					hx::SubEq(y1,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
HXLINE( 674)					hx::SubEq(x2,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->x);
HXLINE( 675)					hx::SubEq(y2,::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->y);
            				}
HXLINE( 678)				 ::Dynamic _hx_switch_0 = culling;
            				if (  (_hx_switch_0==(int)0) ){
HXLINE( 682)					if (((((x1 - x0) * (y2 - y0)) - ((y1 - y0) * (x2 - x0))) < (int)0)) {
HXLINE( 682)						continue;
            					}
HXDLIN( 682)					goto _hx_goto_13;
            				}
            				if (  (_hx_switch_0==(int)2) ){
HXLINE( 680)					if (!(((((x1 - x0) * (y2 - y0)) - ((y1 - y0) * (x2 - x0))) < (int)0))) {
HXLINE( 680)						continue;
            					}
HXDLIN( 680)					goto _hx_goto_13;
            				}
            				/* default */{
            				}
            				_hx_goto_13:;
HXLINE( 686)				{
HXLINE( 686)					Int idx1 = idx++;
HXDLIN( 686)					{
HXLINE( 686)						Int byteOffset = (verts->byteOffset + (idx1 * (int)4));
HXDLIN( 686)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset,(((a * x0) + (c * y0)) + tx));
            					}
            				}
HXLINE( 687)				{
HXLINE( 687)					Int idx2 = idx++;
HXDLIN( 687)					{
HXLINE( 687)						Int byteOffset1 = (verts->byteOffset + (idx2 * (int)4));
HXDLIN( 687)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset1,(((b * x0) + (d * y0)) + ty));
            					}
            				}
HXLINE( 688)				{
HXLINE( 688)					Int idx3 = idx++;
HXDLIN( 688)					HX_VARI( Float,val) = uvtData->__get(v0);
HXDLIN( 688)					{
HXLINE( 688)						Int byteOffset2 = (verts->byteOffset + (idx3 * (int)4));
HXDLIN( 688)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset2,val);
            					}
            				}
HXLINE( 689)				{
HXLINE( 689)					Int idx4 = idx++;
HXDLIN( 689)					HX_VARI_NAME( Float,val1,"val") = uvtData->__get((v0 + (int)1));
HXDLIN( 689)					{
HXLINE( 689)						Int byteOffset3 = (verts->byteOffset + (idx4 * (int)4));
HXDLIN( 689)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset3,val1);
            					}
            				}
HXLINE( 690)				if (hasColors) {
HXLINE( 691)					Int idx5 = idx++;
HXDLIN( 691)					HX_VARI_NAME( Int,val2,"val") = colors->__get(i0);
HXDLIN( 691)					{
HXLINE( 691)						Int byteOffset4 = (glColors->byteOffset + (idx5 * (int)4));
HXDLIN( 691)						::__hxcpp_memory_set_ui32(glColors->buffer->b,byteOffset4,val2);
            					}
            				}
HXLINE( 694)				{
HXLINE( 694)					Int idx6 = idx++;
HXDLIN( 694)					{
HXLINE( 694)						Int byteOffset5 = (verts->byteOffset + (idx6 * (int)4));
HXDLIN( 694)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset5,(((a * x1) + (c * y1)) + tx));
            					}
            				}
HXLINE( 695)				{
HXLINE( 695)					Int idx7 = idx++;
HXDLIN( 695)					{
HXLINE( 695)						Int byteOffset6 = (verts->byteOffset + (idx7 * (int)4));
HXDLIN( 695)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset6,(((b * x1) + (d * y1)) + ty));
            					}
            				}
HXLINE( 696)				{
HXLINE( 696)					Int idx8 = idx++;
HXDLIN( 696)					HX_VARI_NAME( Float,val3,"val") = uvtData->__get(v1);
HXDLIN( 696)					{
HXLINE( 696)						Int byteOffset7 = (verts->byteOffset + (idx8 * (int)4));
HXDLIN( 696)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset7,val3);
            					}
            				}
HXLINE( 697)				{
HXLINE( 697)					Int idx9 = idx++;
HXDLIN( 697)					HX_VARI_NAME( Float,val4,"val") = uvtData->__get((v1 + (int)1));
HXDLIN( 697)					{
HXLINE( 697)						Int byteOffset8 = (verts->byteOffset + (idx9 * (int)4));
HXDLIN( 697)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset8,val4);
            					}
            				}
HXLINE( 698)				if (hasColors) {
HXLINE( 699)					Int idx10 = idx++;
HXDLIN( 699)					HX_VARI_NAME( Int,val5,"val") = colors->__get(i1);
HXDLIN( 699)					{
HXLINE( 699)						Int byteOffset9 = (glColors->byteOffset + (idx10 * (int)4));
HXDLIN( 699)						::__hxcpp_memory_set_ui32(glColors->buffer->b,byteOffset9,val5);
            					}
            				}
HXLINE( 702)				{
HXLINE( 702)					Int idx11 = idx++;
HXDLIN( 702)					{
HXLINE( 702)						Int byteOffset10 = (verts->byteOffset + (idx11 * (int)4));
HXDLIN( 702)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset10,(((a * x2) + (c * y2)) + tx));
            					}
            				}
HXLINE( 703)				{
HXLINE( 703)					Int idx12 = idx++;
HXDLIN( 703)					{
HXLINE( 703)						Int byteOffset11 = (verts->byteOffset + (idx12 * (int)4));
HXDLIN( 703)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset11,(((b * x2) + (d * y2)) + ty));
            					}
            				}
HXLINE( 704)				{
HXLINE( 704)					Int idx13 = idx++;
HXDLIN( 704)					HX_VARI_NAME( Float,val6,"val") = uvtData->__get(v2);
HXDLIN( 704)					{
HXLINE( 704)						Int byteOffset12 = (verts->byteOffset + (idx13 * (int)4));
HXDLIN( 704)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset12,val6);
            					}
            				}
HXLINE( 705)				{
HXLINE( 705)					Int idx14 = idx++;
HXDLIN( 705)					HX_VARI_NAME( Float,val7,"val") = uvtData->__get((v2 + (int)1));
HXDLIN( 705)					{
HXLINE( 705)						Int byteOffset13 = (verts->byteOffset + (idx14 * (int)4));
HXDLIN( 705)						::__hxcpp_memory_set_float(verts->buffer->b,byteOffset13,val7);
            					}
            				}
HXLINE( 706)				if (hasColors) {
HXLINE( 707)					Int idx15 = idx++;
HXDLIN( 707)					HX_VARI_NAME( Int,val8,"val") = colors->__get(i2);
HXDLIN( 707)					{
HXLINE( 707)						Int byteOffset14 = (glColors->byteOffset + (idx15 * (int)4));
HXDLIN( 707)						::__hxcpp_memory_set_ui32(glColors->buffer->b,byteOffset14,val8);
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GraphicsRenderer_obj,buildDrawTriangles,(void))

void GraphicsRenderer_obj::buildDrawTiles( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","buildDrawTiles",0xacaa9b52,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.buildDrawTiles","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",715,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
HXLINE( 715)		::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GraphicsRenderer_obj,buildDrawTiles,(void))

::Array< Float > GraphicsRenderer_obj::quadraticBezierCurve(Float fromX,Float fromY,Float cpX,Float cpY,Float toX,Float toY){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(3)
            		Float _hx_run(Float n1,Float n2,Float perc){
            			HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","quadraticBezierCurve",0x90de5ad7,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",728,0xd295150c)
            			HX_STACK_ARG(n1,"n1")
            			HX_STACK_ARG(n2,"n2")
            			HX_STACK_ARG(perc,"perc")
HXLINE( 728)			return (n1 + ((n2 - n1) * perc));
            		}
            		HX_END_LOCAL_FUNC3(return)

            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","quadraticBezierCurve",0x90de5ad7,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.quadraticBezierCurve","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",719,0xd295150c)
            	HX_STACK_ARG(fromX,"fromX")
            	HX_STACK_ARG(fromY,"fromY")
            	HX_STACK_ARG(cpX,"cpX")
            	HX_STACK_ARG(cpY,"cpY")
            	HX_STACK_ARG(toX,"toX")
            	HX_STACK_ARG(toY,"toY")
HXLINE( 721)		HX_VAR( Float,xa);
HXDLIN( 721)		HX_VAR( Float,ya);
HXDLIN( 721)		HX_VAR( Float,xb);
HXDLIN( 721)		HX_VAR( Float,yb);
HXDLIN( 721)		HX_VAR( Float,x);
HXDLIN( 721)		HX_VAR( Float,y);
HXLINE( 723)		HX_VARI( ::Array< Float >,points) = ::Array_obj< Float >::__new(0);
HXLINE( 725)		HX_VARI(  ::Dynamic,getPt) =  ::Dynamic(new _hx_Closure_0());
HXLINE( 732)		HX_VARI( Float,j) = ((Float)0.0);
HXLINE( 733)		{
HXLINE( 733)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 733)			while((_g1 < (int)21)){
HXLINE( 733)				HX_VARI( Int,i) = _g1++;
HXLINE( 735)				j = ((Float)i / (Float)(int)20);
HXLINE( 737)				xa = ( (Float)(getPt(fromX,cpX,j)) );
HXLINE( 738)				ya = ( (Float)(getPt(fromY,cpY,j)) );
HXLINE( 739)				xb = ( (Float)(getPt(cpX,toX,j)) );
HXLINE( 740)				yb = ( (Float)(getPt(cpY,toY,j)) );
HXLINE( 742)				x = ( (Float)(getPt(xa,xb,j)) );
HXLINE( 743)				y = ( (Float)(getPt(ya,yb,j)) );
HXLINE( 745)				points->push(x);
HXLINE( 746)				points->push(y);
            			}
            		}
HXLINE( 750)		return points;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GraphicsRenderer_obj,quadraticBezierCurve,return )

void GraphicsRenderer_obj::render( ::openfl::display::DisplayObject object, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","render",0xf1488dd5,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.render","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",754,0xd295150c)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 756)		HX_VARI(  ::openfl::display::Graphics,graphics) = object->_hx___graphics;
HXLINE( 757)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = graphics->_hx___bounds;
HXLINE( 759)		HX_VARI( Bool,dirty) = graphics->_hx___dirty;
HXLINE( 761)		Bool _hx_tmp;
HXDLIN( 761)		Bool _hx_tmp1;
HXDLIN( 761)		Bool _hx_tmp2;
HXDLIN( 761)		Bool _hx_tmp3;
HXDLIN( 761)		Bool _hx_tmp4 = !(!(graphics->_hx___visible));
HXDLIN( 761)		if (_hx_tmp4) {
HXLINE( 761)			Int _hx_tmp5 = graphics->_hx___commands->get_length();
HXDLIN( 761)			_hx_tmp3 = (_hx_tmp5 == (int)0);
            		}
            		else {
HXLINE( 761)			_hx_tmp3 = true;
            		}
HXDLIN( 761)		if (!(_hx_tmp3)) {
HXLINE( 761)			_hx_tmp2 = hx::IsNull( bounds );
            		}
            		else {
HXLINE( 761)			_hx_tmp2 = true;
            		}
HXDLIN( 761)		if (!(_hx_tmp2)) {
HXLINE( 761)			_hx_tmp1 = (bounds->width == (int)0);
            		}
            		else {
HXLINE( 761)			_hx_tmp1 = true;
            		}
HXDLIN( 761)		if (!(_hx_tmp1)) {
HXLINE( 761)			_hx_tmp = (bounds->height == (int)0);
            		}
            		else {
HXLINE( 761)			_hx_tmp = true;
            		}
HXDLIN( 761)		if (_hx_tmp) {
HXLINE( 763)			graphics->_hx___glStack->removeRange((int)0,graphics->_hx___glStack->length);
HXLINE( 764)			return;
            		}
HXLINE( 768)		if (dirty) {
HXLINE( 769)			Bool _hx_tmp6 = object->get_cacheAsBitmap();
HXDLIN( 769)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::updateGraphics(object,object->_hx___graphics,renderSession->gl,_hx_tmp6);
            		}
HXLINE( 811)		::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::renderGraphics(object,renderSession,false);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GraphicsRenderer_obj,render,(void))

void GraphicsRenderer_obj::renderGraphics( ::openfl::display::DisplayObject object, ::openfl::_internal::renderer::RenderSession renderSession, ::Dynamic __o_localCoords){
 ::Dynamic localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","renderGraphics",0xdf139fc0,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderGraphics","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",815,0xd295150c)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 816)		HX_VARI(  ::openfl::display::Graphics,graphics) = object->_hx___graphics;
HXLINE( 817)		HX_VARI(  ::lime::graphics::GLRenderContext,gl) = renderSession->gl;
HXLINE( 819)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLStack,glStack) = graphics->_hx___glStack->__get(::openfl::_internal::renderer::opengl::GLRenderer_obj::glContextId).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLStack >();
HXLINE( 820)		Bool _hx_tmp = hx::IsNull( glStack );
HXDLIN( 820)		if (_hx_tmp) {
HXLINE( 820)			return;
            		}
HXLINE( 821)		HX_VAR(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket);
HXLINE( 823)		HX_VAR(  ::openfl::geom::Matrix,translationMatrix);
HXLINE( 824)		if (localCoords) {
HXLINE( 825)			translationMatrix = ::openfl::geom::Matrix_obj::_hx___identity;
            		}
            		else {
HXLINE( 827)			translationMatrix = object->_hx___worldTransform;
            		}
HXLINE( 830)		HX_VARI(  ::openfl::geom::Rectangle,clipRect) = renderSession->spriteBatch->clipRect;
HXLINE( 831)		HX_VARI( Bool,batchDrawing) = renderSession->spriteBatch->drawing;
HXLINE( 833)		batchDrawing = renderSession->spriteBatch->drawing;
HXLINE( 835)		{
HXLINE( 835)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 835)			HX_VARI( Int,_g) = glStack->buckets->length;
HXDLIN( 835)			while((_g1 < _g)){
HXLINE( 835)				HX_VARI( Int,i) = _g1++;
HXLINE( 836)				batchDrawing = renderSession->spriteBatch->drawing;
HXLINE( 838)				Bool _hx_tmp1;
HXDLIN( 838)				if (batchDrawing) {
HXLINE( 838)					_hx_tmp1 = !(localCoords);
            				}
            				else {
HXLINE( 838)					_hx_tmp1 = false;
            				}
HXDLIN( 838)				if (_hx_tmp1) {
HXLINE( 839)					renderSession->spriteBatch->finish();
            				}
HXLINE( 842)				renderSession->blendModeManager->setBlendMode(object->_hx___blendMode,null());
HXLINE( 844)				Bool _hx_tmp2 = hx::IsNotNull( clipRect );
HXDLIN( 844)				if (_hx_tmp2) {
HXLINE( 845)					{
HXLINE( 845)						Int cap = gl->SCISSOR_TEST;
HXDLIN( 845)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_enable(cap);
            					}
HXLINE( 846)					{
HXLINE( 846)						Int x = ::Math_obj::floor(clipRect->x);
HXDLIN( 846)						Int y = ::Math_obj::floor(clipRect->y);
HXDLIN( 846)						Int width = ::Math_obj::floor(clipRect->width);
HXDLIN( 846)						Int height = ::Math_obj::floor(clipRect->height);
HXDLIN( 846)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_scissor(x,y,width,height);
            					}
            				}
HXLINE( 853)				bucket = glStack->buckets->__get(i).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucket >();
HXLINE( 855)				{
HXLINE( 855)					Int _hx_tmp3 = ( ( ::hx::EnumBase)(bucket->mode) )->_hx_getIndex();
HXDLIN( 855)					switch((int)(_hx_tmp3)){
            						case (int)1: case (int)2: {
HXLINE( 857)							 ::lime::utils::ArrayBufferView _hx_tmp4 = translationMatrix->toArray(true);
HXDLIN( 857)							renderSession->stencilManager->pushBucket(bucket,renderSession,_hx_tmp4,null());
HXLINE( 858)							 ::lime::utils::ArrayBufferView _hx_tmp5 = translationMatrix->toArray(true);
HXDLIN( 858)							HX_VARI(  ::openfl::_internal::renderer::opengl::shaders2::Shader,shader) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareShader(bucket,renderSession,object,_hx_tmp5);
HXLINE( 859)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::renderFill(bucket,shader,renderSession);
HXLINE( 860)							renderSession->stencilManager->popBucket(object,bucket,renderSession);
            						}
            						break;
            						case (int)5: {
HXLINE( 862)							HX_VARI_NAME(  ::openfl::_internal::renderer::opengl::shaders2::Shader,shader1,"shader") = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareShader(bucket,renderSession,object,null());
HXLINE( 863)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::renderDrawTriangles(bucket,shader1,renderSession);
            						}
            						break;
            						case (int)6: {
HXLINE( 865)							if (!(batchDrawing)) {
HXLINE( 866)								renderSession->spriteBatch->begin(renderSession,clipRect);
            							}
HXLINE( 868)							HX_VARI( ::cpp::VirtualArray,args) = ::Type_obj::enumParameters(bucket->graphicType);
HXLINE( 869)							renderSession->spriteBatch->renderTiles(object,( ( ::openfl::display::Tilesheet)(args->__get((int)0)) ),( (::Array< Float >)(args->__get((int)1)) ),( (Bool)(args->__get((int)2)) ),( (Int)(args->__get((int)3)) ),( ( ::openfl::display::Shader)(args->__get((int)4)) ),( (Int)(args->__get((int)5)) ));
HXLINE( 871)							renderSession->spriteBatch->finish();
            						}
            						break;
            						default:{
            						}
            					}
            				}
HXLINE( 875)				HX_VARI(  ::openfl::geom::ColorTransform,ct) = object->_hx___worldColorTransform;
HXLINE( 876)				{
HXLINE( 876)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 876)					HX_VARI( ::Array< ::Dynamic>,_g4) = bucket->lines;
HXDLIN( 876)					while((_g3 < _g4->length)){
HXLINE( 876)						HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,line) = _g4->__get(_g3).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN( 876)						++_g3;
HXLINE( 877)						Bool _hx_tmp6;
HXDLIN( 877)						Bool _hx_tmp7 = hx::IsNotNull( line );
HXDLIN( 877)						if (_hx_tmp7) {
HXLINE( 877)							_hx_tmp6 = (line->verts->length > (int)0);
            						}
            						else {
HXLINE( 877)							_hx_tmp6 = false;
            						}
HXDLIN( 877)						if (_hx_tmp6) {
HXLINE( 878)							HX_VARI_NAME(  ::openfl::_internal::renderer::opengl::shaders2::PrimitiveShader,shader2,"shader") = renderSession->shaderManager->primitiveShader;
HXLINE( 880)							renderSession->shaderManager->setShader(shader2,null());
HXLINE( 882)							{
HXLINE( 882)								Int location = shader2->getUniformLocation(HX_("openfl_uTranslationMatrix",6c,2c,b6,64));
HXDLIN( 882)								 ::lime::utils::ArrayBufferView v = translationMatrix->toArray(true);
HXDLIN( 882)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location,false,hx::DynamicPtr(v->buffer),(int)3);
            							}
HXLINE( 883)							{
HXLINE( 883)								Int location1 = shader2->getUniformLocation(HX_("openfl_uProjectionMatrix",16,8b,ff,93));
HXDLIN( 883)								 ::lime::utils::ArrayBufferView v1 = renderSession->projectionMatrix->toArray(true);
HXDLIN( 883)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location1,false,hx::DynamicPtr(v1->buffer),(int)3);
            							}
HXLINE( 884)							{
HXLINE( 884)								Int location2 = shader2->getUniformLocation(HX_("openfl_uAlpha",b8,8e,6a,92));
HXDLIN( 884)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1f(location2,(int)1);
            							}
HXLINE( 886)							{
HXLINE( 886)								Int location3 = shader2->getUniformLocation(HX_("openfl_uColorMultiplier",9e,72,0d,28));
HXDLIN( 886)								Float x1 = ct->redMultiplier;
HXDLIN( 886)								Float y1 = ct->greenMultiplier;
HXDLIN( 886)								Float z = ct->blueMultiplier;
HXDLIN( 886)								Float w = ct->alphaMultiplier;
HXDLIN( 886)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4f(location3,x1,y1,z,w);
            							}
HXLINE( 887)							{
HXLINE( 887)								Int location4 = shader2->getUniformLocation(HX_("openfl_uColorOffset",30,10,2f,e8));
HXDLIN( 887)								Float x2 = ((Float)ct->redOffset / (Float)(int)255);
HXDLIN( 887)								Float y2 = ((Float)ct->greenOffset / (Float)(int)255);
HXDLIN( 887)								Float z1 = ((Float)ct->blueOffset / (Float)(int)255);
HXDLIN( 887)								Float w1 = ((Float)ct->alphaOffset / (Float)(int)255);
HXDLIN( 887)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4f(location4,x2,y2,z1,w1);
            							}
HXLINE( 889)							{
HXLINE( 889)								HX_VARI(  ::openfl::_internal::renderer::opengl::utils::VertexArray,_this) = line->vertexArray;
HXDLIN( 889)								{
HXLINE( 889)									Int target = _this->gl->ARRAY_BUFFER;
HXDLIN( 889)									HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = _this->glBuffer;
HXDLIN( 889)									{
HXLINE( 889)										Int buffer1;
HXDLIN( 889)										Bool _hx_tmp8 = hx::IsNull( buffer );
HXDLIN( 889)										if (_hx_tmp8) {
HXLINE( 889)											buffer1 = (int)0;
            										}
            										else {
HXLINE( 889)											buffer1 = buffer->id;
            										}
HXDLIN( 889)										::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            									}
            								}
            							}
HXLINE( 890)							shader2->bindVertexArray(line->vertexArray);
HXLINE( 892)							{
HXLINE( 892)								Int target1 = gl->ELEMENT_ARRAY_BUFFER;
HXDLIN( 892)								HX_VARI_NAME(  ::lime::graphics::opengl::GLBuffer,buffer2,"buffer") = line->indexBuffer;
HXDLIN( 892)								{
HXLINE( 892)									Int buffer3;
HXDLIN( 892)									Bool _hx_tmp9 = hx::IsNull( buffer2 );
HXDLIN( 892)									if (_hx_tmp9) {
HXLINE( 892)										buffer3 = (int)0;
            									}
            									else {
HXLINE( 892)										buffer3 = buffer2->id;
            									}
HXDLIN( 892)									::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target1,buffer3);
            								}
            							}
HXLINE( 893)							{
HXLINE( 893)								Int mode = gl->TRIANGLE_STRIP;
HXDLIN( 893)								Int count = line->indices->length;
HXDLIN( 893)								Int type = gl->UNSIGNED_SHORT;
HXDLIN( 893)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_elements(mode,count,type,(int)0);
            							}
            						}
            					}
            				}
HXLINE( 897)				Bool _hx_tmp10 = hx::IsNotNull( clipRect );
HXDLIN( 897)				if (_hx_tmp10) {
HXLINE( 898)					Int cap1 = gl->SCISSOR_TEST;
HXDLIN( 898)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_disable(cap1);
            				}
HXLINE( 901)				batchDrawing = renderSession->spriteBatch->drawing;
HXLINE( 902)				Bool _hx_tmp11;
HXDLIN( 902)				if (!(batchDrawing)) {
HXLINE( 902)					_hx_tmp11 = !(localCoords);
            				}
            				else {
HXLINE( 902)					_hx_tmp11 = false;
            				}
HXDLIN( 902)				if (_hx_tmp11) {
HXLINE( 903)					renderSession->spriteBatch->begin(renderSession,clipRect);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,renderGraphics,(void))

void GraphicsRenderer_obj::updateGraphics( ::openfl::display::DisplayObject object, ::openfl::display::Graphics graphics, ::lime::graphics::GLRenderContext gl, ::Dynamic __o_localCoords){
 ::Dynamic localCoords = __o_localCoords.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","updateGraphics",0xa0662573,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.updateGraphics","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",908,0xd295150c)
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(localCoords,"localCoords")
HXLINE( 910)		Float _hx_tmp = object->get_x();
HXDLIN( 910)		Float _hx_tmp1 = object->get_y();
HXDLIN( 910)		::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectPosition->setTo(_hx_tmp,_hx_tmp1);
HXLINE( 912)		Bool _hx_tmp2 = hx::IsNull( graphics->_hx___bounds );
HXDLIN( 912)		if (_hx_tmp2) {
HXLINE( 913)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            		}
            		else {
HXLINE( 915)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->copyFrom(graphics->_hx___bounds);
            		}
HXLINE( 918)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLStack,glStack) = null();
HXLINE( 920)		Bool _hx_tmp3 = graphics->_hx___dirty;
HXDLIN( 920)		if (_hx_tmp3) {
HXLINE( 922)			glStack = ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::getStack(graphics,gl);
            		}
HXLINE( 926)		graphics->set___dirty(false);
HXLINE( 928)		{
HXLINE( 928)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 928)			HX_VARI( ::Array< ::Dynamic>,_g1) = glStack->buckets;
HXDLIN( 928)			while((_g < _g1->length)){
HXLINE( 928)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,data) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucket >();
HXDLIN( 928)				++_g;
HXLINE( 929)				data->reset();
HXLINE( 930)				::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::bucketPool->push(data);
            			}
            		}
HXLINE( 933)		glStack->reset();
HXLINE( 935)		{
HXLINE( 935)			HX_VARI_NAME( Int,_g11,"_g1") = glStack->lastIndex;
HXDLIN( 935)			HX_VARI_NAME( Int,_g2,"_g") = graphics->_hx___drawPaths->length;
HXDLIN( 935)			while((_g11 < _g2)){
HXLINE( 935)				HX_VARI( Int,i) = _g11++;
HXLINE( 936)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::DrawPath,path) = graphics->_hx___drawPaths->__get(i).StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
HXLINE( 938)				{
HXLINE( 938)					HX_VARI_NAME( ::hx::EnumBase,_g21,"_g2") = path->type;
HXDLIN( 938)					Int _hx_tmp4 = ( ( ::hx::EnumBase)(_g21) )->_hx_getIndex();
HXDLIN( 938)					switch((int)(_hx_tmp4)){
            						case (int)0: {
HXLINE( 940)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildComplexPoly(path,glStack,localCoords);
            						}
            						break;
            						case (int)1: {
HXLINE( 942)							if (_g21->_hx_getBool(0)) {
HXLINE( 943)								::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildRoundedRectangle(path,glStack,localCoords);
            							}
            							else {
HXLINE( 945)								::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildRectangle(path,glStack,localCoords);
            							}
            						}
            						break;
            						case (int)2: case (int)3: {
HXLINE( 948)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildCircle(path,glStack,localCoords);
            						}
            						break;
            						case (int)4: {
HXLINE( 950)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::buildDrawTriangles(path,object,glStack,localCoords);
            						}
            						break;
            						case (int)5: {
HXLINE( 952)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::prepareBucket(path,glStack);
            						}
            						break;
            						case (int)6: {
HXLINE( 954)							::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::overrideMatrix = _g21->_hx_getObject(0).StaticCast<  ::openfl::geom::Matrix >();
            						}
            						break;
            					}
            				}
HXLINE( 958)				glStack->lastIndex++;
            			}
            		}
HXLINE( 961)		{
HXLINE( 961)			HX_VARI_NAME( Int,_g3,"_g") = (int)0;
HXDLIN( 961)			HX_VARI_NAME( ::Array< ::Dynamic>,_g12,"_g1") = glStack->buckets;
HXDLIN( 961)			while((_g3 < _g12->length)){
HXLINE( 961)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = _g12->__get(_g3).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucket >();
HXDLIN( 961)				++_g3;
HXLINE( 963)				Bool _hx_tmp5 = bucket->uploadTileBuffer;
HXDLIN( 963)				if (_hx_tmp5) {
HXLINE( 966)					Float _hx_tmp6 = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->get_left();
HXDLIN( 966)					Int _hx_tmp7 = ::Math_obj::ceil(_hx_tmp6);
HXLINE( 967)					Float _hx_tmp8 = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->get_top();
HXDLIN( 967)					Int _hx_tmp9 = ::Math_obj::ceil(_hx_tmp8);
HXLINE( 968)					Float _hx_tmp10 = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->get_right();
HXDLIN( 968)					Int _hx_tmp11 = ::Math_obj::floor(_hx_tmp10);
HXLINE( 969)					Float _hx_tmp12 = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::objectBounds->get_bottom();
HXDLIN( 969)					Int _hx_tmp13 = ::Math_obj::floor(_hx_tmp12);
HXLINE( 965)					bucket->uploadTile(_hx_tmp7,_hx_tmp9,_hx_tmp11,_hx_tmp13);
            				}
HXLINE( 974)				bucket->optimize();
            			}
            		}
HXLINE( 977)		glStack->upload();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GraphicsRenderer_obj,updateGraphics,(void))

 ::openfl::_internal::renderer::opengl::utils::GLBucket GraphicsRenderer_obj::prepareBucket( ::openfl::_internal::renderer::opengl::utils::DrawPath path, ::openfl::_internal::renderer::opengl::utils::GLStack glStack){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","prepareBucket",0x0dd304b2,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareBucket","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",981,0xd295150c)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(glStack,"glStack")
HXLINE( 982)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = null();
HXLINE( 983)		{
HXLINE( 983)			HX_VARI( ::hx::EnumBase,_g) = path->fill;
HXDLIN( 983)			Int _hx_tmp = ( ( ::hx::EnumBase)(_g) )->_hx_getIndex();
HXDLIN( 983)			switch((int)(_hx_tmp)){
            				case (int)1: {
HXLINE( 984)					HX_VARI( Float,a) = _g->_hx_getFloat(1);
HXDLIN( 984)					HX_VARI( Int,c) = _g->_hx_getInt(0);
HXDLIN( 984)					{
HXLINE( 985)						bucket = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::switchBucket(path->fillIndex,glStack,::openfl::_internal::renderer::opengl::utils::BucketMode_obj::Fill_dyn());
HXLINE( 986)						::Array< Float > _hx_tmp1;
HXDLIN( 986)						Bool _hx_tmp2 = hx::IsNull( c );
HXDLIN( 986)						if (_hx_tmp2) {
HXLINE( 986)							_hx_tmp1 = ::Array_obj< Float >::fromData( _hx_array_data_21,3);
            						}
            						else {
HXLINE( 986)							_hx_tmp1 = ::Array_obj< Float >::__new(3)->init(0,((Float)((int)((int)c >> (int)(int)16) & (int)(int)255) / (Float)(int)255))->init(1,((Float)((int)((int)c >> (int)(int)8) & (int)(int)255) / (Float)(int)255))->init(2,((Float)((int)c & (int)(int)255) / (Float)(int)255));
            						}
HXDLIN( 986)						bucket->color = _hx_tmp1;
HXLINE( 987)						bucket->color[(int)3] = a;
HXLINE( 988)						bucket->uploadTileBuffer = true;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 990)					HX_VARI( Bool,s) = _g->_hx_getBool(3);
HXDLIN( 990)					HX_VARI( Bool,r) = _g->_hx_getBool(2);
HXDLIN( 990)					HX_VARI(  ::openfl::geom::Matrix,m) = _g->_hx_getObject(1).StaticCast<  ::openfl::geom::Matrix >();
HXDLIN( 990)					HX_VARI(  ::openfl::display::BitmapData,b) = _g->_hx_getObject(0).StaticCast<  ::openfl::display::BitmapData >();
HXDLIN( 990)					{
HXLINE( 991)						bucket = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::switchBucket(path->fillIndex,glStack,::openfl::_internal::renderer::opengl::utils::BucketMode_obj::PatternFill_dyn());
HXLINE( 992)						bucket->bitmap = b;
HXLINE( 993)						bucket->textureRepeat = r;
HXLINE( 994)						bucket->textureSmooth = s;
HXLINE( 995)						bucket->texture = b->getTexture(glStack->gl);
HXLINE( 996)						bucket->uploadTileBuffer = true;
HXLINE( 999)						HX_VAR(  ::openfl::geom::Matrix,pMatrix);
HXLINE(1000)						Bool _hx_tmp3 = hx::IsNull( m );
HXDLIN(1000)						if (_hx_tmp3) {
HXLINE(1001)							pMatrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            						}
            						else {
HXLINE(1003)							pMatrix = m->clone();
            						}
HXLINE(1006)						pMatrix->invert();
HXLINE(1007)						Float _hx_tmp4 = ((Float)(int)1 / (Float)b->width);
HXDLIN(1007)						Float _hx_tmp5 = ((Float)(int)1 / (Float)b->height);
HXDLIN(1007)						pMatrix->scale(_hx_tmp4,_hx_tmp5);
HXLINE(1008)						HX_VARI( Float,tx) = pMatrix->tx;
HXLINE(1009)						HX_VARI( Float,ty) = pMatrix->ty;
HXLINE(1010)						pMatrix->tx = (int)0;
HXLINE(1011)						pMatrix->ty = (int)0;
HXLINE(1013)						bucket->textureTL->x = tx;
HXLINE(1014)						bucket->textureTL->y = ty;
HXLINE(1015)						bucket->textureBR->x = (tx + (int)1);
HXLINE(1016)						bucket->textureBR->y = (ty + (int)1);
HXLINE(1018)						bucket->textureMatrix = pMatrix;
            					}
            				}
            				break;
            				default:{
HXLINE(1020)					bucket = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::switchBucket(path->fillIndex,glStack,::openfl::_internal::renderer::opengl::utils::BucketMode_obj::Line_dyn());
HXLINE(1021)					bucket->uploadTileBuffer = false;
            				}
            			}
            		}
HXLINE(1024)		{
HXLINE(1024)			Int _hx_tmp6 = ( ( ::hx::EnumBase)(path->type) )->_hx_getIndex();
HXDLIN(1024)			switch((int)(_hx_tmp6)){
            				case (int)4: {
HXLINE(1026)					bucket->mode = ::openfl::_internal::renderer::opengl::utils::BucketMode_obj::DrawTriangles_dyn();
HXLINE(1027)					bucket->uploadTileBuffer = false;
            				}
            				break;
            				case (int)5: {
HXLINE(1029)					bucket->mode = ::openfl::_internal::renderer::opengl::utils::BucketMode_obj::DrawTiles_dyn();
HXLINE(1030)					bucket->uploadTileBuffer = false;
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1034)		bucket->graphicType = path->type;
HXLINE(1035)		bucket->overrideMatrix = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::overrideMatrix;
HXLINE(1037)		return bucket;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GraphicsRenderer_obj,prepareBucket,return )

 ::openfl::_internal::renderer::opengl::utils::GLBucket GraphicsRenderer_obj::getBucket( ::openfl::_internal::renderer::opengl::utils::GLStack glStack,::hx::EnumBase mode){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","getBucket",0x4967a481,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.getBucket","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1040,0xd295150c)
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(mode,"mode")
HXLINE(1041)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,b) = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::bucketPool->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucket >();
HXLINE(1042)		Bool _hx_tmp = hx::IsNull( b );
HXDLIN(1042)		if (_hx_tmp) {
HXLINE(1043)			b =  ::openfl::_internal::renderer::opengl::utils::GLBucket_obj::__new(glStack->gl);
            		}
HXLINE(1045)		b->mode = mode;
HXLINE(1046)		glStack->buckets->push(b);
HXLINE(1047)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GraphicsRenderer_obj,getBucket,return )

 ::openfl::_internal::renderer::opengl::utils::GLBucket GraphicsRenderer_obj::switchBucket(Int fillIndex, ::openfl::_internal::renderer::opengl::utils::GLStack glStack,::hx::EnumBase mode){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","switchBucket",0xb3071d3d,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.switchBucket","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1050,0xd295150c)
            	HX_STACK_ARG(fillIndex,"fillIndex")
            	HX_STACK_ARG(glStack,"glStack")
            	HX_STACK_ARG(mode,"mode")
HXLINE(1052)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,bucket) = null();
HXLINE(1054)		{
HXLINE(1054)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1054)			HX_VARI( ::Array< ::Dynamic>,_g1) = glStack->buckets;
HXDLIN(1054)			while((_g < _g1->length)){
HXLINE(1054)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucket,b) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucket >();
HXDLIN(1054)				++_g;
HXLINE(1055)				if ((b->fillIndex == fillIndex)) {
HXLINE(1056)					bucket = b;
HXLINE(1057)					goto _hx_goto_22;
            				}
            			}
            			_hx_goto_22:;
            		}
HXLINE(1061)		Bool _hx_tmp = hx::IsNull( bucket );
HXDLIN(1061)		if (_hx_tmp) {
HXLINE(1062)			bucket = ::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::getBucket(glStack,mode);
            		}
HXLINE(1065)		bucket->dirty = true;
HXLINE(1066)		bucket->fillIndex = fillIndex;
HXLINE(1068)		return bucket;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,switchBucket,return )

 ::openfl::_internal::renderer::opengl::shaders2::Shader GraphicsRenderer_obj::prepareShader( ::openfl::_internal::renderer::opengl::utils::GLBucket bucket, ::openfl::_internal::renderer::RenderSession renderSession, ::openfl::display::DisplayObject object, ::lime::utils::ArrayBufferView translationMatrix){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","prepareShader",0x5c56df6d,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.prepareShader","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1071,0xd295150c)
            	HX_STACK_ARG(bucket,"bucket")
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(object,"object")
            	HX_STACK_ARG(translationMatrix,"translationMatrix")
HXLINE(1073)		HX_VARI(  ::openfl::_internal::renderer::opengl::shaders2::Shader,shader) = null();
HXLINE(1075)		Int _hx_tmp = ( ( ::hx::EnumBase)(bucket->mode) )->_hx_getIndex();
HXDLIN(1075)		switch((int)(_hx_tmp)){
            			case (int)1: {
HXLINE(1077)				shader = renderSession->shaderManager->fillShader;
            			}
            			break;
            			case (int)2: {
HXLINE(1079)				shader = renderSession->shaderManager->patternFillShader;
            			}
            			break;
            			case (int)5: {
HXLINE(1081)				shader = renderSession->shaderManager->drawTrianglesShader;
            			}
            			break;
            			default:{
HXLINE(1083)				shader = null();
            			}
            		}
HXLINE(1086)		Bool _hx_tmp1 = hx::IsNull( shader );
HXDLIN(1086)		if (_hx_tmp1) {
HXLINE(1086)			return null();
            		}
HXLINE(1088)		renderSession->shaderManager->setShader(shader,null());
HXLINE(1091)		{
HXLINE(1091)			Int location = shader->getUniformLocation(HX_("openfl_uAlpha",b8,8e,6a,92));
HXDLIN(1091)			Float x = object->_hx___worldAlpha;
HXDLIN(1091)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1f(location,x);
            		}
HXLINE(1092)		{
HXLINE(1092)			Int location1 = shader->getUniformLocation(HX_("openfl_uProjectionMatrix",16,8b,ff,93));
HXDLIN(1092)			 ::lime::utils::ArrayBufferView v = renderSession->projectionMatrix->toArray(true);
HXDLIN(1092)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location1,false,hx::DynamicPtr(v->buffer),(int)3);
            		}
HXLINE(1094)		HX_VARI(  ::openfl::geom::ColorTransform,ct) = object->_hx___worldColorTransform;
HXLINE(1095)		{
HXLINE(1095)			Int location2 = shader->getUniformLocation(HX_("openfl_uColorMultiplier",9e,72,0d,28));
HXDLIN(1095)			Float x1 = ct->redMultiplier;
HXDLIN(1095)			Float y = ct->greenMultiplier;
HXDLIN(1095)			Float z = ct->blueMultiplier;
HXDLIN(1095)			Float w = ct->alphaMultiplier;
HXDLIN(1095)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4f(location2,x1,y,z,w);
            		}
HXLINE(1096)		{
HXLINE(1096)			Int location3 = shader->getUniformLocation(HX_("openfl_uColorOffset",30,10,2f,e8));
HXDLIN(1096)			Float x2 = ((Float)ct->redOffset / (Float)(int)255);
HXDLIN(1096)			Float y1 = ((Float)ct->greenOffset / (Float)(int)255);
HXDLIN(1096)			Float z1 = ((Float)ct->blueOffset / (Float)(int)255);
HXDLIN(1096)			Float w1 = ((Float)ct->alphaOffset / (Float)(int)255);
HXDLIN(1096)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4f(location3,x2,y1,z1,w1);
            		}
HXLINE(1099)		{
HXLINE(1099)			Int _hx_tmp2 = ( ( ::hx::EnumBase)(bucket->mode) )->_hx_getIndex();
HXDLIN(1099)			switch((int)(_hx_tmp2)){
            				case (int)1: {
HXLINE(1101)					{
HXLINE(1101)						Int location4 = shader->getUniformLocation(HX_("openfl_uTranslationMatrix",6c,2c,b6,64));
HXDLIN(1101)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location4,false,hx::DynamicPtr(translationMatrix->buffer),(int)3);
            					}
HXLINE(1102)					{
HXLINE(1102)						Int location5 = shader->getUniformLocation(HX_("openfl_uColor",bd,58,30,bb));
HXDLIN(1102)						HX_VARI( ::cpp::VirtualArray,array) = bucket->color;
HXDLIN(1102)						HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(1102)						Bool _hx_tmp3 = hx::IsNotNull( array );
HXDLIN(1102)						if (_hx_tmp3) {
HXLINE(1102)							HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(1102)							_this->byteOffset = (int)0;
HXDLIN(1102)							_this->length = array->get_length();
HXDLIN(1102)							Int _hx_tmp4 = (_this->length * _this->bytesPerElement);
HXDLIN(1102)							_this->byteLength = _hx_tmp4;
HXDLIN(1102)							Int byteLength = _this->byteLength;
HXDLIN(1102)							HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(1102)							_this->buffer = this2;
HXDLIN(1102)							_this->copyFromArray(array,null());
HXDLIN(1102)							this1 = _this;
            						}
            						else {
HXLINE(1102)							HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            						}
HXDLIN(1102)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4fv(location5,hx::DynamicPtr(this1->buffer));
            					}
            				}
            				break;
            				case (int)2: {
HXLINE(1104)					{
HXLINE(1104)						Int location6 = shader->getUniformLocation(HX_("openfl_uTranslationMatrix",6c,2c,b6,64));
HXDLIN(1104)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location6,false,hx::DynamicPtr(translationMatrix->buffer),(int)3);
            					}
HXLINE(1105)					{
HXLINE(1105)						Int location7 = shader->getUniformLocation(HX_("openfl_uPatternTL",22,20,65,da));
HXDLIN(1105)						Float x3 = bucket->textureTL->x;
HXDLIN(1105)						Float y2 = bucket->textureTL->y;
HXDLIN(1105)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform2f(location7,x3,y2);
            					}
HXLINE(1106)					{
HXLINE(1106)						Int location8 = shader->getUniformLocation(HX_("openfl_uPatternBR",7a,10,65,da));
HXDLIN(1106)						Float x4 = bucket->textureBR->x;
HXDLIN(1106)						Float y3 = bucket->textureBR->y;
HXDLIN(1106)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform2f(location8,x4,y3);
            					}
HXLINE(1107)					{
HXLINE(1107)						Int location9 = shader->getUniformLocation(HX_("openfl_uPatternMatrix",0b,1e,03,6f));
HXDLIN(1107)						 ::lime::utils::ArrayBufferView v1 = bucket->textureMatrix->toArray(true);
HXDLIN(1107)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform_matrix(location9,false,hx::DynamicPtr(v1->buffer),(int)3);
            					}
            				}
            				break;
            				case (int)5: {
HXLINE(1109)					Bool _hx_tmp5 = hx::IsNotNull( bucket->texture );
HXDLIN(1109)					if (_hx_tmp5) {
HXLINE(1110)						Int location10 = shader->getUniformLocation(HX_("openfl_uUseTexture",ba,1d,59,c0));
HXDLIN(1110)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1i(location10,(int)1);
            					}
            					else {
HXLINE(1112)						{
HXLINE(1112)							Int location11 = shader->getUniformLocation(HX_("openfl_uUseTexture",ba,1d,59,c0));
HXDLIN(1112)							::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform1i(location11,(int)0);
            						}
HXLINE(1113)						{
HXLINE(1113)							Int location12 = shader->getUniformLocation(HX_("openfl_uColor",bd,58,30,bb));
HXDLIN(1113)							HX_VARI_NAME( ::cpp::VirtualArray,array1,"array") = bucket->color;
HXDLIN(1113)							HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this3,"this");
HXDLIN(1113)							Bool _hx_tmp6 = hx::IsNotNull( array1 );
HXDLIN(1113)							if (_hx_tmp6) {
HXLINE(1113)								HX_VARI_NAME(  ::lime::utils::ArrayBufferView,_this1,"_this") =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(1113)								_this1->byteOffset = (int)0;
HXDLIN(1113)								_this1->length = array1->get_length();
HXDLIN(1113)								Int _hx_tmp7 = (_this1->length * _this1->bytesPerElement);
HXDLIN(1113)								_this1->byteLength = _hx_tmp7;
HXDLIN(1113)								Int byteLength1 = _this1->byteLength;
HXDLIN(1113)								HX_VARI_NAME(  ::haxe::io::Bytes,this4,"this") = ::haxe::io::Bytes_obj::alloc(byteLength1);
HXDLIN(1113)								_this1->buffer = this4;
HXDLIN(1113)								_this1->copyFromArray(array1,null());
HXDLIN(1113)								this3 = _this1;
            							}
            							else {
HXLINE(1113)								HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            							}
HXDLIN(1113)							::lime::graphics::opengl::GL_obj::cffi_lime_gl_uniform4fv(location12,hx::DynamicPtr(this3->buffer));
            						}
            					}
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE(1118)		return shader;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(GraphicsRenderer_obj,prepareShader,return )

void GraphicsRenderer_obj::renderFill( ::openfl::_internal::renderer::opengl::utils::GLBucket bucket, ::openfl::_internal::renderer::opengl::shaders2::Shader shader, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","renderFill",0x880196f8,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderFill","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1121,0xd295150c)
            	HX_STACK_ARG(bucket,"bucket")
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1122)		HX_VARI(  ::lime::graphics::GLRenderContext,gl) = renderSession->gl;
HXLINE(1124)		Bool _hx_tmp;
HXDLIN(1124)		if (hx::IsEq( bucket->mode,::openfl::_internal::renderer::opengl::utils::BucketMode_obj::PatternFill_dyn() )) {
HXLINE(1124)			_hx_tmp = hx::IsNotNull( bucket->texture );
            		}
            		else {
HXLINE(1124)			_hx_tmp = false;
            		}
HXDLIN(1124)		if (_hx_tmp) {
HXLINE(1125)			::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::bindTexture(gl,bucket);
            		}
HXLINE(1128)		{
HXLINE(1128)			Int target = gl->ARRAY_BUFFER;
HXDLIN(1128)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = bucket->tileBuffer;
HXDLIN(1128)			{
HXLINE(1128)				Int buffer1;
HXDLIN(1128)				Bool _hx_tmp1 = hx::IsNull( buffer );
HXDLIN(1128)				if (_hx_tmp1) {
HXLINE(1128)					buffer1 = (int)0;
            				}
            				else {
HXLINE(1128)					buffer1 = buffer->id;
            				}
HXDLIN(1128)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            			}
            		}
HXLINE(1129)		{
HXLINE(1129)			Int indx = shader->getAttribLocation(HX_("openfl_aPosition",7b,19,f2,d0));
HXDLIN(1129)			Int type = gl->SHORT;
HXDLIN(1129)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_vertex_attrib_pointer(indx,(int)4,type,false,(int)0,(int)0);
            		}
HXLINE(1130)		{
HXLINE(1130)			Int mode = gl->TRIANGLE_STRIP;
HXDLIN(1130)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_arrays(mode,(int)0,(int)4);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,renderFill,(void))

void GraphicsRenderer_obj::renderDrawTriangles( ::openfl::_internal::renderer::opengl::utils::GLBucket bucket, ::openfl::_internal::renderer::opengl::shaders2::Shader shader, ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","renderDrawTriangles",0x793244f2,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.renderDrawTriangles","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1133,0xd295150c)
            	HX_STACK_ARG(bucket,"bucket")
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1134)		HX_VARI(  ::lime::graphics::GLRenderContext,gl) = renderSession->gl;
HXLINE(1136)		{
HXLINE(1136)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1136)			HX_VARI( ::Array< ::Dynamic>,_g1) = bucket->fills;
HXDLIN(1136)			while((_g < _g1->length)){
HXLINE(1136)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLBucketData,fill) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLBucketData >();
HXDLIN(1136)				++_g;
HXLINE(1137)				if (fill->available) {
HXLINE(1137)					continue;
            				}
HXLINE(1139)				::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::bindTexture(gl,bucket);
HXLINE(1140)				{
HXLINE(1140)					HX_VARI(  ::openfl::_internal::renderer::opengl::utils::VertexArray,_this) = fill->vertexArray;
HXDLIN(1140)					{
HXLINE(1140)						Int target = _this->gl->ARRAY_BUFFER;
HXDLIN(1140)						HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = _this->glBuffer;
HXDLIN(1140)						{
HXLINE(1140)							Int buffer1;
HXDLIN(1140)							Bool _hx_tmp = hx::IsNull( buffer );
HXDLIN(1140)							if (_hx_tmp) {
HXLINE(1140)								buffer1 = (int)0;
            							}
            							else {
HXLINE(1140)								buffer1 = buffer->id;
            							}
HXDLIN(1140)							::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            						}
            					}
            				}
HXLINE(1141)				shader->bindVertexArray(fill->vertexArray);
HXLINE(1143)				{
HXLINE(1143)					Int mode = gl->TRIANGLES;
HXDLIN(1143)					Int first = fill->glStart;
HXDLIN(1143)					Int count = fill->glLength;
HXDLIN(1143)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_draw_arrays(mode,first,count);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(GraphicsRenderer_obj,renderDrawTriangles,(void))

void GraphicsRenderer_obj::bindTexture( ::lime::graphics::GLRenderContext gl, ::openfl::_internal::renderer::opengl::utils::GLBucket bucket){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","bindTexture",0x486a4dbf,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.bindTexture","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1147,0xd295150c)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(bucket,"bucket")
HXLINE(1149)		{
HXLINE(1149)			Int target = gl->TEXTURE_2D;
HXDLIN(1149)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = bucket->texture;
HXDLIN(1149)			{
HXLINE(1149)				Int texture1;
HXDLIN(1149)				Bool _hx_tmp = hx::IsNull( texture );
HXDLIN(1149)				if (_hx_tmp) {
HXLINE(1149)					texture1 = (int)0;
            				}
            				else {
HXLINE(1149)					texture1 = texture->id;
            				}
HXDLIN(1149)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,texture1);
            			}
            		}
HXLINE(1152)		Bool _hx_tmp1 = bucket->textureRepeat;
HXDLIN(1152)		if (_hx_tmp1) {
HXLINE(1153)			{
HXLINE(1153)				Int target1 = gl->TEXTURE_2D;
HXDLIN(1153)				Int pname = gl->TEXTURE_WRAP_S;
HXDLIN(1153)				Int param = gl->REPEAT;
HXDLIN(1153)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param);
            			}
HXLINE(1154)			{
HXLINE(1154)				Int target2 = gl->TEXTURE_2D;
HXDLIN(1154)				Int pname1 = gl->TEXTURE_WRAP_T;
HXDLIN(1154)				Int param1 = gl->REPEAT;
HXDLIN(1154)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param1);
            			}
            		}
            		else {
HXLINE(1156)			{
HXLINE(1156)				Int target3 = gl->TEXTURE_2D;
HXDLIN(1156)				Int pname2 = gl->TEXTURE_WRAP_S;
HXDLIN(1156)				Int param2 = gl->CLAMP_TO_EDGE;
HXDLIN(1156)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target3,pname2,param2);
            			}
HXLINE(1157)			{
HXLINE(1157)				Int target4 = gl->TEXTURE_2D;
HXDLIN(1157)				Int pname3 = gl->TEXTURE_WRAP_T;
HXDLIN(1157)				Int param3 = gl->CLAMP_TO_EDGE;
HXDLIN(1157)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target4,pname3,param3);
            			}
            		}
HXLINE(1160)		Bool _hx_tmp2 = bucket->textureSmooth;
HXDLIN(1160)		if (_hx_tmp2) {
HXLINE(1161)			{
HXLINE(1161)				Int target5 = gl->TEXTURE_2D;
HXDLIN(1161)				Int pname4 = gl->TEXTURE_MAG_FILTER;
HXDLIN(1161)				Int param4 = gl->LINEAR;
HXDLIN(1161)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target5,pname4,param4);
            			}
HXLINE(1162)			{
HXLINE(1162)				Int target6 = gl->TEXTURE_2D;
HXDLIN(1162)				Int pname5 = gl->TEXTURE_MIN_FILTER;
HXDLIN(1162)				Int param5 = gl->LINEAR;
HXDLIN(1162)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target6,pname5,param5);
            			}
            		}
            		else {
HXLINE(1164)			{
HXLINE(1164)				Int target7 = gl->TEXTURE_2D;
HXDLIN(1164)				Int pname6 = gl->TEXTURE_MAG_FILTER;
HXDLIN(1164)				Int param6 = gl->NEAREST;
HXDLIN(1164)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target7,pname6,param6);
            			}
HXLINE(1165)			{
HXLINE(1165)				Int target8 = gl->TEXTURE_2D;
HXDLIN(1165)				Int pname7 = gl->TEXTURE_MIN_FILTER;
HXDLIN(1165)				Int param7 = gl->NEAREST;
HXDLIN(1165)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target8,pname7,param7);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(GraphicsRenderer_obj,bindTexture,(void))

Bool GraphicsRenderer_obj::isCCW(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","isCCW",0xc37e766e,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.isCCW","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1171,0xd295150c)
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE(1171)		return ((((x2 - x1) * (y3 - y1)) - ((y2 - y1) * (x3 - x1))) < (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(GraphicsRenderer_obj,isCCW,return )

::Array< Float > GraphicsRenderer_obj::hex2rgb( ::Dynamic hex){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","hex2rgb",0x2f5bdf17,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgb","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1175,0xd295150c)
            	HX_STACK_ARG(hex,"hex")
HXLINE(1175)		Bool _hx_tmp = hx::IsNull( hex );
HXDLIN(1175)		if (_hx_tmp) {
HXLINE(1175)			return ::Array_obj< Float >::fromData( _hx_array_data_24,3);
            		}
            		else {
HXLINE(1175)			return ::Array_obj< Float >::__new(3)->init(0,((Float)((int)((int)hex >> (int)(int)16) & (int)(int)255) / (Float)(int)255))->init(1,((Float)((int)((int)hex >> (int)(int)8) & (int)(int)255) / (Float)(int)255))->init(2,((Float)((int)hex & (int)(int)255) / (Float)(int)255));
            		}
HXDLIN(1175)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GraphicsRenderer_obj,hex2rgb,return )

::Array< Float > GraphicsRenderer_obj::hex2rgba( ::Dynamic hex){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","hex2rgba",0x4107556a,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.hex2rgba","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",1179,0xd295150c)
            	HX_STACK_ARG(hex,"hex")
HXLINE(1179)		Bool _hx_tmp = hx::IsNull( hex );
HXDLIN(1179)		if (_hx_tmp) {
HXLINE(1179)			return ::Array_obj< Float >::fromData( _hx_array_data_25,4);
            		}
            		else {
HXLINE(1179)			return ::Array_obj< Float >::__new(4)->init(0,((Float)((int)((int)hex >> (int)(int)16) & (int)(int)255) / (Float)(int)255))->init(1,((Float)((int)((int)hex >> (int)(int)8) & (int)(int)255) / (Float)(int)255))->init(2,((Float)((int)hex & (int)(int)255) / (Float)(int)255))->init(3,((Float)((int)((int)hex >> (int)(int)24) & (int)(int)255) / (Float)(int)255));
            		}
HXDLIN(1179)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(GraphicsRenderer_obj,hex2rgba,return )


GraphicsRenderer_obj::GraphicsRenderer_obj()
{
}

bool GraphicsRenderer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { outValue = SIN45; return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { outValue = TAN22; return true; }
		if (HX_FIELD_EQ(inName,"isCCW") ) { outValue = isCCW_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { outValue = render_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hex2rgb") ) { outValue = hex2rgb_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"hex2rgba") ) { outValue = hex2rgba_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"buildLine") ) { outValue = buildLine_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"buildPoly") ) { outValue = buildPoly_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBucket") ) { outValue = getBucket_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bucketPool") ) { outValue = bucketPool; return true; }
		if (HX_FIELD_EQ(inName,"renderFill") ) { outValue = renderFill_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastTexture") ) { outValue = lastTexture; return true; }
		if (HX_FIELD_EQ(inName,"buildCircle") ) { outValue = buildCircle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"bindTexture") ) { outValue = bindTexture_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"objectBounds") ) { outValue = objectBounds; return true; }
		if (HX_FIELD_EQ(inName,"switchBucket") ) { outValue = switchBucket_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"prepareBucket") ) { outValue = prepareBucket_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prepareShader") ) { outValue = prepareShader_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectPosition") ) { outValue = objectPosition; return true; }
		if (HX_FIELD_EQ(inName,"lastBucketMode") ) { outValue = lastBucketMode; return true; }
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { outValue = overrideMatrix; return true; }
		if (HX_FIELD_EQ(inName,"buildRectangle") ) { outValue = buildRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"buildDrawTiles") ) { outValue = buildDrawTiles_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"renderGraphics") ) { outValue = renderGraphics_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"updateGraphics") ) { outValue = updateGraphics_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastVertsBuffer") ) { outValue = lastVertsBuffer; return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"graphicsDataPool") ) { outValue = graphicsDataPool; return true; }
		if (HX_FIELD_EQ(inName,"buildComplexPoly") ) { outValue = buildComplexPoly_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"lastTextureRepeat") ) { outValue = lastTextureRepeat; return true; }
		if (HX_FIELD_EQ(inName,"lastTextureSmooth") ) { outValue = lastTextureSmooth; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"buildDrawTriangles") ) { outValue = buildDrawTriangles_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"renderDrawTriangles") ) { outValue = renderDrawTriangles_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fillVertexAttributes") ) { outValue = fillVertexAttributes; return true; }
		if (HX_FIELD_EQ(inName,"quadraticBezierCurve") ) { outValue = quadraticBezierCurve_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"buildRoundedRectangle") ) { outValue = buildRoundedRectangle_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"primitiveVertexAttributes") ) { outValue = primitiveVertexAttributes; return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"drawTrianglesVertexAttributes") ) { outValue = drawTrianglesVertexAttributes; return true; }
	}
	return false;
}

bool GraphicsRenderer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"SIN45") ) { SIN45=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"TAN22") ) { TAN22=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bucketPool") ) { bucketPool=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastTexture") ) { lastTexture=ioValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"objectBounds") ) { objectBounds=ioValue.Cast<  ::openfl::geom::Rectangle >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectPosition") ) { objectPosition=ioValue.Cast<  ::openfl::geom::Point >(); return true; }
		if (HX_FIELD_EQ(inName,"lastBucketMode") ) { lastBucketMode=ioValue.Cast< ::hx::EnumBase >(); return true; }
		if (HX_FIELD_EQ(inName,"overrideMatrix") ) { overrideMatrix=ioValue.Cast<  ::openfl::geom::Matrix >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"lastVertsBuffer") ) { lastVertsBuffer=ioValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"graphicsDataPool") ) { graphicsDataPool=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"lastTextureRepeat") ) { lastTextureRepeat=ioValue.Cast< Bool >(); return true; }
		if (HX_FIELD_EQ(inName,"lastTextureSmooth") ) { lastTextureSmooth=ioValue.Cast< Bool >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fillVertexAttributes") ) { fillVertexAttributes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"primitiveVertexAttributes") ) { primitiveVertexAttributes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"drawTrianglesVertexAttributes") ) { drawTrianglesVertexAttributes=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GraphicsRenderer_obj_sMemberStorageInfo = 0;
static hx::StaticInfo GraphicsRenderer_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &GraphicsRenderer_obj::fillVertexAttributes,HX_HCSTRING("fillVertexAttributes","\xfe","\x4d","\x43","\xc4")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &GraphicsRenderer_obj::drawTrianglesVertexAttributes,HX_HCSTRING("drawTrianglesVertexAttributes","\x82","\x0b","\xa2","\x6b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &GraphicsRenderer_obj::primitiveVertexAttributes,HX_HCSTRING("primitiveVertexAttributes","\x22","\x90","\xbd","\x30")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &GraphicsRenderer_obj::graphicsDataPool,HX_HCSTRING("graphicsDataPool","\x11","\x58","\x10","\xd8")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &GraphicsRenderer_obj::bucketPool,HX_HCSTRING("bucketPool","\x66","\x0e","\x8e","\xe6")},
	{hx::fsFloat,(void *) &GraphicsRenderer_obj::SIN45,HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa")},
	{hx::fsFloat,(void *) &GraphicsRenderer_obj::TAN22,HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(void *) &GraphicsRenderer_obj::objectPosition,HX_HCSTRING("objectPosition","\x88","\x32","\xb7","\xc4")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(void *) &GraphicsRenderer_obj::objectBounds,HX_HCSTRING("objectBounds","\x94","\x92","\x27","\x40")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(void *) &GraphicsRenderer_obj::lastVertsBuffer,HX_HCSTRING("lastVertsBuffer","\x8c","\x5e","\xcd","\x73")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::BucketMode*/ ,(void *) &GraphicsRenderer_obj::lastBucketMode,HX_HCSTRING("lastBucketMode","\xe3","\xf6","\x18","\x58")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(void *) &GraphicsRenderer_obj::lastTexture,HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53")},
	{hx::fsBool,(void *) &GraphicsRenderer_obj::lastTextureRepeat,HX_HCSTRING("lastTextureRepeat","\x60","\x72","\x33","\xbd")},
	{hx::fsBool,(void *) &GraphicsRenderer_obj::lastTextureSmooth,HX_HCSTRING("lastTextureSmooth","\x33","\xe3","\x21","\xbe")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(void *) &GraphicsRenderer_obj::overrideMatrix,HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void GraphicsRenderer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::fillVertexAttributes,"fillVertexAttributes");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::drawTrianglesVertexAttributes,"drawTrianglesVertexAttributes");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::primitiveVertexAttributes,"primitiveVertexAttributes");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::graphicsDataPool,"graphicsDataPool");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::bucketPool,"bucketPool");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::SIN45,"SIN45");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::TAN22,"TAN22");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::objectPosition,"objectPosition");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::objectBounds,"objectBounds");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::lastVertsBuffer,"lastVertsBuffer");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::lastBucketMode,"lastBucketMode");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::lastTexture,"lastTexture");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::lastTextureRepeat,"lastTextureRepeat");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::lastTextureSmooth,"lastTextureSmooth");
	HX_MARK_MEMBER_NAME(GraphicsRenderer_obj::overrideMatrix,"overrideMatrix");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GraphicsRenderer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::fillVertexAttributes,"fillVertexAttributes");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::drawTrianglesVertexAttributes,"drawTrianglesVertexAttributes");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::primitiveVertexAttributes,"primitiveVertexAttributes");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::graphicsDataPool,"graphicsDataPool");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::bucketPool,"bucketPool");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::SIN45,"SIN45");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::TAN22,"TAN22");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::objectPosition,"objectPosition");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::objectBounds,"objectBounds");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::lastVertsBuffer,"lastVertsBuffer");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::lastBucketMode,"lastBucketMode");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::lastTexture,"lastTexture");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::lastTextureRepeat,"lastTextureRepeat");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::lastTextureSmooth,"lastTextureSmooth");
	HX_VISIT_MEMBER_NAME(GraphicsRenderer_obj::overrideMatrix,"overrideMatrix");
};

#endif

hx::Class GraphicsRenderer_obj::__mClass;

static ::String GraphicsRenderer_obj_sStaticFields[] = {
	HX_HCSTRING("fillVertexAttributes","\xfe","\x4d","\x43","\xc4"),
	HX_HCSTRING("drawTrianglesVertexAttributes","\x82","\x0b","\xa2","\x6b"),
	HX_HCSTRING("primitiveVertexAttributes","\x22","\x90","\xbd","\x30"),
	HX_HCSTRING("graphicsDataPool","\x11","\x58","\x10","\xd8"),
	HX_HCSTRING("bucketPool","\x66","\x0e","\x8e","\xe6"),
	HX_HCSTRING("SIN45","\x79","\x16","\xbe","\xfa"),
	HX_HCSTRING("TAN22","\x41","\xf4","\xda","\x88"),
	HX_HCSTRING("objectPosition","\x88","\x32","\xb7","\xc4"),
	HX_HCSTRING("objectBounds","\x94","\x92","\x27","\x40"),
	HX_HCSTRING("lastVertsBuffer","\x8c","\x5e","\xcd","\x73"),
	HX_HCSTRING("lastBucketMode","\xe3","\xf6","\x18","\x58"),
	HX_HCSTRING("lastTexture","\x25","\x7d","\x8c","\x53"),
	HX_HCSTRING("lastTextureRepeat","\x60","\x72","\x33","\xbd"),
	HX_HCSTRING("lastTextureSmooth","\x33","\xe3","\x21","\xbe"),
	HX_HCSTRING("overrideMatrix","\xad","\x8d","\xa9","\xb9"),
	HX_HCSTRING("buildCircle","\xde","\x57","\x7e","\xa6"),
	HX_HCSTRING("buildComplexPoly","\x0e","\x38","\x43","\x78"),
	HX_HCSTRING("buildLine","\x42","\x4e","\xef","\xe7"),
	HX_HCSTRING("buildPoly","\x9a","\xb4","\x98","\xea"),
	HX_HCSTRING("buildRectangle","\x21","\x03","\x13","\x95"),
	HX_HCSTRING("buildRoundedRectangle","\x90","\xb9","\xc2","\x82"),
	HX_HCSTRING("buildDrawTriangles","\xf9","\xd3","\xa5","\xa2"),
	HX_HCSTRING("buildDrawTiles","\xd3","\x61","\xd6","\x53"),
	HX_HCSTRING("quadraticBezierCurve","\x18","\x78","\x73","\xf8"),
	HX_HCSTRING("render","\x56","\x6b","\x29","\x05"),
	HX_HCSTRING("renderGraphics","\x41","\x66","\x3f","\x86"),
	HX_HCSTRING("updateGraphics","\xf4","\xeb","\x91","\x47"),
	HX_HCSTRING("prepareBucket","\x51","\x49","\xe3","\x94"),
	HX_HCSTRING("getBucket","\xa0","\x6d","\xf3","\x4a"),
	HX_HCSTRING("switchBucket","\x7e","\x91","\xbc","\xea"),
	HX_HCSTRING("prepareShader","\x0c","\x24","\x67","\xe3"),
	HX_HCSTRING("renderFill","\xf9","\xc8","\xc5","\xe0"),
	HX_HCSTRING("renderDrawTriangles","\xd1","\x4a","\xa2","\x33"),
	HX_HCSTRING("bindTexture","\x9e","\xdc","\x51","\x9b"),
	HX_HCSTRING("isCCW","\x0d","\x84","\x49","\xc1"),
	HX_HCSTRING("hex2rgb","\x76","\xd2","\x3c","\x80"),
	HX_HCSTRING("hex2rgba","\x2b","\x55","\xfb","\xb4"),
	::String(null())
};

void GraphicsRenderer_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.GraphicsRenderer","\x0f","\x64","\xe5","\xd1");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &GraphicsRenderer_obj::__GetStatic;
	__mClass->mSetStaticField = &GraphicsRenderer_obj::__SetStatic;
	__mClass->mMarkFunc = GraphicsRenderer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GraphicsRenderer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< GraphicsRenderer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GraphicsRenderer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GraphicsRenderer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GraphicsRenderer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GraphicsRenderer_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",50,0xd295150c)
HXLINE(  50)		fillVertexAttributes = ::Array_obj< ::Dynamic>::__new(1)->init(0, ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new((int)2,(int)5126,false,HX_("openfl_aPosition",7b,19,f2,d0),null()));
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",53,0xd295150c)
HXLINE(  54)		 ::openfl::_internal::renderer::opengl::utils::VertexAttribute _hx_tmp =  ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new((int)2,(int)5126,false,HX_("openfl_aPosition",7b,19,f2,d0),null());
HXLINE(  55)		 ::openfl::_internal::renderer::opengl::utils::VertexAttribute _hx_tmp1 =  ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new((int)2,(int)5126,false,HX_("openfl_aTexCoord0",10,9c,05,d4),null());
HXLINE(  53)		drawTrianglesVertexAttributes = ::Array_obj< ::Dynamic>::__new(3)->init(0,_hx_tmp)->init(1,_hx_tmp1)->init(2, ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new((int)4,(int)5121,true,HX_("openfl_aColor",51,21,0d,bc),null()));
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",58,0xd295150c)
HXLINE(  59)		 ::openfl::_internal::renderer::opengl::utils::VertexAttribute _hx_tmp =  ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new((int)2,(int)5126,false,HX_("openfl_aPosition",7b,19,f2,d0),null());
HXLINE(  58)		primitiveVertexAttributes = ::Array_obj< ::Dynamic>::__new(2)->init(0,_hx_tmp)->init(1, ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new((int)4,(int)5126,false,HX_("openfl_aColor",51,21,0d,bc),null()));
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",63,0xd295150c)
HXLINE(  63)		graphicsDataPool = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",64,0xd295150c)
HXLINE(  64)		bucketPool = ::Array_obj< ::Dynamic>::__new(0);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",66,0xd295150c)
HXLINE(  66)		SIN45 = ((Float)0.70710678118654752440084436210485);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",67,0xd295150c)
HXLINE(  67)		TAN22 = ((Float)0.4142135623730950488016887242097);
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",69,0xd295150c)
HXLINE(  69)		objectPosition =  ::openfl::geom::Point_obj::__new(null(),null());
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.GraphicsRenderer","boot",0x9cf4b8f1,"openfl._internal.renderer.opengl.utils.GraphicsRenderer.boot","openfl/_internal/renderer/opengl/utils/GraphicsRenderer.hx",70,0xd295150c)
HXLINE(  70)		objectBounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
