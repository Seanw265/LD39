// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandReader
#include <openfl/_internal/renderer/DrawCommandReader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandType
#include <openfl/_internal/renderer/DrawCommandType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_GraphicsPaths
#include <openfl/_internal/renderer/GraphicsPaths.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_DrawPath
#include <openfl/_internal/renderer/opengl/utils/DrawPath.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_FillType
#include <openfl/_internal/renderer/opengl/utils/FillType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GLStack
#include <openfl/_internal/renderer/opengl/utils/GLStack.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GraphicType
#include <openfl/_internal/renderer/opengl/utils/GraphicType.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_LineStyle
#include <openfl/_internal/renderer/opengl/utils/LineStyle.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_PathBuiler
#include <openfl/_internal/renderer/opengl/utils/PathBuiler.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Tilesheet
#include <openfl/display/Tilesheet.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void PathBuiler_obj::__construct() { }

Dynamic PathBuiler_obj::__CreateEmpty() { return new PathBuiler_obj; }

hx::ObjectPtr< PathBuiler_obj > PathBuiler_obj::__new()
{
	hx::ObjectPtr< PathBuiler_obj > _hx_result = new PathBuiler_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic PathBuiler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PathBuiler_obj > _hx_result = new PathBuiler_obj();
	_hx_result->__construct();
	return _hx_result;
}

 ::openfl::_internal::renderer::opengl::utils::DrawPath PathBuiler_obj::_hx___currentPath;

Int PathBuiler_obj::_hx___currentWinding;

::Array< ::Dynamic> PathBuiler_obj::_hx___drawPaths;

 ::openfl::_internal::renderer::opengl::utils::LineStyle PathBuiler_obj::_hx___line;

::hx::EnumBase PathBuiler_obj::_hx___fill;

Int PathBuiler_obj::_hx___fillIndex;

void PathBuiler_obj::closePath(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","closePath",0x65da1ed8,"openfl._internal.renderer.opengl.utils.PathBuiler.closePath","openfl/_internal/renderer/opengl/utils/DrawPath.hx",83,0xf0fd7951)
HXLINE(  84)		HX_VAR( Int,l);
HXDLIN(  84)		Bool _hx_tmp = hx::IsNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN(  84)		if (_hx_tmp) {
HXLINE(  84)			l = (int)0;
            		}
            		else {
HXLINE(  84)			l = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length;
            		}
HXLINE(  85)		if ((l <= (int)0)) {
HXLINE(  85)			return;
            		}
HXLINE(  87)		Bool _hx_tmp1;
HXDLIN(  87)		if (hx::IsEq( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type,::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn() )) {
HXLINE(  87)			_hx_tmp1 = hx::IsNotEq( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->fill,::openfl::_internal::renderer::opengl::utils::FillType_obj::None_dyn() );
            		}
            		else {
HXLINE(  87)			_hx_tmp1 = false;
            		}
HXDLIN(  87)		if (_hx_tmp1) {
HXLINE(  88)			HX_VARI( Float,sx) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->__get((int)0);
HXLINE(  89)			HX_VARI( Float,sy) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->__get((int)1);
HXLINE(  90)			HX_VARI( Float,ex) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->__get((l - (int)2));
HXLINE(  91)			HX_VARI( Float,ey) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->__get((l - (int)1));
HXLINE(  93)			Bool _hx_tmp2;
HXDLIN(  93)			if ((sx == ex)) {
HXLINE(  93)				_hx_tmp2 = (sy == ey);
            			}
            			else {
HXLINE(  93)				_hx_tmp2 = false;
            			}
HXDLIN(  93)			if (!(_hx_tmp2)) {
HXLINE(  94)				HX_VARI( ::Array< Float >,points) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN(  94)				HX_VARI( Bool,push_point) = true;
HXDLIN(  94)				if ((points->length > (int)1)) {
HXLINE(  94)					HX_VARI( Float,lastX) = points->__get((points->length - (int)2));
HXDLIN(  94)					HX_VARI( Float,lastY) = points->__get((points->length - (int)1));
HXDLIN(  94)					Bool _hx_tmp3;
HXDLIN(  94)					if ((lastX == sx)) {
HXLINE(  94)						_hx_tmp3 = (lastY == sy);
            					}
            					else {
HXLINE(  94)						_hx_tmp3 = false;
            					}
HXDLIN(  94)					if (_hx_tmp3) {
HXLINE(  94)						push_point = false;
            					}
            				}
HXDLIN(  94)				if ((push_point == true)) {
HXLINE(  94)					::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(sx);
HXDLIN(  94)					::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(sy);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PathBuiler_obj,closePath,(void))

void PathBuiler_obj::endFill(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","endFill",0xe6a5a499,"openfl._internal.renderer.opengl.utils.PathBuiler.endFill","openfl/_internal/renderer/opengl/utils/DrawPath.hx",99,0xf0fd7951)
HXLINE( 101)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill = ::openfl::_internal::renderer::opengl::utils::FillType_obj::None_dyn();
HXLINE( 102)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex++;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PathBuiler_obj,endFill,(void))

void PathBuiler_obj::moveTo(Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","moveTo",0x360182b1,"openfl._internal.renderer.opengl.utils.PathBuiler.moveTo","openfl/_internal/renderer/opengl/utils/DrawPath.hx",106,0xf0fd7951)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 108)		Bool _hx_tmp;
HXDLIN( 108)		if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 108)			Bool _hx_tmp1 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 108)			if (_hx_tmp1) {
HXLINE( 108)				_hx_tmp = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            			}
            			else {
HXLINE( 108)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 108)			_hx_tmp = false;
            		}
HXDLIN( 108)		if (_hx_tmp) {
HXLINE( 108)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            		}
            		else {
HXLINE( 108)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            		}
HXLINE( 109)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 110)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 111)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXLINE( 112)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(x);
HXLINE( 113)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(y);
HXLINE( 115)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathBuiler_obj,moveTo,(void))

void PathBuiler_obj::lineTo(Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","lineTo",0x55f4f654,"openfl._internal.renderer.opengl.utils.PathBuiler.lineTo","openfl/_internal/renderer/opengl/utils/DrawPath.hx",119,0xf0fd7951)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 120)		HX_VARI( ::Array< Float >,points) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXLINE( 121)		HX_VARI( Bool,push_point) = true;
HXLINE( 124)		if ((points->length > (int)1)) {
HXLINE( 125)			HX_VARI( Float,lastX) = points->__get((points->length - (int)2));
HXLINE( 126)			HX_VARI( Float,lastY) = points->__get((points->length - (int)1));
HXLINE( 127)			Bool _hx_tmp;
HXDLIN( 127)			if ((lastX == x)) {
HXLINE( 127)				_hx_tmp = (lastY == y);
            			}
            			else {
HXLINE( 127)				_hx_tmp = false;
            			}
HXDLIN( 127)			if (_hx_tmp) {
HXLINE( 128)				push_point = false;
            			}
            		}
HXLINE( 132)		if ((push_point == true)) {
HXLINE( 133)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(x);
HXLINE( 134)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(y);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathBuiler_obj,lineTo,(void))

void PathBuiler_obj::curveTo(Float cx,Float cy,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","curveTo",0x8f4d7ca5,"openfl._internal.renderer.opengl.utils.PathBuiler.curveTo","openfl/_internal/renderer/opengl/utils/DrawPath.hx",138,0xf0fd7951)
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 140)		Bool _hx_tmp;
HXDLIN( 140)		Bool _hx_tmp1 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 140)		if (_hx_tmp1) {
HXLINE( 140)			_hx_tmp = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            		}
            		else {
HXLINE( 140)			_hx_tmp = true;
            		}
HXDLIN( 140)		if (_hx_tmp) {
HXLINE( 141)			Bool _hx_tmp2;
HXDLIN( 141)			if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 141)				Bool _hx_tmp3 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 141)				if (_hx_tmp3) {
HXLINE( 141)					_hx_tmp2 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            				}
            				else {
HXLINE( 141)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE( 141)				_hx_tmp2 = false;
            			}
HXDLIN( 141)			if (_hx_tmp2) {
HXLINE( 141)				::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            			}
            			else {
HXLINE( 141)				::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            			}
HXDLIN( 141)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 141)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 141)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 141)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 141)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 141)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            		}
HXLINE( 144)		::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points,cx,cy,x,y);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(PathBuiler_obj,curveTo,(void))

void PathBuiler_obj::cubicCurveTo(Float cx,Float cy,Float cx2,Float cy2,Float x,Float y){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","cubicCurveTo",0x7b165965,"openfl._internal.renderer.opengl.utils.PathBuiler.cubicCurveTo","openfl/_internal/renderer/opengl/utils/DrawPath.hx",148,0xf0fd7951)
            	HX_STACK_ARG(cx,"cx")
            	HX_STACK_ARG(cy,"cy")
            	HX_STACK_ARG(cx2,"cx2")
            	HX_STACK_ARG(cy2,"cy2")
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 150)		Bool _hx_tmp;
HXDLIN( 150)		Bool _hx_tmp1 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 150)		if (_hx_tmp1) {
HXLINE( 150)			_hx_tmp = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            		}
            		else {
HXLINE( 150)			_hx_tmp = true;
            		}
HXDLIN( 150)		if (_hx_tmp) {
HXLINE( 151)			Bool _hx_tmp2;
HXDLIN( 151)			if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 151)				Bool _hx_tmp3 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 151)				if (_hx_tmp3) {
HXLINE( 151)					_hx_tmp2 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            				}
            				else {
HXLINE( 151)					_hx_tmp2 = true;
            				}
            			}
            			else {
HXLINE( 151)				_hx_tmp2 = false;
            			}
HXDLIN( 151)			if (_hx_tmp2) {
HXLINE( 151)				::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            			}
            			else {
HXLINE( 151)				::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            			}
HXDLIN( 151)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 151)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 151)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 151)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 151)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 151)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            		}
HXLINE( 154)		{
HXLINE( 154)			HX_VARI( ::Array< Float >,points) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN( 154)			HX_VARI( Float,dt) = (int)0;
HXDLIN( 154)			HX_VARI( Float,dt2) = (int)0;
HXDLIN( 154)			HX_VARI( Float,dt3) = (int)0;
HXDLIN( 154)			HX_VARI( Float,t2) = (int)0;
HXDLIN( 154)			HX_VARI( Float,t3) = (int)0;
HXDLIN( 154)			HX_VARI( Float,fromX) = points->__get((points->length - (int)2));
HXDLIN( 154)			HX_VARI( Float,fromY) = points->__get((points->length - (int)1));
HXDLIN( 154)			HX_VARI( Float,px) = (int)0;
HXDLIN( 154)			HX_VARI( Float,py) = (int)0;
HXDLIN( 154)			HX_VARI( Float,tmp) = (int)0;
HXDLIN( 154)			{
HXLINE( 154)				HX_VARI( Int,_g1) = (int)1;
HXDLIN( 154)				while((_g1 < (int)21)){
HXLINE( 154)					HX_VARI( Int,i) = _g1++;
HXDLIN( 154)					tmp = ((Float)i / (Float)(int)20);
HXDLIN( 154)					dt = ((int)1 - tmp);
HXDLIN( 154)					dt2 = (dt * dt);
HXDLIN( 154)					dt3 = (dt2 * dt);
HXDLIN( 154)					t2 = (tmp * tmp);
HXDLIN( 154)					t3 = (t2 * tmp);
HXDLIN( 154)					px = ((((dt3 * fromX) + ((((int)3 * dt2) * tmp) * cx)) + ((((int)3 * dt) * t2) * cx2)) + (t3 * x));
HXDLIN( 154)					py = ((((dt3 * fromY) + ((((int)3 * dt2) * tmp) * cy)) + ((((int)3 * dt) * t2) * cy2)) + (t3 * y));
HXDLIN( 154)					points->push(px);
HXDLIN( 154)					points->push(py);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(PathBuiler_obj,cubicCurveTo,(void))

void PathBuiler_obj::graphicDataPop(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","graphicDataPop",0x871be484,"openfl._internal.renderer.opengl.utils.PathBuiler.graphicDataPop","openfl/_internal/renderer/opengl/utils/DrawPath.hx",160,0xf0fd7951)
HXLINE( 160)		Bool _hx_tmp;
HXDLIN( 160)		if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 160)			Bool _hx_tmp1 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 160)			if (_hx_tmp1) {
HXLINE( 160)				_hx_tmp = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            			}
            			else {
HXLINE( 160)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 160)			_hx_tmp = false;
            		}
HXDLIN( 160)		if (_hx_tmp) {
HXLINE( 161)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            		}
            		else {
HXLINE( 163)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PathBuiler_obj,graphicDataPop,(void))

 ::openfl::_internal::renderer::opengl::utils::GLStack PathBuiler_obj::build( ::openfl::display::Graphics graphics, ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","build",0xe0200b09,"openfl._internal.renderer.opengl.utils.PathBuiler.build","openfl/_internal/renderer/opengl/utils/DrawPath.hx",168,0xf0fd7951)
            	HX_STACK_ARG(graphics,"graphics")
            	HX_STACK_ARG(gl,"gl")
HXLINE( 170)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::GLStack,glStack) = null();
HXLINE( 171)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = graphics->_hx___bounds;
HXLINE( 173)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths = ::Array_obj< ::Dynamic>::__new();
HXLINE( 174)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 175)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line =  ::openfl::_internal::renderer::opengl::utils::LineStyle_obj::__new();
HXLINE( 176)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill = ::openfl::_internal::renderer::opengl::utils::FillType_obj::None_dyn();
HXLINE( 177)		::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex = (int)0;
HXLINE( 179)		glStack = graphics->_hx___glStack->__get(::openfl::_internal::renderer::opengl::GLRenderer_obj::glContextId).StaticCast<  ::openfl::_internal::renderer::opengl::utils::GLStack >();
HXLINE( 181)		Bool _hx_tmp = hx::IsNull( glStack );
HXDLIN( 181)		if (_hx_tmp) {
HXLINE( 183)			glStack = (graphics->_hx___glStack[::openfl::_internal::renderer::opengl::GLRenderer_obj::glContextId] =  ::openfl::_internal::renderer::opengl::utils::GLStack_obj::__new(gl));
            		}
HXLINE( 187)		Bool _hx_tmp1;
HXDLIN( 187)		Bool _hx_tmp2;
HXDLIN( 187)		Bool _hx_tmp3;
HXDLIN( 187)		Bool _hx_tmp4;
HXDLIN( 187)		Bool _hx_tmp5 = !(!(graphics->_hx___visible));
HXDLIN( 187)		if (_hx_tmp5) {
HXLINE( 187)			Int _hx_tmp6 = graphics->_hx___commands->get_length();
HXDLIN( 187)			_hx_tmp4 = (_hx_tmp6 == (int)0);
            		}
            		else {
HXLINE( 187)			_hx_tmp4 = true;
            		}
HXDLIN( 187)		if (!(_hx_tmp4)) {
HXLINE( 187)			_hx_tmp3 = hx::IsNull( bounds );
            		}
            		else {
HXLINE( 187)			_hx_tmp3 = true;
            		}
HXDLIN( 187)		if (!(_hx_tmp3)) {
HXLINE( 187)			_hx_tmp2 = (bounds->width == (int)0);
            		}
            		else {
HXLINE( 187)			_hx_tmp2 = true;
            		}
HXDLIN( 187)		if (!(_hx_tmp2)) {
HXLINE( 187)			_hx_tmp1 = (bounds->height == (int)0);
            		}
            		else {
HXLINE( 187)			_hx_tmp1 = true;
            		}
HXDLIN( 187)		if (!(_hx_tmp1)) {
HXLINE( 193)			HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,data) =  ::openfl::_internal::renderer::DrawCommandReader_obj::__new(graphics->_hx___commands);
HXLINE( 195)			{
HXLINE( 195)				HX_VARI( Int,_g) = (int)0;
HXDLIN( 195)				HX_VARI( ::Array< ::Dynamic>,_g1) = graphics->_hx___commands->types;
HXDLIN( 195)				while((_g < _g1->length)){
HXLINE( 195)					HX_VARI( ::hx::EnumBase,type) = _g1->__get(_g).StaticCast< ::hx::EnumBase >();
HXDLIN( 195)					++_g;
HXLINE( 197)					Int _hx_tmp7 = ( ( ::hx::EnumBase)(type) )->_hx_getIndex();
HXDLIN( 197)					switch((int)(_hx_tmp7)){
            						case (int)0: {
HXLINE( 201)							{
HXLINE( 201)								Int _hx_tmp8 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 201)								switch((int)(_hx_tmp8)){
            									case (int)0: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 201)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 201)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 201)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 201)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 201)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 201)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 201)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 201)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 201)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 201)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 201)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 201)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 201)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 201)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 201)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 201)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_BITMAP_FILL_dyn();
HXDLIN( 201)							HX_VARI(  ::openfl::_internal::renderer::DrawCommandReader,c) = data;
HXLINE( 202)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::endFill();
HXLINE( 203)							::hx::EnumBase _hx_tmp9;
HXDLIN( 203)							Bool _hx_tmp10 = hx::IsNotNull( ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) ) );
HXDLIN( 203)							if (_hx_tmp10) {
HXLINE( 203)								 ::openfl::display::BitmapData _hx_tmp11 = ( ( ::openfl::display::BitmapData)(c->buffer->o->__get(c->oPos)) );
HXDLIN( 203)								 ::openfl::geom::Matrix _hx_tmp12 = ( ( ::openfl::geom::Matrix)(c->buffer->o->__get((c->oPos + (int)1))) );
HXDLIN( 203)								Bool _hx_tmp13 = c->buffer->b->__get(c->bPos);
HXDLIN( 203)								Bool _hx_tmp14 = c->buffer->b->__get((c->bPos + (int)1));
HXDLIN( 203)								_hx_tmp9 = ::openfl::_internal::renderer::opengl::utils::FillType_obj::Texture(_hx_tmp11,_hx_tmp12,_hx_tmp13,_hx_tmp14);
            							}
            							else {
HXLINE( 203)								_hx_tmp9 = ::openfl::_internal::renderer::opengl::utils::FillType_obj::None_dyn();
            							}
HXDLIN( 203)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill = _hx_tmp9;
HXLINE( 205)							Bool _hx_tmp15;
HXDLIN( 205)							Bool _hx_tmp16 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 205)							if (_hx_tmp16) {
HXLINE( 205)								_hx_tmp15 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            							}
            							else {
HXLINE( 205)								_hx_tmp15 = true;
            							}
HXDLIN( 205)							if (_hx_tmp15) {
HXLINE( 207)								Bool _hx_tmp17;
HXDLIN( 207)								if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 207)									Bool _hx_tmp18 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 207)									if (_hx_tmp18) {
HXLINE( 207)										_hx_tmp17 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            									}
            									else {
HXLINE( 207)										_hx_tmp17 = true;
            									}
            								}
            								else {
HXLINE( 207)									_hx_tmp17 = false;
            								}
HXDLIN( 207)								if (_hx_tmp17) {
HXLINE( 207)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            								}
            								else {
HXLINE( 207)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            								}
HXLINE( 208)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 209)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 210)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(0);
HXLINE( 211)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXLINE( 212)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 218)							{
HXLINE( 218)								Int _hx_tmp19 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 218)								switch((int)(_hx_tmp19)){
            									case (int)0: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 218)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 218)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 218)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 218)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 218)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 218)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 218)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 218)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 218)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 218)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 218)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 218)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 218)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 218)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 218)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 218)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::BEGIN_FILL_dyn();
HXDLIN( 218)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c1,"c") = data;
HXLINE( 219)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::endFill();
HXLINE( 220)							::hx::EnumBase _hx_tmp20;
HXDLIN( 220)							Bool _hx_tmp21 = (c1->buffer->f->__get(c1->fPos) > (int)0);
HXDLIN( 220)							if (_hx_tmp21) {
HXLINE( 220)								Int _hx_tmp22 = ((int)c1->buffer->i->__get(c1->iPos) & (int)(int)16777215);
HXDLIN( 220)								Float _hx_tmp23 = c1->buffer->f->__get(c1->fPos);
HXDLIN( 220)								_hx_tmp20 = ::openfl::_internal::renderer::opengl::utils::FillType_obj::Color(_hx_tmp22,_hx_tmp23);
            							}
            							else {
HXLINE( 220)								_hx_tmp20 = ::openfl::_internal::renderer::opengl::utils::FillType_obj::None_dyn();
            							}
HXDLIN( 220)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill = _hx_tmp20;
HXLINE( 222)							Bool _hx_tmp24;
HXDLIN( 222)							Bool _hx_tmp25 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 222)							if (_hx_tmp25) {
HXLINE( 222)								_hx_tmp24 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            							}
            							else {
HXLINE( 222)								_hx_tmp24 = true;
            							}
HXDLIN( 222)							if (_hx_tmp24) {
HXLINE( 224)								Bool _hx_tmp26;
HXDLIN( 224)								if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 224)									Bool _hx_tmp27 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 224)									if (_hx_tmp27) {
HXLINE( 224)										_hx_tmp26 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            									}
            									else {
HXLINE( 224)										_hx_tmp26 = true;
            									}
            								}
            								else {
HXLINE( 224)									_hx_tmp26 = false;
            								}
HXDLIN( 224)								if (_hx_tmp26) {
HXLINE( 224)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            								}
            								else {
HXLINE( 224)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            								}
HXLINE( 225)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 226)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 227)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(0);
HXLINE( 228)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXLINE( 229)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            							}
            						}
            						break;
            						case (int)3: {
HXLINE( 235)							{
HXLINE( 235)								Int _hx_tmp28 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 235)								switch((int)(_hx_tmp28)){
            									case (int)0: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 235)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 235)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 235)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 235)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 235)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 235)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 235)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 235)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 235)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 235)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 235)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 235)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 235)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 235)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 235)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 235)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CUBIC_CURVE_TO_dyn();
HXDLIN( 235)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c2,"c") = data;
HXLINE( 236)							{
HXLINE( 236)								HX_VARI( Float,cx) = c2->buffer->f->__get(c2->fPos);
HXDLIN( 236)								HX_VARI( Float,cy) = c2->buffer->f->__get((c2->fPos + (int)1));
HXDLIN( 236)								HX_VARI( Float,cx2) = c2->buffer->f->__get((c2->fPos + (int)2));
HXDLIN( 236)								HX_VARI( Float,cy2) = c2->buffer->f->__get((c2->fPos + (int)3));
HXDLIN( 236)								HX_VARI( Float,x) = c2->buffer->f->__get((c2->fPos + (int)4));
HXDLIN( 236)								HX_VARI( Float,y) = c2->buffer->f->__get((c2->fPos + (int)5));
HXDLIN( 236)								Bool _hx_tmp29;
HXDLIN( 236)								Bool _hx_tmp30 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 236)								if (_hx_tmp30) {
HXLINE( 236)									_hx_tmp29 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 236)									_hx_tmp29 = true;
            								}
HXDLIN( 236)								if (_hx_tmp29) {
HXLINE( 236)									Bool _hx_tmp31;
HXDLIN( 236)									if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 236)										Bool _hx_tmp32 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 236)										if (_hx_tmp32) {
HXLINE( 236)											_hx_tmp31 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            										}
            										else {
HXLINE( 236)											_hx_tmp31 = true;
            										}
            									}
            									else {
HXLINE( 236)										_hx_tmp31 = false;
            									}
HXDLIN( 236)									if (_hx_tmp31) {
HXLINE( 236)										::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            									}
            									else {
HXLINE( 236)										::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            									}
HXDLIN( 236)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 236)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 236)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 236)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 236)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 236)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            								}
HXDLIN( 236)								{
HXLINE( 236)									HX_VARI( ::Array< Float >,points) = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN( 236)									HX_VARI( Float,dt) = (int)0;
HXDLIN( 236)									HX_VARI( Float,dt2) = (int)0;
HXDLIN( 236)									HX_VARI( Float,dt3) = (int)0;
HXDLIN( 236)									HX_VARI( Float,t2) = (int)0;
HXDLIN( 236)									HX_VARI( Float,t3) = (int)0;
HXDLIN( 236)									HX_VARI( Float,fromX) = points->__get((points->length - (int)2));
HXDLIN( 236)									HX_VARI( Float,fromY) = points->__get((points->length - (int)1));
HXDLIN( 236)									HX_VARI( Float,px) = (int)0;
HXDLIN( 236)									HX_VARI( Float,py) = (int)0;
HXDLIN( 236)									HX_VARI( Float,tmp) = (int)0;
HXDLIN( 236)									{
HXLINE( 236)										HX_VARI_NAME( Int,_g11,"_g1") = (int)1;
HXDLIN( 236)										while((_g11 < (int)21)){
HXLINE( 236)											HX_VARI( Int,i) = _g11++;
HXDLIN( 236)											tmp = ((Float)i / (Float)(int)20);
HXDLIN( 236)											dt = ((int)1 - tmp);
HXDLIN( 236)											dt2 = (dt * dt);
HXDLIN( 236)											dt3 = (dt2 * dt);
HXDLIN( 236)											t2 = (tmp * tmp);
HXDLIN( 236)											t3 = (t2 * tmp);
HXDLIN( 236)											px = ((((dt3 * fromX) + ((((int)3 * dt2) * tmp) * cx)) + ((((int)3 * dt) * t2) * cx2)) + (t3 * x));
HXDLIN( 236)											py = ((((dt3 * fromY) + ((((int)3 * dt2) * tmp) * cy)) + ((((int)3 * dt) * t2) * cy2)) + (t3 * y));
HXDLIN( 236)											points->push(px);
HXDLIN( 236)											points->push(py);
            										}
            									}
            								}
            							}
            						}
            						break;
            						case (int)4: {
HXLINE( 240)							{
HXLINE( 240)								Int _hx_tmp33 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 240)								switch((int)(_hx_tmp33)){
            									case (int)0: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 240)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 240)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 240)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 240)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 240)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 240)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 240)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 240)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 240)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 240)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 240)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 240)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 240)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 240)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 240)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 240)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::CURVE_TO_dyn();
HXDLIN( 240)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c3,"c") = data;
HXLINE( 241)							{
HXLINE( 241)								Float cx1 = c3->buffer->f->__get(c3->fPos);
HXDLIN( 241)								Float cy1 = c3->buffer->f->__get((c3->fPos + (int)1));
HXDLIN( 241)								Float x1 = c3->buffer->f->__get((c3->fPos + (int)2));
HXDLIN( 241)								Float y1 = c3->buffer->f->__get((c3->fPos + (int)3));
HXDLIN( 241)								Bool _hx_tmp34;
HXDLIN( 241)								Bool _hx_tmp35 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 241)								if (_hx_tmp35) {
HXLINE( 241)									_hx_tmp34 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 241)									_hx_tmp34 = true;
            								}
HXDLIN( 241)								if (_hx_tmp34) {
HXLINE( 241)									Bool _hx_tmp36;
HXDLIN( 241)									if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 241)										Bool _hx_tmp37 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 241)										if (_hx_tmp37) {
HXLINE( 241)											_hx_tmp36 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            										}
            										else {
HXLINE( 241)											_hx_tmp36 = true;
            										}
            									}
            									else {
HXLINE( 241)										_hx_tmp36 = false;
            									}
HXDLIN( 241)									if (_hx_tmp36) {
HXLINE( 241)										::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            									}
            									else {
HXLINE( 241)										::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            									}
HXDLIN( 241)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 241)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 241)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 241)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 241)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 241)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            								}
HXDLIN( 241)								::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points,cx1,cy1,x1,y1);
            							}
            						}
            						break;
            						case (int)5: {
HXLINE( 245)							{
HXLINE( 245)								Int _hx_tmp38 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 245)								switch((int)(_hx_tmp38)){
            									case (int)0: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 245)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 245)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 245)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 245)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 245)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 245)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 245)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 245)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 245)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 245)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 245)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 245)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 245)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 245)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 245)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 245)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_CIRCLE_dyn();
HXDLIN( 245)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c4,"c") = data;
HXLINE( 246)							Bool _hx_tmp39;
HXDLIN( 246)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 246)								Bool _hx_tmp40 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 246)								if (_hx_tmp40) {
HXLINE( 246)									_hx_tmp39 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 246)									_hx_tmp39 = true;
            								}
            							}
            							else {
HXLINE( 246)								_hx_tmp39 = false;
            							}
HXDLIN( 246)							if (_hx_tmp39) {
HXLINE( 246)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 246)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 248)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 249)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 250)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Circle_dyn();
HXLINE( 251)							Float _hx_tmp41 = c4->buffer->f->__get(c4->fPos);
HXDLIN( 251)							Float _hx_tmp42 = c4->buffer->f->__get((c4->fPos + (int)1));
HXDLIN( 251)							Float _hx_tmp43 = c4->buffer->f->__get((c4->fPos + (int)2));
HXDLIN( 251)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(3)->init(0,_hx_tmp41)->init(1,_hx_tmp42)->init(2,_hx_tmp43);
HXLINE( 253)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)6: {
HXLINE( 257)							{
HXLINE( 257)								Int _hx_tmp44 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 257)								switch((int)(_hx_tmp44)){
            									case (int)0: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 257)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 257)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 257)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 257)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 257)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 257)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 257)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 257)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 257)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 257)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 257)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 257)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 257)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 257)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 257)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 257)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ELLIPSE_dyn();
HXDLIN( 257)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c5,"c") = data;
HXLINE( 258)							Bool _hx_tmp45;
HXDLIN( 258)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 258)								Bool _hx_tmp46 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 258)								if (_hx_tmp46) {
HXLINE( 258)									_hx_tmp45 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 258)									_hx_tmp45 = true;
            								}
            							}
            							else {
HXLINE( 258)								_hx_tmp45 = false;
            							}
HXDLIN( 258)							if (_hx_tmp45) {
HXLINE( 258)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 258)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 260)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 261)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 262)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Ellipse_dyn();
HXLINE( 263)							Float _hx_tmp47 = c5->buffer->f->__get(c5->fPos);
HXDLIN( 263)							Float _hx_tmp48 = c5->buffer->f->__get((c5->fPos + (int)1));
HXDLIN( 263)							Float _hx_tmp49 = c5->buffer->f->__get((c5->fPos + (int)2));
HXDLIN( 263)							Float _hx_tmp50 = c5->buffer->f->__get((c5->fPos + (int)3));
HXDLIN( 263)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(4)->init(0,_hx_tmp47)->init(1,_hx_tmp48)->init(2,_hx_tmp49)->init(3,_hx_tmp50);
HXLINE( 265)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)7: {
HXLINE( 408)							{
HXLINE( 408)								Int _hx_tmp51 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 408)								switch((int)(_hx_tmp51)){
            									case (int)0: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 408)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 408)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 408)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 408)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 408)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 408)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 408)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 408)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 408)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 408)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 408)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 408)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 408)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 408)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 408)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 408)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_PATH_dyn();
HXDLIN( 408)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c6,"c") = data;
HXLINE( 409)							Bool _hx_tmp52;
HXDLIN( 409)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 409)								Bool _hx_tmp53 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 409)								if (_hx_tmp53) {
HXLINE( 409)									_hx_tmp52 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 409)									_hx_tmp52 = true;
            								}
            							}
            							else {
HXLINE( 409)								_hx_tmp52 = false;
            							}
HXDLIN( 409)							if (_hx_tmp52) {
HXLINE( 409)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 409)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 411)							{
HXLINE( 411)								HX_VARI( ::String,_g2) = ( (::String)(c6->buffer->o->__get((c6->oPos + (int)2))) );
HXDLIN( 411)								::String _hx_switch_0 = _g2;
            								if (  (_hx_switch_0==HX_("evenOdd",b5,c6,7e,06)) ){
HXLINE( 413)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding = (int)0;
HXDLIN( 413)									goto _hx_goto_3;
            								}
            								if (  (_hx_switch_0==HX_("nonZero",d5,1e,b4,d1)) ){
HXLINE( 415)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding = (int)1;
HXDLIN( 415)									goto _hx_goto_3;
            								}
            								/* default */{
HXLINE( 417)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding = (int)0;
            								}
            								_hx_goto_3:;
            							}
HXLINE( 420)							HX_VAR( Int,command);
HXLINE( 421)							HX_VAR_NAME( Float,cx3,"cx");
HXDLIN( 421)							HX_VAR_NAME( Float,cy3,"cy");
HXLINE( 422)							HX_VAR_NAME( Float,cx21,"cx2");
HXDLIN( 422)							HX_VAR_NAME( Float,cy21,"cy2");
HXLINE( 423)							HX_VAR( Float,ax);
HXDLIN( 423)							HX_VAR( Float,ay);
HXLINE( 424)							HX_VARI( Int,idx) = (int)0;
HXLINE( 425)							{
HXLINE( 425)								HX_VARI( Int,_g4) = (int)0;
HXDLIN( 425)								HX_VARI( Int,_g3) = ( (::Array< Int >)(c6->buffer->o->__get(c6->oPos)) )->length;
HXDLIN( 425)								while((_g4 < _g3)){
HXLINE( 425)									HX_VARI_NAME( Int,i1,"i") = _g4++;
HXLINE( 426)									command = ( (::Array< Int >)(c6->buffer->o->__get(c6->oPos)) )->__get(i1);
HXLINE( 427)									switch((int)(command)){
            										case (int)1: {
HXLINE( 429)											ax = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get(idx);
HXLINE( 430)											ay = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)1));
HXLINE( 431)											hx::AddEq(idx,(int)2);
HXLINE( 432)											{
HXLINE( 432)												Bool _hx_tmp54;
HXDLIN( 432)												if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 432)													Bool _hx_tmp55 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 432)													if (_hx_tmp55) {
HXLINE( 432)														_hx_tmp54 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            													}
            													else {
HXLINE( 432)														_hx_tmp54 = true;
            													}
            												}
            												else {
HXLINE( 432)													_hx_tmp54 = false;
            												}
HXDLIN( 432)												if (_hx_tmp54) {
HXLINE( 432)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            												}
            												else {
HXLINE( 432)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            												}
HXDLIN( 432)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 432)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 432)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 432)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ax);
HXDLIN( 432)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ay);
HXDLIN( 432)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            											}
            										}
            										break;
            										case (int)2: {
HXLINE( 439)											ax = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get(idx);
HXLINE( 440)											ay = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)1));
HXLINE( 441)											hx::AddEq(idx,(int)2);
HXLINE( 442)											{
HXLINE( 442)												HX_VARI_NAME( ::Array< Float >,points1,"points") = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN( 442)												HX_VARI( Bool,push_point) = true;
HXDLIN( 442)												if ((points1->length > (int)1)) {
HXLINE( 442)													HX_VARI( Float,lastX) = points1->__get((points1->length - (int)2));
HXDLIN( 442)													HX_VARI( Float,lastY) = points1->__get((points1->length - (int)1));
HXDLIN( 442)													Bool _hx_tmp56;
HXDLIN( 442)													if ((lastX == ax)) {
HXLINE( 442)														_hx_tmp56 = (lastY == ay);
            													}
            													else {
HXLINE( 442)														_hx_tmp56 = false;
            													}
HXDLIN( 442)													if (_hx_tmp56) {
HXLINE( 442)														push_point = false;
            													}
            												}
HXDLIN( 442)												if ((push_point == true)) {
HXLINE( 442)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ax);
HXDLIN( 442)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ay);
            												}
            											}
            										}
            										break;
            										case (int)3: {
HXLINE( 449)											cx3 = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get(idx);
HXLINE( 450)											cy3 = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)1));
HXLINE( 451)											ax = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)2));
HXLINE( 452)											ay = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)3));
HXLINE( 453)											hx::AddEq(idx,(int)4);
HXLINE( 454)											{
HXLINE( 454)												Bool _hx_tmp57;
HXDLIN( 454)												Bool _hx_tmp58 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 454)												if (_hx_tmp58) {
HXLINE( 454)													_hx_tmp57 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            												}
            												else {
HXLINE( 454)													_hx_tmp57 = true;
            												}
HXDLIN( 454)												if (_hx_tmp57) {
HXLINE( 454)													Bool _hx_tmp59;
HXDLIN( 454)													if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 454)														Bool _hx_tmp60 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 454)														if (_hx_tmp60) {
HXLINE( 454)															_hx_tmp59 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            														}
            														else {
HXLINE( 454)															_hx_tmp59 = true;
            														}
            													}
            													else {
HXLINE( 454)														_hx_tmp59 = false;
            													}
HXDLIN( 454)													if (_hx_tmp59) {
HXLINE( 454)														::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            													}
            													else {
HXLINE( 454)														::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            													}
HXDLIN( 454)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 454)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 454)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 454)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 454)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 454)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            												}
HXDLIN( 454)												::openfl::_internal::renderer::GraphicsPaths_obj::curveTo(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points,cx3,cy3,ax,ay);
            											}
            										}
            										break;
            										case (int)4: {
HXLINE( 434)											ax = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)2));
HXLINE( 435)											ay = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)3));
HXLINE( 436)											hx::AddEq(idx,(int)4);
HXLINE( 437)											{
HXLINE( 437)												Bool _hx_tmp61;
HXDLIN( 437)												if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 437)													Bool _hx_tmp62 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 437)													if (_hx_tmp62) {
HXLINE( 437)														_hx_tmp61 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            													}
            													else {
HXLINE( 437)														_hx_tmp61 = true;
            													}
            												}
            												else {
HXLINE( 437)													_hx_tmp61 = false;
            												}
HXDLIN( 437)												if (_hx_tmp61) {
HXLINE( 437)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            												}
            												else {
HXLINE( 437)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            												}
HXDLIN( 437)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 437)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 437)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 437)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ax);
HXDLIN( 437)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ay);
HXDLIN( 437)												::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            											}
            										}
            										break;
            										case (int)5: {
HXLINE( 444)											ax = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)2));
HXLINE( 445)											ay = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)3));
HXLINE( 446)											hx::AddEq(idx,(int)4);
HXLINE( 447)											{
HXLINE( 447)												HX_VARI_NAME( ::Array< Float >,points2,"points") = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN( 447)												HX_VARI_NAME( Bool,push_point1,"push_point") = true;
HXDLIN( 447)												if ((points2->length > (int)1)) {
HXLINE( 447)													HX_VARI_NAME( Float,lastX1,"lastX") = points2->__get((points2->length - (int)2));
HXDLIN( 447)													HX_VARI_NAME( Float,lastY1,"lastY") = points2->__get((points2->length - (int)1));
HXDLIN( 447)													Bool _hx_tmp63;
HXDLIN( 447)													if ((lastX1 == ax)) {
HXLINE( 447)														_hx_tmp63 = (lastY1 == ay);
            													}
            													else {
HXLINE( 447)														_hx_tmp63 = false;
            													}
HXDLIN( 447)													if (_hx_tmp63) {
HXLINE( 447)														push_point1 = false;
            													}
            												}
HXDLIN( 447)												if ((push_point1 == true)) {
HXLINE( 447)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ax);
HXDLIN( 447)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(ay);
            												}
            											}
            										}
            										break;
            										case (int)6: {
HXLINE( 456)											cx3 = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get(idx);
HXLINE( 457)											cy3 = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)1));
HXLINE( 458)											cx21 = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)2));
HXLINE( 459)											cy21 = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)3));
HXLINE( 460)											ax = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)4));
HXLINE( 461)											ay = ( (::Array< Float >)(c6->buffer->o->__get((c6->oPos + (int)1))) )->__get((idx + (int)5));
HXLINE( 462)											hx::AddEq(idx,(int)6);
HXLINE( 463)											{
HXLINE( 463)												Bool _hx_tmp64;
HXDLIN( 463)												Bool _hx_tmp65 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 463)												if (_hx_tmp65) {
HXLINE( 463)													_hx_tmp64 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            												}
            												else {
HXLINE( 463)													_hx_tmp64 = true;
            												}
HXDLIN( 463)												if (_hx_tmp64) {
HXLINE( 463)													Bool _hx_tmp66;
HXDLIN( 463)													if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 463)														Bool _hx_tmp67 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 463)														if (_hx_tmp67) {
HXLINE( 463)															_hx_tmp66 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            														}
            														else {
HXLINE( 463)															_hx_tmp66 = true;
            														}
            													}
            													else {
HXLINE( 463)														_hx_tmp66 = false;
            													}
HXDLIN( 463)													if (_hx_tmp66) {
HXLINE( 463)														::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            													}
            													else {
HXLINE( 463)														::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            													}
HXDLIN( 463)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 463)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 463)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 463)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 463)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push((int)0);
HXDLIN( 463)													::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            												}
HXDLIN( 463)												{
HXLINE( 463)													HX_VARI_NAME( ::Array< Float >,points3,"points") = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN( 463)													HX_VARI_NAME( Float,dt1,"dt") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,dt21,"dt2") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,dt31,"dt3") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,t21,"t2") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,t31,"t3") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,fromX1,"fromX") = points3->__get((points3->length - (int)2));
HXDLIN( 463)													HX_VARI_NAME( Float,fromY1,"fromY") = points3->__get((points3->length - (int)1));
HXDLIN( 463)													HX_VARI_NAME( Float,px1,"px") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,py1,"py") = (int)0;
HXDLIN( 463)													HX_VARI_NAME( Float,tmp1,"tmp") = (int)0;
HXDLIN( 463)													{
HXLINE( 463)														HX_VARI_NAME( Int,_g12,"_g1") = (int)1;
HXDLIN( 463)														while((_g12 < (int)21)){
HXLINE( 463)															HX_VARI_NAME( Int,i2,"i") = _g12++;
HXDLIN( 463)															tmp1 = ((Float)i2 / (Float)(int)20);
HXDLIN( 463)															dt1 = ((int)1 - tmp1);
HXDLIN( 463)															dt21 = (dt1 * dt1);
HXDLIN( 463)															dt31 = (dt21 * dt1);
HXDLIN( 463)															t21 = (tmp1 * tmp1);
HXDLIN( 463)															t31 = (t21 * tmp1);
HXDLIN( 463)															px1 = ((((dt31 * fromX1) + ((((int)3 * dt21) * tmp1) * cx3)) + ((((int)3 * dt1) * t21) * cx21)) + (t31 * ax));
HXDLIN( 463)															py1 = ((((dt31 * fromY1) + ((((int)3 * dt21) * tmp1) * cy3)) + ((((int)3 * dt1) * t21) * cy21)) + (t31 * ay));
HXDLIN( 463)															points3->push(px1);
HXDLIN( 463)															points3->push(py1);
            														}
            													}
            												}
            											}
            										}
            										break;
            										default:{
            										}
            									}
            								}
            							}
HXLINE( 469)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding = (int)0;
            						}
            						break;
            						case (int)8: {
HXLINE( 269)							{
HXLINE( 269)								Int _hx_tmp68 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 269)								switch((int)(_hx_tmp68)){
            									case (int)0: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 269)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 269)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 269)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 269)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 269)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 269)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 269)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 269)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 269)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 269)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 269)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_RECT_dyn();
HXDLIN( 269)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c7,"c") = data;
HXLINE( 270)							Bool _hx_tmp69;
HXDLIN( 270)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 270)								Bool _hx_tmp70 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 270)								if (_hx_tmp70) {
HXLINE( 270)									_hx_tmp69 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 270)									_hx_tmp69 = true;
            								}
            							}
            							else {
HXLINE( 270)								_hx_tmp69 = false;
            							}
HXDLIN( 270)							if (_hx_tmp69) {
HXLINE( 270)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 270)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 272)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 273)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 274)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Rectangle(false);
HXLINE( 275)							Float _hx_tmp71 = c7->buffer->f->__get(c7->fPos);
HXDLIN( 275)							Float _hx_tmp72 = c7->buffer->f->__get((c7->fPos + (int)1));
HXDLIN( 275)							Float _hx_tmp73 = c7->buffer->f->__get((c7->fPos + (int)2));
HXDLIN( 275)							Float _hx_tmp74 = c7->buffer->f->__get((c7->fPos + (int)3));
HXDLIN( 275)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(4)->init(0,_hx_tmp71)->init(1,_hx_tmp72)->init(2,_hx_tmp73)->init(3,_hx_tmp74);
HXLINE( 277)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)9: {
HXLINE( 281)							{
HXLINE( 281)								Int _hx_tmp75 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 281)								switch((int)(_hx_tmp75)){
            									case (int)0: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 281)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 281)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 281)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 281)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 281)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 281)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 281)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 281)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_ROUND_RECT_dyn();
HXDLIN( 281)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c8,"c") = data;
HXLINE( 283)							HX_VARI_NAME( Float,x2,"x") = c8->buffer->f->__get(c8->fPos);
HXLINE( 284)							HX_VARI_NAME( Float,y2,"y") = c8->buffer->f->__get((c8->fPos + (int)1));
HXLINE( 285)							HX_VARI( Float,width) = c8->buffer->f->__get((c8->fPos + (int)2));
HXLINE( 286)							HX_VARI( Float,height) = c8->buffer->f->__get((c8->fPos + (int)3));
HXLINE( 287)							HX_VARI( Float,rx) = c8->buffer->f->__get((c8->fPos + (int)4));
HXLINE( 288)							HX_VARI(  ::Dynamic,ry) = c8->buffer->o->__get(c8->oPos);
HXLINE( 290)							Bool _hx_tmp76 = hx::IsNull( ry );
HXDLIN( 290)							if (_hx_tmp76) {
HXLINE( 290)								ry = rx;
            							}
HXLINE( 292)							hx::MultEq(rx,((Float)0.5));
HXLINE( 293)							hx::MultEq(ry,((Float)0.5));
HXLINE( 295)							Bool _hx_tmp77 = (rx > ((Float)width / (Float)(int)2));
HXDLIN( 295)							if (_hx_tmp77) {
HXLINE( 295)								rx = ((Float)width / (Float)(int)2);
            							}
HXLINE( 296)							Bool _hx_tmp78 = hx::IsGreater( ry,((Float)height / (Float)(int)2) );
HXDLIN( 296)							if (_hx_tmp78) {
HXLINE( 296)								ry = ((Float)height / (Float)(int)2);
            							}
HXLINE( 298)							Bool _hx_tmp79;
HXDLIN( 298)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 298)								Bool _hx_tmp80 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 298)								if (_hx_tmp80) {
HXLINE( 298)									_hx_tmp79 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 298)									_hx_tmp79 = true;
            								}
            							}
            							else {
HXLINE( 298)								_hx_tmp79 = false;
            							}
HXDLIN( 298)							if (_hx_tmp79) {
HXLINE( 298)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 298)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 300)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 301)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 302)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Rectangle(true);
HXLINE( 303)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(6)->init(0,x2)->init(1,y2)->init(2,width)->init(3,height)->init(4,rx)->init(5,ry);
HXLINE( 305)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)10: {
HXLINE( 396)							{
HXLINE( 396)								Int _hx_tmp81 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 396)								switch((int)(_hx_tmp81)){
            									case (int)0: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 396)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 396)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 396)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 396)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 396)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 396)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 396)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 396)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 396)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 396)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 396)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 396)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 396)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 396)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 396)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 396)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TILES_dyn();
HXDLIN( 396)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c9,"c") = data;
HXLINE( 397)							Bool _hx_tmp82;
HXDLIN( 397)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 397)								Bool _hx_tmp83 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 397)								if (_hx_tmp83) {
HXLINE( 397)									_hx_tmp82 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 397)									_hx_tmp82 = true;
            								}
            							}
            							else {
HXLINE( 397)								_hx_tmp82 = false;
            							}
HXDLIN( 397)							if (_hx_tmp82) {
HXLINE( 397)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 397)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 399)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex++;
HXLINE( 400)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(false);
HXLINE( 401)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 402)							 ::openfl::display::Tilesheet _hx_tmp84 = c9->buffer->ts->__get(c9->tsPos).StaticCast<  ::openfl::display::Tilesheet >();
HXDLIN( 402)							::Array< Float > _hx_tmp85 = c9->buffer->ff->__get(c9->ffPos).StaticCast< ::Array< Float > >();
HXDLIN( 402)							Bool _hx_tmp86 = c9->buffer->b->__get(c9->bPos);
HXDLIN( 402)							Int _hx_tmp87 = c9->buffer->i->__get(c9->iPos);
HXDLIN( 402)							 ::openfl::display::Shader _hx_tmp88 = ( ( ::openfl::display::Shader)(c9->buffer->o->__get(c9->oPos)) );
HXDLIN( 402)							Int _hx_tmp89 = c9->buffer->i->__get((c9->iPos + (int)1));
HXDLIN( 402)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::DrawTiles(_hx_tmp84,_hx_tmp85,_hx_tmp86,_hx_tmp87,_hx_tmp88,_hx_tmp89);
HXLINE( 403)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable = false;
HXLINE( 404)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)11: {
HXLINE( 359)							{
HXLINE( 359)								Int _hx_tmp90 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 359)								switch((int)(_hx_tmp90)){
            									case (int)0: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 359)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 359)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 359)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 359)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 359)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 359)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 359)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 359)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 359)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::DRAW_TRIANGLES_dyn();
HXDLIN( 359)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c10,"c") = data;
HXLINE( 361)							HX_VARI( ::Array< Float >,uvtData) = ( (::Array< Float >)(c10->buffer->o->__get((c10->oPos + (int)2))) );
HXLINE( 362)							HX_VARI( ::Array< Float >,vertices) = ( (::Array< Float >)(c10->buffer->o->__get(c10->oPos)) );
HXLINE( 363)							HX_VARI( ::Array< Int >,indices) = ( (::Array< Int >)(c10->buffer->o->__get((c10->oPos + (int)1))) );
HXLINE( 364)							HX_VARI(  ::Dynamic,culling) = c10->buffer->o->__get((c10->oPos + (int)3));
HXLINE( 368)							HX_VAR( Bool,isColor);
HXDLIN( 368)							Int _hx_tmp91 = ( ( ::hx::EnumBase)(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill) )->_hx_getIndex();
HXDLIN( 368)							if ((_hx_tmp91 == (int)1)) {
HXLINE( 368)								isColor = true;
            							}
            							else {
HXLINE( 368)								isColor = false;
            							}
HXLINE( 369)							Bool _hx_tmp92;
HXDLIN( 369)							if (isColor) {
HXLINE( 369)								_hx_tmp92 = hx::IsNotNull( uvtData );
            							}
            							else {
HXLINE( 369)								_hx_tmp92 = false;
            							}
HXDLIN( 369)							if (_hx_tmp92) {
HXLINE( 371)								continue;
            							}
HXLINE( 374)							Bool _hx_tmp93;
HXDLIN( 374)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 374)								Bool _hx_tmp94 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 374)								if (_hx_tmp94) {
HXLINE( 374)									_hx_tmp93 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 374)									_hx_tmp93 = true;
            								}
            							}
            							else {
HXLINE( 374)								_hx_tmp93 = false;
            							}
HXDLIN( 374)							if (_hx_tmp93) {
HXLINE( 374)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 374)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 376)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 377)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 378)							Bool _hx_tmp95 = hx::IsNull( uvtData );
HXDLIN( 378)							if (_hx_tmp95) {
HXLINE( 379)								HX_VARI_NAME( ::Array< Float >,this1,"this") = ::Array_obj< Float >::__new();
HXDLIN( 379)								this1->__SetSizeExact(null());
HXDLIN( 379)								uvtData = this1;
HXLINE( 380)								{
HXLINE( 380)									HX_VARI_NAME( ::hx::EnumBase,_g31,"_g3") = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill;
HXDLIN( 380)									Int _hx_tmp96 = ( ( ::hx::EnumBase)(_g31) )->_hx_getIndex();
HXDLIN( 380)									if ((_hx_tmp96 == (int)2)) {
HXLINE( 381)										HX_VARI(  ::openfl::display::BitmapData,b) = _g31->_hx_getObject(0).StaticCast<  ::openfl::display::BitmapData >();
HXLINE( 382)										{
HXLINE( 382)											HX_VARI_NAME( Int,_g41,"_g4") = (int)0;
HXDLIN( 382)											Float _hx_tmp97 = ((Float)vertices->length / (Float)(int)2);
HXDLIN( 382)											HX_VARI_NAME( Int,_g32,"_g3") = ::Std_obj::_hx_int(_hx_tmp97);
HXDLIN( 382)											while((_g41 < _g32)){
HXLINE( 382)												HX_VARI_NAME( Int,i3,"i") = _g41++;
HXLINE( 383)												{
HXLINE( 383)													Float x3 = ((Float)vertices->__get((i3 * (int)2)) / (Float)b->width);
HXDLIN( 383)													uvtData->push(x3);
            												}
HXLINE( 384)												{
HXLINE( 384)													Float x4 = ((Float)vertices->__get(((i3 * (int)2) + (int)1)) / (Float)b->height);
HXDLIN( 384)													uvtData->push(x4);
            												}
            											}
            										}
            									}
            								}
            							}
HXLINE( 390)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::DrawTriangles(vertices,indices,uvtData,culling,null(),(int)0);
HXLINE( 391)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable = false;
HXLINE( 392)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)12: {
HXLINE( 309)							{
HXLINE( 309)								Int _hx_tmp98 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 309)								switch((int)(_hx_tmp98)){
            									case (int)0: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 309)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 309)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 309)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 309)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 309)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 309)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 309)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 309)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 309)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 309)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 309)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 309)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 309)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 309)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 309)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 309)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::END_FILL_dyn();
HXLINE( 310)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::endFill();
            						}
            						break;
            						case (int)15: {
HXLINE( 314)							{
HXLINE( 314)								Int _hx_tmp99 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 314)								switch((int)(_hx_tmp99)){
            									case (int)0: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 314)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 314)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 314)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 314)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 314)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 314)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 314)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 314)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 314)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 314)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 314)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 314)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 314)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 314)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 314)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 314)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_STYLE_dyn();
HXDLIN( 314)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c11,"c") = data;
HXLINE( 315)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line =  ::openfl::_internal::renderer::opengl::utils::LineStyle_obj::__new();
HXLINE( 317)							Bool _hx_tmp100;
HXDLIN( 317)							Bool _hx_tmp101;
HXDLIN( 317)							Bool _hx_tmp102 = hx::IsNotNull( c11->buffer->o->__get(c11->oPos) );
HXDLIN( 317)							if (_hx_tmp102) {
HXLINE( 317)								_hx_tmp101 = ::Math_obj::isNaN(c11->buffer->o->__get(c11->oPos));
            							}
            							else {
HXLINE( 317)								_hx_tmp101 = true;
            							}
HXDLIN( 317)							if (!(_hx_tmp101)) {
HXLINE( 317)								_hx_tmp100 = hx::IsLess( c11->buffer->o->__get(c11->oPos),(int)0 );
            							}
            							else {
HXLINE( 317)								_hx_tmp100 = true;
            							}
HXDLIN( 317)							if (_hx_tmp100) {
HXLINE( 319)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->width = (int)0;
            							}
            							else {
HXLINE( 321)								Bool _hx_tmp103 = hx::IsEq( c11->buffer->o->__get(c11->oPos),(int)0 );
HXDLIN( 321)								if (_hx_tmp103) {
HXLINE( 323)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->width = (int)1;
            								}
            								else {
HXLINE( 327)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->width = c11->buffer->o->__get(c11->oPos);
            								}
            							}
HXLINE( 331)							Bool _hx_tmp104;
HXDLIN( 331)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 331)								Bool _hx_tmp105 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 331)								if (_hx_tmp105) {
HXLINE( 331)									_hx_tmp104 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 331)									_hx_tmp104 = true;
            								}
            							}
            							else {
HXLINE( 331)								_hx_tmp104 = false;
            							}
HXDLIN( 331)							if (_hx_tmp104) {
HXLINE( 331)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 331)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 333)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->color = c11->buffer->i->__get(c11->iPos);
HXLINE( 334)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->alpha = c11->buffer->f->__get(c11->fPos);
HXLINE( 335)							Int _hx_tmp106 = (c11->oPos + (int)1);
HXDLIN( 335)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->scaleMode = c11->buffer->o->__get(_hx_tmp106);
HXLINE( 336)							Int _hx_tmp107 = (c11->oPos + (int)2);
HXDLIN( 336)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->caps = c11->buffer->o->__get(_hx_tmp107);
HXLINE( 337)							Int _hx_tmp108 = (c11->oPos + (int)3);
HXDLIN( 337)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->joints = c11->buffer->o->__get(_hx_tmp108);
HXLINE( 338)							Int _hx_tmp109 = (c11->fPos + (int)1);
HXDLIN( 338)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line->miterLimit = c11->buffer->f->__get(_hx_tmp109);
HXLINE( 340)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 341)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 342)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points = ::Array_obj< Float >::__new(0);
HXLINE( 343)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXLINE( 345)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						case (int)16: {
HXLINE( 349)							{
HXLINE( 349)								Int _hx_tmp110 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 349)								switch((int)(_hx_tmp110)){
            									case (int)0: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 349)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 349)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 349)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 349)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 349)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 349)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 349)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 349)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 349)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 349)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 349)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 349)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 349)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 349)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 349)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 349)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::LINE_TO_dyn();
HXDLIN( 349)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c12,"c") = data;
HXLINE( 350)							{
HXLINE( 350)								HX_VARI_NAME( Float,x5,"x") = c12->buffer->f->__get(c12->fPos);
HXDLIN( 350)								HX_VARI_NAME( Float,y3,"y") = c12->buffer->f->__get((c12->fPos + (int)1));
HXDLIN( 350)								HX_VARI_NAME( ::Array< Float >,points4,"points") = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points;
HXDLIN( 350)								HX_VARI_NAME( Bool,push_point2,"push_point") = true;
HXDLIN( 350)								if ((points4->length > (int)1)) {
HXLINE( 350)									HX_VARI_NAME( Float,lastX2,"lastX") = points4->__get((points4->length - (int)2));
HXDLIN( 350)									HX_VARI_NAME( Float,lastY2,"lastY") = points4->__get((points4->length - (int)1));
HXDLIN( 350)									Bool _hx_tmp111;
HXDLIN( 350)									if ((lastX2 == x5)) {
HXLINE( 350)										_hx_tmp111 = (lastY2 == y3);
            									}
            									else {
HXLINE( 350)										_hx_tmp111 = false;
            									}
HXDLIN( 350)									if (_hx_tmp111) {
HXLINE( 350)										push_point2 = false;
            									}
            								}
HXDLIN( 350)								if ((push_point2 == true)) {
HXLINE( 350)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(x5);
HXDLIN( 350)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(y3);
            								}
            							}
            						}
            						break;
            						case (int)17: {
HXLINE( 354)							{
HXLINE( 354)								Int _hx_tmp112 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 354)								switch((int)(_hx_tmp112)){
            									case (int)0: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 354)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 354)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 354)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 354)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 354)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 354)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 354)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 354)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 354)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 354)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 354)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 354)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 354)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 354)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 354)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 354)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::MOVE_TO_dyn();
HXDLIN( 354)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c13,"c") = data;
HXLINE( 355)							{
HXLINE( 355)								Float x6 = c13->buffer->f->__get(c13->fPos);
HXDLIN( 355)								Float y4 = c13->buffer->f->__get((c13->fPos + (int)1));
HXDLIN( 355)								Bool _hx_tmp113;
HXDLIN( 355)								if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 355)									Bool _hx_tmp114 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 355)									if (_hx_tmp114) {
HXLINE( 355)										_hx_tmp113 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            									}
            									else {
HXLINE( 355)										_hx_tmp113 = true;
            									}
            								}
            								else {
HXLINE( 355)									_hx_tmp113 = false;
            								}
HXDLIN( 355)								if (_hx_tmp113) {
HXLINE( 355)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            								}
            								else {
HXLINE( 355)									::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            								}
HXDLIN( 355)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXDLIN( 355)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXDLIN( 355)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::Polygon_dyn();
HXDLIN( 355)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(x6);
HXDLIN( 355)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->push(y4);
HXDLIN( 355)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            							}
            						}
            						break;
            						case (int)18: {
HXLINE( 473)							{
HXLINE( 473)								Int _hx_tmp115 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 473)								switch((int)(_hx_tmp115)){
            									case (int)0: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 473)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 473)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 473)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 473)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 473)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 473)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 473)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 473)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 473)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 473)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 473)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 473)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 473)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 473)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 473)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 473)							data->prev = ::openfl::_internal::renderer::DrawCommandType_obj::OVERRIDE_MATRIX_dyn();
HXDLIN( 473)							HX_VARI_NAME(  ::openfl::_internal::renderer::DrawCommandReader,c14,"c") = data;
HXLINE( 474)							Bool _hx_tmp116;
HXDLIN( 474)							if (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable) {
HXLINE( 474)								Bool _hx_tmp117 = hx::IsNotNull( ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points );
HXDLIN( 474)								if (_hx_tmp117) {
HXLINE( 474)									_hx_tmp116 = (::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->points->length == (int)0);
            								}
            								else {
HXLINE( 474)									_hx_tmp116 = true;
            								}
            							}
            							else {
HXLINE( 474)								_hx_tmp116 = false;
            							}
HXDLIN( 474)							if (_hx_tmp116) {
HXLINE( 474)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->pop().StaticCast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >();
            							}
            							else {
HXLINE( 474)								::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
            							}
HXLINE( 476)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath =  ::openfl::_internal::renderer::opengl::utils::DrawPath_obj::__new(null());
HXLINE( 477)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->update(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___line,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fill,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___fillIndex,::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentWinding);
HXLINE( 478)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->type = ::openfl::_internal::renderer::opengl::utils::GraphicType_obj::OverrideMatrix(( ( ::openfl::geom::Matrix)(c14->buffer->o->__get(c14->oPos)) ));
HXLINE( 479)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath->isRemovable = false;
HXLINE( 480)							::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths->push(::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___currentPath);
            						}
            						break;
            						default:{
HXLINE( 484)							{
HXLINE( 484)								Int _hx_tmp118 = ( ( ::hx::EnumBase)(data->prev) )->_hx_getIndex();
HXDLIN( 484)								switch((int)(_hx_tmp118)){
            									case (int)0: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 484)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)1: {
HXLINE( 484)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)2: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 484)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 484)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)3: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)6);
            									}
            									break;
            									case (int)4: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)5: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)3);
            									}
            									break;
            									case (int)6: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)7: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)3);
            									}
            									break;
            									case (int)8: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)4);
            									}
            									break;
            									case (int)9: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)5);
HXDLIN( 484)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)10: {
HXLINE( 484)										hx::AddEq(data->tsPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->bPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->iPos,(int)2);
HXDLIN( 484)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									case (int)11: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)4);
            									}
            									break;
            									case (int)12: {
            									}
            									break;
            									case (int)13: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)2);
HXDLIN( 484)										hx::AddEq(data->bPos,(int)2);
            									}
            									break;
            									case (int)14: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 484)										hx::AddEq(data->iiPos,(int)2);
HXDLIN( 484)										hx::AddEq(data->ffPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->fPos,(int)1);
            									}
            									break;
            									case (int)15: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)4);
HXDLIN( 484)										hx::AddEq(data->iPos,(int)1);
HXDLIN( 484)										hx::AddEq(data->fPos,(int)2);
HXDLIN( 484)										hx::AddEq(data->bPos,(int)1);
            									}
            									break;
            									case (int)16: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)17: {
HXLINE( 484)										hx::AddEq(data->fPos,(int)2);
            									}
            									break;
            									case (int)18: {
HXLINE( 484)										hx::AddEq(data->oPos,(int)1);
            									}
            									break;
            									default:{
            									}
            								}
            							}
HXLINE( 484)							data->prev = type;
            						}
            					}
            				}
            			}
HXLINE( 490)			::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::closePath();
HXLINE( 491)			data->destroy();
            		}
HXLINE( 495)		graphics->_hx___drawPaths = ::openfl::_internal::renderer::opengl::utils::PathBuiler_obj::_hx___drawPaths;
HXLINE( 497)		return glStack;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PathBuiler_obj,build,return )


PathBuiler_obj::PathBuiler_obj()
{
}

bool PathBuiler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"build") ) { outValue = build_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"__line") ) { outValue = _hx___line; return true; }
		if (HX_FIELD_EQ(inName,"__fill") ) { outValue = _hx___fill; return true; }
		if (HX_FIELD_EQ(inName,"moveTo") ) { outValue = moveTo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lineTo") ) { outValue = lineTo_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endFill") ) { outValue = endFill_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"curveTo") ) { outValue = curveTo_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"closePath") ) { outValue = closePath_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__drawPaths") ) { outValue = _hx___drawPaths; return true; }
		if (HX_FIELD_EQ(inName,"__fillIndex") ) { outValue = _hx___fillIndex; return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cubicCurveTo") ) { outValue = cubicCurveTo_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__currentPath") ) { outValue = _hx___currentPath; return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"graphicDataPop") ) { outValue = graphicDataPop_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__currentWinding") ) { outValue = _hx___currentWinding; return true; }
	}
	return false;
}

bool PathBuiler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"__line") ) { _hx___line=ioValue.Cast<  ::openfl::_internal::renderer::opengl::utils::LineStyle >(); return true; }
		if (HX_FIELD_EQ(inName,"__fill") ) { _hx___fill=ioValue.Cast< ::hx::EnumBase >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__drawPaths") ) { _hx___drawPaths=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"__fillIndex") ) { _hx___fillIndex=ioValue.Cast< Int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__currentPath") ) { _hx___currentPath=ioValue.Cast<  ::openfl::_internal::renderer::opengl::utils::DrawPath >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__currentWinding") ) { _hx___currentWinding=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PathBuiler_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PathBuiler_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::DrawPath*/ ,(void *) &PathBuiler_obj::_hx___currentPath,HX_HCSTRING("__currentPath","\x5e","\xff","\x5b","\xcb")},
	{hx::fsInt,(void *) &PathBuiler_obj::_hx___currentWinding,HX_HCSTRING("__currentWinding","\x01","\x49","\x44","\x2a")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(void *) &PathBuiler_obj::_hx___drawPaths,HX_HCSTRING("__drawPaths","\x6a","\x89","\x8e","\xb3")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::LineStyle*/ ,(void *) &PathBuiler_obj::_hx___line,HX_HCSTRING("__line","\x14","\x7b","\xab","\xf6")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::FillType*/ ,(void *) &PathBuiler_obj::_hx___fill,HX_HCSTRING("__fill","\xa3","\x31","\xb4","\xf2")},
	{hx::fsInt,(void *) &PathBuiler_obj::_hx___fillIndex,HX_HCSTRING("__fillIndex","\x6f","\x0a","\xe8","\xba")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PathBuiler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PathBuiler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PathBuiler_obj::_hx___currentPath,"__currentPath");
	HX_MARK_MEMBER_NAME(PathBuiler_obj::_hx___currentWinding,"__currentWinding");
	HX_MARK_MEMBER_NAME(PathBuiler_obj::_hx___drawPaths,"__drawPaths");
	HX_MARK_MEMBER_NAME(PathBuiler_obj::_hx___line,"__line");
	HX_MARK_MEMBER_NAME(PathBuiler_obj::_hx___fill,"__fill");
	HX_MARK_MEMBER_NAME(PathBuiler_obj::_hx___fillIndex,"__fillIndex");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PathBuiler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::_hx___currentPath,"__currentPath");
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::_hx___currentWinding,"__currentWinding");
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::_hx___drawPaths,"__drawPaths");
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::_hx___line,"__line");
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::_hx___fill,"__fill");
	HX_VISIT_MEMBER_NAME(PathBuiler_obj::_hx___fillIndex,"__fillIndex");
};

#endif

hx::Class PathBuiler_obj::__mClass;

static ::String PathBuiler_obj_sStaticFields[] = {
	HX_HCSTRING("__currentPath","\x5e","\xff","\x5b","\xcb"),
	HX_HCSTRING("__currentWinding","\x01","\x49","\x44","\x2a"),
	HX_HCSTRING("__drawPaths","\x6a","\x89","\x8e","\xb3"),
	HX_HCSTRING("__line","\x14","\x7b","\xab","\xf6"),
	HX_HCSTRING("__fill","\xa3","\x31","\xb4","\xf2"),
	HX_HCSTRING("__fillIndex","\x6f","\x0a","\xe8","\xba"),
	HX_HCSTRING("closePath","\x7d","\x65","\x20","\x14"),
	HX_HCSTRING("endFill","\xfe","\x87","\xe0","\x25"),
	HX_HCSTRING("moveTo","\xec","\xd2","\xac","\xcc"),
	HX_HCSTRING("lineTo","\x8f","\x46","\xa0","\xec"),
	HX_HCSTRING("curveTo","\x0a","\x60","\x88","\xce"),
	HX_HCSTRING("cubicCurveTo","\xe0","\x07","\x90","\x2e"),
	HX_HCSTRING("graphicDataPop","\xbf","\x67","\x3a","\x4f"),
	HX_HCSTRING("build","\x2e","\xdb","\xea","\xba"),
	::String(null())
};

void PathBuiler_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.PathBuiler","\x09","\xea","\x3d","\x60");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PathBuiler_obj::__GetStatic;
	__mClass->mSetStaticField = &PathBuiler_obj::__SetStatic;
	__mClass->mMarkFunc = PathBuiler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PathBuiler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PathBuiler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PathBuiler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PathBuiler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PathBuiler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PathBuiler_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","boot",0x7bd248b7,"openfl._internal.renderer.opengl.utils.PathBuiler.boot","openfl/_internal/renderer/opengl/utils/DrawPath.hx",77,0xf0fd7951)
HXLINE(  77)		_hx___currentWinding = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.PathBuiler","boot",0x7bd248b7,"openfl._internal.renderer.opengl.utils.PathBuiler.boot","openfl/_internal/renderer/opengl/utils/DrawPath.hx",81,0xf0fd7951)
HXLINE(  81)		_hx___fillIndex = (int)0;
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
