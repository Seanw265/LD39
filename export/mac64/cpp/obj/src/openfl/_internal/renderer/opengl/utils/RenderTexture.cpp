// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLFramebuffer
#include <lime/graphics/opengl/GLFramebuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLRenderbuffer
#include <lime/graphics/opengl/GLRenderbuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_RenderTexture
#include <openfl/_internal/renderer/opengl/utils/RenderTexture.h>
#endif
#ifndef INCLUDED_openfl_display_TextureUvs
#include <openfl/display/TextureUvs.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void RenderTexture_obj::__construct( ::lime::graphics::GLRenderContext gl,Int width,Int height,hx::Null< Bool >  __o_smoothing,hx::Null< Bool >  __o_powerOfTwo){
Bool smoothing = __o_smoothing.Default(true);
Bool powerOfTwo = __o_powerOfTwo.Default(true);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.RenderTexture","new",0x70d3b196,"openfl._internal.renderer.opengl.utils.RenderTexture.new","openfl/_internal/renderer/opengl/utils/RenderTexture.hx",11,0x95417f7d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(powerOfTwo,"powerOfTwo")
HXLINE(  21)		this->powerOfTwo = true;
HXLINE(  29)		this->gl = gl;
HXLINE(  30)		this->powerOfTwo = powerOfTwo;
HXLINE(  32)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  32)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_framebuffer()) );
HXDLIN(  32)		this->frameBuffer =  ::lime::graphics::opengl::GLFramebuffer_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE(  33)		Int _hx_tmp2 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  33)		Int _hx_tmp3 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_texture()) );
HXDLIN(  33)		this->texture =  ::lime::graphics::opengl::GLTexture_obj::__new(_hx_tmp2,_hx_tmp3);
HXLINE(  35)		{
HXLINE(  35)			Int target = gl->TEXTURE_2D;
HXDLIN(  35)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->texture;
HXDLIN(  35)			{
HXLINE(  35)				Int texture1;
HXDLIN(  35)				Bool _hx_tmp4 = hx::IsNull( texture );
HXDLIN(  35)				if (_hx_tmp4) {
HXLINE(  35)					texture1 = (int)0;
            				}
            				else {
HXLINE(  35)					texture1 = texture->id;
            				}
HXDLIN(  35)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,texture1);
            			}
            		}
HXLINE(  36)		{
HXLINE(  36)			Int target1 = gl->TEXTURE_2D;
HXDLIN(  36)			Int pname = gl->TEXTURE_MAG_FILTER;
HXDLIN(  36)			Int param;
HXDLIN(  36)			if (smoothing) {
HXLINE(  36)				param = gl->LINEAR;
            			}
            			else {
HXLINE(  36)				param = gl->NEAREST;
            			}
HXDLIN(  36)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param);
            		}
HXLINE(  37)		{
HXLINE(  37)			Int target2 = gl->TEXTURE_2D;
HXDLIN(  37)			Int pname1 = gl->TEXTURE_MIN_FILTER;
HXDLIN(  37)			Int param1;
HXDLIN(  37)			if (smoothing) {
HXLINE(  37)				param1 = gl->LINEAR;
            			}
            			else {
HXLINE(  37)				param1 = gl->NEAREST;
            			}
HXDLIN(  37)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param1);
            		}
HXLINE(  38)		{
HXLINE(  38)			Int target3 = gl->TEXTURE_2D;
HXDLIN(  38)			Int pname2 = gl->TEXTURE_WRAP_S;
HXDLIN(  38)			Int param2 = gl->CLAMP_TO_EDGE;
HXDLIN(  38)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target3,pname2,param2);
            		}
HXLINE(  39)		{
HXLINE(  39)			Int target4 = gl->TEXTURE_2D;
HXDLIN(  39)			Int pname3 = gl->TEXTURE_WRAP_T;
HXDLIN(  39)			Int param3 = gl->CLAMP_TO_EDGE;
HXDLIN(  39)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target4,pname3,param3);
            		}
HXLINE(  41)		{
HXLINE(  41)			Int target5 = gl->FRAMEBUFFER;
HXDLIN(  41)			HX_VARI(  ::lime::graphics::opengl::GLFramebuffer,framebuffer) = this->frameBuffer;
HXDLIN(  41)			{
HXLINE(  41)				Int framebuffer1;
HXDLIN(  41)				Bool _hx_tmp5 = hx::IsNull( framebuffer );
HXDLIN(  41)				if (_hx_tmp5) {
HXLINE(  41)					framebuffer1 = (int)0;
            				}
            				else {
HXLINE(  41)					framebuffer1 = framebuffer->id;
            				}
HXDLIN(  41)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_framebuffer(target5,framebuffer1);
            			}
            		}
HXLINE(  42)		{
HXLINE(  42)			Int target6 = gl->FRAMEBUFFER;
HXDLIN(  42)			Int attachment = gl->COLOR_ATTACHMENT0;
HXDLIN(  42)			Int textarget = gl->TEXTURE_2D;
HXDLIN(  42)			{
HXLINE(  42)				Int texture2 = ( (Int)(this->texture->id) );
HXDLIN(  42)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_texture2D(target6,attachment,textarget,texture2,(int)0);
            			}
            		}
HXLINE(  44)		Int _hx_tmp6 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  44)		Int _hx_tmp7 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_render_buffer()) );
HXDLIN(  44)		this->renderBuffer =  ::lime::graphics::opengl::GLRenderbuffer_obj::__new(_hx_tmp6,_hx_tmp7);
HXLINE(  45)		{
HXLINE(  45)			Int target7 = gl->RENDERBUFFER;
HXDLIN(  45)			HX_VARI(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer) = this->renderBuffer;
HXDLIN(  45)			{
HXLINE(  45)				Int renderbuffer1;
HXDLIN(  45)				Bool _hx_tmp8 = hx::IsNull( renderbuffer );
HXDLIN(  45)				if (_hx_tmp8) {
HXLINE(  45)					renderbuffer1 = (int)0;
            				}
            				else {
HXLINE(  45)					renderbuffer1 = renderbuffer->id;
            				}
HXDLIN(  45)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer(target7,renderbuffer1);
            			}
            		}
HXLINE(  46)		{
HXLINE(  46)			Int target8 = gl->FRAMEBUFFER;
HXDLIN(  46)			Int attachment1 = gl->DEPTH_STENCIL_ATTACHMENT;
HXDLIN(  46)			Int renderbuffertarget = gl->RENDERBUFFER;
HXDLIN(  46)			{
HXLINE(  46)				Int renderbuffer2 = ( (Int)(this->renderBuffer->id) );
HXDLIN(  46)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_framebuffer_renderbuffer(target8,attachment1,renderbuffertarget,renderbuffer2);
            			}
            		}
HXLINE(  48)		this->resize(width,height);
            	}

Dynamic RenderTexture_obj::__CreateEmpty() { return new RenderTexture_obj; }

hx::ObjectPtr< RenderTexture_obj > RenderTexture_obj::__new( ::lime::graphics::GLRenderContext gl,Int width,Int height,hx::Null< Bool >  __o_smoothing,hx::Null< Bool >  __o_powerOfTwo)
{
	hx::ObjectPtr< RenderTexture_obj > _hx_result = new RenderTexture_obj();
	_hx_result->__construct(gl,width,height,__o_smoothing,__o_powerOfTwo);
	return _hx_result;
}

Dynamic RenderTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RenderTexture_obj > _hx_result = new RenderTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

void RenderTexture_obj::clear( ::Dynamic __o_r, ::Dynamic __o_g, ::Dynamic __o_b, ::Dynamic __o_a, ::Dynamic mask){
 ::Dynamic r = __o_r.Default(0);
 ::Dynamic g = __o_g.Default(0);
 ::Dynamic b = __o_b.Default(0);
 ::Dynamic a = __o_a.Default(0);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.RenderTexture","clear",0xc17e8c43,"openfl._internal.renderer.opengl.utils.RenderTexture.clear","openfl/_internal/renderer/opengl/utils/RenderTexture.hx",53,0x95417f7d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(r,"r")
            	HX_STACK_ARG(g,"g")
            	HX_STACK_ARG(b,"b")
            	HX_STACK_ARG(a,"a")
            	HX_STACK_ARG(mask,"mask")
HXLINE(  55)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear_color(r,g,b,a);
HXLINE(  56)		{
HXLINE(  56)			Int mask1;
HXDLIN(  56)			Bool _hx_tmp = hx::IsNull( mask );
HXDLIN(  56)			if (_hx_tmp) {
HXLINE(  56)				mask1 = this->gl->COLOR_BUFFER_BIT;
            			}
            			else {
HXLINE(  56)				mask1 = mask;
            			}
HXDLIN(  56)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_clear(mask1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(RenderTexture_obj,clear,(void))

void RenderTexture_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.RenderTexture","destroy",0x80ade130,"openfl._internal.renderer.opengl.utils.RenderTexture.destroy","openfl/_internal/renderer/opengl/utils/RenderTexture.hx",61,0x95417f7d)
            	HX_STACK_THIS(this)
HXLINE(  63)		Bool _hx_tmp = hx::IsNotNull( this->frameBuffer );
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  63)			HX_VARI(  ::lime::graphics::opengl::GLFramebuffer,framebuffer) = this->frameBuffer;
HXDLIN(  63)			{
HXLINE(  63)				{
HXLINE(  63)					Int framebuffer1 = ( (Int)(framebuffer->id) );
HXDLIN(  63)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_framebuffer(framebuffer1);
            				}
HXDLIN(  63)				framebuffer->invalidate();
            			}
            		}
HXLINE(  64)		Bool _hx_tmp1 = hx::IsNotNull( this->texture );
HXDLIN(  64)		if (_hx_tmp1) {
HXLINE(  64)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->texture;
HXDLIN(  64)			{
HXLINE(  64)				{
HXLINE(  64)					Int texture1 = ( (Int)(texture->id) );
HXDLIN(  64)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_texture(texture1);
            				}
HXDLIN(  64)				texture->invalidate();
            			}
            		}
HXLINE(  66)		this->frameBuffer = null();
HXLINE(  67)		this->texture = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,destroy,(void))

void RenderTexture_obj::resize(Int width,Int height){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.RenderTexture","resize",0x8e0f9e7e,"openfl._internal.renderer.opengl.utils.RenderTexture.resize","openfl/_internal/renderer/opengl/utils/RenderTexture.hx",72,0x95417f7d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(  74)		Bool _hx_tmp;
HXDLIN(  74)		if ((this->width == width)) {
HXLINE(  74)			_hx_tmp = (this->height == height);
            		}
            		else {
HXLINE(  74)			_hx_tmp = false;
            		}
HXDLIN(  74)		if (_hx_tmp) {
HXLINE(  74)			return;
            		}
HXLINE(  76)		this->width = width;
HXLINE(  77)		this->height = height;
HXLINE(  79)		HX_VARI( Int,pow2W) = width;
HXLINE(  80)		HX_VARI( Int,pow2H) = height;
HXLINE(  82)		if (this->powerOfTwo) {
HXLINE(  83)			HX_VARI( Int,n) = (int)1;
HXDLIN(  83)			while((n < width)){
HXLINE(  83)				hx::ShlEq(n,(int)1);
            			}
HXDLIN(  83)			pow2W = n;
HXLINE(  84)			HX_VARI_NAME( Int,n1,"n") = (int)1;
HXDLIN(  84)			while((n1 < height)){
HXLINE(  84)				hx::ShlEq(n1,(int)1);
            			}
HXDLIN(  84)			pow2H = n1;
            		}
HXLINE(  87)		HX_VARI( Int,lastW) = this->_hx___width;
HXLINE(  88)		HX_VARI( Int,lastH) = this->_hx___height;
HXLINE(  90)		this->_hx___width = pow2W;
HXLINE(  91)		this->_hx___height = pow2H;
HXLINE(  93)		this->createUVs();
HXLINE(  95)		Bool _hx_tmp1;
HXDLIN(  95)		if ((lastW == pow2W)) {
HXLINE(  95)			_hx_tmp1 = (lastH == pow2H);
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = false;
            		}
HXDLIN(  95)		if (_hx_tmp1) {
HXLINE(  95)			return;
            		}
HXLINE(  97)		{
HXLINE(  97)			Int target = this->gl->TEXTURE_2D;
HXDLIN(  97)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->texture;
HXDLIN(  97)			{
HXLINE(  97)				Int texture1;
HXDLIN(  97)				Bool _hx_tmp2 = hx::IsNull( texture );
HXDLIN(  97)				if (_hx_tmp2) {
HXLINE(  97)					texture1 = (int)0;
            				}
            				else {
HXLINE(  97)					texture1 = texture->id;
            				}
HXDLIN(  97)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,texture1);
            			}
            		}
HXLINE(  98)		{
HXLINE(  98)			Int target1 = this->gl->TEXTURE_2D;
HXDLIN(  98)			Int internalformat = this->gl->RGBA;
HXDLIN(  98)			Int width1 = this->_hx___width;
HXDLIN(  98)			Int height1 = this->_hx___height;
HXDLIN(  98)			Int format = this->gl->RGBA;
HXDLIN(  98)			Int type = this->gl->UNSIGNED_BYTE;
HXDLIN(  98)			{
HXLINE(  98)				HX_VARI(  ::haxe::io::Bytes,buffer) = null();
HXDLIN(  98)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_image_2d(target1,(int)0,internalformat,width1,height1,(int)0,format,type,hx::DynamicPtr(buffer),(int)0);
            			}
            		}
HXLINE( 100)		{
HXLINE( 100)			Int target2 = this->gl->RENDERBUFFER;
HXDLIN( 100)			HX_VARI(  ::lime::graphics::opengl::GLRenderbuffer,renderbuffer) = this->renderBuffer;
HXDLIN( 100)			{
HXLINE( 100)				Int renderbuffer1;
HXDLIN( 100)				Bool _hx_tmp3 = hx::IsNull( renderbuffer );
HXDLIN( 100)				if (_hx_tmp3) {
HXLINE( 100)					renderbuffer1 = (int)0;
            				}
            				else {
HXLINE( 100)					renderbuffer1 = renderbuffer->id;
            				}
HXDLIN( 100)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_renderbuffer(target2,renderbuffer1);
            			}
            		}
HXLINE( 101)		{
HXLINE( 101)			Int target3 = this->gl->RENDERBUFFER;
HXDLIN( 101)			Int internalformat1 = this->gl->DEPTH_STENCIL;
HXDLIN( 101)			Int width2 = this->_hx___width;
HXDLIN( 101)			Int height2 = this->_hx___height;
HXDLIN( 101)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_renderbuffer_storage(target3,internalformat1,width2,height2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(RenderTexture_obj,resize,(void))

void RenderTexture_obj::createUVs(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.RenderTexture","createUVs",0xc68c972c,"openfl._internal.renderer.opengl.utils.RenderTexture.createUVs","openfl/_internal/renderer/opengl/utils/RenderTexture.hx",105,0x95417f7d)
            	HX_STACK_THIS(this)
HXLINE( 106)		Bool _hx_tmp = hx::IsNull( this->_hx___uvData );
HXDLIN( 106)		if (_hx_tmp) {
HXLINE( 106)			this->_hx___uvData =  ::openfl::display::TextureUvs_obj::__new();
            		}
HXLINE( 107)		HX_VARI( Float,w) = ((Float)this->width / (Float)this->_hx___width);
HXLINE( 108)		HX_VARI( Float,h) = ((Float)this->height / (Float)this->_hx___height);
HXLINE( 109)		this->_hx___uvData->x0 = (int)0;
HXLINE( 110)		this->_hx___uvData->y0 = (int)0;
HXLINE( 111)		this->_hx___uvData->x1 = w;
HXLINE( 112)		this->_hx___uvData->y1 = (int)0;
HXLINE( 113)		this->_hx___uvData->x2 = w;
HXLINE( 114)		this->_hx___uvData->y2 = h;
HXLINE( 115)		this->_hx___uvData->x3 = (int)0;
HXLINE( 116)		this->_hx___uvData->y3 = h;
            	}


HX_DEFINE_DYNAMIC_FUNC0(RenderTexture_obj,createUVs,(void))

Int RenderTexture_obj::powOfTwo(Int value){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.RenderTexture","powOfTwo",0xa9421307,"openfl._internal.renderer.opengl.utils.RenderTexture.powOfTwo","openfl/_internal/renderer/opengl/utils/RenderTexture.hx",120,0x95417f7d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 121)		HX_VARI( Int,n) = (int)1;
HXLINE( 122)		while((n < value)){
HXLINE( 122)			hx::ShlEq(n,(int)1);
            		}
HXLINE( 123)		return n;
            	}


HX_DEFINE_DYNAMIC_FUNC1(RenderTexture_obj,powOfTwo,return )


RenderTexture_obj::RenderTexture_obj()
{
}

void RenderTexture_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(RenderTexture);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(frameBuffer,"frameBuffer");
	HX_MARK_MEMBER_NAME(renderBuffer,"renderBuffer");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(powerOfTwo,"powerOfTwo");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___uvData,"__uvData");
	HX_MARK_END_CLASS();
}

void RenderTexture_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(frameBuffer,"frameBuffer");
	HX_VISIT_MEMBER_NAME(renderBuffer,"renderBuffer");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(powerOfTwo,"powerOfTwo");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___uvData,"__uvData");
}

hx::Val RenderTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"resize") ) { return hx::Val( resize_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height); }
		if (HX_FIELD_EQ(inName,"__uvData") ) { return hx::Val( _hx___uvData); }
		if (HX_FIELD_EQ(inName,"powOfTwo") ) { return hx::Val( powOfTwo_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return hx::Val( smoothing); }
		if (HX_FIELD_EQ(inName,"createUVs") ) { return hx::Val( createUVs_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { return hx::Val( powerOfTwo); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frameBuffer") ) { return hx::Val( frameBuffer); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderBuffer") ) { return hx::Val( renderBuffer); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RenderTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvData") ) { _hx___uvData=inValue.Cast<  ::openfl::display::TextureUvs >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"powerOfTwo") ) { powerOfTwo=inValue.Cast< Bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"frameBuffer") ) { frameBuffer=inValue.Cast<  ::lime::graphics::opengl::GLFramebuffer >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"renderBuffer") ) { renderBuffer=inValue.Cast<  ::lime::graphics::opengl::GLRenderbuffer >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RenderTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("frameBuffer","\x0d","\x89","\xdc","\xae"));
	outFields->push(HX_HCSTRING("renderBuffer","\xf6","\xc0","\xea","\x3f"));
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__uvData","\x4b","\x98","\x75","\x8e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RenderTexture_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(RenderTexture_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::lime::graphics::opengl::GLFramebuffer*/ ,(int)offsetof(RenderTexture_obj,frameBuffer),HX_HCSTRING("frameBuffer","\x0d","\x89","\xdc","\xae")},
	{hx::fsObject /*::lime::graphics::opengl::GLRenderbuffer*/ ,(int)offsetof(RenderTexture_obj,renderBuffer),HX_HCSTRING("renderBuffer","\xf6","\xc0","\xea","\x3f")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(RenderTexture_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsBool,(int)offsetof(RenderTexture_obj,smoothing),HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95")},
	{hx::fsInt,(int)offsetof(RenderTexture_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(RenderTexture_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsBool,(int)offsetof(RenderTexture_obj,powerOfTwo),HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea")},
	{hx::fsInt,(int)offsetof(RenderTexture_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{hx::fsInt,(int)offsetof(RenderTexture_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsObject /*::openfl::display::TextureUvs*/ ,(int)offsetof(RenderTexture_obj,_hx___uvData),HX_HCSTRING("__uvData","\x4b","\x98","\x75","\x8e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RenderTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String RenderTexture_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("frameBuffer","\x0d","\x89","\xdc","\xae"),
	HX_HCSTRING("renderBuffer","\xf6","\xc0","\xea","\x3f"),
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("powerOfTwo","\x70","\xbe","\xae","\xea"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__uvData","\x4b","\x98","\x75","\x8e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("resize","\xf4","\x59","\x7b","\x08"),
	HX_HCSTRING("createUVs","\x76","\xe9","\xe6","\x49"),
	HX_HCSTRING("powOfTwo","\xfd","\x17","\xac","\x62"),
	::String(null()) };

static void RenderTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RenderTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RenderTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RenderTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class RenderTexture_obj::__mClass;

void RenderTexture_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.RenderTexture","\xa4","\xee","\xd1","\xc9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RenderTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RenderTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RenderTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RenderTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RenderTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RenderTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
