// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLProgram
#include <lime/graphics/opengl/GLProgram.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_DefaultShader
#include <openfl/_internal/renderer/opengl/shaders2/DefaultShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_DrawTrianglesShader
#include <openfl/_internal/renderer/opengl/shaders2/DrawTrianglesShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_FillShader
#include <openfl/_internal/renderer/opengl/shaders2/FillShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_PatternFillShader
#include <openfl/_internal/renderer/opengl/shaders2/PatternFillShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_PrimitiveShader
#include <openfl/_internal/renderer/opengl/shaders2/PrimitiveShader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_ShaderManager
#include <openfl/_internal/renderer/opengl/utils/ShaderManager.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void ShaderManager_obj::__construct( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.ShaderManager","new",0xb88adcb9,"openfl._internal.renderer.opengl.utils.ShaderManager.new","openfl/_internal/renderer/opengl/utils/ShaderManager.hx",22,0x4c1b49ba)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  22)		this->setContext(gl);
            	}

Dynamic ShaderManager_obj::__CreateEmpty() { return new ShaderManager_obj; }

hx::ObjectPtr< ShaderManager_obj > ShaderManager_obj::__new( ::lime::graphics::GLRenderContext gl)
{
	hx::ObjectPtr< ShaderManager_obj > _hx_result = new ShaderManager_obj();
	_hx_result->__construct(gl);
	return _hx_result;
}

Dynamic ShaderManager_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ShaderManager_obj > _hx_result = new ShaderManager_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void ShaderManager_obj::setContext( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.ShaderManager","setContext",0x78e2db34,"openfl._internal.renderer.opengl.utils.ShaderManager.setContext","openfl/_internal/renderer/opengl/utils/ShaderManager.hx",25,0x4c1b49ba)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE(  26)		this->gl = gl;
HXLINE(  28)		this->defaultShader =  ::openfl::_internal::renderer::opengl::shaders2::DefaultShader_obj::__new(gl);
HXLINE(  29)		this->fillShader =  ::openfl::_internal::renderer::opengl::shaders2::FillShader_obj::__new(gl);
HXLINE(  30)		this->patternFillShader =  ::openfl::_internal::renderer::opengl::shaders2::PatternFillShader_obj::__new(gl);
HXLINE(  31)		this->drawTrianglesShader =  ::openfl::_internal::renderer::opengl::shaders2::DrawTrianglesShader_obj::__new(gl);
HXLINE(  32)		this->primitiveShader =  ::openfl::_internal::renderer::opengl::shaders2::PrimitiveShader_obj::__new(gl);
HXLINE(  34)		this->setShader(this->defaultShader,true);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ShaderManager_obj,setContext,(void))

void ShaderManager_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.ShaderManager","destroy",0xd1dcd9d3,"openfl._internal.renderer.opengl.utils.ShaderManager.destroy","openfl/_internal/renderer/opengl/utils/ShaderManager.hx",38,0x4c1b49ba)
            	HX_STACK_THIS(this)
HXLINE(  40)		this->defaultShader->destroy();
HXLINE(  41)		this->fillShader->destroy();
HXLINE(  42)		this->patternFillShader->destroy();
HXLINE(  43)		this->drawTrianglesShader->destroy();
HXLINE(  44)		this->primitiveShader->destroy();
HXLINE(  46)		this->gl = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ShaderManager_obj,destroy,(void))

Bool ShaderManager_obj::setShader( ::openfl::_internal::renderer::opengl::shaders2::Shader shader, ::Dynamic __o_force){
 ::Dynamic force = __o_force.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.ShaderManager","setShader",0x2ec68980,"openfl._internal.renderer.opengl.utils.ShaderManager.setShader","openfl/_internal/renderer/opengl/utils/ShaderManager.hx",50,0x4c1b49ba)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(shader,"shader")
            	HX_STACK_ARG(force,"force")
HXLINE(  51)		Bool _hx_tmp = hx::IsNull( shader );
HXDLIN(  51)		if (_hx_tmp) {
HXLINE(  53)			this->currentShader = null();
HXLINE(  54)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_use_program((int)0);
HXLINE(  55)			return true;
            		}
HXLINE(  58)		Bool _hx_tmp1;
HXDLIN(  58)		Bool _hx_tmp2;
HXDLIN(  58)		Bool _hx_tmp3 = hx::IsNotNull( this->currentShader );
HXDLIN(  58)		if (_hx_tmp3) {
HXLINE(  58)			_hx_tmp2 = !(force);
            		}
            		else {
HXLINE(  58)			_hx_tmp2 = false;
            		}
HXDLIN(  58)		if (_hx_tmp2) {
HXLINE(  58)			_hx_tmp1 = (this->currentShader->ID == shader->ID);
            		}
            		else {
HXLINE(  58)			_hx_tmp1 = false;
            		}
HXDLIN(  58)		if (_hx_tmp1) {
HXLINE(  59)			return false;
            		}
HXLINE(  61)		this->currentShader = shader;
HXLINE(  63)		{
HXLINE(  63)			HX_VARI(  ::lime::graphics::opengl::GLProgram,program) = shader->program;
HXDLIN(  63)			{
HXLINE(  63)				Int program1;
HXDLIN(  63)				Bool _hx_tmp4 = hx::IsNull( program );
HXDLIN(  63)				if (_hx_tmp4) {
HXLINE(  63)					program1 = (int)0;
            				}
            				else {
HXLINE(  63)					program1 = program->id;
            				}
HXDLIN(  63)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_use_program(program1);
            			}
            		}
HXLINE(  64)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ShaderManager_obj,setShader,return )

 ::haxe::ds::StringMap ShaderManager_obj::compiledShadersCache;


ShaderManager_obj::ShaderManager_obj()
{
}

void ShaderManager_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ShaderManager);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(currentShader,"currentShader");
	HX_MARK_MEMBER_NAME(defaultShader,"defaultShader");
	HX_MARK_MEMBER_NAME(fillShader,"fillShader");
	HX_MARK_MEMBER_NAME(patternFillShader,"patternFillShader");
	HX_MARK_MEMBER_NAME(drawTrianglesShader,"drawTrianglesShader");
	HX_MARK_MEMBER_NAME(primitiveShader,"primitiveShader");
	HX_MARK_END_CLASS();
}

void ShaderManager_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(currentShader,"currentShader");
	HX_VISIT_MEMBER_NAME(defaultShader,"defaultShader");
	HX_VISIT_MEMBER_NAME(fillShader,"fillShader");
	HX_VISIT_MEMBER_NAME(patternFillShader,"patternFillShader");
	HX_VISIT_MEMBER_NAME(drawTrianglesShader,"drawTrianglesShader");
	HX_VISIT_MEMBER_NAME(primitiveShader,"primitiveShader");
}

hx::Val ShaderManager_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setShader") ) { return hx::Val( setShader_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fillShader") ) { return hx::Val( fillShader); }
		if (HX_FIELD_EQ(inName,"setContext") ) { return hx::Val( setContext_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentShader") ) { return hx::Val( currentShader); }
		if (HX_FIELD_EQ(inName,"defaultShader") ) { return hx::Val( defaultShader); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"primitiveShader") ) { return hx::Val( primitiveShader); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"patternFillShader") ) { return hx::Val( patternFillShader); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"drawTrianglesShader") ) { return hx::Val( drawTrianglesShader); }
	}
	return super::__Field(inName,inCallProp);
}

bool ShaderManager_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"compiledShadersCache") ) { outValue = compiledShadersCache; return true; }
	}
	return false;
}

hx::Val ShaderManager_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fillShader") ) { fillShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::FillShader >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentShader") ) { currentShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultShader") ) { defaultShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::DefaultShader >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"primitiveShader") ) { primitiveShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::PrimitiveShader >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"patternFillShader") ) { patternFillShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::PatternFillShader >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"drawTrianglesShader") ) { drawTrianglesShader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::DrawTrianglesShader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ShaderManager_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"compiledShadersCache") ) { compiledShadersCache=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void ShaderManager_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00"));
	outFields->push(HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17"));
	outFields->push(HX_HCSTRING("fillShader","\x08","\x46","\xbb","\x20"));
	outFields->push(HX_HCSTRING("patternFillShader","\x78","\x54","\xa8","\xbf"));
	outFields->push(HX_HCSTRING("drawTrianglesShader","\x8c","\xb6","\xbe","\xc4"));
	outFields->push(HX_HCSTRING("primitiveShader","\x2c","\x33","\xa4","\x12"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ShaderManager_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(ShaderManager_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::Shader*/ ,(int)offsetof(ShaderManager_obj,currentShader),HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::DefaultShader*/ ,(int)offsetof(ShaderManager_obj,defaultShader),HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::FillShader*/ ,(int)offsetof(ShaderManager_obj,fillShader),HX_HCSTRING("fillShader","\x08","\x46","\xbb","\x20")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::PatternFillShader*/ ,(int)offsetof(ShaderManager_obj,patternFillShader),HX_HCSTRING("patternFillShader","\x78","\x54","\xa8","\xbf")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::DrawTrianglesShader*/ ,(int)offsetof(ShaderManager_obj,drawTrianglesShader),HX_HCSTRING("drawTrianglesShader","\x8c","\xb6","\xbe","\xc4")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::PrimitiveShader*/ ,(int)offsetof(ShaderManager_obj,primitiveShader),HX_HCSTRING("primitiveShader","\x2c","\x33","\xa4","\x12")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ShaderManager_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &ShaderManager_obj::compiledShadersCache,HX_HCSTRING("compiledShadersCache","\xe5","\x32","\xfe","\x55")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ShaderManager_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("currentShader","\x3e","\x40","\x7d","\x00"),
	HX_HCSTRING("defaultShader","\xc6","\x92","\x99","\x17"),
	HX_HCSTRING("fillShader","\x08","\x46","\xbb","\x20"),
	HX_HCSTRING("patternFillShader","\x78","\x54","\xa8","\xbf"),
	HX_HCSTRING("drawTrianglesShader","\x8c","\xb6","\xbe","\xc4"),
	HX_HCSTRING("primitiveShader","\x2c","\x33","\xa4","\x12"),
	HX_HCSTRING("setContext","\x6d","\xba","\x56","\x6c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("setShader","\x67","\x34","\xc8","\x7c"),
	::String(null()) };

static void ShaderManager_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ShaderManager_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(ShaderManager_obj::compiledShadersCache,"compiledShadersCache");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ShaderManager_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ShaderManager_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(ShaderManager_obj::compiledShadersCache,"compiledShadersCache");
};

#endif

hx::Class ShaderManager_obj::__mClass;

static ::String ShaderManager_obj_sStaticFields[] = {
	HX_HCSTRING("compiledShadersCache","\xe5","\x32","\xfe","\x55"),
	::String(null())
};

void ShaderManager_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.ShaderManager","\x47","\x0c","\x66","\xbe");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ShaderManager_obj::__GetStatic;
	__mClass->mSetStaticField = &ShaderManager_obj::__SetStatic;
	__mClass->mMarkFunc = ShaderManager_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ShaderManager_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ShaderManager_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ShaderManager_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ShaderManager_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ShaderManager_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ShaderManager_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ShaderManager_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.ShaderManager","boot",0xb90f45b9,"openfl._internal.renderer.opengl.utils.ShaderManager.boot","openfl/_internal/renderer/opengl/utils/ShaderManager.hx",10,0x4c1b49ba)
HXLINE(  10)		compiledShadersCache =  ::haxe::ds::StringMap_obj::__new();
            	}
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
