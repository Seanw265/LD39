// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexArray
#include <openfl/_internal/renderer/opengl/utils/VertexArray.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexAttribute
#include <openfl/_internal/renderer/opengl/utils/VertexAttribute.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void VertexArray_obj::__construct(::Array< ::Dynamic> attributes, ::Dynamic __o_size,hx::Null< Bool >  __o_isStatic){
 ::Dynamic size = __o_size.Default(0);
Bool isStatic = __o_isStatic.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","new",0x2bd75746,"openfl._internal.renderer.opengl.utils.VertexArray.new","openfl/_internal/renderer/opengl/utils/VertexArray.hx",9,0x59dc110d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(attributes,"attributes")
            	HX_STACK_ARG(size,"size")
            	HX_STACK_ARG(isStatic,"isStatic")
HXLINE(  18)		this->isStatic = false;
HXLINE(  15)		this->size = (int)0;
HXLINE(  13)		this->attributes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  21)		this->size = size;
HXLINE(  22)		this->attributes = attributes;
HXLINE(  24)		if (hx::IsGreater( size,(int)0 )) {
HXLINE(  25)			HX_VARI_NAME(  ::haxe::io::Bytes,this1,"this") = ::haxe::io::Bytes_obj::alloc(size);
HXDLIN(  25)			this->buffer = this1;
            		}
HXLINE(  28)		this->isStatic = isStatic;
            	}

Dynamic VertexArray_obj::__CreateEmpty() { return new VertexArray_obj; }

hx::ObjectPtr< VertexArray_obj > VertexArray_obj::__new(::Array< ::Dynamic> attributes, ::Dynamic __o_size,hx::Null< Bool >  __o_isStatic)
{
	hx::ObjectPtr< VertexArray_obj > _hx_result = new VertexArray_obj();
	_hx_result->__construct(attributes,__o_size,__o_isStatic);
	return _hx_result;
}

Dynamic VertexArray_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexArray_obj > _hx_result = new VertexArray_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

void VertexArray_obj::bind(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","bind",0x28a97817,"openfl._internal.renderer.opengl.utils.VertexArray.bind","openfl/_internal/renderer/opengl/utils/VertexArray.hx",32,0x59dc110d)
            	HX_STACK_THIS(this)
HXLINE(  32)		Int target = this->gl->ARRAY_BUFFER;
HXDLIN(  32)		HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->glBuffer;
HXDLIN(  32)		{
HXLINE(  32)			Int buffer1;
HXDLIN(  32)			Bool _hx_tmp = hx::IsNull( buffer );
HXDLIN(  32)			if (_hx_tmp) {
HXLINE(  32)				buffer1 = (int)0;
            			}
            			else {
HXLINE(  32)				buffer1 = buffer->id;
            			}
HXDLIN(  32)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexArray_obj,bind,(void))

void VertexArray_obj::unbind(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","unbind",0x31e74970,"openfl._internal.renderer.opengl.utils.VertexArray.unbind","openfl/_internal/renderer/opengl/utils/VertexArray.hx",36,0x59dc110d)
            	HX_STACK_THIS(this)
HXLINE(  36)		Int target = this->gl->ARRAY_BUFFER;
HXDLIN(  36)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexArray_obj,unbind,(void))

void VertexArray_obj::upload( ::lime::utils::ArrayBufferView view){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","upload",0x5f5516db,"openfl._internal.renderer.opengl.utils.VertexArray.upload","openfl/_internal/renderer/opengl/utils/VertexArray.hx",40,0x59dc110d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(view,"view")
HXLINE(  40)		Int target = this->gl->ARRAY_BUFFER;
HXDLIN(  40)		{
HXLINE(  40)			Int byteOffset = view->byteOffset;
HXDLIN(  40)			Int size = view->byteLength;
HXDLIN(  40)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_sub_data(target,(int)0,hx::DynamicPtr(view->buffer),byteOffset,size);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexArray_obj,upload,(void))

void VertexArray_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","destroy",0xed6e1ee0,"openfl._internal.renderer.opengl.utils.VertexArray.destroy","openfl/_internal/renderer/opengl/utils/VertexArray.hx",43,0x59dc110d)
            	HX_STACK_THIS(this)
HXLINE(  44)		{
HXLINE(  44)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->glBuffer;
HXDLIN(  44)			{
HXLINE(  44)				{
HXLINE(  44)					Int buffer1 = ( (Int)(buffer->id) );
HXDLIN(  44)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_buffer(buffer1);
            				}
HXDLIN(  44)				buffer->invalidate();
            			}
            		}
HXLINE(  45)		this->buffer = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexArray_obj,destroy,(void))

void VertexArray_obj::setContext( ::lime::graphics::GLRenderContext gl, ::lime::utils::ArrayBufferView view){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","setContext",0xd2427c47,"openfl._internal.renderer.opengl.utils.VertexArray.setContext","openfl/_internal/renderer/opengl/utils/VertexArray.hx",48,0x59dc110d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
            	HX_STACK_ARG(view,"view")
HXLINE(  49)		this->gl = gl;
HXLINE(  51)		Int _hx_tmp = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN(  51)		Int _hx_tmp1 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN(  51)		this->glBuffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp,_hx_tmp1);
HXLINE(  53)		{
HXLINE(  53)			Int target = gl->ARRAY_BUFFER;
HXDLIN(  53)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->glBuffer;
HXDLIN(  53)			{
HXLINE(  53)				Int buffer1;
HXDLIN(  53)				Bool _hx_tmp2 = hx::IsNull( buffer );
HXDLIN(  53)				if (_hx_tmp2) {
HXLINE(  53)					buffer1 = (int)0;
            				}
            				else {
HXLINE(  53)					buffer1 = buffer->id;
            				}
HXDLIN(  53)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            			}
            		}
HXLINE(  55)		{
HXLINE(  55)			Int target1 = gl->ARRAY_BUFFER;
HXDLIN(  55)			Int usage;
HXDLIN(  55)			if (this->isStatic) {
HXLINE(  55)				usage = gl->STATIC_DRAW;
            			}
            			else {
HXLINE(  55)				usage = gl->DYNAMIC_DRAW;
            			}
HXDLIN(  55)			{
HXLINE(  55)				Int byteOffset = view->byteOffset;
HXDLIN(  55)				Int size = view->byteLength;
HXDLIN(  55)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target1,hx::DynamicPtr(view->buffer),byteOffset,size,usage);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(VertexArray_obj,setContext,(void))

Int VertexArray_obj::get_stride(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexArray","get_stride",0x67a351bc,"openfl._internal.renderer.opengl.utils.VertexArray.get_stride","openfl/_internal/renderer/opengl/utils/VertexArray.hx",58,0x59dc110d)
            	HX_STACK_THIS(this)
HXLINE(  59)		HX_VARI( Int,s) = (int)0;
HXLINE(  60)		{
HXLINE(  60)			HX_VARI( Int,_g) = (int)0;
HXDLIN(  60)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->attributes;
HXDLIN(  60)			while((_g < _g1->length)){
HXLINE(  60)				HX_VARI(  ::openfl::_internal::renderer::opengl::utils::VertexAttribute,a) = _g1->__get(_g).StaticCast<  ::openfl::_internal::renderer::opengl::utils::VertexAttribute >();
HXDLIN(  60)				++_g;
HXLINE(  61)				Bool _hx_tmp = a->enabled;
HXDLIN(  61)				if (_hx_tmp) {
HXLINE(  61)					HX_VARI_NAME( Int,_g2,"_g") = a->type;
HXDLIN(  61)					Int _hx_tmp1;
HXDLIN(  61)					switch((int)(_g2)){
            						case (int)5120: case (int)5121: {
HXLINE(  61)							_hx_tmp1 = (int)1;
            						}
            						break;
            						case (int)5122: case (int)5123: {
HXLINE(  61)							_hx_tmp1 = (int)2;
            						}
            						break;
            						default:{
HXLINE(  61)							_hx_tmp1 = (int)4;
            						}
            					}
HXDLIN(  61)					Float _hx_tmp2 = ((Float)(a->components * _hx_tmp1) / (Float)(int)4);
HXDLIN(  61)					Int _hx_tmp3 = ::Math_obj::floor(_hx_tmp2);
HXDLIN(  61)					hx::AddEq(s,(_hx_tmp3 * (int)4));
            				}
            			}
            		}
HXLINE(  63)		return s;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexArray_obj,get_stride,return )


VertexArray_obj::VertexArray_obj()
{
}

void VertexArray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexArray);
	HX_MARK_MEMBER_NAME(gl,"gl");
	HX_MARK_MEMBER_NAME(glBuffer,"glBuffer");
	HX_MARK_MEMBER_NAME(attributes,"attributes");
	HX_MARK_MEMBER_NAME(buffer,"buffer");
	HX_MARK_MEMBER_NAME(size,"size");
	HX_MARK_MEMBER_NAME(isStatic,"isStatic");
	HX_MARK_END_CLASS();
}

void VertexArray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gl,"gl");
	HX_VISIT_MEMBER_NAME(glBuffer,"glBuffer");
	HX_VISIT_MEMBER_NAME(attributes,"attributes");
	HX_VISIT_MEMBER_NAME(buffer,"buffer");
	HX_VISIT_MEMBER_NAME(size,"size");
	HX_VISIT_MEMBER_NAME(isStatic,"isStatic");
}

hx::Val VertexArray_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { return hx::Val( gl); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { return hx::Val( size); }
		if (HX_FIELD_EQ(inName,"bind") ) { return hx::Val( bind_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { return hx::Val( buffer); }
		if (HX_FIELD_EQ(inName,"stride") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_stride()); }
		if (HX_FIELD_EQ(inName,"unbind") ) { return hx::Val( unbind_dyn()); }
		if (HX_FIELD_EQ(inName,"upload") ) { return hx::Val( upload_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"glBuffer") ) { return hx::Val( glBuffer); }
		if (HX_FIELD_EQ(inName,"isStatic") ) { return hx::Val( isStatic); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { return hx::Val( attributes); }
		if (HX_FIELD_EQ(inName,"setContext") ) { return hx::Val( setContext_dyn()); }
		if (HX_FIELD_EQ(inName,"get_stride") ) { return hx::Val( get_stride_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VertexArray_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gl") ) { gl=inValue.Cast<  ::lime::graphics::GLRenderContext >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"size") ) { size=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"buffer") ) { buffer=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"glBuffer") ) { glBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isStatic") ) { isStatic=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"attributes") ) { attributes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexArray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"));
	outFields->push(HX_HCSTRING("glBuffer","\x05","\x35","\x83","\x93"));
	outFields->push(HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97"));
	outFields->push(HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("stride","\x19","\x20","\x30","\x11"));
	outFields->push(HX_HCSTRING("isStatic","\x38","\x78","\x65","\x5e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexArray_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::GLRenderContext*/ ,(int)offsetof(VertexArray_obj,gl),HX_HCSTRING("gl","\x25","\x5a","\x00","\x00")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(VertexArray_obj,glBuffer),HX_HCSTRING("glBuffer","\x05","\x35","\x83","\x93")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(VertexArray_obj,attributes),HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(VertexArray_obj,buffer),HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0")},
	{hx::fsInt,(int)offsetof(VertexArray_obj,size),HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c")},
	{hx::fsBool,(int)offsetof(VertexArray_obj,isStatic),HX_HCSTRING("isStatic","\x38","\x78","\x65","\x5e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VertexArray_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexArray_obj_sMemberFields[] = {
	HX_HCSTRING("gl","\x25","\x5a","\x00","\x00"),
	HX_HCSTRING("glBuffer","\x05","\x35","\x83","\x93"),
	HX_HCSTRING("attributes","\xd7","\xa8","\x71","\x97"),
	HX_HCSTRING("buffer","\x00","\xbd","\x94","\xd0"),
	HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"),
	HX_HCSTRING("isStatic","\x38","\x78","\x65","\x5e"),
	HX_HCSTRING("bind","\xbd","\xf5","\x16","\x41"),
	HX_HCSTRING("unbind","\x96","\xfc","\xeb","\x5e"),
	HX_HCSTRING("upload","\x01","\xca","\x59","\x8c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("setContext","\x6d","\xba","\x56","\x6c"),
	HX_HCSTRING("get_stride","\xe2","\x8f","\xb7","\x01"),
	::String(null()) };

static void VertexArray_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexArray_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexArray_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexArray_obj::__mClass,"__mClass");
};

#endif

hx::Class VertexArray_obj::__mClass;

void VertexArray_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.VertexArray","\x54","\xfc","\x44","\xc3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VertexArray_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexArray_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexArray_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexArray_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexArray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexArray_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
