// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_VertexAttribute
#include <openfl/_internal/renderer/opengl/utils/VertexAttribute.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{

void VertexAttribute_obj::__construct(Int components,Int type,hx::Null< Bool >  __o_normalized,::String name, ::lime::utils::ArrayBufferView defaultValue){
Bool normalized = __o_normalized.Default(false);
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexAttribute","new",0x2b2790c9,"openfl._internal.renderer.opengl.utils.VertexAttribute.new","openfl/_internal/renderer/opengl/utils/VertexAttribute.hx",8,0x4f6c066a)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(components,"components")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(normalized,"normalized")
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(defaultValue,"defaultValue")
HXLINE(  14)		this->enabled = true;
HXLINE(  11)		this->normalized = false;
HXLINE(  20)		this->components = components;
HXLINE(  21)		this->type = type;
HXLINE(  22)		this->normalized = normalized;
HXLINE(  23)		this->name = name;
HXLINE(  25)		Bool _hx_tmp = hx::IsNull( defaultValue );
HXDLIN(  25)		if (_hx_tmp) {
HXLINE(  26)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  26)			Bool _hx_tmp1 = hx::IsNotNull( components );
HXDLIN(  26)			if (_hx_tmp1) {
HXLINE(  26)				this1 =  ::lime::utils::ArrayBufferView_obj::__new(components,(int)8);
            			}
            			else {
HXLINE(  26)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            			}
HXDLIN(  26)			this->defaultValue = this1;
            		}
            		else {
HXLINE(  28)			this->defaultValue = defaultValue;
            		}
            	}

Dynamic VertexAttribute_obj::__CreateEmpty() { return new VertexAttribute_obj; }

hx::ObjectPtr< VertexAttribute_obj > VertexAttribute_obj::__new(Int components,Int type,hx::Null< Bool >  __o_normalized,::String name, ::lime::utils::ArrayBufferView defaultValue)
{
	hx::ObjectPtr< VertexAttribute_obj > _hx_result = new VertexAttribute_obj();
	_hx_result->__construct(components,type,__o_normalized,name,defaultValue);
	return _hx_result;
}

Dynamic VertexAttribute_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexAttribute_obj > _hx_result = new VertexAttribute_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

 ::openfl::_internal::renderer::opengl::utils::VertexAttribute VertexAttribute_obj::copy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexAttribute","copy",0x9039572c,"openfl._internal.renderer.opengl.utils.VertexAttribute.copy","openfl/_internal/renderer/opengl/utils/VertexAttribute.hx",34,0x4f6c066a)
            	HX_STACK_THIS(this)
HXLINE(  34)		return  ::openfl::_internal::renderer::opengl::utils::VertexAttribute_obj::__new(this->components,this->type,this->normalized,this->name,this->defaultValue);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexAttribute_obj,copy,return )

Int VertexAttribute_obj::getElementsBytes(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexAttribute","getElementsBytes",0x78aa7635,"openfl._internal.renderer.opengl.utils.VertexAttribute.getElementsBytes","openfl/_internal/renderer/opengl/utils/VertexAttribute.hx",38,0x4f6c066a)
            	HX_STACK_THIS(this)
HXLINE(  38)		switch((int)(this->type)){
            			case (int)5120: case (int)5121: {
HXLINE(  38)				return (int)1;
            			}
            			break;
            			case (int)5122: case (int)5123: {
HXLINE(  38)				return (int)2;
            			}
            			break;
            			default:{
HXLINE(  38)				return (int)4;
            			}
            		}
HXDLIN(  38)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexAttribute_obj,getElementsBytes,return )

Int VertexAttribute_obj::get_elements(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils.VertexAttribute","get_elements",0x541d54b7,"openfl._internal.renderer.opengl.utils.VertexAttribute.get_elements","openfl/_internal/renderer/opengl/utils/VertexAttribute.hx",46,0x4f6c066a)
            	HX_STACK_THIS(this)
HXLINE(  46)		HX_VARI( Int,_g) = this->type;
HXDLIN(  46)		Int _hx_tmp;
HXDLIN(  46)		switch((int)(_g)){
            			case (int)5120: case (int)5121: {
HXLINE(  46)				_hx_tmp = (int)1;
            			}
            			break;
            			case (int)5122: case (int)5123: {
HXLINE(  46)				_hx_tmp = (int)2;
            			}
            			break;
            			default:{
HXLINE(  46)				_hx_tmp = (int)4;
            			}
            		}
HXDLIN(  46)		Float _hx_tmp1 = ((Float)(this->components * _hx_tmp) / (Float)(int)4);
HXDLIN(  46)		return ::Math_obj::floor(_hx_tmp1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexAttribute_obj,get_elements,return )


VertexAttribute_obj::VertexAttribute_obj()
{
}

void VertexAttribute_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexAttribute);
	HX_MARK_MEMBER_NAME(components,"components");
	HX_MARK_MEMBER_NAME(normalized,"normalized");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(defaultValue,"defaultValue");
	HX_MARK_END_CLASS();
}

void VertexAttribute_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(components,"components");
	HX_VISIT_MEMBER_NAME(normalized,"normalized");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(defaultValue,"defaultValue");
}

hx::Val VertexAttribute_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name); }
		if (HX_FIELD_EQ(inName,"copy") ) { return hx::Val( copy_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"elements") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_elements()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"components") ) { return hx::Val( components); }
		if (HX_FIELD_EQ(inName,"normalized") ) { return hx::Val( normalized); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { return hx::Val( defaultValue); }
		if (HX_FIELD_EQ(inName,"get_elements") ) { return hx::Val( get_elements_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getElementsBytes") ) { return hx::Val( getElementsBytes_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VertexAttribute_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"components") ) { components=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"normalized") ) { normalized=inValue.Cast< Bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"defaultValue") ) { defaultValue=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexAttribute_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("components","\x16","\xb5","\x1e","\x5a"));
	outFields->push(HX_HCSTRING("normalized","\x37","\x64","\x6f","\x81"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("elements","\x37","\x36","\xc4","\x83"));
	outFields->push(HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexAttribute_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(VertexAttribute_obj,components),HX_HCSTRING("components","\x16","\xb5","\x1e","\x5a")},
	{hx::fsBool,(int)offsetof(VertexAttribute_obj,normalized),HX_HCSTRING("normalized","\x37","\x64","\x6f","\x81")},
	{hx::fsInt,(int)offsetof(VertexAttribute_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsString,(int)offsetof(VertexAttribute_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsBool,(int)offsetof(VertexAttribute_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(VertexAttribute_obj,defaultValue),HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VertexAttribute_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexAttribute_obj_sMemberFields[] = {
	HX_HCSTRING("components","\x16","\xb5","\x1e","\x5a"),
	HX_HCSTRING("normalized","\x37","\x64","\x6f","\x81"),
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("defaultValue","\xf0","\xba","\x13","\xe7"),
	HX_HCSTRING("copy","\xb5","\xbb","\xc4","\x41"),
	HX_HCSTRING("getElementsBytes","\x3e","\x04","\xbf","\x53"),
	HX_HCSTRING("get_elements","\x40","\xea","\xdd","\x38"),
	::String(null()) };

static void VertexAttribute_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexAttribute_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexAttribute_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexAttribute_obj::__mClass,"__mClass");
};

#endif

hx::Class VertexAttribute_obj::__mClass;

void VertexAttribute_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils.VertexAttribute","\x57","\x78","\x73","\xa9");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VertexAttribute_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexAttribute_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexAttribute_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexAttribute_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexAttribute_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexAttribute_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
