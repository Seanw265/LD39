// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_shaders2_Shader
#include <openfl/_internal/renderer/opengl/shaders2/Shader.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils__SpriteBatch_State
#include <openfl/_internal/renderer/opengl/utils/_SpriteBatch/State.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif

namespace openfl{
namespace _internal{
namespace renderer{
namespace opengl{
namespace utils{
namespace _SpriteBatch{

void State_obj::__construct(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils._SpriteBatch.State","new",0xda8a05cc,"openfl._internal.renderer.opengl.utils._SpriteBatch.State.new","openfl/_internal/renderer/opengl/utils/SpriteBatch.hx",699,0x8289eb2d)
            	HX_STACK_THIS(this)
HXLINE( 705)		this->skipColorTransformAlpha = false;
HXLINE( 704)		this->skipColorTransform = false;
HXLINE( 703)		this->colorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 701)		this->textureSmooth = true;
            	}

Dynamic State_obj::__CreateEmpty() { return new State_obj; }

hx::ObjectPtr< State_obj > State_obj::__new()
{
	hx::ObjectPtr< State_obj > _hx_result = new State_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic State_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< State_obj > _hx_result = new State_obj();
	_hx_result->__construct();
	return _hx_result;
}

Bool State_obj::equals( ::openfl::_internal::renderer::opengl::utils::_SpriteBatch::State other){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils._SpriteBatch.State","equals",0xfb2ee453,"openfl._internal.renderer.opengl.utils._SpriteBatch.State.equals","openfl/_internal/renderer/opengl/utils/SpriteBatch.hx",712,0x8289eb2d)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(other,"other")
HXLINE( 714)		Bool _hx_tmp;
HXDLIN( 714)		Bool _hx_tmp1;
HXDLIN( 714)		Bool _hx_tmp2;
HXDLIN( 714)		Bool _hx_tmp3;
HXDLIN( 714)		Bool _hx_tmp4;
HXDLIN( 714)		Bool _hx_tmp5 = hx::IsNull( this->shader );
HXDLIN( 714)		if (_hx_tmp5) {
HXLINE( 714)			_hx_tmp4 = hx::IsNull( other->shader );
            		}
            		else {
HXLINE( 714)			_hx_tmp4 = false;
            		}
HXDLIN( 714)		if (!(_hx_tmp4)) {
HXLINE( 714)			Bool _hx_tmp6;
HXDLIN( 714)			Bool _hx_tmp7 = hx::IsNotNull( this->shader );
HXDLIN( 714)			if (_hx_tmp7) {
HXLINE( 714)				_hx_tmp6 = hx::IsNotNull( other->shader );
            			}
            			else {
HXLINE( 714)				_hx_tmp6 = false;
            			}
HXDLIN( 714)			if (_hx_tmp6) {
HXLINE( 714)				_hx_tmp3 = (this->shader->ID == other->shader->ID);
            			}
            			else {
HXLINE( 714)				_hx_tmp3 = false;
            			}
            		}
            		else {
HXLINE( 714)			_hx_tmp3 = true;
            		}
HXDLIN( 714)		if (_hx_tmp3) {
HXLINE( 714)			_hx_tmp2 = hx::IsEq( this->texture,other->texture );
            		}
            		else {
HXLINE( 714)			_hx_tmp2 = false;
            		}
HXDLIN( 714)		if (_hx_tmp2) {
HXLINE( 714)			_hx_tmp1 = (this->textureSmooth == other->textureSmooth);
            		}
            		else {
HXLINE( 714)			_hx_tmp1 = false;
            		}
HXDLIN( 714)		if (_hx_tmp1) {
HXLINE( 714)			_hx_tmp = hx::IsEq( this->blendMode,other->blendMode );
            		}
            		else {
HXLINE( 714)			_hx_tmp = false;
            		}
HXLINE( 712)		if (_hx_tmp) {
HXLINE( 719)			Bool _hx_tmp8;
HXDLIN( 719)			if (this->skipColorTransform) {
HXLINE( 719)				_hx_tmp8 = other->skipColorTransform;
            			}
            			else {
HXLINE( 719)				_hx_tmp8 = false;
            			}
HXDLIN( 719)			if (!(_hx_tmp8)) {
HXLINE( 719)				Bool _hx_tmp9;
HXDLIN( 719)				if (!(this->skipColorTransform)) {
HXLINE( 719)					_hx_tmp9 = !(other->skipColorTransform);
            				}
            				else {
HXLINE( 719)					_hx_tmp9 = false;
            				}
HXDLIN( 719)				if (_hx_tmp9) {
HXLINE( 712)					return this->colorTransform->_hx___equals(other->colorTransform,this->skipColorTransformAlpha);
            				}
            				else {
HXLINE( 712)					return false;
            				}
            			}
            			else {
HXLINE( 712)				return true;
            			}
            		}
            		else {
HXLINE( 712)			return false;
            		}
HXDLIN( 712)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(State_obj,equals,return )

void State_obj::destroy(){
            	HX_STACK_FRAME("openfl._internal.renderer.opengl.utils._SpriteBatch.State","destroy",0xbdc18866,"openfl._internal.renderer.opengl.utils._SpriteBatch.State.destroy","openfl/_internal/renderer/opengl/utils/SpriteBatch.hx",724,0x8289eb2d)
            	HX_STACK_THIS(this)
HXLINE( 725)		this->texture = null();
HXLINE( 726)		this->colorTransform = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(State_obj,destroy,(void))


State_obj::State_obj()
{
}

void State_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(State);
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(textureSmooth,"textureSmooth");
	HX_MARK_MEMBER_NAME(blendMode,"blendMode");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(skipColorTransform,"skipColorTransform");
	HX_MARK_MEMBER_NAME(skipColorTransformAlpha,"skipColorTransformAlpha");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(shaderData,"shaderData");
	HX_MARK_END_CLASS();
}

void State_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(textureSmooth,"textureSmooth");
	HX_VISIT_MEMBER_NAME(blendMode,"blendMode");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(skipColorTransform,"skipColorTransform");
	HX_VISIT_MEMBER_NAME(skipColorTransformAlpha,"skipColorTransformAlpha");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(shaderData,"shaderData");
}

hx::Val State_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader); }
		if (HX_FIELD_EQ(inName,"equals") ) { return hx::Val( equals_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { return hx::Val( texture); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { return hx::Val( blendMode); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shaderData") ) { return hx::Val( shaderData); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureSmooth") ) { return hx::Val( textureSmooth); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"skipColorTransform") ) { return hx::Val( skipColorTransform); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"skipColorTransformAlpha") ) { return hx::Val( skipColorTransformAlpha); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val State_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::openfl::_internal::renderer::opengl::shaders2::Shader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"texture") ) { texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"shaderData") ) { shaderData=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"textureSmooth") ) { textureSmooth=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"skipColorTransform") ) { skipColorTransform=inValue.Cast< Bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"skipColorTransformAlpha") ) { skipColorTransformAlpha=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void State_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"));
	outFields->push(HX_HCSTRING("textureSmooth","\x69","\xdb","\x82","\x9a"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"));
	outFields->push(HX_HCSTRING("skipColorTransform","\x68","\x42","\x39","\x37"));
	outFields->push(HX_HCSTRING("skipColorTransformAlpha","\xd6","\x1b","\xd9","\xd1"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("shaderData","\xef","\x37","\xfc","\x30"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo State_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(State_obj,texture),HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e")},
	{hx::fsBool,(int)offsetof(State_obj,textureSmooth),HX_HCSTRING("textureSmooth","\x69","\xdb","\x82","\x9a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(State_obj,blendMode),HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(State_obj,colorTransform),HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad")},
	{hx::fsBool,(int)offsetof(State_obj,skipColorTransform),HX_HCSTRING("skipColorTransform","\x68","\x42","\x39","\x37")},
	{hx::fsBool,(int)offsetof(State_obj,skipColorTransformAlpha),HX_HCSTRING("skipColorTransformAlpha","\xd6","\x1b","\xd9","\xd1")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::shaders2::Shader*/ ,(int)offsetof(State_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(State_obj,shaderData),HX_HCSTRING("shaderData","\xef","\x37","\xfc","\x30")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *State_obj_sStaticStorageInfo = 0;
#endif

static ::String State_obj_sMemberFields[] = {
	HX_HCSTRING("texture","\xdb","\xc8","\xe0","\x9e"),
	HX_HCSTRING("textureSmooth","\x69","\xdb","\x82","\x9a"),
	HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("skipColorTransform","\x68","\x42","\x39","\x37"),
	HX_HCSTRING("skipColorTransformAlpha","\xd6","\x1b","\xd9","\xd1"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("shaderData","\xef","\x37","\xfc","\x30"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void State_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(State_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void State_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(State_obj::__mClass,"__mClass");
};

#endif

hx::Class State_obj::__mClass;

void State_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl._internal.renderer.opengl.utils._SpriteBatch.State","\xda","\x6f","\x10","\x74");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = State_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(State_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< State_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = State_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = State_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = State_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace _internal
} // end namespace renderer
} // end namespace opengl
} // end namespace utils
} // end namespace _SpriteBatch
