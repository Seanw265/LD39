// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_GLRenderContext
#include <lime/graphics/GLRenderContext.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageBuffer
#include <lime/graphics/ImageBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageChannel
#include <lime/graphics/ImageChannel.h>
#endif
#ifndef INCLUDED_lime_graphics_ImageType
#include <lime/graphics/ImageType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoImageSurface_CairoImageSurface_Impl_
#include <lime/graphics/cairo/_CairoImageSurface/CairoImageSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoSurface_CairoSurface_Impl_
#include <lime/graphics/cairo/_CairoSurface/CairoSurface_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_math_Matrix3
#include <lime/math/Matrix3.h>
#endif
#ifndef INCLUDED_lime_math_Rectangle
#include <lime/math/Rectangle.h>
#endif
#ifndef INCLUDED_lime_math_Vector2
#include <lime/math/Vector2.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoMaskManager
#include <openfl/_internal/renderer/cairo/CairoMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBitmap
#include <openfl/_internal/renderer/opengl/GLBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_PingPongTexture
#include <openfl/_internal/renderer/opengl/utils/PingPongTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_RenderTexture
#include <openfl/_internal/renderer/opengl/utils/RenderTexture.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_SpriteBatch
#include <openfl/_internal/renderer/opengl/utils/SpriteBatch.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_JPEGEncoderOptions
#include <openfl/display/JPEGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_PNGEncoderOptions
#include <openfl/display/PNGEncoderOptions.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_TextureUvs
#include <openfl/display/TextureUvs.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace display{

void BitmapData_obj::__construct(Int width,Int height,hx::Null< Bool >  __o_transparent,hx::Null< Int >  __o_fillColor){
Bool transparent = __o_transparent.Default(true);
Int fillColor = __o_fillColor.Default(-1);
            	HX_STACK_FRAME("openfl.display.BitmapData","new",0x7e3e4115,"openfl.display.BitmapData.new","openfl/display/BitmapData.hx",62,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
            	HX_STACK_ARG(transparent,"transparent")
            	HX_STACK_ARG(fillColor,"fillColor")
HXLINE(  85)		this->_hx___usingPingPongTexture = false;
HXLINE(  91)		this->transparent = transparent;
HXLINE(  98)		Bool _hx_tmp = (width < (int)0);
HXDLIN(  98)		if (_hx_tmp) {
HXLINE(  98)			width = (int)0;
            		}
            		else {
HXLINE(  98)			width = width;
            		}
HXLINE(  99)		Bool _hx_tmp1 = (height < (int)0);
HXDLIN(  99)		if (_hx_tmp1) {
HXLINE(  99)			height = (int)0;
            		}
            		else {
HXLINE(  99)			height = height;
            		}
HXLINE( 101)		this->width = width;
HXLINE( 102)		this->height = height;
HXLINE( 103)		this->rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,width,height);
HXLINE( 105)		Bool _hx_tmp2;
HXDLIN( 105)		if ((width > (int)0)) {
HXLINE( 105)			_hx_tmp2 = (height > (int)0);
            		}
            		else {
HXLINE( 105)			_hx_tmp2 = false;
            		}
HXDLIN( 105)		if (_hx_tmp2) {
HXLINE( 107)			if (transparent) {
HXLINE( 109)				Bool _hx_tmp3 = (((int)fillColor & (int)(int)-16777216) == (int)0);
HXDLIN( 109)				if (_hx_tmp3) {
HXLINE( 111)					fillColor = (int)0;
            				}
            			}
            			else {
HXLINE( 117)				fillColor = ((int)(int)-16777216 | (int)((int)fillColor & (int)(int)16777215));
            			}
HXLINE( 121)			fillColor = ((int)((int)fillColor << (int)(int)8) | (int)((int)hx::UShr(fillColor,(int)24) & (int)(int)255));
HXLINE( 124)			HX_VARI(  ::Dynamic,elements) = ((width * height) * (int)4);
HXDLIN( 124)			HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 124)			Bool _hx_tmp4 = hx::IsNotNull( elements );
HXDLIN( 124)			if (_hx_tmp4) {
HXLINE( 124)				this1 =  ::lime::utils::ArrayBufferView_obj::__new(elements,(int)4);
            			}
            			else {
HXLINE( 124)				HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            			}
HXDLIN( 124)			HX_VARI(  ::lime::graphics::ImageBuffer,buffer) =  ::lime::graphics::ImageBuffer_obj::__new(this1,width,height,null(),null());
HXLINE( 125)			buffer->format = (int)2;
HXLINE( 126)			buffer->premultiplied = true;
HXLINE( 128)			this->image =  ::lime::graphics::Image_obj::__new(buffer,(int)0,(int)0,width,height,null(),null());
HXLINE( 130)			if ((fillColor != (int)0)) {
HXLINE( 132)				 ::lime::math::Rectangle _hx_tmp5 = this->image->get_rect();
HXDLIN( 132)				this->image->fillRect(_hx_tmp5,fillColor,null());
            			}
HXLINE( 139)			this->image->set_transparent(transparent);
HXLINE( 140)			this->_hx___isValid = true;
            		}
HXLINE( 144)		this->_hx___createUVs(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 146)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 147)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic BitmapData_obj::__CreateEmpty() { return new BitmapData_obj; }

hx::ObjectPtr< BitmapData_obj > BitmapData_obj::__new(Int width,Int height,hx::Null< Bool >  __o_transparent,hx::Null< Int >  __o_fillColor)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(width,height,__o_transparent,__o_fillColor);
	return _hx_result;
}

Dynamic BitmapData_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< BitmapData_obj > _hx_result = new BitmapData_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::BitmapData_obj::_hx___renderGL,
	( void (hx::Object::*)(Bool))&::openfl::display::BitmapData_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::BitmapData_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::BitmapData_obj::_hx___updateMask,
};

void *BitmapData_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_BitmapData__hx_openfl_display_IBitmapDrawable;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void BitmapData_obj::applyFilter( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::filters::BitmapFilter filter){
            	HX_STACK_FRAME("openfl.display.BitmapData","applyFilter",0xfbb98d7b,"openfl.display.BitmapData.applyFilter","openfl/display/BitmapData.hx",152,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 154)		Bool _hx_tmp;
HXDLIN( 154)		Bool _hx_tmp1;
HXDLIN( 154)		if (!(!(this->_hx___isValid))) {
HXLINE( 154)			_hx_tmp1 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 154)			_hx_tmp1 = true;
            		}
HXDLIN( 154)		if (!(_hx_tmp1)) {
HXLINE( 154)			_hx_tmp = !(sourceBitmapData->_hx___isValid);
            		}
            		else {
HXLINE( 154)			_hx_tmp = true;
            		}
HXDLIN( 154)		if (_hx_tmp) {
HXLINE( 154)			return;
            		}
HXLINE( 167)		this->image->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(BitmapData_obj,applyFilter,(void))

 ::openfl::display::BitmapData BitmapData_obj::clone(){
            	HX_STACK_FRAME("openfl.display.BitmapData","clone",0xea52db52,"openfl.display.BitmapData.clone","openfl/display/BitmapData.hx",174,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 174)		Bool _hx_tmp = !(this->_hx___isValid);
HXDLIN( 174)		if (_hx_tmp) {
HXLINE( 176)			return  ::openfl::display::BitmapData_obj::__new(this->width,this->height,this->transparent,null());
            		}
            		else {
HXLINE( 180)			 ::lime::graphics::Image _hx_tmp1 = this->image->clone();
HXDLIN( 180)			return ::openfl::display::BitmapData_obj::fromImage(_hx_tmp1,this->transparent);
            		}
HXLINE( 174)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,clone,return )

void BitmapData_obj::colorTransform( ::openfl::geom::Rectangle rect, ::openfl::geom::ColorTransform colorTransform){
            	HX_STACK_FRAME("openfl.display.BitmapData","colorTransform",0xbfe3e8f4,"openfl.display.BitmapData.colorTransform","openfl/display/BitmapData.hx",187,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(colorTransform,"colorTransform")
HXLINE( 189)		if (!(this->_hx___isValid)) {
HXLINE( 189)			return;
            		}
HXLINE( 191)		 ::lime::math::Rectangle _hx_tmp = rect->_hx___toLimeRectangle();
HXDLIN( 191)		 ::lime::utils::ArrayBufferView _hx_tmp1 = colorTransform->_hx___toLimeColorMatrix();
HXDLIN( 191)		this->image->colorTransform(_hx_tmp,_hx_tmp1);
HXLINE( 192)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,colorTransform,(void))

 ::Dynamic BitmapData_obj::compare( ::openfl::display::BitmapData otherBitmapData){
            	HX_STACK_FRAME("openfl.display.BitmapData","compare",0x56d287da,"openfl.display.BitmapData.compare","openfl/display/BitmapData.hx",197,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(otherBitmapData,"otherBitmapData")
HXLINE( 199)		if (hx::IsEq( otherBitmapData,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 201)			return (int)0;
            		}
            		else {
HXLINE( 203)			Bool _hx_tmp = hx::IsNull( otherBitmapData );
HXDLIN( 203)			if (_hx_tmp) {
HXLINE( 205)				return (int)-1;
            			}
            			else {
HXLINE( 207)				Bool _hx_tmp1;
HXDLIN( 207)				if ((this->_hx___isValid != false)) {
HXLINE( 207)					_hx_tmp1 = (otherBitmapData->_hx___isValid == false);
            				}
            				else {
HXLINE( 207)					_hx_tmp1 = true;
            				}
HXDLIN( 207)				if (_hx_tmp1) {
HXLINE( 209)					return (int)-2;
            				}
            				else {
HXLINE( 211)					if ((this->width != otherBitmapData->width)) {
HXLINE( 213)						return (int)-3;
            					}
            					else {
HXLINE( 215)						if ((this->height != otherBitmapData->height)) {
HXLINE( 217)							return (int)-4;
            						}
            					}
            				}
            			}
            		}
HXLINE( 221)		Bool _hx_tmp2;
HXDLIN( 221)		Bool _hx_tmp3;
HXDLIN( 221)		Bool _hx_tmp4 = hx::IsNotNull( this->image );
HXDLIN( 221)		if (_hx_tmp4) {
HXLINE( 221)			_hx_tmp3 = hx::IsNotNull( otherBitmapData->image );
            		}
            		else {
HXLINE( 221)			_hx_tmp3 = false;
            		}
HXDLIN( 221)		if (_hx_tmp3) {
HXLINE( 221)			Int _hx_tmp5 = this->image->get_format();
HXDLIN( 221)			Int _hx_tmp6 = otherBitmapData->image->get_format();
HXDLIN( 221)			_hx_tmp2 = (_hx_tmp5 == _hx_tmp6);
            		}
            		else {
HXLINE( 221)			_hx_tmp2 = false;
            		}
HXDLIN( 221)		if (_hx_tmp2) {
HXLINE( 223)			HX_VARI(  ::lime::utils::ArrayBufferView,bytes) = this->image->get_data();
HXLINE( 224)			HX_VARI(  ::lime::utils::ArrayBufferView,otherBytes) = otherBitmapData->image->get_data();
HXLINE( 225)			HX_VARI( Bool,equal) = true;
HXLINE( 227)			{
HXLINE( 227)				HX_VARI( Int,_g1) = (int)0;
HXDLIN( 227)				HX_VARI( Int,_g) = bytes->length;
HXDLIN( 227)				while((_g1 < _g)){
HXLINE( 227)					HX_VARI( Int,i) = _g1++;
HXLINE( 229)					Int byteOffset = (bytes->byteOffset + i);
HXDLIN( 229)					Int _hx_tmp7 = ::__hxcpp_memory_get_byte(bytes->buffer->b,byteOffset);
HXDLIN( 229)					Int a = ((int)_hx_tmp7 & (int)(int)255);
HXDLIN( 229)					Int byteOffset1 = (otherBytes->byteOffset + i);
HXDLIN( 229)					Int _hx_tmp8 = ::__hxcpp_memory_get_byte(otherBytes->buffer->b,byteOffset1);
HXDLIN( 229)					if (hx::IsNotEq( a,((int)_hx_tmp8 & (int)(int)255) )) {
HXLINE( 231)						equal = false;
HXLINE( 232)						goto _hx_goto_0;
            					}
            				}
            				_hx_goto_0:;
            			}
HXLINE( 237)			if (equal) {
HXLINE( 239)				return (int)0;
            			}
            		}
HXLINE( 245)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) = null();
HXLINE( 246)		HX_VAR( Bool,foundDifference);
HXDLIN( 246)		HX_VAR( Int,pixel);
HXDLIN( 246)		HX_VAR( Int,otherPixel);
HXDLIN( 246)		HX_VAR( Int,comparePixel);
HXDLIN( 246)		HX_VAR( Int,r);
HXDLIN( 246)		HX_VAR( Int,g);
HXDLIN( 246)		HX_VAR( Int,b);
HXDLIN( 246)		HX_VAR_NAME( Int,a1,"a");
HXLINE( 248)		{
HXLINE( 248)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 248)			HX_VARI_NAME( Int,_g2,"_g") = this->height;
HXDLIN( 248)			while((_g11 < _g2)){
HXLINE( 248)				HX_VARI( Int,y) = _g11++;
HXLINE( 250)				{
HXLINE( 250)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 250)					HX_VARI_NAME( Int,_g21,"_g2") = this->width;
HXDLIN( 250)					while((_g3 < _g21)){
HXLINE( 250)						HX_VARI( Int,x) = _g3++;
HXLINE( 252)						foundDifference = false;
HXLINE( 254)						pixel = this->getPixel32(x,y);
HXLINE( 255)						otherPixel = otherBitmapData->getPixel32(x,y);
HXLINE( 256)						comparePixel = (int)0;
HXLINE( 258)						if ((pixel != otherPixel)) {
HXLINE( 260)							r = (((int)((int)pixel >> (int)(int)16) & (int)(int)255) - ((int)((int)otherPixel >> (int)(int)16) & (int)(int)255));
HXLINE( 261)							g = (((int)((int)pixel >> (int)(int)8) & (int)(int)255) - ((int)((int)otherPixel >> (int)(int)8) & (int)(int)255));
HXLINE( 262)							b = (((int)pixel & (int)(int)255) - ((int)otherPixel & (int)(int)255));
HXLINE( 264)							Bool _hx_tmp9 = (r < (int)0);
HXDLIN( 264)							if (_hx_tmp9) {
HXLINE( 264)								hx::MultEq(r,(int)-1);
            							}
HXLINE( 265)							Bool _hx_tmp10 = (g < (int)0);
HXDLIN( 265)							if (_hx_tmp10) {
HXLINE( 265)								hx::MultEq(g,(int)-1);
            							}
HXLINE( 266)							Bool _hx_tmp11 = (b < (int)0);
HXDLIN( 266)							if (_hx_tmp11) {
HXLINE( 266)								hx::MultEq(b,(int)-1);
            							}
HXLINE( 268)							Bool _hx_tmp12;
HXDLIN( 268)							Bool _hx_tmp13;
HXDLIN( 268)							if ((r == (int)0)) {
HXLINE( 268)								_hx_tmp13 = (g == (int)0);
            							}
            							else {
HXLINE( 268)								_hx_tmp13 = false;
            							}
HXDLIN( 268)							if (_hx_tmp13) {
HXLINE( 268)								_hx_tmp12 = (b == (int)0);
            							}
            							else {
HXLINE( 268)								_hx_tmp12 = false;
            							}
HXDLIN( 268)							if (_hx_tmp12) {
HXLINE( 270)								a1 = (((int)((int)pixel >> (int)(int)24) & (int)(int)255) - ((int)((int)otherPixel >> (int)(int)24) & (int)(int)255));
HXLINE( 272)								if ((a1 != (int)0)) {
HXLINE( 274)									comparePixel = (int)16711680;
HXLINE( 275)									comparePixel = (int)16776960;
HXLINE( 276)									comparePixel = (int)16777215;
HXLINE( 277)									comparePixel = ((int)((int)((int)((int)((int)a1 & (int)(int)255) << (int)(int)24) | (int)(int)16711680) | (int)(int)65280) | (int)(int)255);
HXLINE( 279)									foundDifference = true;
            								}
            							}
            							else {
HXLINE( 285)								comparePixel = ((int)((int)((int)(int)0 | (int)((int)((int)r & (int)(int)255) << (int)(int)16)) | (int)(int)0) | (int)(int)0);
HXLINE( 286)								{
HXLINE( 286)									Int _hx_tmp14 = ((int)((int)((int)((int)((int)((int)comparePixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)comparePixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)g & (int)(int)255) << (int)(int)8));
HXDLIN( 286)									Int _hx_tmp15 = ((int)((int)comparePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 286)									comparePixel = ((int)_hx_tmp14 | (int)_hx_tmp15);
            								}
HXLINE( 287)								{
HXLINE( 287)									Int _hx_tmp16 = ((int)((int)((int)((int)((int)comparePixel >> (int)(int)24) & (int)(int)255) & (int)(int)255) << (int)(int)24) | (int)((int)((int)((int)((int)comparePixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16));
HXDLIN( 287)									Int _hx_tmp17 = ((int)((int)((int)((int)comparePixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8);
HXDLIN( 287)									comparePixel = ((int)((int)_hx_tmp16 | (int)_hx_tmp17) | (int)((int)b & (int)(int)255));
            								}
HXLINE( 288)								{
HXLINE( 288)									Int _hx_tmp18 = ((int)((int)(int)-16777216 | (int)((int)((int)((int)((int)comparePixel >> (int)(int)16) & (int)(int)255) & (int)(int)255) << (int)(int)16)) | (int)((int)((int)((int)((int)comparePixel >> (int)(int)8) & (int)(int)255) & (int)(int)255) << (int)(int)8));
HXDLIN( 288)									Int _hx_tmp19 = ((int)((int)comparePixel & (int)(int)255) & (int)(int)255);
HXDLIN( 288)									comparePixel = ((int)_hx_tmp18 | (int)_hx_tmp19);
            								}
HXLINE( 290)								foundDifference = true;
            							}
            						}
HXLINE( 296)						if (foundDifference) {
HXLINE( 298)							Bool _hx_tmp20 = hx::IsNull( bitmapData );
HXDLIN( 298)							if (_hx_tmp20) {
HXLINE( 300)								Bool _hx_tmp21;
HXDLIN( 300)								if (!(this->transparent)) {
HXLINE( 300)									_hx_tmp21 = otherBitmapData->transparent;
            								}
            								else {
HXLINE( 300)									_hx_tmp21 = true;
            								}
HXDLIN( 300)								bitmapData =  ::openfl::display::BitmapData_obj::__new(this->width,this->height,_hx_tmp21,(int)0);
            							}
HXLINE( 304)							bitmapData->setPixel32(x,y,comparePixel);
            						}
            					}
            				}
            			}
            		}
HXLINE( 312)		Bool _hx_tmp22 = hx::IsNull( bitmapData );
HXDLIN( 312)		if (_hx_tmp22) {
HXLINE( 314)			return (int)0;
            		}
HXLINE( 318)		return bitmapData;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,compare,return )

void BitmapData_obj::copyChannel( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,Int sourceChannel,Int destChannel){
            	HX_STACK_FRAME("openfl.display.BitmapData","copyChannel",0x5d702b43,"openfl.display.BitmapData.copyChannel","openfl/display/BitmapData.hx",323,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(sourceChannel,"sourceChannel")
            	HX_STACK_ARG(destChannel,"destChannel")
HXLINE( 325)		if (!(this->_hx___isValid)) {
HXLINE( 325)			return;
            		}
HXLINE( 327)		HX_VAR_NAME( ::hx::EnumBase,sourceChannel1,"sourceChannel");
HXDLIN( 327)		switch((int)(sourceChannel)){
            			case (int)1: {
HXLINE( 327)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 327)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 327)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 327)				sourceChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 333)				return;
            			}
            		}
HXLINE( 337)		HX_VAR_NAME( ::hx::EnumBase,destChannel1,"destChannel");
HXDLIN( 337)		switch((int)(destChannel)){
            			case (int)1: {
HXLINE( 337)				destChannel1 = ::lime::graphics::ImageChannel_obj::RED_dyn();
            			}
            			break;
            			case (int)2: {
HXLINE( 337)				destChannel1 = ::lime::graphics::ImageChannel_obj::GREEN_dyn();
            			}
            			break;
            			case (int)4: {
HXLINE( 337)				destChannel1 = ::lime::graphics::ImageChannel_obj::BLUE_dyn();
            			}
            			break;
            			case (int)8: {
HXLINE( 337)				destChannel1 = ::lime::graphics::ImageChannel_obj::ALPHA_dyn();
            			}
            			break;
            			default:{
HXLINE( 343)				return;
            			}
            		}
HXLINE( 347)		 ::lime::math::Rectangle _hx_tmp = sourceRect->_hx___toLimeRectangle();
HXDLIN( 347)		 ::lime::math::Vector2 _hx_tmp1 = destPoint->_hx___toLimeVector2();
HXDLIN( 347)		this->image->copyChannel(sourceBitmapData->image,_hx_tmp,_hx_tmp1,sourceChannel1,destChannel1);
HXLINE( 348)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,copyChannel,(void))

void BitmapData_obj::copyPixels( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint, ::openfl::display::BitmapData alphaBitmapData, ::openfl::geom::Point alphaPoint,hx::Null< Bool >  __o_mergeAlpha){
Bool mergeAlpha = __o_mergeAlpha.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","copyPixels",0x385c94ad,"openfl.display.BitmapData.copyPixels","openfl/display/BitmapData.hx",353,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(alphaBitmapData,"alphaBitmapData")
            	HX_STACK_ARG(alphaPoint,"alphaPoint")
            	HX_STACK_ARG(mergeAlpha,"mergeAlpha")
HXLINE( 355)		Bool _hx_tmp;
HXDLIN( 355)		if (!(!(this->_hx___isValid))) {
HXLINE( 355)			_hx_tmp = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 355)			_hx_tmp = true;
            		}
HXDLIN( 355)		if (_hx_tmp) {
HXLINE( 355)			return;
            		}
HXLINE( 357)		 ::lime::math::Rectangle _hx_tmp1 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 357)		 ::lime::math::Vector2 _hx_tmp2 = destPoint->_hx___toLimeVector2();
HXDLIN( 357)		 ::lime::graphics::Image _hx_tmp3;
HXDLIN( 357)		Bool _hx_tmp4 = hx::IsNotNull( alphaBitmapData );
HXDLIN( 357)		if (_hx_tmp4) {
HXLINE( 357)			_hx_tmp3 = alphaBitmapData->image;
            		}
            		else {
HXLINE( 357)			_hx_tmp3 = null();
            		}
HXDLIN( 357)		 ::lime::math::Vector2 _hx_tmp5;
HXDLIN( 357)		Bool _hx_tmp6 = hx::IsNotNull( alphaPoint );
HXDLIN( 357)		if (_hx_tmp6) {
HXLINE( 357)			_hx_tmp5 = alphaPoint->_hx___toLimeVector2();
            		}
            		else {
HXLINE( 357)			_hx_tmp5 = null();
            		}
HXDLIN( 357)		this->image->copyPixels(sourceBitmapData->image,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp5,mergeAlpha);
HXLINE( 358)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,copyPixels,(void))

void BitmapData_obj::dispose(){
            	HX_STACK_FRAME("openfl.display.BitmapData","dispose",0x8eb5efd4,"openfl.display.BitmapData.dispose","openfl/display/BitmapData.hx",363,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 365)		this->image = null();
HXLINE( 367)		this->width = (int)0;
HXLINE( 368)		this->height = (int)0;
HXLINE( 369)		this->rect = null();
HXLINE( 370)		this->_hx___isValid = false;
HXLINE( 372)		Bool _hx_tmp = hx::IsNotNull( this->_hx___texture );
HXDLIN( 372)		if (_hx_tmp) {
HXLINE( 374)			HX_VARI(  ::openfl::_internal::renderer::AbstractRenderer,renderer) = ::openfl::Lib_obj::current->stage->_hx___renderer;
HXLINE( 376)			Bool _hx_tmp1 = hx::IsNotNull( renderer );
HXDLIN( 376)			if (_hx_tmp1) {
HXLINE( 381)				Bool _hx_tmp2 = hx::IsNotNull( renderer->renderSession->gl );
HXDLIN( 381)				if (_hx_tmp2) {
HXLINE( 383)					{
HXLINE( 383)						HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->_hx___texture;
HXDLIN( 383)						{
HXLINE( 383)							{
HXLINE( 383)								Int texture1 = ( (Int)(texture->id) );
HXDLIN( 383)								::lime::graphics::opengl::GL_obj::cffi_lime_gl_delete_texture(texture1);
            							}
HXDLIN( 383)							texture->invalidate();
            						}
            					}
HXLINE( 384)					this->_hx___texture = null();
            				}
            			}
            		}
HXLINE( 392)		Bool _hx_tmp3 = hx::IsNotNull( this->_hx___pingPongTexture );
HXDLIN( 392)		if (_hx_tmp3) {
HXLINE( 394)			this->_hx___pingPongTexture->destroy();
HXLINE( 395)			this->_hx___pingPongTexture = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,dispose,(void))

void BitmapData_obj::draw(::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect,hx::Null< Bool >  __o_smoothing){
Bool smoothing = __o_smoothing.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","draw",0xf1a859af,"openfl.display.BitmapData.draw","openfl/display/BitmapData.hx",402,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(colorTransform,"colorTransform")
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(clipRect,"clipRect")
            	HX_STACK_ARG(smoothing,"smoothing")
HXLINE( 404)		if (!(this->_hx___isValid)) {
HXLINE( 404)			return;
            		}
HXLINE( 470)		Bool _hx_tmp = hx::IsNotNull( colorTransform );
HXDLIN( 470)		if (_hx_tmp) {
HXLINE( 472)			 ::Dynamic _hx_tmp1 = ::Reflect_obj::getProperty(source,HX_("width",06,b6,62,ca));
HXDLIN( 472)			 ::Dynamic _hx_tmp2 = ::Reflect_obj::getProperty(source,HX_("height",e7,07,4c,02));
HXDLIN( 472)			HX_VARI(  ::openfl::display::BitmapData,copy) =  ::openfl::display::BitmapData_obj::__new(_hx_tmp1,_hx_tmp2,true,(int)0);
HXLINE( 473)			copy->draw(source,null(),null(),null(),null(),null());
HXLINE( 474)			copy->colorTransform(copy->rect,colorTransform);
HXLINE( 475)			source = copy;
            		}
HXLINE( 482)		HX_VARI(  ::Dynamic,surface) = this->getSurface();
HXLINE( 483)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) =  ::lime::graphics::cairo::Cairo_obj::__new(surface);
HXLINE( 485)		if (!(smoothing)) {
HXLINE( 487)			cairo->set_antialias((int)1);
            		}
HXLINE( 491)		HX_VARI(  ::openfl::_internal::renderer::RenderSession,renderSession) =  ::openfl::_internal::renderer::RenderSession_obj::__new();
HXLINE( 492)		renderSession->cairo = cairo;
HXLINE( 493)		renderSession->roundPixels = true;
HXLINE( 494)		renderSession->maskManager =  ::openfl::_internal::renderer::cairo::CairoMaskManager_obj::__new(renderSession);
HXLINE( 496)		Bool _hx_tmp3 = hx::IsNotNull( clipRect );
HXDLIN( 496)		if (_hx_tmp3) {
HXLINE( 498)			renderSession->maskManager->pushRect(clipRect, ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null()));
            		}
HXLINE( 502)		HX_VARI(  ::openfl::geom::Matrix,matrixCache) = ( ( ::openfl::geom::Matrix)(source->__Field(HX_("__worldTransform",da,a7,d8,9a),hx::paccDynamic)) );
HXLINE( 503)		 ::openfl::geom::Matrix _hx_tmp4;
HXDLIN( 503)		Bool _hx_tmp5 = hx::IsNotNull( matrix );
HXDLIN( 503)		if (_hx_tmp5) {
HXLINE( 503)			_hx_tmp4 = matrix;
            		}
            		else {
HXLINE( 503)			_hx_tmp4 =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXDLIN( 503)		::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,_hx_tmp4);
HXLINE( 504)		::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,false);
HXLINE( 505)		::openfl::display::IBitmapDrawable_obj::_hx___renderCairo(source,renderSession);
HXLINE( 506)		::openfl::display::IBitmapDrawable_obj::_hx___updateTransforms(source,matrixCache);
HXLINE( 507)		::openfl::display::IBitmapDrawable_obj::_hx___updateChildren(source,true);
HXLINE( 509)		Bool _hx_tmp6 = hx::IsNotNull( clipRect );
HXDLIN( 509)		if (_hx_tmp6) {
HXLINE( 511)			renderSession->maskManager->popMask();
            		}
HXLINE( 515)		::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(surface);
HXLINE( 517)		this->image->dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC6(BitmapData_obj,draw,(void))

 ::openfl::utils::ByteArrayData BitmapData_obj::encode( ::openfl::geom::Rectangle rect, ::Dynamic compressor, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","encode",0x09c32081,"openfl.display.BitmapData.encode","openfl/display/BitmapData.hx",524,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(compressor,"compressor")
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE( 528)		Bool _hx_tmp;
HXDLIN( 528)		if (!(!(this->_hx___isValid))) {
HXLINE( 528)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 528)			_hx_tmp = true;
            		}
HXDLIN( 528)		if (_hx_tmp) {
HXLINE( 528)			byteArray = null();
HXDLIN( 528)			return byteArray;
            		}
HXLINE( 530)		Bool _hx_tmp1 = ::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::PNGEncoderOptions >());
HXDLIN( 530)		if (_hx_tmp1) {
HXLINE( 532)			 ::haxe::io::Bytes _hx_tmp2 = this->image->encode(HX_("png",a9,5c,55,00),null());
HXDLIN( 532)			byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp2);
HXDLIN( 532)			return byteArray;
            		}
            		else {
HXLINE( 534)			Bool _hx_tmp3 = ::Std_obj::is(compressor,hx::ClassOf< ::openfl::display::JPEGEncoderOptions >());
HXDLIN( 534)			if (_hx_tmp3) {
HXLINE( 536)				 ::haxe::io::Bytes _hx_tmp4 = this->image->encode(HX_("jpg",e1,d0,50,00),hx::TCast<  ::openfl::display::JPEGEncoderOptions >::cast(compressor)->quality);
HXDLIN( 536)				byteArray = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp4);
HXDLIN( 536)				return byteArray;
            			}
            		}
HXLINE( 540)		byteArray = null();
HXDLIN( 540)		return byteArray;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,encode,return )

void BitmapData_obj::fillRect( ::openfl::geom::Rectangle rect,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","fillRect",0x95912472,"openfl.display.BitmapData.fillRect","openfl/display/BitmapData.hx",545,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(color,"color")
HXLINE( 547)		Bool _hx_tmp;
HXDLIN( 547)		if (!(!(this->_hx___isValid))) {
HXLINE( 547)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE( 547)			_hx_tmp = true;
            		}
HXDLIN( 547)		if (_hx_tmp) {
HXLINE( 547)			return;
            		}
HXLINE( 549)		Bool _hx_tmp1;
HXDLIN( 549)		if (this->transparent) {
HXLINE( 549)			_hx_tmp1 = (((int)color & (int)(int)-16777216) == (int)0);
            		}
            		else {
HXLINE( 549)			_hx_tmp1 = false;
            		}
HXDLIN( 549)		if (_hx_tmp1) {
HXLINE( 551)			color = (int)0;
            		}
HXLINE( 555)		 ::lime::math::Rectangle _hx_tmp2 = rect->_hx___toLimeRectangle();
HXDLIN( 555)		this->image->fillRect(_hx_tmp2,color,(int)1);
HXLINE( 556)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fillRect,(void))

void BitmapData_obj::floodFill(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","floodFill",0xed95e9d6,"openfl.display.BitmapData.floodFill","openfl/display/BitmapData.hx",561,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE( 563)		if (!(this->_hx___isValid)) {
HXLINE( 563)			return;
            		}
HXLINE( 564)		this->image->floodFill(x,y,color,(int)1);
HXLINE( 565)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,floodFill,(void))

 ::openfl::geom::Rectangle BitmapData_obj::generateFilterRect( ::openfl::geom::Rectangle sourceRect, ::openfl::filters::BitmapFilter filter){
            	HX_STACK_FRAME("openfl.display.BitmapData","generateFilterRect",0x1ef8cf7c,"openfl.display.BitmapData.generateFilterRect","openfl/display/BitmapData.hx",625,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(filter,"filter")
HXLINE( 625)		return sourceRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,generateFilterRect,return )

 ::lime::graphics::opengl::GLBuffer BitmapData_obj::getBuffer( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl.display.BitmapData","getBuffer",0xe0f6acab,"openfl.display.BitmapData.getBuffer","openfl/display/BitmapData.hx",630,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE( 632)		Bool _hx_tmp = hx::IsNull( this->_hx___buffer );
HXDLIN( 632)		if (_hx_tmp) {
HXLINE( 634)			HX_VARI( ::Array< Int >,data) = ::Array_obj< Int >::__new(20)->init(0,this->width)->init(1,this->height)->init(2,(int)0)->init(3,(int)1)->init(4,(int)1)->init(5,(int)0)->init(6,this->height)->init(7,(int)0)->init(8,(int)0)->init(9,(int)1)->init(10,this->width)->init(11,(int)0)->init(12,(int)0)->init(13,(int)1)->init(14,(int)0)->init(15,(int)0)->init(16,(int)0)->init(17,(int)0)->init(18,(int)0)->init(19,(int)0);
HXLINE( 643)			Int _hx_tmp1 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 643)			Int _hx_tmp2 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_buffer()) );
HXDLIN( 643)			this->_hx___buffer =  ::lime::graphics::opengl::GLBuffer_obj::__new(_hx_tmp1,_hx_tmp2);
HXLINE( 644)			{
HXLINE( 644)				Int target = gl->ARRAY_BUFFER;
HXDLIN( 644)				HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->_hx___buffer;
HXDLIN( 644)				{
HXLINE( 644)					Int buffer1;
HXDLIN( 644)					Bool _hx_tmp3 = hx::IsNull( buffer );
HXDLIN( 644)					if (_hx_tmp3) {
HXLINE( 644)						buffer1 = (int)0;
            					}
            					else {
HXLINE( 644)						buffer1 = buffer->id;
            					}
HXDLIN( 644)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target,buffer1);
            				}
            			}
HXLINE( 645)			{
HXLINE( 645)				Int target1 = gl->ARRAY_BUFFER;
HXDLIN( 645)				HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 645)				Bool _hx_tmp4 = hx::IsNotNull( data );
HXDLIN( 645)				if (_hx_tmp4) {
HXLINE( 645)					HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN( 645)					_this->byteOffset = (int)0;
HXDLIN( 645)					_this->length = data->length;
HXDLIN( 645)					Int _hx_tmp5 = (_this->length * _this->bytesPerElement);
HXDLIN( 645)					_this->byteLength = _hx_tmp5;
HXDLIN( 645)					Int byteLength = _this->byteLength;
HXDLIN( 645)					HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 645)					_this->buffer = this2;
HXDLIN( 645)					_this->copyFromArray(data,null());
HXDLIN( 645)					this1 = _this;
            				}
            				else {
HXLINE( 645)					HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            				}
HXDLIN( 645)				HX_VARI_NAME(  ::lime::utils::ArrayBufferView,data1,"data") = this1;
HXDLIN( 645)				Int usage = gl->STATIC_DRAW;
HXDLIN( 645)				{
HXLINE( 645)					Int byteOffset = data1->byteOffset;
HXDLIN( 645)					Int size = data1->byteLength;
HXDLIN( 645)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data(target1,hx::DynamicPtr(data1->buffer),byteOffset,size,usage);
            				}
            			}
HXLINE( 646)			{
HXLINE( 646)				Int target2 = gl->ARRAY_BUFFER;
HXDLIN( 646)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer(target2,(int)0);
            			}
            		}
HXLINE( 650)		return this->_hx___buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getBuffer,return )

 ::openfl::geom::Rectangle BitmapData_obj::getColorBoundsRect(Int mask,Int color,hx::Null< Bool >  __o_findColor){
Bool findColor = __o_findColor.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","getColorBoundsRect",0x21495071,"openfl.display.BitmapData.getColorBoundsRect","openfl/display/BitmapData.hx",655,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(findColor,"findColor")
HXLINE( 657)		if (!(this->_hx___isValid)) {
HXLINE( 657)			return  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            		}
HXLINE( 659)		Bool _hx_tmp;
HXDLIN( 659)		if (!(!(this->transparent))) {
HXLINE( 659)			_hx_tmp = (((int)((int)mask >> (int)(int)24) & (int)(int)255) > (int)0);
            		}
            		else {
HXLINE( 659)			_hx_tmp = true;
            		}
HXDLIN( 659)		if (_hx_tmp) {
HXLINE( 661)			HX_VARI_NAME( Int,color1,"color") = color;
HXLINE( 662)			Int _hx_tmp1 = ((int)((int)color1 >> (int)(int)24) & (int)(int)255);
HXDLIN( 662)			if ((_hx_tmp1 == (int)0)) {
HXLINE( 662)				color1 = (int)0;
            			}
            		}
HXLINE( 666)		HX_VARI(  ::lime::math::Rectangle,rect) = this->image->getColorBoundsRect(mask,color,findColor,(int)1);
HXLINE( 667)		return  ::openfl::geom::Rectangle_obj::__new(rect->x,rect->y,rect->width,rect->height);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,getColorBoundsRect,return )

Int BitmapData_obj::getPixel(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixel",0x4b52b53b,"openfl.display.BitmapData.getPixel","openfl/display/BitmapData.hx",672,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 674)		if (!(this->_hx___isValid)) {
HXLINE( 674)			return (int)0;
            		}
HXLINE( 675)		return this->image->getPixel(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel,return )

Int BitmapData_obj::getPixel32(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixel32",0xcd56e69a,"openfl.display.BitmapData.getPixel32","openfl/display/BitmapData.hx",680,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 682)		if (!(this->_hx___isValid)) {
HXLINE( 682)			return (int)0;
            		}
HXLINE( 683)		return this->image->getPixel32(x,y,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,getPixel32,return )

 ::openfl::utils::ByteArrayData BitmapData_obj::getPixels( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.BitmapData","getPixels",0x9d0bded8,"openfl.display.BitmapData.getPixels","openfl/display/BitmapData.hx",688,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 690)		if (!(this->_hx___isValid)) {
HXLINE( 690)			return null();
            		}
HXLINE( 691)		Bool _hx_tmp = hx::IsNull( rect );
HXDLIN( 691)		if (_hx_tmp) {
HXLINE( 691)			rect = this->rect;
            		}
HXLINE( 692)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN( 692)		 ::haxe::io::Bytes _hx_tmp2 = this->image->getPixels(_hx_tmp1,(int)1);
HXDLIN( 692)		return ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytes(_hx_tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getPixels,return )

 ::Dynamic BitmapData_obj::getSurface(){
            	HX_STACK_FRAME("openfl.display.BitmapData","getSurface",0xa2992c22,"openfl.display.BitmapData.getSurface","openfl/display/BitmapData.hx",697,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE( 699)		if (!(this->_hx___isValid)) {
HXLINE( 699)			return null();
            		}
HXLINE( 701)		Bool _hx_tmp = hx::IsNull( this->_hx___surface );
HXDLIN( 701)		if (_hx_tmp) {
HXLINE( 703)			this->_hx___surface = ::lime::graphics::cairo::_CairoImageSurface::CairoImageSurface_Impl__obj::fromImage(this->image);
            		}
HXLINE( 707)		return this->_hx___surface;
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,getSurface,return )

 ::lime::graphics::opengl::GLTexture BitmapData_obj::getTexture( ::lime::graphics::GLRenderContext gl){
            	HX_STACK_FRAME("openfl.display.BitmapData","getTexture",0xe4308ed0,"openfl.display.BitmapData.getTexture","openfl/display/BitmapData.hx",712,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(gl,"gl")
HXLINE( 714)		if (!(this->_hx___isValid)) {
HXLINE( 714)			return null();
            		}
HXLINE( 716)		Bool _hx_tmp;
HXDLIN( 716)		if (this->_hx___usingPingPongTexture) {
HXLINE( 716)			_hx_tmp = hx::IsNotNull( this->_hx___pingPongTexture );
            		}
            		else {
HXLINE( 716)			_hx_tmp = false;
            		}
HXDLIN( 716)		if (_hx_tmp) {
HXLINE( 718)			HX_VARI(  ::openfl::_internal::renderer::opengl::utils::PingPongTexture,_this) = this->_hx___pingPongTexture;
HXDLIN( 718)			if (_this->useOldTexture) {
HXLINE( 718)				 ::openfl::_internal::renderer::opengl::utils::RenderTexture _hx_tmp1;
HXDLIN( 718)				if (_this->_hx___swapped) {
HXLINE( 718)					_hx_tmp1 = _this->_hx___texture0;
            				}
            				else {
HXLINE( 718)					_hx_tmp1 = _this->_hx___texture1;
            				}
HXDLIN( 718)				return _hx_tmp1->texture;
            			}
            			else {
HXLINE( 718)				 ::openfl::_internal::renderer::opengl::utils::RenderTexture _hx_tmp2;
HXDLIN( 718)				if (_this->_hx___swapped) {
HXLINE( 718)					_hx_tmp2 = _this->_hx___texture1;
            				}
            				else {
HXLINE( 718)					_hx_tmp2 = _this->_hx___texture0;
            				}
HXDLIN( 718)				return _hx_tmp2->texture;
            			}
            		}
HXLINE( 722)		Bool _hx_tmp3 = hx::IsNull( this->_hx___texture );
HXDLIN( 722)		if (_hx_tmp3) {
HXLINE( 724)			Int _hx_tmp4 = ::lime::graphics::opengl::GL_obj::get_version();
HXDLIN( 724)			Int _hx_tmp5 = ( (Int)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_create_texture()) );
HXDLIN( 724)			this->_hx___texture =  ::lime::graphics::opengl::GLTexture_obj::__new(_hx_tmp4,_hx_tmp5);
HXLINE( 725)			{
HXLINE( 725)				Int target = gl->TEXTURE_2D;
HXDLIN( 725)				HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->_hx___texture;
HXDLIN( 725)				{
HXLINE( 725)					Int texture1;
HXDLIN( 725)					Bool _hx_tmp6 = hx::IsNull( texture );
HXDLIN( 725)					if (_hx_tmp6) {
HXLINE( 725)						texture1 = (int)0;
            					}
            					else {
HXLINE( 725)						texture1 = texture->id;
            					}
HXDLIN( 725)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target,texture1);
            				}
            			}
HXLINE( 726)			{
HXLINE( 726)				Int target1 = gl->TEXTURE_2D;
HXDLIN( 726)				Int pname = gl->TEXTURE_WRAP_S;
HXDLIN( 726)				Int param = gl->CLAMP_TO_EDGE;
HXDLIN( 726)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target1,pname,param);
            			}
HXLINE( 727)			{
HXLINE( 727)				Int target2 = gl->TEXTURE_2D;
HXDLIN( 727)				Int pname1 = gl->TEXTURE_WRAP_T;
HXDLIN( 727)				Int param1 = gl->CLAMP_TO_EDGE;
HXDLIN( 727)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target2,pname1,param1);
            			}
HXLINE( 728)			{
HXLINE( 728)				Int target3 = gl->TEXTURE_2D;
HXDLIN( 728)				Int pname2 = gl->TEXTURE_MAG_FILTER;
HXDLIN( 728)				Int param2 = gl->NEAREST;
HXDLIN( 728)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target3,pname2,param2);
            			}
HXLINE( 729)			{
HXLINE( 729)				Int target4 = gl->TEXTURE_2D;
HXDLIN( 729)				Int pname3 = gl->TEXTURE_MIN_FILTER;
HXDLIN( 729)				Int param3 = gl->NEAREST;
HXDLIN( 729)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri(target4,pname3,param3);
            			}
HXLINE( 730)			this->image->dirty = true;
            		}
HXLINE( 734)		Bool _hx_tmp7;
HXDLIN( 734)		Bool _hx_tmp8 = hx::IsNotNull( this->image );
HXDLIN( 734)		if (_hx_tmp8) {
HXLINE( 734)			_hx_tmp7 = this->image->dirty;
            		}
            		else {
HXLINE( 734)			_hx_tmp7 = false;
            		}
HXDLIN( 734)		if (_hx_tmp7) {
HXLINE( 736)			HX_VAR( Int,internalFormat);
HXDLIN( 736)			HX_VAR( Int,format);
HXLINE( 738)			Bool _hx_tmp9 = hx::IsNotNull( this->_hx___surface );
HXDLIN( 738)			if (_hx_tmp9) {
HXLINE( 740)				::lime::graphics::cairo::_CairoSurface::CairoSurface_Impl__obj::flush(this->_hx___surface);
            			}
HXLINE( 744)			Bool _hx_tmp10 = (this->image->buffer->bitsPerPixel == (int)1);
HXDLIN( 744)			if (_hx_tmp10) {
HXLINE( 746)				internalFormat = gl->ALPHA;
HXLINE( 747)				format = gl->ALPHA;
            			}
            			else {
HXLINE( 763)				Bool _hx_tmp11 = hx::IsNull( ::openfl::display::BitmapData_obj::_hx___isGLES );
HXDLIN( 763)				if (_hx_tmp11) {
HXLINE( 765)					Int pname4 = gl->VERSION;
HXDLIN( 765)					 ::hx::Object * inVal = ( ( ::hx::Object *)(::lime::graphics::opengl::GL_obj::cffi_lime_gl_get_parameter(pname4)) );
HXDLIN( 765)					HX_VARI( ::String,version) = ( (::String)(Dynamic(hx::DynamicPtr(inVal))) );
HXLINE( 766)					Bool _hx_tmp12;
HXDLIN( 766)					Int _hx_tmp13 = version.indexOf(HX_("OpenGL ES",5f,cb,92,95),null());
HXDLIN( 766)					if ((_hx_tmp13 > (int)-1)) {
HXLINE( 766)						Int _hx_tmp14 = version.indexOf(HX_("WebGL",99,9f,e9,5a),null());
HXDLIN( 766)						_hx_tmp12 = (_hx_tmp14 == (int)-1);
            					}
            					else {
HXLINE( 766)						_hx_tmp12 = false;
            					}
HXDLIN( 766)					::openfl::display::BitmapData_obj::_hx___isGLES = _hx_tmp12;
            				}
HXLINE( 770)				if (::openfl::display::BitmapData_obj::_hx___isGLES) {
HXLINE( 770)					internalFormat = gl->BGRA_EXT;
            				}
            				else {
HXLINE( 770)					internalFormat = gl->RGBA;
            				}
HXLINE( 771)				format = gl->BGRA_EXT;
            			}
HXLINE( 777)			{
HXLINE( 777)				Int target5 = gl->TEXTURE_2D;
HXDLIN( 777)				HX_VARI_NAME(  ::lime::graphics::opengl::GLTexture,texture2,"texture") = this->_hx___texture;
HXDLIN( 777)				{
HXLINE( 777)					Int texture3;
HXDLIN( 777)					Bool _hx_tmp15 = hx::IsNull( texture2 );
HXDLIN( 777)					if (_hx_tmp15) {
HXLINE( 777)						texture3 = (int)0;
            					}
            					else {
HXLINE( 777)						texture3 = texture2->id;
            					}
HXDLIN( 777)					::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target5,texture3);
            				}
            			}
HXLINE( 779)			HX_VARI(  ::lime::graphics::Image,textureImage) = this->image;
HXLINE( 781)			Bool _hx_tmp16;
HXDLIN( 781)			Bool _hx_tmp17 = !(textureImage->get_premultiplied());
HXDLIN( 781)			if (_hx_tmp17) {
HXLINE( 781)				_hx_tmp16 = textureImage->get_transparent();
            			}
            			else {
HXLINE( 781)				_hx_tmp16 = false;
            			}
HXDLIN( 781)			if (_hx_tmp16) {
HXLINE( 783)				textureImage = textureImage->clone();
HXLINE( 787)				textureImage->set_premultiplied(true);
            			}
HXLINE( 791)			{
HXLINE( 791)				Int target6 = gl->TEXTURE_2D;
HXDLIN( 791)				Int width = this->width;
HXDLIN( 791)				Int height = this->height;
HXDLIN( 791)				Int type = gl->UNSIGNED_BYTE;
HXDLIN( 791)				HX_VARI(  ::lime::utils::ArrayBufferView,pixels) = textureImage->get_data();
HXDLIN( 791)				{
HXLINE( 791)					HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN( 791)					Bool _hx_tmp18 = hx::IsNull( pixels );
HXDLIN( 791)					if (_hx_tmp18) {
HXLINE( 791)						buffer = null();
            					}
            					else {
HXLINE( 791)						buffer = pixels->buffer;
            					}
HXDLIN( 791)					{
HXLINE( 791)						Int byteOffset;
HXDLIN( 791)						Bool _hx_tmp19 = hx::IsNull( pixels );
HXDLIN( 791)						if (_hx_tmp19) {
HXLINE( 791)							byteOffset = (int)0;
            						}
            						else {
HXLINE( 791)							byteOffset = pixels->byteOffset;
            						}
HXDLIN( 791)						::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_image_2d(target6,(int)0,internalFormat,width,height,(int)0,format,type,hx::DynamicPtr(buffer),byteOffset);
            					}
            				}
            			}
HXLINE( 792)			{
HXLINE( 792)				Int target7 = gl->TEXTURE_2D;
HXDLIN( 792)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture(target7,(int)0);
            			}
HXLINE( 793)			this->image->dirty = false;
            		}
HXLINE( 797)		return this->_hx___texture;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getTexture,return )

::Array< Int > BitmapData_obj::getVector( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.BitmapData","getVector",0xa7bfa06e,"openfl.display.BitmapData.getVector","openfl/display/BitmapData.hx",802,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 804)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(rect);
HXLINE( 805)		HX_VARI( Int,length) = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels) / (Float)(int)4));
HXLINE( 806)		HX_VARI_NAME( ::Array< Int >,this1,"this") = ::Array_obj< Int >::__new();
HXDLIN( 806)		this1->__SetSizeExact(length);
HXDLIN( 806)		HX_VARI( ::Array< Int >,result) = this1;
HXLINE( 808)		{
HXLINE( 808)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 808)			while((_g1 < length)){
HXLINE( 808)				HX_VARI( Int,i) = _g1++;
HXLINE( 810)				{
HXLINE( 810)					Int value = pixels->readUnsignedInt();
HXDLIN( 810)					result[i] = value;
            				}
            			}
            		}
HXLINE( 814)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,getVector,return )

::Array< ::Dynamic> BitmapData_obj::histogram( ::openfl::geom::Rectangle hRect){
            	HX_STACK_FRAME("openfl.display.BitmapData","histogram",0xf93f4519,"openfl.display.BitmapData.histogram","openfl/display/BitmapData.hx",819,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(hRect,"hRect")
HXLINE( 821)		HX_VAR(  ::openfl::geom::Rectangle,rect);
HXDLIN( 821)		Bool _hx_tmp = hx::IsNotNull( hRect );
HXDLIN( 821)		if (_hx_tmp) {
HXLINE( 821)			rect = hRect;
            		}
            		else {
HXLINE( 821)			rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,this->width,this->height);
            		}
HXLINE( 822)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(rect);
HXLINE( 823)		HX_VARI( ::Array< ::Dynamic>,_g) = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 823)		{
HXLINE( 823)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 823)			while((_g1 < (int)4)){
HXLINE( 823)				++_g1;
HXDLIN( 823)				HX_VARI( ::Array< Int >,_g2) = ::Array_obj< Int >::__new(0);
HXDLIN( 823)				{
HXLINE( 823)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 823)					while((_g3 < (int)256)){
HXLINE( 823)						++_g3;
HXDLIN( 823)						_g2->push((int)0);
            					}
            				}
HXDLIN( 823)				_g->push(_g2);
            			}
            		}
HXLINE( 825)		{
HXLINE( 825)			HX_VARI_NAME( Int,_g21,"_g2") = (int)0;
HXDLIN( 825)			HX_VARI_NAME( Int,_g11,"_g1") = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels);
HXDLIN( 825)			while((_g21 < _g11)){
HXLINE( 825)				HX_VARI( Int,i) = _g21++;
HXLINE( 827)				::Array< Int > _hx_tmp1 = _g->__get(hx::Mod(i,(int)4)).StaticCast< ::Array< Int > >();
HXDLIN( 827)				Int _hx_tmp2 = pixels->readUnsignedByte();
HXDLIN( 827)				++_hx_tmp1[_hx_tmp2];
            			}
            		}
HXLINE( 831)		return _g;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,histogram,return )

Bool BitmapData_obj::hitTest( ::openfl::geom::Point firstPoint,Int firstAlphaThreshold, ::Dynamic secondObject, ::openfl::geom::Point secondBitmapDataPoint,hx::Null< Int >  __o_secondAlphaThreshold){
Int secondAlphaThreshold = __o_secondAlphaThreshold.Default(1);
            	HX_STACK_FRAME("openfl.display.BitmapData","hitTest",0xb5e8cf7a,"openfl.display.BitmapData.hitTest","openfl/display/BitmapData.hx",836,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(firstPoint,"firstPoint")
            	HX_STACK_ARG(firstAlphaThreshold,"firstAlphaThreshold")
            	HX_STACK_ARG(secondObject,"secondObject")
            	HX_STACK_ARG(secondBitmapDataPoint,"secondBitmapDataPoint")
            	HX_STACK_ARG(secondAlphaThreshold,"secondAlphaThreshold")
HXLINE( 838)		if (!(this->_hx___isValid)) {
HXLINE( 838)			return false;
            		}
HXLINE( 840)		Bool _hx_tmp = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::Bitmap >());
HXDLIN( 840)		if (_hx_tmp) {
HXLINE( 842)			secondObject = hx::TCast<  ::openfl::display::Bitmap >::cast(secondObject)->bitmapData;
            		}
HXLINE( 846)		Bool _hx_tmp1 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Point >());
HXDLIN( 846)		if (_hx_tmp1) {
HXLINE( 848)			HX_VARI(  ::openfl::geom::Point,secondPoint) = ( ( ::openfl::geom::Point)(secondObject) );
HXLINE( 850)			Float _hx_tmp2 = (secondPoint->x - firstPoint->x);
HXDLIN( 850)			HX_VARI( Int,x) = ::Std_obj::_hx_int(_hx_tmp2);
HXLINE( 851)			Float _hx_tmp3 = (secondPoint->y - firstPoint->y);
HXDLIN( 851)			HX_VARI( Int,y) = ::Std_obj::_hx_int(_hx_tmp3);
HXLINE( 853)			Bool _hx_tmp4 = this->rect->contains(x,y);
HXDLIN( 853)			if (_hx_tmp4) {
HXLINE( 855)				HX_VARI( Int,pixel) = this->getPixel32(x,y);
HXLINE( 857)				if ((((int)((int)pixel >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE( 859)					return true;
            				}
            			}
            		}
            		else {
HXLINE( 865)			Bool _hx_tmp5 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::display::BitmapData >());
HXDLIN( 865)			if (_hx_tmp5) {
HXLINE( 867)				HX_VARI(  ::openfl::display::BitmapData,secondBitmapData) = ( ( ::openfl::display::BitmapData)(secondObject) );
HXLINE( 868)				HX_VAR_NAME( Int,x1,"x");
HXDLIN( 868)				HX_VAR_NAME( Int,y1,"y");
HXLINE( 870)				Bool _hx_tmp6 = hx::IsNull( secondBitmapDataPoint );
HXDLIN( 870)				if (_hx_tmp6) {
HXLINE( 872)					x1 = (int)0;
HXLINE( 873)					y1 = (int)0;
            				}
            				else {
HXLINE( 877)					Float _hx_tmp7 = (secondBitmapDataPoint->x - firstPoint->x);
HXDLIN( 877)					x1 = ::Std_obj::_hx_int(_hx_tmp7);
HXLINE( 878)					Float _hx_tmp8 = (secondBitmapDataPoint->y - firstPoint->y);
HXDLIN( 878)					y1 = ::Std_obj::_hx_int(_hx_tmp8);
            				}
HXLINE( 882)				Bool _hx_tmp9 = this->rect->contains(x1,y1);
HXDLIN( 882)				if (_hx_tmp9) {
HXLINE( 884)					HX_VARI(  ::openfl::geom::Rectangle,hitRect) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 885)					Int _hx_tmp10 = secondBitmapData->width;
HXDLIN( 885)					Int _hx_tmp11 = (this->width - x1);
HXDLIN( 885)					Float _hx_tmp12 = ::Math_obj::min(_hx_tmp10,_hx_tmp11);
HXDLIN( 885)					Int _hx_tmp13 = secondBitmapData->height;
HXDLIN( 885)					Int _hx_tmp14 = (this->height - y1);
HXDLIN( 885)					Float _hx_tmp15 = ::Math_obj::min(_hx_tmp13,_hx_tmp14);
HXDLIN( 885)					hitRect->setTo(x1,y1,_hx_tmp12,_hx_tmp15);
HXLINE( 887)					HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(hitRect);
HXLINE( 889)					hitRect->offset(-(x1),-(y1));
HXLINE( 890)					HX_VARI(  ::openfl::utils::ByteArrayData,testPixels) = secondBitmapData->getPixels(hitRect);
HXLINE( 892)					Float _hx_tmp16 = (hitRect->width * hitRect->height);
HXDLIN( 892)					HX_VARI( Int,length) = ::Std_obj::_hx_int(_hx_tmp16);
HXLINE( 893)					HX_VAR_NAME( Int,pixel1,"pixel");
HXDLIN( 893)					HX_VAR( Int,testPixel);
HXLINE( 895)					{
HXLINE( 895)						HX_VARI( Int,_g1) = (int)0;
HXDLIN( 895)						while((_g1 < length)){
HXLINE( 895)							++_g1;
HXLINE( 897)							pixel1 = pixels->readUnsignedInt();
HXLINE( 898)							testPixel = testPixels->readUnsignedInt();
HXLINE( 900)							Bool _hx_tmp17;
HXDLIN( 900)							if ((((int)((int)pixel1 >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE( 900)								_hx_tmp17 = (((int)((int)testPixel >> (int)(int)24) & (int)(int)255) >= secondAlphaThreshold);
            							}
            							else {
HXLINE( 900)								_hx_tmp17 = false;
            							}
HXDLIN( 900)							if (_hx_tmp17) {
HXLINE( 902)								return true;
            							}
            						}
            					}
HXLINE( 908)					return false;
            				}
            			}
            			else {
HXLINE( 912)				Bool _hx_tmp18 = ::Std_obj::is(secondObject,hx::ClassOf< ::openfl::geom::Rectangle >());
HXDLIN( 912)				if (_hx_tmp18) {
HXLINE( 914)					HX_VARI(  ::openfl::geom::Rectangle,secondRectangle) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 915)					secondRectangle->copyFrom(( ( ::openfl::geom::Rectangle)(secondObject) ));
HXLINE( 916)					secondRectangle->offset(-(firstPoint->x),-(firstPoint->y));
HXLINE( 917)					secondRectangle->_hx___contract((int)0,(int)0,this->width,this->height);
HXLINE( 919)					Bool _hx_tmp19;
HXDLIN( 919)					if ((secondRectangle->width > (int)0)) {
HXLINE( 919)						_hx_tmp19 = (secondRectangle->height > (int)0);
            					}
            					else {
HXLINE( 919)						_hx_tmp19 = false;
            					}
HXDLIN( 919)					if (_hx_tmp19) {
HXLINE( 921)						HX_VARI_NAME(  ::openfl::utils::ByteArrayData,pixels1,"pixels") = this->getPixels(secondRectangle);
HXLINE( 922)						HX_VARI_NAME( Int,length1,"length") = ::Std_obj::_hx_int(((Float)::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(pixels1) / (Float)(int)4));
HXLINE( 923)						HX_VAR_NAME( Int,pixel2,"pixel");
HXLINE( 925)						{
HXLINE( 925)							HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 925)							while((_g11 < length1)){
HXLINE( 925)								++_g11;
HXLINE( 927)								pixel2 = pixels1->readUnsignedInt();
HXLINE( 929)								if ((((int)((int)pixel2 >> (int)(int)24) & (int)(int)255) >= firstAlphaThreshold)) {
HXLINE( 931)									return true;
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 941)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,hitTest,return )

void BitmapData_obj::lock(){
            	HX_STACK_FRAME("openfl.display.BitmapData","lock",0xf6efc996,"openfl.display.BitmapData.lock","openfl/display/BitmapData.hx",946,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,lock,(void))

void BitmapData_obj::merge( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,Int redMultiplier,Int greenMultiplier,Int blueMultiplier,Int alphaMultiplier){
            	HX_STACK_FRAME("openfl.display.BitmapData","merge",0xa7b66aad,"openfl.display.BitmapData.merge","openfl/display/BitmapData.hx",953,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redMultiplier,"redMultiplier")
            	HX_STACK_ARG(greenMultiplier,"greenMultiplier")
            	HX_STACK_ARG(blueMultiplier,"blueMultiplier")
            	HX_STACK_ARG(alphaMultiplier,"alphaMultiplier")
HXLINE( 955)		Bool _hx_tmp;
HXDLIN( 955)		Bool _hx_tmp1;
HXDLIN( 955)		Bool _hx_tmp2;
HXDLIN( 955)		Bool _hx_tmp3;
HXDLIN( 955)		if (!(!(this->_hx___isValid))) {
HXLINE( 955)			_hx_tmp3 = hx::IsNull( sourceBitmapData );
            		}
            		else {
HXLINE( 955)			_hx_tmp3 = true;
            		}
HXDLIN( 955)		if (!(_hx_tmp3)) {
HXLINE( 955)			_hx_tmp2 = !(sourceBitmapData->_hx___isValid);
            		}
            		else {
HXLINE( 955)			_hx_tmp2 = true;
            		}
HXDLIN( 955)		if (!(_hx_tmp2)) {
HXLINE( 955)			_hx_tmp1 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE( 955)			_hx_tmp1 = true;
            		}
HXDLIN( 955)		if (!(_hx_tmp1)) {
HXLINE( 955)			_hx_tmp = hx::IsNull( destPoint );
            		}
            		else {
HXLINE( 955)			_hx_tmp = true;
            		}
HXDLIN( 955)		if (_hx_tmp) {
HXLINE( 955)			return;
            		}
HXLINE( 956)		 ::lime::math::Rectangle _hx_tmp4 = sourceRect->_hx___toLimeRectangle();
HXDLIN( 956)		 ::lime::math::Vector2 _hx_tmp5 = destPoint->_hx___toLimeVector2();
HXDLIN( 956)		this->image->merge(sourceBitmapData->image,_hx_tmp4,_hx_tmp5,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
HXLINE( 957)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,merge,(void))

void BitmapData_obj::noise(Int randomSeed,hx::Null< Int >  __o_low,hx::Null< Int >  __o_high,hx::Null< Int >  __o_channelOptions,hx::Null< Bool >  __o_grayScale){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< Int >,randomSeed1) HXARGC(0)
            		Int _hx_run(){
            			HX_STACK_FRAME("openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",969,0xdd12d5b9)
HXLINE( 970)			Int _hx_tmp = (randomSeed1->__get((int)0) * (int)1103515245);
HXDLIN( 970)			randomSeed1[(int)0] = (_hx_tmp + (int)12345);
HXLINE( 971)			Float _hx_tmp1 = ((Float)randomSeed1->__get((int)0) / (Float)(int)65536);
HXDLIN( 971)			Float _hx_tmp2 = ::Math_obj::abs(_hx_tmp1);
HXDLIN( 971)			Int _hx_tmp3 = ::Std_obj::_hx_int(_hx_tmp2);
HXDLIN( 971)			return hx::Mod(_hx_tmp3,(int)32768);
            		}
            		HX_END_LOCAL_FUNC0(return)

Int low = __o_low.Default(0);
Int high = __o_high.Default(255);
Int channelOptions = __o_channelOptions.Default(7);
Bool grayScale = __o_grayScale.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","noise",0x41b2578f,"openfl.display.BitmapData.noise","openfl/display/BitmapData.hx",962,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(randomSeed,"randomSeed")
            	HX_STACK_ARG(low,"low")
            	HX_STACK_ARG(high,"high")
            	HX_STACK_ARG(channelOptions,"channelOptions")
            	HX_STACK_ARG(grayScale,"grayScale")
HXLINE( 962)		HX_VARI_NAME( ::Array< Int >,randomSeed1,"randomSeed") = ::Array_obj< Int >::__new(1)->init(0,randomSeed);
HXLINE( 964)		if (!(this->_hx___isValid)) {
HXLINE( 964)			return;
            		}
HXLINE( 968)		HX_VARI(  ::Dynamic,func) =  ::Dynamic(new _hx_Closure_0(randomSeed1));
HXLINE( 974)		func();
HXLINE( 977)		HX_VARI( Int,range) = (high - low);
HXLINE( 978)		 ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXLINE( 980)		HX_VARI( Bool,redChannel) = (((int)channelOptions & (int)(int)1) == (int)1);
HXLINE( 981)		HX_VARI( Bool,greenChannel) = (((int)((int)channelOptions & (int)(int)2) >> (int)(int)1) == (int)1);
HXLINE( 982)		HX_VARI( Bool,blueChannel) = (((int)((int)channelOptions & (int)(int)4) >> (int)(int)2) == (int)1);
HXLINE( 983)		HX_VARI( Bool,alphaChannel) = (((int)((int)channelOptions & (int)(int)8) >> (int)(int)3) == (int)1);
HXLINE( 985)		{
HXLINE( 985)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 985)			HX_VARI( Int,_g) = this->height;
HXDLIN( 985)			while((_g1 < _g)){
HXLINE( 985)				HX_VARI( Int,y) = _g1++;
HXLINE( 987)				{
HXLINE( 987)					HX_VARI( Int,_g3) = (int)0;
HXDLIN( 987)					HX_VARI( Int,_g2) = this->width;
HXDLIN( 987)					while((_g3 < _g2)){
HXLINE( 987)						HX_VARI( Int,x) = _g3++;
HXLINE( 990)						HX_VARI( Int,red) = (int)0;
HXLINE( 991)						HX_VARI( Int,blue) = (int)0;
HXLINE( 992)						HX_VARI( Int,green) = (int)0;
HXLINE( 993)						HX_VARI( Int,alpha) = (int)255;
HXLINE( 995)						if (grayScale) {
HXLINE( 997)							Int _hx_tmp4 = ( (Int)(func()) );
HXDLIN( 997)							blue = (low + hx::Mod(_hx_tmp4,range));
HXDLIN( 997)							green = blue;
HXDLIN( 997)							red = green;
HXLINE( 998)							alpha = (int)255;
            						}
            						else {
HXLINE(1002)							if (redChannel) {
HXLINE(1002)								Int _hx_tmp5 = ( (Int)(func()) );
HXDLIN(1002)								red = (low + hx::Mod(_hx_tmp5,range));
            							}
HXLINE(1003)							if (greenChannel) {
HXLINE(1003)								Int _hx_tmp6 = ( (Int)(func()) );
HXDLIN(1003)								green = (low + hx::Mod(_hx_tmp6,range));
            							}
HXLINE(1004)							if (blueChannel) {
HXLINE(1004)								Int _hx_tmp7 = ( (Int)(func()) );
HXDLIN(1004)								blue = (low + hx::Mod(_hx_tmp7,range));
            							}
HXLINE(1005)							if (alphaChannel) {
HXLINE(1005)								Int _hx_tmp8 = ( (Int)(func()) );
HXDLIN(1005)								alpha = (low + hx::Mod(_hx_tmp8,range));
            							}
            						}
HXLINE(1008)						HX_VARI( Int,rgb) = alpha;
HXLINE(1009)						Int _hx_tmp9 = ((int)rgb << (int)(int)8);
HXDLIN(1009)						rgb = (_hx_tmp9 + red);
HXLINE(1010)						Int _hx_tmp10 = ((int)rgb << (int)(int)8);
HXDLIN(1010)						rgb = (_hx_tmp10 + green);
HXLINE(1011)						Int _hx_tmp11 = ((int)rgb << (int)(int)8);
HXDLIN(1011)						rgb = (_hx_tmp11 + blue);
HXLINE(1013)						this->setPixel32(x,y,rgb);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(BitmapData_obj,noise,(void))

void BitmapData_obj::paletteMap( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::Array< Int > redArray,::Array< Int > greenArray,::Array< Int > blueArray,::Array< Int > alphaArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","paletteMap",0xfc19eecc,"openfl.display.BitmapData.paletteMap","openfl/display/BitmapData.hx",1019,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(redArray,"redArray")
            	HX_STACK_ARG(greenArray,"greenArray")
            	HX_STACK_ARG(blueArray,"blueArray")
            	HX_STACK_ARG(alphaArray,"alphaArray")
HXLINE(1021)		HX_VARI( Int,sw) = ::Std_obj::_hx_int(sourceRect->width);
HXLINE(1022)		HX_VARI( Int,sh) = ::Std_obj::_hx_int(sourceRect->height);
HXLINE(1024)		HX_VARI(  ::openfl::utils::ByteArrayData,pixels) = this->getPixels(sourceRect);
HXLINE(1025)		pixels->position = (int)0;
HXLINE(1027)		HX_VAR( Int,pixelValue);
HXDLIN(1027)		HX_VAR( Int,r);
HXDLIN(1027)		HX_VAR( Int,g);
HXDLIN(1027)		HX_VAR( Int,b);
HXDLIN(1027)		HX_VAR( Int,a);
HXDLIN(1027)		HX_VAR( Int,color);
HXDLIN(1027)		HX_VAR( Int,c1);
HXDLIN(1027)		HX_VAR( Int,c2);
HXDLIN(1027)		HX_VAR( Int,c3);
HXDLIN(1027)		HX_VAR( Int,c4);
HXLINE(1029)		{
HXLINE(1029)			HX_VARI( Int,_g1) = (int)0;
HXDLIN(1029)			HX_VARI( Int,_g) = (sh * sw);
HXDLIN(1029)			while((_g1 < _g)){
HXLINE(1029)				HX_VARI( Int,i) = _g1++;
HXLINE(1031)				pixelValue = pixels->readUnsignedInt();
HXLINE(1033)				Bool _hx_tmp = hx::IsNull( alphaArray );
HXDLIN(1033)				if (_hx_tmp) {
HXLINE(1033)					c1 = ((int)pixelValue & (int)(int)-16777216);
            				}
            				else {
HXLINE(1033)					c1 = alphaArray->__get(((int)((int)pixelValue >> (int)(int)24) & (int)(int)255));
            				}
HXLINE(1034)				Bool _hx_tmp1 = hx::IsNull( redArray );
HXDLIN(1034)				if (_hx_tmp1) {
HXLINE(1034)					c2 = ((int)pixelValue & (int)(int)16711680);
            				}
            				else {
HXLINE(1034)					c2 = redArray->__get(((int)((int)pixelValue >> (int)(int)16) & (int)(int)255));
            				}
HXLINE(1035)				Bool _hx_tmp2 = hx::IsNull( greenArray );
HXDLIN(1035)				if (_hx_tmp2) {
HXLINE(1035)					c3 = ((int)pixelValue & (int)(int)65280);
            				}
            				else {
HXLINE(1035)					c3 = greenArray->__get(((int)((int)pixelValue >> (int)(int)8) & (int)(int)255));
            				}
HXLINE(1036)				Bool _hx_tmp3 = hx::IsNull( blueArray );
HXDLIN(1036)				if (_hx_tmp3) {
HXLINE(1036)					c4 = ((int)pixelValue & (int)(int)255);
            				}
            				else {
HXLINE(1036)					c4 = blueArray->__get(((int)pixelValue & (int)(int)255));
            				}
HXLINE(1038)				a = (((((int)((int)c1 >> (int)(int)24) & (int)(int)255) + ((int)((int)c2 >> (int)(int)24) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)24) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)24) & (int)(int)255));
HXLINE(1041)				r = (((((int)((int)c1 >> (int)(int)16) & (int)(int)255) + ((int)((int)c2 >> (int)(int)16) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)16) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)16) & (int)(int)255));
HXLINE(1044)				g = (((((int)((int)c1 >> (int)(int)8) & (int)(int)255) + ((int)((int)c2 >> (int)(int)8) & (int)(int)255)) + ((int)((int)c3 >> (int)(int)8) & (int)(int)255)) + ((int)((int)c4 >> (int)(int)8) & (int)(int)255));
HXLINE(1047)				b = (((((int)c1 & (int)(int)255) + ((int)c2 & (int)(int)255)) + ((int)c3 & (int)(int)255)) + ((int)c4 & (int)(int)255));
HXLINE(1050)				color = ((int)((int)((int)((int)a << (int)(int)24) | (int)((int)r << (int)(int)16)) | (int)((int)g << (int)(int)8)) | (int)b);
HXLINE(1052)				pixels->position = (i * (int)4);
HXLINE(1053)				pixels->writeUnsignedInt(color);
            			}
            		}
HXLINE(1057)		pixels->position = (int)0;
HXLINE(1058)		HX_VARI(  ::openfl::geom::Rectangle,destRect) =  ::openfl::geom::Rectangle_obj::__new(destPoint->x,destPoint->y,sw,sh);
HXLINE(1059)		this->setPixels(destRect,pixels);
            	}


HX_DEFINE_DYNAMIC_FUNC7(BitmapData_obj,paletteMap,(void))

void BitmapData_obj::perlinNoise(Float baseX,Float baseY,Int numOctaves,Int randomSeed,Bool stitch,Bool fractalNoise,hx::Null< Int >  __o_channelOptions,hx::Null< Bool >  __o_grayScale,::Array< ::Dynamic> offsets){
Int channelOptions = __o_channelOptions.Default(7);
Bool grayScale = __o_grayScale.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","perlinNoise",0xc682321b,"openfl.display.BitmapData.perlinNoise","openfl/display/BitmapData.hx",1066,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(baseX,"baseX")
            	HX_STACK_ARG(baseY,"baseY")
            	HX_STACK_ARG(numOctaves,"numOctaves")
            	HX_STACK_ARG(randomSeed,"randomSeed")
            	HX_STACK_ARG(stitch,"stitch")
            	HX_STACK_ARG(fractalNoise,"fractalNoise")
            	HX_STACK_ARG(channelOptions,"channelOptions")
            	HX_STACK_ARG(grayScale,"grayScale")
            	HX_STACK_ARG(offsets,"offsets")
HXLINE(1066)		::openfl::Lib_obj::notImplemented(HX_("BitmapData.perlinNoise",51,d2,2b,27));
            	}


HX_DEFINE_DYNAMIC_FUNC9(BitmapData_obj,perlinNoise,(void))

void BitmapData_obj::scroll(Int x,Int y){
            	HX_STACK_FRAME("openfl.display.BitmapData","scroll",0x57440678,"openfl.display.BitmapData.scroll","openfl/display/BitmapData.hx",1071,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE(1073)		if (!(this->_hx___isValid)) {
HXLINE(1073)			return;
            		}
HXLINE(1074)		this->image->scroll(x,y);
HXLINE(1075)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,scroll,(void))

void BitmapData_obj::setPixel(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixel",0xf9b00eaf,"openfl.display.BitmapData.setPixel","openfl/display/BitmapData.hx",1080,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE(1082)		if (!(this->_hx___isValid)) {
HXLINE(1082)			return;
            		}
HXLINE(1083)		this->image->setPixel(x,y,color,(int)1);
HXLINE(1084)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel,(void))

void BitmapData_obj::setPixel32(Int x,Int y,Int color){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixel32",0xd0d4850e,"openfl.display.BitmapData.setPixel32","openfl/display/BitmapData.hx",1089,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(color,"color")
HXLINE(1091)		if (!(this->_hx___isValid)) {
HXLINE(1091)			return;
            		}
HXLINE(1092)		this->image->setPixel32(x,y,color,(int)1);
HXLINE(1093)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,setPixel32,(void))

void BitmapData_obj::setPixels( ::openfl::geom::Rectangle rect, ::openfl::utils::ByteArrayData byteArray){
            	HX_STACK_FRAME("openfl.display.BitmapData","setPixels",0x805ccae4,"openfl.display.BitmapData.setPixels","openfl/display/BitmapData.hx",1098,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(byteArray,"byteArray")
HXLINE(1100)		Bool _hx_tmp;
HXDLIN(1100)		if (!(!(this->_hx___isValid))) {
HXLINE(1100)			_hx_tmp = hx::IsNull( rect );
            		}
            		else {
HXLINE(1100)			_hx_tmp = true;
            		}
HXDLIN(1100)		if (_hx_tmp) {
HXLINE(1100)			return;
            		}
HXLINE(1101)		 ::lime::math::Rectangle _hx_tmp1 = rect->_hx___toLimeRectangle();
HXDLIN(1101)		this->image->setPixels(_hx_tmp1,::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(byteArray),(int)1);
HXLINE(1102)		this->_hx___usingPingPongTexture = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setPixels,(void))

void BitmapData_obj::setVector( ::openfl::geom::Rectangle rect,::Array< Int > inputVector){
            	HX_STACK_FRAME("openfl.display.BitmapData","setVector",0x8b108c7a,"openfl.display.BitmapData.setVector","openfl/display/BitmapData.hx",1107,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(inputVector,"inputVector")
HXLINE(1109)		HX_VARI_NAME(  ::openfl::utils::ByteArrayData,this1,"this") =  ::openfl::utils::ByteArrayData_obj::__new((int)0);
HXDLIN(1109)		HX_VARI(  ::openfl::utils::ByteArrayData,byteArray) = this1;
HXLINE(1110)		Int _hx_tmp = (inputVector->length * (int)4);
HXDLIN(1110)		::openfl::utils::_ByteArray::ByteArray_Impl__obj::set_length(byteArray,_hx_tmp);
HXLINE(1112)		{
HXLINE(1112)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1112)			while((_g < inputVector->length)){
HXLINE(1112)				HX_VARI(  ::Dynamic,color) = inputVector->__get(_g);
HXDLIN(1112)				++_g;
HXLINE(1114)				byteArray->writeUnsignedInt(color);
            			}
            		}
HXLINE(1118)		byteArray->position = (int)0;
HXLINE(1119)		this->setPixels(rect,byteArray);
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,setVector,(void))

Int BitmapData_obj::threshold( ::openfl::display::BitmapData sourceBitmapData, ::openfl::geom::Rectangle sourceRect, ::openfl::geom::Point destPoint,::String operation,Int threshold,hx::Null< Int >  __o_color,hx::Null< Int >  __o_mask,hx::Null< Bool >  __o_copySource){
Int color = __o_color.Default(0);
Int mask = __o_mask.Default(-1);
Bool copySource = __o_copySource.Default(false);
            	HX_STACK_FRAME("openfl.display.BitmapData","threshold",0xc8af2a20,"openfl.display.BitmapData.threshold","openfl/display/BitmapData.hx",1124,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(sourceBitmapData,"sourceBitmapData")
            	HX_STACK_ARG(sourceRect,"sourceRect")
            	HX_STACK_ARG(destPoint,"destPoint")
            	HX_STACK_ARG(operation,"operation")
            	HX_STACK_ARG(threshold,"threshold")
            	HX_STACK_ARG(color,"color")
            	HX_STACK_ARG(mask,"mask")
            	HX_STACK_ARG(copySource,"copySource")
HXLINE(1126)		Bool _hx_tmp;
HXDLIN(1126)		Bool _hx_tmp1;
HXDLIN(1126)		Bool _hx_tmp2;
HXDLIN(1126)		Bool _hx_tmp3;
HXDLIN(1126)		Bool _hx_tmp4;
HXDLIN(1126)		Bool _hx_tmp5;
HXDLIN(1126)		Bool _hx_tmp6 = hx::IsNotNull( sourceBitmapData );
HXDLIN(1126)		if (_hx_tmp6) {
HXLINE(1126)			_hx_tmp5 = hx::IsNull( sourceRect );
            		}
            		else {
HXLINE(1126)			_hx_tmp5 = true;
            		}
HXDLIN(1126)		if (!(_hx_tmp5)) {
HXLINE(1126)			_hx_tmp4 = hx::IsNull( destPoint );
            		}
            		else {
HXLINE(1126)			_hx_tmp4 = true;
            		}
HXDLIN(1126)		if (!(_hx_tmp4)) {
HXLINE(1126)			_hx_tmp3 = (sourceRect->x > sourceBitmapData->width);
            		}
            		else {
HXLINE(1126)			_hx_tmp3 = true;
            		}
HXDLIN(1126)		if (!(_hx_tmp3)) {
HXLINE(1126)			_hx_tmp2 = (sourceRect->y > sourceBitmapData->height);
            		}
            		else {
HXLINE(1126)			_hx_tmp2 = true;
            		}
HXDLIN(1126)		if (!(_hx_tmp2)) {
HXLINE(1126)			_hx_tmp1 = (destPoint->x > this->width);
            		}
            		else {
HXLINE(1126)			_hx_tmp1 = true;
            		}
HXDLIN(1126)		if (!(_hx_tmp1)) {
HXLINE(1126)			_hx_tmp = (destPoint->y > this->height);
            		}
            		else {
HXLINE(1126)			_hx_tmp = true;
            		}
HXDLIN(1126)		if (_hx_tmp) {
HXLINE(1126)			return (int)0;
            		}
HXLINE(1128)		 ::lime::math::Rectangle _hx_tmp7 = sourceRect->_hx___toLimeRectangle();
HXDLIN(1128)		 ::lime::math::Vector2 _hx_tmp8 = destPoint->_hx___toLimeVector2();
HXDLIN(1128)		return this->image->threshold(sourceBitmapData->image,_hx_tmp7,_hx_tmp8,operation,threshold,color,mask,copySource,(int)1);
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,threshold,return )

void BitmapData_obj::unlock( ::openfl::geom::Rectangle changeRect){
            	HX_STACK_FRAME("openfl.display.BitmapData","unlock",0x756bd12f,"openfl.display.BitmapData.unlock","openfl/display/BitmapData.hx",1133,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(changeRect,"changeRect")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,unlock,(void))

void BitmapData_obj::_hx___createUVs(hx::Null< Float >  __o_x0,hx::Null< Float >  __o_y0,hx::Null< Float >  __o_x1,hx::Null< Float >  __o_y1,hx::Null< Float >  __o_x2,hx::Null< Float >  __o_y2,hx::Null< Float >  __o_x3,hx::Null< Float >  __o_y3){
Float x0 = __o_x0.Default(0);
Float y0 = __o_y0.Default(0);
Float x1 = __o_x1.Default(1);
Float y1 = __o_y1.Default(0);
Float x2 = __o_x2.Default(1);
Float y2 = __o_y2.Default(1);
Float x3 = __o_x3.Default(0);
Float y3 = __o_y3.Default(1);
            	HX_STACK_FRAME("openfl.display.BitmapData","__createUVs",0xb29ce00b,"openfl.display.BitmapData.__createUVs","openfl/display/BitmapData.hx",1149,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x0,"x0")
            	HX_STACK_ARG(y0,"y0")
            	HX_STACK_ARG(x1,"x1")
            	HX_STACK_ARG(y1,"y1")
            	HX_STACK_ARG(x2,"x2")
            	HX_STACK_ARG(y2,"y2")
            	HX_STACK_ARG(x3,"x3")
            	HX_STACK_ARG(y3,"y3")
HXLINE(1151)		Bool _hx_tmp = hx::IsNull( this->_hx___uvData );
HXDLIN(1151)		if (_hx_tmp) {
HXLINE(1151)			this->_hx___uvData =  ::openfl::display::TextureUvs_obj::__new();
            		}
HXLINE(1153)		this->_hx___uvData->x0 = x0;
HXLINE(1154)		this->_hx___uvData->y0 = y0;
HXLINE(1155)		this->_hx___uvData->x1 = x1;
HXLINE(1156)		this->_hx___uvData->y1 = y1;
HXLINE(1157)		this->_hx___uvData->x2 = x2;
HXLINE(1158)		this->_hx___uvData->y2 = y2;
HXLINE(1159)		this->_hx___uvData->x3 = x3;
HXLINE(1160)		this->_hx___uvData->y3 = y3;
            	}


HX_DEFINE_DYNAMIC_FUNC8(BitmapData_obj,_hx___createUVs,(void))

void BitmapData_obj::_hx___drawGL( ::openfl::_internal::renderer::RenderSession renderSession,::Dynamic source, ::openfl::geom::Matrix matrix, ::openfl::geom::ColorTransform colorTransform, ::Dynamic blendMode, ::openfl::geom::Rectangle clipRect, ::Dynamic __o_smoothing, ::Dynamic __o_drawSelf, ::Dynamic __o_clearBuffer, ::Dynamic __o_readPixels, ::Dynamic __o_powerOfTwo){
 ::Dynamic smoothing = __o_smoothing.Default(false);
 ::Dynamic drawSelf = __o_drawSelf.Default(false);
 ::Dynamic clearBuffer = __o_clearBuffer.Default(false);
 ::Dynamic readPixels = __o_readPixels.Default(false);
 ::Dynamic powerOfTwo = __o_powerOfTwo.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","__drawGL",0xb0ddbd74,"openfl.display.BitmapData.__drawGL","openfl/display/BitmapData.hx",1165,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	HX_STACK_ARG(source,"source")
            	HX_STACK_ARG(matrix,"matrix")
            	HX_STACK_ARG(colorTransform,"colorTransform")
            	HX_STACK_ARG(blendMode,"blendMode")
            	HX_STACK_ARG(clipRect,"clipRect")
            	HX_STACK_ARG(smoothing,"smoothing")
            	HX_STACK_ARG(drawSelf,"drawSelf")
            	HX_STACK_ARG(clearBuffer,"clearBuffer")
            	HX_STACK_ARG(readPixels,"readPixels")
            	HX_STACK_ARG(powerOfTwo,"powerOfTwo")
HXLINE(1167)		this->_hx___pingPongTexture = ::openfl::_internal::renderer::opengl::GLBitmap_obj::pushFramebuffer(renderSession,this->_hx___pingPongTexture,this->rect,smoothing,this->transparent,clearBuffer,powerOfTwo);
HXLINE(1168)		 ::openfl::display::BitmapData _hx_tmp;
HXDLIN(1168)		if (drawSelf) {
HXLINE(1168)			_hx_tmp = hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE(1168)			_hx_tmp = null();
            		}
HXDLIN(1168)		::openfl::_internal::renderer::opengl::GLBitmap_obj::drawBitmapDrawable(renderSession,_hx_tmp,source,matrix,colorTransform,blendMode,clipRect);
HXLINE(1169)		 ::lime::graphics::Image _hx_tmp1;
HXDLIN(1169)		if (readPixels) {
HXLINE(1169)			_hx_tmp1 = this->image;
            		}
            		else {
HXLINE(1169)			_hx_tmp1 = null();
            		}
HXDLIN(1169)		::openfl::_internal::renderer::opengl::GLBitmap_obj::popFramebuffer(renderSession,_hx_tmp1);
HXLINE(1171)		HX_VARI(  ::openfl::_internal::renderer::opengl::utils::PingPongTexture,_this) = this->_hx___pingPongTexture;
HXDLIN(1171)		 ::openfl::_internal::renderer::opengl::utils::RenderTexture _hx_tmp2;
HXDLIN(1171)		if (_this->_hx___swapped) {
HXLINE(1171)			_hx_tmp2 = _this->_hx___texture1;
            		}
            		else {
HXLINE(1171)			_hx_tmp2 = _this->_hx___texture0;
            		}
HXDLIN(1171)		HX_VARI(  ::openfl::display::TextureUvs,uv) = _hx_tmp2->_hx___uvData;
HXLINE(1172)		this->_hx___createUVs(uv->x0,uv->y0,uv->x1,uv->y1,uv->x2,uv->y2,uv->x3,uv->y3);
HXLINE(1174)		this->_hx___isValid = true;
HXLINE(1175)		this->_hx___usingPingPongTexture = true;
            	}


HX_DEFINE_DYNAMIC_FUNC11(BitmapData_obj,_hx___drawGL,(void))

void BitmapData_obj::_hx___fromBase64(::String base64,::String type, ::Dynamic onload){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1182,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1184)			_gthis->_hx___fromImage(image);
HXLINE(1186)			Bool _hx_tmp = hx::IsNotNull( onload );
HXDLIN(1186)			if (_hx_tmp) {
HXLINE(1188)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromBase64",0xceedce64,"openfl.display.BitmapData.__fromBase64","openfl/display/BitmapData.hx",1180,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1180)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1182)		::lime::graphics::Image_obj::fromBase64(base64,type, ::Dynamic(new _hx_Closure_0(_gthis,onload)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromBase64,(void))

void BitmapData_obj::_hx___fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha, ::Dynamic onload){
            		HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::utils::ByteArrayData,rawAlpha, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1199,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1201)			_gthis->_hx___fromImage(image);
HXLINE(1203)			Bool _hx_tmp = hx::IsNotNull( rawAlpha );
HXDLIN(1203)			if (_hx_tmp) {
HXLINE(1210)				HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXLINE(1212)				{
HXLINE(1212)					HX_VARI( Int,_g1) = (int)0;
HXDLIN(1212)					HX_VARI( Int,_g) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(rawAlpha);
HXDLIN(1212)					while((_g1 < _g)){
HXLINE(1212)						HX_VARI( Int,i) = _g1++;
HXLINE(1214)						{
HXLINE(1214)							HX_VARI( Int,val) = rawAlpha->readUnsignedByte();
HXDLIN(1214)							{
HXLINE(1214)								Int _hx_tmp1 = data->byteOffset;
HXDLIN(1214)								::__hxcpp_memory_set_byte(data->buffer->b,(_hx_tmp1 + ((i * (int)4) + (int)3)),val);
            							}
            						}
            					}
            				}
HXLINE(1218)				image->dirty = true;
            			}
HXLINE(1222)			Bool _hx_tmp2 = hx::IsNotNull( onload );
HXDLIN(1222)			if (_hx_tmp2) {
HXLINE(1224)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromBytes",0xdad6e936,"openfl.display.BitmapData.__fromBytes","openfl/display/BitmapData.hx",1197,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
            	HX_STACK_ARG(onload,"onload")
HXLINE(1197)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1199)		::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes), ::Dynamic(new _hx_Closure_0(rawAlpha,_gthis,onload)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromBytes,(void))

void BitmapData_obj::_hx___fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            		HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload) HXARGC(1)
            		void _hx_run( ::lime::graphics::Image image){
            			HX_STACK_FRAME("openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1235,0xdd12d5b9)
            			HX_STACK_ARG(image,"image")
HXLINE(1237)			_gthis->_hx___fromImage(image);
HXLINE(1239)			Bool _hx_tmp = hx::IsNotNull( onload );
HXDLIN(1239)			if (_hx_tmp) {
HXLINE(1241)				onload(_gthis);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACK_FRAME("openfl.display.BitmapData","__fromFile",0x3aae5011,"openfl.display.BitmapData.__fromFile","openfl/display/BitmapData.hx",1233,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE(1233)		HX_VARI(  ::openfl::display::BitmapData,_gthis) = hx::ObjectPtr<OBJ_>(this);
HXLINE(1235)		::lime::graphics::Image_obj::fromFile(path, ::Dynamic(new _hx_Closure_0(_gthis,onload)),onerror);
            	}


HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,_hx___fromFile,(void))

void BitmapData_obj::_hx___fromImage( ::lime::graphics::Image image){
            	HX_STACK_FRAME("openfl.display.BitmapData","__fromImage",0xdaa80026,"openfl.display.BitmapData.__fromImage","openfl/display/BitmapData.hx",1252,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(image,"image")
HXLINE(1252)		Bool _hx_tmp;
HXDLIN(1252)		Bool _hx_tmp1 = hx::IsNotNull( image );
HXDLIN(1252)		if (_hx_tmp1) {
HXLINE(1252)			_hx_tmp = hx::IsNotNull( image->buffer );
            		}
            		else {
HXLINE(1252)			_hx_tmp = false;
            		}
HXDLIN(1252)		if (_hx_tmp) {
HXLINE(1254)			this->image = image;
HXLINE(1256)			this->width = image->width;
HXLINE(1257)			this->height = image->height;
HXLINE(1258)			this->rect =  ::openfl::geom::Rectangle_obj::__new((int)0,(int)0,image->width,image->height);
HXLINE(1261)			image->set_format((int)2);
HXLINE(1262)			image->set_premultiplied(true);
HXLINE(1265)			this->_hx___isValid = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___fromImage,(void))

void BitmapData_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCairo",0x87dae327,"openfl.display.BitmapData.__renderCairo","openfl/display/BitmapData.hx",1272,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1274)		if (!(this->_hx___isValid)) {
HXLINE(1274)			return;
            		}
HXLINE(1276)		HX_VARI(  ::lime::graphics::cairo::Cairo,cairo) = renderSession->cairo;
HXLINE(1278)		Bool _hx_tmp = hx::IsNull( this->_hx___worldTransform );
HXDLIN(1278)		if (_hx_tmp) {
HXLINE(1278)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE(1281)		HX_VARI(  ::openfl::geom::Matrix,transform) = this->_hx___worldTransform;
HXLINE(1283)		Bool _hx_tmp1 = renderSession->roundPixels;
HXDLIN(1283)		if (_hx_tmp1) {
HXLINE(1285)			HX_VARI(  ::lime::math::Matrix3,matrix) = transform->_hx___toMatrix3();
HXLINE(1286)			matrix->tx = ::Math_obj::round(matrix->tx);
HXLINE(1287)			matrix->ty = ::Math_obj::round(matrix->ty);
HXLINE(1288)			cairo->set_matrix(matrix);
            		}
            		else {
HXLINE(1293)			 ::lime::math::Matrix3 _hx_tmp2 = transform->_hx___toMatrix3();
HXDLIN(1293)			cairo->set_matrix(_hx_tmp2);
            		}
HXLINE(1298)		HX_VARI(  ::Dynamic,surface) = this->getSurface();
HXLINE(1300)		Bool _hx_tmp3 = hx::IsNotNull( surface );
HXDLIN(1300)		if (_hx_tmp3) {
HXLINE(1302)			HX_VARI(  ::Dynamic,pattern) = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXLINE(1304)			Int _hx_tmp4 = cairo->get_antialias();
HXDLIN(1304)			if ((_hx_tmp4 == (int)1)) {
HXLINE(1306)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)3);
            			}
            			else {
HXLINE(1310)				::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,(int)1);
            			}
HXLINE(1314)			cairo->set_source(pattern);
HXLINE(1315)			cairo->paint();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairo,(void))

void BitmapData_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCairoMask",0x1a586fb3,"openfl.display.BitmapData.__renderCairoMask","openfl/display/BitmapData.hx",1322,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCairoMask,(void))

void BitmapData_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCanvas",0x5afced59,"openfl.display.BitmapData.__renderCanvas","openfl/display/BitmapData.hx",1329,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvas,(void))

void BitmapData_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderCanvasMask",0xf2507ae5,"openfl.display.BitmapData.__renderCanvasMask","openfl/display/BitmapData.hx",1359,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderCanvasMask,(void))

void BitmapData_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.BitmapData","__renderGL",0x4c025e06,"openfl.display.BitmapData.__renderGL","openfl/display/BitmapData.hx",1368,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE(1368)		renderSession->spriteBatch->renderBitmapData(hx::ObjectPtr<OBJ_>(this),false,this->_hx___worldTransform,this->_hx___worldColorTransform,this->_hx___worldColorTransform->alphaMultiplier,this->_hx___blendMode,this->_hx___shader,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___renderGL,(void))

void BitmapData_obj::_hx___resize(Int width,Int height){
            	HX_STACK_FRAME("openfl.display.BitmapData","__resize",0xd982a43f,"openfl.display.BitmapData.__resize","openfl/display/BitmapData.hx",1373,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1375)		this->width = width;
HXLINE(1376)		this->height = height;
HXLINE(1377)		this->rect->width = width;
HXLINE(1378)		this->rect->height = height;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___resize,(void))

void BitmapData_obj::_hx___sync(){
            	HX_STACK_FRAME("openfl.display.BitmapData","__sync",0x0b374be6,"openfl.display.BitmapData.__sync","openfl/display/BitmapData.hx",1383,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(BitmapData_obj,_hx___sync,(void))

void BitmapData_obj::_hx___updateChildren(Bool transformOnly){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateChildren",0xeaaf19b3,"openfl.display.BitmapData.__updateChildren","openfl/display/BitmapData.hx",1392,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateChildren,(void))

void BitmapData_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateMask",0x378cf760,"openfl.display.BitmapData.__updateMask","openfl/display/BitmapData.hx",1399,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateMask,(void))

void BitmapData_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACK_FRAME("openfl.display.BitmapData","__updateTransforms",0xf11196fb,"openfl.display.BitmapData.__updateTransforms","openfl/display/BitmapData.hx",1408,0xdd12d5b9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overrideTransform,"overrideTransform")
HXLINE(1408)		Bool _hx_tmp = hx::IsNull( overrideTransform );
HXDLIN(1408)		if (_hx_tmp) {
HXLINE(1410)			this->_hx___worldTransform->identity();
            		}
            		else {
HXLINE(1414)			this->_hx___worldTransform = overrideTransform;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(BitmapData_obj,_hx___updateTransforms,(void))

 ::Dynamic BitmapData_obj::_hx___isGLES;

 ::openfl::display::BitmapData BitmapData_obj::fromBase64(::String base64,::String type, ::Dynamic onload){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",570,0xdd12d5b9)
            	HX_STACK_ARG(base64,"base64")
            	HX_STACK_ARG(type,"type")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 572)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,null());
HXLINE( 573)		{
            			HX_BEGIN_LOCAL_FUNC_S2(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_STACK_FRAME("openfl.display.BitmapData","fromBase64",0x8e5a4284,"openfl.display.BitmapData.fromBase64","openfl/display/BitmapData.hx",573,0xdd12d5b9)
            				HX_STACK_ARG(image,"image")
HXLINE( 573)				_gthis->_hx___fromImage(image);
HXDLIN( 573)				Bool _hx_tmp = hx::IsNotNull( onload1 );
HXDLIN( 573)				if (_hx_tmp) {
HXLINE( 573)					onload1(_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 573)			HX_VARI_NAME(  ::Dynamic,onload1,"onload") = onload;
HXDLIN( 573)			HX_VARI(  ::openfl::display::BitmapData,_gthis) = bitmapData;
HXDLIN( 573)			::lime::graphics::Image_obj::fromBase64(base64,type, ::Dynamic(new _hx_Closure_0(_gthis,onload1)));
            		}
HXLINE( 574)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromBase64,return )

 ::openfl::display::BitmapData BitmapData_obj::fromBytes( ::openfl::utils::ByteArrayData bytes, ::openfl::utils::ByteArrayData rawAlpha, ::Dynamic onload){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",579,0xdd12d5b9)
            	HX_STACK_ARG(bytes,"bytes")
            	HX_STACK_ARG(rawAlpha,"rawAlpha")
            	HX_STACK_ARG(onload,"onload")
HXLINE( 581)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,null());
HXLINE( 582)		{
            			HX_BEGIN_LOCAL_FUNC_S3(hx::LocalFunc,_hx_Closure_0, ::openfl::display::BitmapData,_gthis, ::Dynamic,onload1, ::openfl::utils::ByteArrayData,rawAlpha1) HXARGC(1)
            			void _hx_run( ::lime::graphics::Image image){
            				HX_STACK_FRAME("openfl.display.BitmapData","fromBytes",0x062c5916,"openfl.display.BitmapData.fromBytes","openfl/display/BitmapData.hx",582,0xdd12d5b9)
            				HX_STACK_ARG(image,"image")
HXLINE( 582)				_gthis->_hx___fromImage(image);
HXDLIN( 582)				Bool _hx_tmp = hx::IsNotNull( rawAlpha1 );
HXDLIN( 582)				if (_hx_tmp) {
HXLINE( 582)					HX_VARI(  ::lime::utils::ArrayBufferView,data) = image->buffer->data;
HXDLIN( 582)					{
HXLINE( 582)						HX_VARI( Int,_g1) = (int)0;
HXDLIN( 582)						HX_VARI( Int,_g) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(rawAlpha1);
HXDLIN( 582)						while((_g1 < _g)){
HXLINE( 582)							HX_VARI( Int,i) = _g1++;
HXDLIN( 582)							{
HXLINE( 582)								HX_VARI( Int,val) = rawAlpha1->readUnsignedByte();
HXDLIN( 582)								{
HXLINE( 582)									Int _hx_tmp1 = data->byteOffset;
HXDLIN( 582)									::__hxcpp_memory_set_byte(data->buffer->b,(_hx_tmp1 + ((i * (int)4) + (int)3)),val);
            								}
            							}
            						}
            					}
HXDLIN( 582)					image->dirty = true;
            				}
HXDLIN( 582)				Bool _hx_tmp2 = hx::IsNotNull( onload1 );
HXDLIN( 582)				if (_hx_tmp2) {
HXLINE( 582)					onload1(_gthis);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 582)			HX_VARI_NAME(  ::openfl::utils::ByteArrayData,rawAlpha1,"rawAlpha") = rawAlpha;
HXDLIN( 582)			HX_VARI_NAME(  ::Dynamic,onload1,"onload") = onload;
HXDLIN( 582)			HX_VARI(  ::openfl::display::BitmapData,_gthis) = bitmapData;
HXDLIN( 582)			::lime::graphics::Image_obj::fromBytes(::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes), ::Dynamic(new _hx_Closure_0(_gthis,onload1,rawAlpha1)));
            		}
HXLINE( 583)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromBytes,return )

 ::openfl::display::BitmapData BitmapData_obj::fromFile(::String path, ::Dynamic onload, ::Dynamic onerror){
            	HX_STACK_FRAME("openfl.display.BitmapData","fromFile",0xca5f7c31,"openfl.display.BitmapData.fromFile","openfl/display/BitmapData.hx",602,0xdd12d5b9)
            	HX_STACK_ARG(path,"path")
            	HX_STACK_ARG(onload,"onload")
            	HX_STACK_ARG(onerror,"onerror")
HXLINE( 604)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,true,null());
HXLINE( 605)		bitmapData->_hx___fromFile(path,onload,onerror);
HXLINE( 606)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(BitmapData_obj,fromFile,return )

 ::openfl::display::BitmapData BitmapData_obj::fromImage( ::lime::graphics::Image image,hx::Null< Bool >  __o_transparent){
Bool transparent = __o_transparent.Default(true);
            	HX_STACK_FRAME("openfl.display.BitmapData","fromImage",0x05fd7006,"openfl.display.BitmapData.fromImage","openfl/display/BitmapData.hx",611,0xdd12d5b9)
            	HX_STACK_ARG(image,"image")
            	HX_STACK_ARG(transparent,"transparent")
HXLINE( 613)		Bool _hx_tmp;
HXDLIN( 613)		Bool _hx_tmp1 = hx::IsNotNull( image );
HXDLIN( 613)		if (_hx_tmp1) {
HXLINE( 613)			_hx_tmp = hx::IsNull( image->buffer );
            		}
            		else {
HXLINE( 613)			_hx_tmp = true;
            		}
HXDLIN( 613)		if (_hx_tmp) {
HXLINE( 613)			return null();
            		}
HXLINE( 615)		HX_VARI(  ::openfl::display::BitmapData,bitmapData) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,transparent,null());
HXLINE( 616)		bitmapData->_hx___fromImage(image);
HXLINE( 617)		bitmapData->image->set_transparent(transparent);
HXLINE( 618)		return bitmapData;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,fromImage,return )

 ::openfl::display::BitmapData BitmapData_obj::_hx___asRenderTexture(hx::Null< Int >  __o_width,hx::Null< Int >  __o_height){
Int width = __o_width.Default(0);
Int height = __o_height.Default(0);
            	HX_STACK_FRAME("openfl.display.BitmapData","__asRenderTexture",0xfc831c28,"openfl.display.BitmapData.__asRenderTexture","openfl/display/BitmapData.hx",1140,0xdd12d5b9)
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(1142)		HX_VARI(  ::openfl::display::BitmapData,b) =  ::openfl::display::BitmapData_obj::__new((int)0,(int)0,null(),null());
HXLINE(1143)		b->_hx___resize(width,height);
HXLINE(1145)		return b;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(BitmapData_obj,_hx___asRenderTexture,return )


BitmapData_obj::BitmapData_obj()
{
}

void BitmapData_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BitmapData);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(image,"image");
	HX_MARK_MEMBER_NAME(rect,"rect");
	HX_MARK_MEMBER_NAME(transparent,"transparent");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___shader,"__shader");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___surface,"__surface");
	HX_MARK_MEMBER_NAME(_hx___texture,"__texture");
	HX_MARK_MEMBER_NAME(_hx___textureImage,"__textureImage");
	HX_MARK_MEMBER_NAME(_hx___pingPongTexture,"__pingPongTexture");
	HX_MARK_MEMBER_NAME(_hx___usingPingPongTexture,"__usingPingPongTexture");
	HX_MARK_MEMBER_NAME(_hx___uvData,"__uvData");
	HX_MARK_END_CLASS();
}

void BitmapData_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(image,"image");
	HX_VISIT_MEMBER_NAME(rect,"rect");
	HX_VISIT_MEMBER_NAME(transparent,"transparent");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___shader,"__shader");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___surface,"__surface");
	HX_VISIT_MEMBER_NAME(_hx___texture,"__texture");
	HX_VISIT_MEMBER_NAME(_hx___textureImage,"__textureImage");
	HX_VISIT_MEMBER_NAME(_hx___pingPongTexture,"__pingPongTexture");
	HX_VISIT_MEMBER_NAME(_hx___usingPingPongTexture,"__usingPingPongTexture");
	HX_VISIT_MEMBER_NAME(_hx___uvData,"__uvData");
}

hx::Val BitmapData_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { return hx::Val( rect); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn()); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { return hx::Val( image); }
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width); }
		if (HX_FIELD_EQ(inName,"clone") ) { return hx::Val( clone_dyn()); }
		if (HX_FIELD_EQ(inName,"merge") ) { return hx::Val( merge_dyn()); }
		if (HX_FIELD_EQ(inName,"noise") ) { return hx::Val( noise_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height); }
		if (HX_FIELD_EQ(inName,"encode") ) { return hx::Val( encode_dyn()); }
		if (HX_FIELD_EQ(inName,"scroll") ) { return hx::Val( scroll_dyn()); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn()); }
		if (HX_FIELD_EQ(inName,"__sync") ) { return hx::Val( _hx___sync_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return hx::Val( compare_dyn()); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		if (HX_FIELD_EQ(inName,"hitTest") ) { return hx::Val( hitTest_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__shader") ) { return hx::Val( _hx___shader); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer); }
		if (HX_FIELD_EQ(inName,"__uvData") ) { return hx::Val( _hx___uvData); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel") ) { return hx::Val( getPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel") ) { return hx::Val( setPixel_dyn()); }
		if (HX_FIELD_EQ(inName,"__drawGL") ) { return hx::Val( _hx___drawGL_dyn()); }
		if (HX_FIELD_EQ(inName,"__resize") ) { return hx::Val( _hx___resize_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid); }
		if (HX_FIELD_EQ(inName,"__surface") ) { return hx::Val( _hx___surface); }
		if (HX_FIELD_EQ(inName,"__texture") ) { return hx::Val( _hx___texture); }
		if (HX_FIELD_EQ(inName,"floodFill") ) { return hx::Val( floodFill_dyn()); }
		if (HX_FIELD_EQ(inName,"getBuffer") ) { return hx::Val( getBuffer_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getVector") ) { return hx::Val( getVector_dyn()); }
		if (HX_FIELD_EQ(inName,"histogram") ) { return hx::Val( histogram_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixels") ) { return hx::Val( setPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"setVector") ) { return hx::Val( setVector_dyn()); }
		if (HX_FIELD_EQ(inName,"threshold") ) { return hx::Val( threshold_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"copyPixels") ) { return hx::Val( copyPixels_dyn()); }
		if (HX_FIELD_EQ(inName,"getPixel32") ) { return hx::Val( getPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"getSurface") ) { return hx::Val( getSurface_dyn()); }
		if (HX_FIELD_EQ(inName,"getTexture") ) { return hx::Val( getTexture_dyn()); }
		if (HX_FIELD_EQ(inName,"paletteMap") ) { return hx::Val( paletteMap_dyn()); }
		if (HX_FIELD_EQ(inName,"setPixel32") ) { return hx::Val( setPixel32_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromFile") ) { return hx::Val( _hx___fromFile_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { return hx::Val( transparent); }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode); }
		if (HX_FIELD_EQ(inName,"applyFilter") ) { return hx::Val( applyFilter_dyn()); }
		if (HX_FIELD_EQ(inName,"copyChannel") ) { return hx::Val( copyChannel_dyn()); }
		if (HX_FIELD_EQ(inName,"perlinNoise") ) { return hx::Val( perlinNoise_dyn()); }
		if (HX_FIELD_EQ(inName,"__createUVs") ) { return hx::Val( _hx___createUVs_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromBytes") ) { return hx::Val( _hx___fromBytes_dyn()); }
		if (HX_FIELD_EQ(inName,"__fromImage") ) { return hx::Val( _hx___fromImage_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__fromBase64") ) { return hx::Val( _hx___fromBase64_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureImage") ) { return hx::Val( _hx___textureImage); }
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return hx::Val( colorTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { return hx::Val( _hx___cacheAsBitmap); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__pingPongTexture") ) { return hx::Val( _hx___pingPongTexture); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"generateFilterRect") ) { return hx::Val( generateFilterRect_dyn()); }
		if (HX_FIELD_EQ(inName,"getColorBoundsRect") ) { return hx::Val( getColorBoundsRect_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__usingPingPongTexture") ) { return hx::Val( _hx___usingPingPongTexture); }
	}
	return super::__Field(inName,inCallProp);
}

bool BitmapData_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { outValue = _hx___isGLES; return true; }
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromImage") ) { outValue = fromImage_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromBase64") ) { outValue = fromBase64_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__asRenderTexture") ) { outValue = _hx___asRenderTexture_dyn(); return true; }
	}
	return false;
}

hx::Val BitmapData_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"rect") ) { rect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"image") ) { image=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__shader") ) { _hx___shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__uvData") ) { _hx___uvData=inValue.Cast<  ::openfl::display::TextureUvs >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__surface") ) { _hx___surface=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__texture") ) { _hx___texture=inValue.Cast<  ::lime::graphics::opengl::GLTexture >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"transparent") ) { transparent=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__textureImage") ) { _hx___textureImage=inValue.Cast<  ::lime::graphics::Image >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { _hx___cacheAsBitmap=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__pingPongTexture") ) { _hx___pingPongTexture=inValue.Cast<  ::openfl::_internal::renderer::opengl::utils::PingPongTexture >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"__usingPingPongTexture") ) { _hx___usingPingPongTexture=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BitmapData_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__isGLES") ) { _hx___isGLES=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void BitmapData_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"));
	outFields->push(HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"));
	outFields->push(HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"));
	outFields->push(HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"));
	outFields->push(HX_HCSTRING("__textureImage","\xa0","\x4f","\xc9","\xd6"));
	outFields->push(HX_HCSTRING("__pingPongTexture","\x51","\xc7","\x46","\xb0"));
	outFields->push(HX_HCSTRING("__usingPingPongTexture","\xad","\x58","\x22","\x5a"));
	outFields->push(HX_HCSTRING("__uvData","\x4b","\x98","\x75","\x8e"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo BitmapData_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(BitmapData_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,image),HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(BitmapData_obj,rect),HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,transparent),HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22")},
	{hx::fsInt,(int)offsetof(BitmapData_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(BitmapData_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(BitmapData_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___cacheAsBitmap),HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(BitmapData_obj,_hx___shader),HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(BitmapData_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(BitmapData_obj,_hx___surface),HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde")},
	{hx::fsObject /*::lime::graphics::opengl::GLTexture*/ ,(int)offsetof(BitmapData_obj,_hx___texture),HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20")},
	{hx::fsObject /*::lime::graphics::Image*/ ,(int)offsetof(BitmapData_obj,_hx___textureImage),HX_HCSTRING("__textureImage","\xa0","\x4f","\xc9","\xd6")},
	{hx::fsObject /*::openfl::_internal::renderer::opengl::utils::PingPongTexture*/ ,(int)offsetof(BitmapData_obj,_hx___pingPongTexture),HX_HCSTRING("__pingPongTexture","\x51","\xc7","\x46","\xb0")},
	{hx::fsBool,(int)offsetof(BitmapData_obj,_hx___usingPingPongTexture),HX_HCSTRING("__usingPingPongTexture","\xad","\x58","\x22","\x5a")},
	{hx::fsObject /*::openfl::display::TextureUvs*/ ,(int)offsetof(BitmapData_obj,_hx___uvData),HX_HCSTRING("__uvData","\x4b","\x98","\x75","\x8e")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo BitmapData_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &BitmapData_obj::_hx___isGLES,HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String BitmapData_obj_sMemberFields[] = {
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("image","\x5b","\x1f","\x69","\xbd"),
	HX_HCSTRING("rect","\x24","\x4d","\xa7","\x4b"),
	HX_HCSTRING("transparent","\x52","\x2b","\xba","\x22"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__surface","\x0d","\xb7","\x97","\xde"),
	HX_HCSTRING("__texture","\xbb","\x19","\x2f","\x20"),
	HX_HCSTRING("__textureImage","\xa0","\x4f","\xc9","\xd6"),
	HX_HCSTRING("__pingPongTexture","\x51","\xc7","\x46","\xb0"),
	HX_HCSTRING("__usingPingPongTexture","\xad","\x58","\x22","\x5a"),
	HX_HCSTRING("__uvData","\x4b","\x98","\x75","\x8e"),
	HX_HCSTRING("applyFilter","\xc6","\xdf","\x2f","\xc1"),
	HX_HCSTRING("clone","\x5d","\x13","\x63","\x48"),
	HX_HCSTRING("colorTransform","\x89","\xd7","\x3f","\xad"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("copyChannel","\x8e","\x7d","\xe6","\x22"),
	HX_HCSTRING("copyPixels","\xc2","\x54","\x6e","\x42"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("encode","\x16","\xf2","\xe3","\xf9"),
	HX_HCSTRING("fillRect","\x47","\x45","\xb9","\x6c"),
	HX_HCSTRING("floodFill","\x61","\x83","\x8a","\x59"),
	HX_HCSTRING("generateFilterRect","\x91","\x2c","\x98","\x7e"),
	HX_HCSTRING("getBuffer","\x36","\x46","\xeb","\x4c"),
	HX_HCSTRING("getColorBoundsRect","\x86","\xad","\xe8","\x80"),
	HX_HCSTRING("getPixel","\x10","\xd6","\x7a","\x22"),
	HX_HCSTRING("getPixel32","\xaf","\xa6","\x68","\xd7"),
	HX_HCSTRING("getPixels","\x63","\x78","\x00","\x09"),
	HX_HCSTRING("getSurface","\x37","\xec","\xaa","\xac"),
	HX_HCSTRING("getTexture","\xe5","\x4e","\x42","\xee"),
	HX_HCSTRING("getVector","\xf9","\x39","\xb4","\x13"),
	HX_HCSTRING("histogram","\xa4","\xde","\x33","\x65"),
	HX_HCSTRING("hitTest","\x45","\x60","\x7f","\xe2"),
	HX_HCSTRING("lock","\xeb","\x9b","\xb7","\x47"),
	HX_HCSTRING("merge","\xb8","\xa2","\xc6","\x05"),
	HX_HCSTRING("noise","\x9a","\x8f","\xc2","\x9f"),
	HX_HCSTRING("paletteMap","\xe1","\xae","\x2b","\x06"),
	HX_HCSTRING("perlinNoise","\x66","\x84","\xf8","\x8b"),
	HX_HCSTRING("scroll","\x0d","\xd8","\x64","\x47"),
	HX_HCSTRING("setPixel","\x84","\x2f","\xd8","\xd0"),
	HX_HCSTRING("setPixel32","\x23","\x45","\xe6","\xda"),
	HX_HCSTRING("setPixels","\x6f","\x64","\x51","\xec"),
	HX_HCSTRING("setVector","\x05","\x26","\x05","\xf7"),
	HX_HCSTRING("threshold","\xab","\xc3","\xa3","\x34"),
	HX_HCSTRING("unlock","\xc4","\xa2","\x8c","\x65"),
	HX_HCSTRING("__createUVs","\x56","\x32","\x13","\x78"),
	HX_HCSTRING("__drawGL","\x49","\xde","\x05","\x88"),
	HX_HCSTRING("__fromBase64","\xb9","\x7d","\xff","\xd0"),
	HX_HCSTRING("__fromBytes","\x81","\x3b","\x4d","\xa0"),
	HX_HCSTRING("__fromFile","\x26","\x10","\xc0","\x44"),
	HX_HCSTRING("__fromImage","\x71","\x52","\x1e","\xa0"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__resize","\x14","\xc5","\xaa","\xb0"),
	HX_HCSTRING("__sync","\x7b","\x1d","\x58","\xfb"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	::String(null()) };

static void BitmapData_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(BitmapData_obj::_hx___isGLES,"__isGLES");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BitmapData_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BitmapData_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(BitmapData_obj::_hx___isGLES,"__isGLES");
};

#endif

hx::Class BitmapData_obj::__mClass;

static ::String BitmapData_obj_sStaticFields[] = {
	HX_HCSTRING("__isGLES","\xdd","\x11","\xe5","\x09"),
	HX_HCSTRING("fromBase64","\x99","\x02","\x6c","\x98"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	HX_HCSTRING("fromFile","\x06","\x9d","\x87","\xa1"),
	HX_HCSTRING("fromImage","\x91","\x09","\xf2","\x71"),
	HX_HCSTRING("__asRenderTexture","\xb3","\xb8","\x4c","\x4d"),
	::String(null())
};

void BitmapData_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.BitmapData","\xa3","\x12","\x41","\x9a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BitmapData_obj::__GetStatic;
	__mClass->mSetStaticField = &BitmapData_obj::__SetStatic;
	__mClass->mMarkFunc = BitmapData_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(BitmapData_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(BitmapData_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< BitmapData_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BitmapData_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BitmapData_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BitmapData_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BitmapData_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.display.BitmapData","boot",0xf053b1dd,"openfl.display.BitmapData.boot","openfl/display/BitmapData.hx",65,0xdd12d5b9)
HXLINE(  65)		_hx___isGLES = null();
            	}
}

} // end namespace openfl
} // end namespace display
