// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoGraphics
#include <openfl/_internal/renderer/cairo/CairoGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoShape
#include <openfl/_internal/renderer/cairo/CairoShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_canvas_CanvasGraphics
#include <openfl/_internal/renderer/canvas/CanvasGraphics.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_GraphicsRenderer
#include <openfl/_internal/renderer/opengl/utils/GraphicsRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_SpriteBatch
#include <openfl/_internal/renderer/opengl/utils/SpriteBatch.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_errors_Error
#include <openfl/errors/Error.h>
#endif
#ifndef INCLUDED_openfl_errors_TypeError
#include <openfl/errors/TypeError.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_geom_Transform
#include <openfl/geom/Transform.h>
#endif

namespace openfl{
namespace display{

void DisplayObject_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","new",0xb225b469,"openfl.display.DisplayObject.new","openfl/display/DisplayObject.hx",43,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 121)		this->_hx___cacheAsBitmapSmooth = true;
HXLINE( 119)		this->_hx___cacheAsBitmap = false;
HXLINE(  96)		this->_hx___maskCached = false;
HXLINE( 139)		super::__construct(null());
HXLINE( 141)		this->_hx___alpha = (int)1;
HXLINE( 142)		this->_hx___transform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 143)		this->_hx___visible = true;
HXLINE( 145)		this->_hx___rotation = (int)0;
HXLINE( 146)		this->_hx___rotationSine = (int)0;
HXLINE( 147)		this->_hx___rotationCosine = (int)1;
HXLINE( 149)		this->_hx___renderTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 151)		this->_hx___offset =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE( 152)		this->_hx___worldOffset =  ::openfl::geom::Point_obj::__new(null(),null());
HXLINE( 154)		this->_hx___worldAlpha = (int)1;
HXLINE( 155)		this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
HXLINE( 156)		this->_hx___worldColorTransform =  ::openfl::geom::ColorTransform_obj::__new(null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 162)		::String _hx_tmp = (HX_("instance",95,1f,e1,59) + ++::openfl::display::DisplayObject_obj::_hx___instanceCount);
HXDLIN( 162)		this->set_name(_hx_tmp);
            	}

Dynamic DisplayObject_obj::__CreateEmpty() { return new DisplayObject_obj; }

hx::ObjectPtr< DisplayObject_obj > DisplayObject_obj::__new()
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic DisplayObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DisplayObject_obj > _hx_result = new DisplayObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

static ::openfl::display::IBitmapDrawable_obj _hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable= {
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairo,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCairoMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvas,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderCanvasMask,
	( void (hx::Object::*)( ::openfl::_internal::renderer::RenderSession))&::openfl::display::DisplayObject_obj::_hx___renderGL,
	( void (hx::Object::*)(Bool))&::openfl::display::DisplayObject_obj::_hx___updateChildren,
	( void (hx::Object::*)( ::openfl::geom::Matrix))&::openfl::display::DisplayObject_obj::_hx___updateTransforms,
	( void (hx::Object::*)( ::openfl::display::Graphics))&::openfl::display::DisplayObject_obj::_hx___updateMask,
};

void *DisplayObject_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc1c6fbe4: return &_hx_openfl_display_DisplayObject__hx_openfl_display_IBitmapDrawable;
	}
	return super::_hx_getInterface(inHash);
}

 ::openfl::geom::Rectangle DisplayObject_obj::getBounds( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACK_FRAME("openfl.display.DisplayObject","getBounds",0xdb0a2074,"openfl.display.DisplayObject.getBounds","openfl/display/DisplayObject.hx",167,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetCoordinateSpace,"targetCoordinateSpace")
HXLINE( 169)		HX_VAR(  ::openfl::geom::Matrix,matrix);
HXLINE( 171)		Bool _hx_tmp = hx::IsNotNull( targetCoordinateSpace );
HXDLIN( 171)		if (_hx_tmp) {
HXLINE( 173)			matrix = this->_hx___getWorldTransform()->clone();
HXLINE( 174)			 ::openfl::geom::Matrix _hx_tmp1 = targetCoordinateSpace->_hx___getWorldTransform()->clone()->invert();
HXDLIN( 174)			matrix->concat(_hx_tmp1);
            		}
            		else {
HXLINE( 178)			matrix = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE( 179)			matrix->identity();
            		}
HXLINE( 183)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 184)		this->_hx___getBounds(bounds,matrix);
HXLINE( 186)		return bounds;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getBounds,return )

 ::openfl::geom::Rectangle DisplayObject_obj::getRect( ::openfl::display::DisplayObject targetCoordinateSpace){
            	HX_STACK_FRAME("openfl.display.DisplayObject","getRect",0x17591963,"openfl.display.DisplayObject.getRect","openfl/display/DisplayObject.hx",194,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(targetCoordinateSpace,"targetCoordinateSpace")
HXLINE( 194)		return this->getBounds(targetCoordinateSpace);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,getRect,return )

 ::openfl::geom::Point DisplayObject_obj::globalToLocal( ::openfl::geom::Point pos){
            	HX_STACK_FRAME("openfl.display.DisplayObject","globalToLocal",0x8c16f816,"openfl.display.DisplayObject.globalToLocal","openfl/display/DisplayObject.hx",199,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(pos,"pos")
HXLINE( 201)		pos = pos->clone();
HXLINE( 202)		{
HXLINE( 202)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getWorldTransform();
HXDLIN( 202)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 202)			if ((norm == (int)0)) {
HXLINE( 202)				pos->x = -(_this->tx);
HXDLIN( 202)				pos->y = -(_this->ty);
            			}
            			else {
HXLINE( 202)				HX_VARI( Float,px) = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - pos->y)) + (_this->d * (pos->x - _this->tx))));
HXDLIN( 202)				Float _hx_tmp = ((Float)((Float)1.0) / (Float)norm);
HXDLIN( 202)				Float _hx_tmp1 = (_this->a * (pos->y - _this->ty));
HXDLIN( 202)				Float _hx_tmp2 = (_this->b * (_this->tx - pos->x));
HXDLIN( 202)				pos->y = (_hx_tmp * (_hx_tmp1 + _hx_tmp2));
HXDLIN( 202)				pos->x = px;
            			}
            		}
HXLINE( 203)		return pos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,globalToLocal,return )

Bool DisplayObject_obj::hitTestObject( ::openfl::display::DisplayObject obj){
            	HX_STACK_FRAME("openfl.display.DisplayObject","hitTestObject",0xf7ccfe2d,"openfl.display.DisplayObject.hitTestObject","openfl/display/DisplayObject.hx",208,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(obj,"obj")
HXLINE( 210)		Bool _hx_tmp;
HXDLIN( 210)		Bool _hx_tmp1;
HXDLIN( 210)		Bool _hx_tmp2 = hx::IsNotNull( obj );
HXDLIN( 210)		if (_hx_tmp2) {
HXLINE( 210)			_hx_tmp1 = hx::IsNotNull( obj->parent );
            		}
            		else {
HXLINE( 210)			_hx_tmp1 = false;
            		}
HXDLIN( 210)		if (_hx_tmp1) {
HXLINE( 210)			_hx_tmp = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 210)			_hx_tmp = false;
            		}
HXDLIN( 210)		if (_hx_tmp) {
HXLINE( 212)			HX_VARI(  ::openfl::geom::Rectangle,currentBounds) = this->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 213)			HX_VARI(  ::openfl::geom::Rectangle,targetBounds) = obj->getBounds(hx::ObjectPtr<OBJ_>(this));
HXLINE( 215)			return currentBounds->intersects(targetBounds);
            		}
HXLINE( 219)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,hitTestObject,return )

Bool DisplayObject_obj::hitTestPoint(Float x,Float y,hx::Null< Bool >  __o_shapeFlag){
Bool shapeFlag = __o_shapeFlag.Default(false);
            	HX_STACK_FRAME("openfl.display.DisplayObject","hitTestPoint",0x05917ca2,"openfl.display.DisplayObject.hitTestPoint","openfl/display/DisplayObject.hx",224,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
HXLINE( 226)		Bool _hx_tmp = hx::IsNotNull( this->parent );
HXDLIN( 226)		if (_hx_tmp) {
HXLINE( 228)			HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE( 229)			 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___getWorldTransform();
HXDLIN( 229)			this->_hx___getBounds(bounds,_hx_tmp1);
HXLINE( 231)			return bounds->containsPoint( ::openfl::geom::Point_obj::__new(x,y));
            		}
HXLINE( 235)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,hitTestPoint,return )

 ::openfl::geom::Point DisplayObject_obj::localToGlobal( ::openfl::geom::Point point){
            	HX_STACK_FRAME("openfl.display.DisplayObject","localToGlobal",0x6853eb12,"openfl.display.DisplayObject.localToGlobal","openfl/display/DisplayObject.hx",242,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(point,"point")
HXLINE( 242)		return this->_hx___getWorldTransform()->transformPoint(point);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,localToGlobal,return )

Bool DisplayObject_obj::_hx___broadcast( ::openfl::events::Event event,Bool notifyChilden){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__broadcast",0xe41880ea,"openfl.display.DisplayObject.__broadcast","openfl/display/DisplayObject.hx",247,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
            	HX_STACK_ARG(notifyChilden,"notifyChilden")
HXLINE( 249)		Bool _hx_tmp;
HXDLIN( 249)		Bool _hx_tmp1 = hx::IsNotNull( this->_hx___eventMap );
HXDLIN( 249)		if (_hx_tmp1) {
HXLINE( 249)			_hx_tmp = this->hasEventListener(event->type);
            		}
            		else {
HXLINE( 249)			_hx_tmp = false;
            		}
HXDLIN( 249)		if (_hx_tmp) {
HXLINE( 251)			HX_VARI( Bool,result) = this->super::_hx___dispatchEvent(event);
HXLINE( 253)			if (event->_hx___isCanceled) {
HXLINE( 255)				return true;
            			}
HXLINE( 259)			return result;
            		}
HXLINE( 263)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___broadcast,return )

Bool DisplayObject_obj::_hx___dispatchEvent( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__dispatchEvent",0xd8f34d69,"openfl.display.DisplayObject.__dispatchEvent","openfl/display/DisplayObject.hx",268,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE( 270)		HX_VARI( Bool,result) = this->super::_hx___dispatchEvent(event);
HXLINE( 272)		if (event->_hx___isCanceled) {
HXLINE( 274)			return true;
            		}
HXLINE( 278)		Bool _hx_tmp;
HXDLIN( 278)		Bool _hx_tmp1;
HXDLIN( 278)		if (event->bubbles) {
HXLINE( 278)			_hx_tmp1 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 278)			_hx_tmp1 = false;
            		}
HXDLIN( 278)		if (_hx_tmp1) {
HXLINE( 278)			_hx_tmp = hx::IsNotEq( this->parent,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE( 278)			_hx_tmp = false;
            		}
HXDLIN( 278)		if (_hx_tmp) {
HXLINE( 280)			event->eventPhase = (int)3;
HXLINE( 282)			Bool _hx_tmp2 = hx::IsNull( event->target );
HXDLIN( 282)			if (_hx_tmp2) {
HXLINE( 284)				event->target = hx::ObjectPtr<OBJ_>(this);
            			}
HXLINE( 288)			this->parent->_hx___dispatchEvent(event);
            		}
HXLINE( 292)		return result;
            	}


void DisplayObject_obj::_hx___enterFrame(Int deltaTime){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__enterFrame",0x5c5351ec,"openfl.display.DisplayObject.__enterFrame","openfl/display/DisplayObject.hx",297,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(deltaTime,"deltaTime")
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___enterFrame,(void))

void DisplayObject_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getBounds",0xe772ed94,"openfl.display.DisplayObject.__getBounds","openfl/display/DisplayObject.hx",306,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 306)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 306)		if (_hx_tmp) {
HXLINE( 308)			this->_hx___graphics->_hx___getBounds(rect,matrix);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getBounds,(void))

::hx::EnumBase DisplayObject_obj::_hx___getCursor(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getCursor",0xc03df5f5,"openfl.display.DisplayObject.__getCursor","openfl/display/DisplayObject.hx",317,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 317)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getCursor,return )

Bool DisplayObject_obj::_hx___getInteractive(::Array< ::Dynamic> stack){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getInteractive",0xee1ea663,"openfl.display.DisplayObject.__getInteractive","openfl/display/DisplayObject.hx",324,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stack,"stack")
HXLINE( 324)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getInteractive,return )

void DisplayObject_obj::_hx___getLocalBounds( ::openfl::geom::Rectangle rect){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getLocalBounds",0xd51d8ec1,"openfl.display.DisplayObject.__getLocalBounds","openfl/display/DisplayObject.hx",331,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
HXLINE( 331)		this->_hx___getBounds(rect,this->_hx___transform);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___getLocalBounds,(void))

void DisplayObject_obj::_hx___getRenderBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getRenderBounds",0xb06992ca,"openfl.display.DisplayObject.__getRenderBounds","openfl/display/DisplayObject.hx",338,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 338)		Bool _hx_tmp = hx::IsNull( this->_hx___scrollRect );
HXDLIN( 338)		if (_hx_tmp) {
HXLINE( 340)			this->_hx___getBounds(rect,matrix);
            		}
            		else {
HXLINE( 344)			HX_VARI(  ::openfl::geom::Rectangle,r) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 345)			r->copyFrom(this->_hx___scrollRect);
HXLINE( 346)			r->_hx___transform(r,matrix);
HXLINE( 347)			rect->_hx___expand(matrix->tx,matrix->ty,r->width,r->height);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___getRenderBounds,(void))

 ::openfl::geom::Matrix DisplayObject_obj::_hx___getWorldTransform(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__getWorldTransform",0x71693ad9,"openfl.display.DisplayObject.__getWorldTransform","openfl/display/DisplayObject.hx",354,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 356)		Bool _hx_tmp;
HXDLIN( 356)		if (!(this->_hx___transformDirty)) {
HXLINE( 356)			_hx_tmp = (::openfl::display::DisplayObject_obj::_hx___worldTransformDirty > (int)0);
            		}
            		else {
HXLINE( 356)			_hx_tmp = true;
            		}
HXDLIN( 356)		if (_hx_tmp) {
HXLINE( 358)			HX_VARI( ::Array< ::Dynamic>,list) = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 359)			HX_VARI(  ::openfl::display::DisplayObject,current) = hx::ObjectPtr<OBJ_>(this);
HXLINE( 360)			HX_VARI( Bool,transformDirty) = this->_hx___transformDirty;
HXLINE( 362)			Bool _hx_tmp1 = hx::IsNull( this->parent );
HXDLIN( 362)			if (_hx_tmp1) {
HXLINE( 364)				if (transformDirty) {
HXLINE( 364)					this->_hx___update(true,false,null());
            				}
            			}
            			else {
HXLINE( 368)				while(true){
HXLINE( 368)					Bool _hx_tmp2 = !(hx::IsNotNull( current->parent ));
HXDLIN( 368)					if (_hx_tmp2) {
HXLINE( 368)						goto _hx_goto_0;
            					}
HXLINE( 370)					list->push(current);
HXLINE( 371)					current = current->parent;
HXLINE( 373)					if (current->_hx___transformDirty) {
HXLINE( 375)						transformDirty = true;
            					}
            				}
            				_hx_goto_0:;
            			}
HXLINE( 383)			if (transformDirty) {
HXLINE( 385)				HX_VARI( Int,i) = list->length;
HXLINE( 386)				while(true){
HXLINE( 386)					Int _hx_tmp3 = --i;
HXDLIN( 386)					if (!((_hx_tmp3 >= (int)0))) {
HXLINE( 386)						goto _hx_goto_1;
            					}
HXLINE( 388)					list->__get(i).StaticCast<  ::openfl::display::DisplayObject >()->_hx___update(true,false,null());
            				}
            				_hx_goto_1:;
            			}
            		}
HXLINE( 396)		return this->_hx___worldTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___getWorldTransform,return )

Bool DisplayObject_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__hitTest",0x5c63c1ee,"openfl.display.DisplayObject.__hitTest","openfl/display/DisplayObject.hx",401,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE( 403)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 403)		if (_hx_tmp) {
HXLINE( 405)			Bool _hx_tmp1;
HXDLIN( 405)			Bool _hx_tmp2 = !(!(hitObject->get_visible()));
HXDLIN( 405)			if (_hx_tmp2) {
HXLINE( 405)				_hx_tmp1 = this->_hx___isMask;
            			}
            			else {
HXLINE( 405)				_hx_tmp1 = true;
            			}
HXDLIN( 405)			if (_hx_tmp1) {
HXLINE( 405)				return false;
            			}
HXLINE( 406)			Bool _hx_tmp3;
HXDLIN( 406)			 ::openfl::display::DisplayObject _hx_tmp4 = this->get_mask();
HXDLIN( 406)			Bool _hx_tmp5 = hx::IsNotNull( _hx_tmp4 );
HXDLIN( 406)			if (_hx_tmp5) {
HXLINE( 406)				_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            			}
            			else {
HXLINE( 406)				_hx_tmp3 = false;
            			}
HXDLIN( 406)			if (_hx_tmp3) {
HXLINE( 406)				return false;
            			}
HXLINE( 408)			 ::openfl::geom::Matrix _hx_tmp6 = this->_hx___getWorldTransform();
HXDLIN( 408)			Bool _hx_tmp7 = this->_hx___graphics->_hx___hitTest(x,y,shapeFlag,_hx_tmp6);
HXDLIN( 408)			if (_hx_tmp7) {
HXLINE( 410)				Bool _hx_tmp8;
HXDLIN( 410)				Bool _hx_tmp9 = hx::IsNotNull( stack );
HXDLIN( 410)				if (_hx_tmp9) {
HXLINE( 410)					_hx_tmp8 = !(interactiveOnly);
            				}
            				else {
HXLINE( 410)					_hx_tmp8 = false;
            				}
HXDLIN( 410)				if (_hx_tmp8) {
HXLINE( 412)					stack->push(hitObject);
            				}
HXLINE( 416)				return true;
            			}
            		}
HXLINE( 422)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC6(DisplayObject_obj,_hx___hitTest,return )

Bool DisplayObject_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__hitTestMask",0x5c65bdfa,"openfl.display.DisplayObject.__hitTestMask","openfl/display/DisplayObject.hx",427,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 429)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 429)		if (_hx_tmp) {
HXLINE( 431)			 ::openfl::geom::Matrix _hx_tmp1 = this->_hx___getWorldTransform();
HXDLIN( 431)			Bool _hx_tmp2 = this->_hx___graphics->_hx___hitTest(x,y,true,_hx_tmp1);
HXDLIN( 431)			if (_hx_tmp2) {
HXLINE( 433)				return true;
            			}
            		}
HXLINE( 439)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(DisplayObject_obj,_hx___hitTestMask,return )

void DisplayObject_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCairo",0x75ab477b,"openfl.display.DisplayObject.__renderCairo","openfl/display/DisplayObject.hx",446,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 446)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 446)		if (_hx_tmp) {
HXLINE( 448)			::openfl::_internal::renderer::cairo::CairoShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairo,(void))

void DisplayObject_obj::_hx___renderCairoMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCairoMask",0x9fd38e07,"openfl.display.DisplayObject.__renderCairoMask","openfl/display/DisplayObject.hx",457,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 457)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 457)		if (_hx_tmp) {
HXLINE( 459)			::openfl::_internal::renderer::cairo::CairoGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCairoMask,(void))

void DisplayObject_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCanvas",0x83845285,"openfl.display.DisplayObject.__renderCanvas","openfl/display/DisplayObject.hx",468,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 468)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvas,(void))

void DisplayObject_obj::_hx___renderCanvasMask( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderCanvasMask",0x388fe611,"openfl.display.DisplayObject.__renderCanvasMask","openfl/display/DisplayObject.hx",479,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 479)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 479)		if (_hx_tmp) {
HXLINE( 481)			::openfl::_internal::renderer::canvas::CanvasGraphics_obj::renderMask(this->_hx___graphics,renderSession);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderCanvasMask,(void))

void DisplayObject_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderDOM",0xd2568ab5,"openfl.display.DisplayObject.__renderDOM","openfl/display/DisplayObject.hx",490,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 490)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderDOM,(void))

void DisplayObject_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__renderGL",0xe0ccbd32,"openfl.display.DisplayObject.__renderGL","openfl/display/DisplayObject.hx",499,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 501)		Bool _hx_tmp;
HXDLIN( 501)		if (!(!(this->_hx___renderable))) {
HXLINE( 501)			_hx_tmp = (this->_hx___worldAlpha <= (int)0);
            		}
            		else {
HXLINE( 501)			_hx_tmp = true;
            		}
HXDLIN( 501)		if (_hx_tmp) {
HXLINE( 501)			return;
            		}
HXLINE( 503)		Bool _hx_tmp1 = this->_hx___cacheAsBitmap;
HXDLIN( 503)		if (_hx_tmp1) {
HXLINE( 504)			{
HXLINE( 504)				HX_VARI( Bool,hasCacheMatrix) = hx::IsNotNull( this->_hx___cacheAsBitmapMatrix );
HXDLIN( 504)				HX_VARI( Float,x) = this->_hx___cachedBitmapBounds->x;
HXDLIN( 504)				HX_VARI( Float,y) = this->_hx___cachedBitmapBounds->y;
HXDLIN( 504)				HX_VARI( Float,w) = this->_hx___cachedBitmapBounds->width;
HXDLIN( 504)				HX_VARI( Float,h) = this->_hx___cachedBitmapBounds->height;
HXDLIN( 504)				Bool _hx_tmp2 = hx::IsNull( this->_hx___cacheGLMatrix );
HXDLIN( 504)				if (_hx_tmp2) {
HXLINE( 504)					this->_hx___cacheGLMatrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 504)				if (hasCacheMatrix) {
HXLINE( 504)					HX_VARI(  ::openfl::geom::Rectangle,bmpBounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXDLIN( 504)					this->_hx___cachedBitmapBounds->_hx___transform(bmpBounds,this->_hx___cacheAsBitmapMatrix);
HXDLIN( 504)					x = bmpBounds->x;
HXDLIN( 504)					y = bmpBounds->y;
HXDLIN( 504)					w = bmpBounds->width;
HXDLIN( 504)					h = bmpBounds->height;
HXDLIN( 504)					this->_hx___cacheGLMatrix = this->_hx___cacheAsBitmapMatrix->clone();
            				}
            				else {
HXLINE( 504)					this->_hx___cacheGLMatrix->identity();
            				}
HXDLIN( 504)				Bool _hx_tmp3;
HXDLIN( 504)				if ((w <= (int)0)) {
HXLINE( 504)					_hx_tmp3 = (h <= (int)0);
            				}
            				else {
HXLINE( 504)					_hx_tmp3 = false;
            				}
HXDLIN( 504)				if (!(_hx_tmp3)) {
HXLINE( 504)					Bool _hx_tmp4;
HXDLIN( 504)					if (!(this->_hx___updateCachedBitmap)) {
HXLINE( 504)						_hx_tmp4 = this->_hx___updateFilters;
            					}
            					else {
HXLINE( 504)						_hx_tmp4 = true;
            					}
HXDLIN( 504)					if (_hx_tmp4) {
HXLINE( 504)						Bool _hx_tmp5 = hx::IsNotNull( this->_hx___cachedFilterBounds );
HXDLIN( 504)						if (_hx_tmp5) {
HXLINE( 504)							Float _hx_tmp6 = ::Math_obj::abs(this->_hx___cachedFilterBounds->x);
HXDLIN( 504)							Float _hx_tmp7 = ::Math_obj::abs(this->_hx___cachedFilterBounds->width);
HXDLIN( 504)							hx::AddEq(w,(_hx_tmp6 + _hx_tmp7));
HXDLIN( 504)							Float _hx_tmp8 = ::Math_obj::abs(this->_hx___cachedFilterBounds->y);
HXDLIN( 504)							Float _hx_tmp9 = ::Math_obj::abs(this->_hx___cachedFilterBounds->height);
HXDLIN( 504)							hx::AddEq(h,(_hx_tmp8 + _hx_tmp9));
            						}
HXDLIN( 504)						Bool _hx_tmp10 = hx::IsNull( this->_hx___cachedBitmap );
HXDLIN( 504)						if (_hx_tmp10) {
HXLINE( 504)							this->_hx___cachedBitmap = ::openfl::display::BitmapData_obj::_hx___asRenderTexture(null(),null());
            						}
HXDLIN( 504)						Int _hx_tmp11 = ::Math_obj::ceil(w);
HXDLIN( 504)						Int _hx_tmp12 = ::Math_obj::ceil(h);
HXDLIN( 504)						this->_hx___cachedBitmap->_hx___resize(_hx_tmp11,_hx_tmp12);
HXDLIN( 504)						HX_VARI(  ::openfl::geom::Matrix,m) = this->_hx___cacheGLMatrix->clone();
HXDLIN( 504)						m->translate(-(x),-(y));
HXDLIN( 504)						HX_VARI(  ::openfl::display::Shader,shader) = this->_hx___shader;
HXDLIN( 504)						this->_hx___shader = null();
HXDLIN( 504)						this->_hx___cachedBitmap->_hx___drawGL(renderSession,hx::ObjectPtr<OBJ_>(this),m,null(),null(),null(),true,false,true,null(),null());
HXDLIN( 504)						this->_hx___shader = shader;
HXDLIN( 504)						this->_hx___updateCachedBitmap = false;
            					}
HXDLIN( 504)					Bool _hx_tmp13 = this->_hx___updateFilters;
HXDLIN( 504)					if (_hx_tmp13) {
HXLINE( 504)						::openfl::filters::BitmapFilter_obj::_hx___applyFilters(this->_hx___filters,renderSession,this->_hx___cachedBitmap,this->_hx___cachedBitmap,null(),null());
HXDLIN( 504)						this->_hx___updateFilters = false;
            					}
HXDLIN( 504)					this->_hx___cacheGLMatrix->invert();
HXDLIN( 504)					{
HXLINE( 504)						HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___cacheGLMatrix;
HXDLIN( 504)						Float _hx_tmp14 = ((x * _this->a) + (y * _this->c));
HXDLIN( 504)						_this->tx = (_hx_tmp14 + _this->tx);
HXDLIN( 504)						Float _hx_tmp15 = ((x * _this->b) + (y * _this->d));
HXDLIN( 504)						_this->ty = (_hx_tmp15 + _this->ty);
            					}
HXDLIN( 504)					this->_hx___cacheGLMatrix->concat(this->_hx___renderTransform);
HXDLIN( 504)					this->_hx___cacheGLMatrix->translate(this->_hx___offset->x,this->_hx___offset->y);
HXDLIN( 504)					renderSession->spriteBatch->renderBitmapData(this->_hx___cachedBitmap,this->_hx___cacheAsBitmapSmooth,this->_hx___cacheGLMatrix,this->_hx___worldColorTransform,this->_hx___worldAlpha,this->blendMode,this->_hx___shader,(int)0,null());
            				}
            			}
HXLINE( 505)			return;
            		}
HXLINE( 508)		{
HXLINE( 508)			Bool _hx_tmp16 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 508)			if (_hx_tmp16) {
HXLINE( 508)				renderSession->maskManager->pushRect(this->_hx___scrollRect,this->_hx___renderTransform);
            			}
HXDLIN( 508)			Bool _hx_tmp17;
HXDLIN( 508)			Bool _hx_tmp18;
HXDLIN( 508)			Bool _hx_tmp19 = hx::IsNotNull( this->_hx___mask );
HXDLIN( 508)			if (_hx_tmp19) {
HXLINE( 508)				_hx_tmp18 = hx::IsNotNull( this->_hx___maskGraphics );
            			}
            			else {
HXLINE( 508)				_hx_tmp18 = false;
            			}
HXDLIN( 508)			if (_hx_tmp18) {
HXLINE( 508)				Int _hx_tmp20 = this->_hx___maskGraphics->_hx___commands->get_length();
HXDLIN( 508)				_hx_tmp17 = (_hx_tmp20 > (int)0);
            			}
            			else {
HXLINE( 508)				_hx_tmp17 = false;
            			}
HXDLIN( 508)			if (_hx_tmp17) {
HXLINE( 508)				renderSession->maskManager->pushMask(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 509)		Bool _hx_tmp21 = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 509)		if (_hx_tmp21) {
HXLINE( 509)			Bool _hx_tmp22 = this->_hx___graphics->_hx___hardware;
HXDLIN( 509)			if (_hx_tmp22) {
HXLINE( 509)				::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            			}
            			else {
HXLINE( 509)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(this->_hx___graphics,renderSession);
HXDLIN( 509)				::openfl::_internal::renderer::opengl::GLRenderer_obj::renderBitmap(hx::ObjectPtr<OBJ_>(this),renderSession,null());
            			}
            		}
HXLINE( 510)		{
HXLINE( 510)			Bool _hx_tmp23;
HXDLIN( 510)			Bool _hx_tmp24;
HXDLIN( 510)			Bool _hx_tmp25 = hx::IsNotNull( this->_hx___mask );
HXDLIN( 510)			if (_hx_tmp25) {
HXLINE( 510)				_hx_tmp24 = hx::IsNotNull( this->_hx___maskGraphics );
            			}
            			else {
HXLINE( 510)				_hx_tmp24 = false;
            			}
HXDLIN( 510)			if (_hx_tmp24) {
HXLINE( 510)				Int _hx_tmp26 = this->_hx___maskGraphics->_hx___commands->get_length();
HXDLIN( 510)				_hx_tmp23 = (_hx_tmp26 > (int)0);
            			}
            			else {
HXLINE( 510)				_hx_tmp23 = false;
            			}
HXDLIN( 510)			if (_hx_tmp23) {
HXLINE( 510)				renderSession->maskManager->popMask();
            			}
HXDLIN( 510)			Bool _hx_tmp27 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 510)			if (_hx_tmp27) {
HXLINE( 510)				renderSession->maskManager->popRect();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___renderGL,(void))

void DisplayObject_obj::_hx___drawGraphicsGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__drawGraphicsGL",0x8421324b,"openfl.display.DisplayObject.__drawGraphicsGL","openfl/display/DisplayObject.hx",516,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 516)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 516)		if (_hx_tmp) {
HXLINE( 518)			Bool _hx_tmp1 = this->_hx___graphics->_hx___hardware;
HXDLIN( 518)			if (_hx_tmp1) {
HXLINE( 520)				::openfl::_internal::renderer::opengl::utils::GraphicsRenderer_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
            			}
            			else {
HXLINE( 527)				::openfl::_internal::renderer::cairo::CairoGraphics_obj::render(this->_hx___graphics,renderSession);
HXLINE( 530)				::openfl::_internal::renderer::opengl::GLRenderer_obj::renderBitmap(hx::ObjectPtr<OBJ_>(this),renderSession,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___drawGraphicsGL,(void))

void DisplayObject_obj::_hx___preRenderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__preRenderGL",0x31250c67,"openfl.display.DisplayObject.__preRenderGL","openfl/display/DisplayObject.hx",538,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 540)		Bool _hx_tmp = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 540)		if (_hx_tmp) {
HXLINE( 542)			renderSession->maskManager->pushRect(this->_hx___scrollRect,this->_hx___renderTransform);
            		}
HXLINE( 546)		Bool _hx_tmp1;
HXDLIN( 546)		Bool _hx_tmp2;
HXDLIN( 546)		Bool _hx_tmp3 = hx::IsNotNull( this->_hx___mask );
HXDLIN( 546)		if (_hx_tmp3) {
HXLINE( 546)			_hx_tmp2 = hx::IsNotNull( this->_hx___maskGraphics );
            		}
            		else {
HXLINE( 546)			_hx_tmp2 = false;
            		}
HXDLIN( 546)		if (_hx_tmp2) {
HXLINE( 546)			Int _hx_tmp4 = this->_hx___maskGraphics->_hx___commands->get_length();
HXDLIN( 546)			_hx_tmp1 = (_hx_tmp4 > (int)0);
            		}
            		else {
HXLINE( 546)			_hx_tmp1 = false;
            		}
HXDLIN( 546)		if (_hx_tmp1) {
HXLINE( 548)			renderSession->maskManager->pushMask(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___preRenderGL,(void))

void DisplayObject_obj::_hx___postRenderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__postRenderGL",0x83814532,"openfl.display.DisplayObject.__postRenderGL","openfl/display/DisplayObject.hx",555,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 557)		Bool _hx_tmp;
HXDLIN( 557)		Bool _hx_tmp1;
HXDLIN( 557)		Bool _hx_tmp2 = hx::IsNotNull( this->_hx___mask );
HXDLIN( 557)		if (_hx_tmp2) {
HXLINE( 557)			_hx_tmp1 = hx::IsNotNull( this->_hx___maskGraphics );
            		}
            		else {
HXLINE( 557)			_hx_tmp1 = false;
            		}
HXDLIN( 557)		if (_hx_tmp1) {
HXLINE( 557)			Int _hx_tmp3 = this->_hx___maskGraphics->_hx___commands->get_length();
HXDLIN( 557)			_hx_tmp = (_hx_tmp3 > (int)0);
            		}
            		else {
HXLINE( 557)			_hx_tmp = false;
            		}
HXDLIN( 557)		if (_hx_tmp) {
HXLINE( 559)			renderSession->maskManager->popMask();
            		}
HXLINE( 563)		Bool _hx_tmp4 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 563)		if (_hx_tmp4) {
HXLINE( 565)			renderSession->maskManager->popRect();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___postRenderGL,(void))

void DisplayObject_obj::_hx___cacheGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__cacheGL",0x9d05ce90,"openfl.display.DisplayObject.__cacheGL","openfl/display/DisplayObject.hx",572,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 574)		HX_VARI( Bool,hasCacheMatrix) = hx::IsNotNull( this->_hx___cacheAsBitmapMatrix );
HXLINE( 575)		HX_VARI( Float,x) = this->_hx___cachedBitmapBounds->x;
HXLINE( 576)		HX_VARI( Float,y) = this->_hx___cachedBitmapBounds->y;
HXLINE( 577)		HX_VARI( Float,w) = this->_hx___cachedBitmapBounds->width;
HXLINE( 578)		HX_VARI( Float,h) = this->_hx___cachedBitmapBounds->height;
HXLINE( 581)		Bool _hx_tmp = hx::IsNull( this->_hx___cacheGLMatrix );
HXDLIN( 581)		if (_hx_tmp) {
HXLINE( 581)			this->_hx___cacheGLMatrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE( 583)		if (hasCacheMatrix) {
HXLINE( 586)			HX_VARI(  ::openfl::geom::Rectangle,bmpBounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 587)			this->_hx___cachedBitmapBounds->_hx___transform(bmpBounds,this->_hx___cacheAsBitmapMatrix);
HXLINE( 588)			x = bmpBounds->x;
HXLINE( 589)			y = bmpBounds->y;
HXLINE( 590)			w = bmpBounds->width;
HXLINE( 591)			h = bmpBounds->height;
HXLINE( 593)			this->_hx___cacheGLMatrix = this->_hx___cacheAsBitmapMatrix->clone();
            		}
            		else {
HXLINE( 597)			this->_hx___cacheGLMatrix->identity();
            		}
HXLINE( 601)		Bool _hx_tmp1;
HXDLIN( 601)		if ((w <= (int)0)) {
HXLINE( 601)			_hx_tmp1 = (h <= (int)0);
            		}
            		else {
HXLINE( 601)			_hx_tmp1 = false;
            		}
HXDLIN( 601)		if (_hx_tmp1) {
HXLINE( 604)			return;
            		}
HXLINE( 608)		Bool _hx_tmp2;
HXDLIN( 608)		if (!(this->_hx___updateCachedBitmap)) {
HXLINE( 608)			_hx_tmp2 = this->_hx___updateFilters;
            		}
            		else {
HXLINE( 608)			_hx_tmp2 = true;
            		}
HXDLIN( 608)		if (_hx_tmp2) {
HXLINE( 610)			Bool _hx_tmp3 = hx::IsNotNull( this->_hx___cachedFilterBounds );
HXDLIN( 610)			if (_hx_tmp3) {
HXLINE( 611)				Float _hx_tmp4 = ::Math_obj::abs(this->_hx___cachedFilterBounds->x);
HXDLIN( 611)				Float _hx_tmp5 = ::Math_obj::abs(this->_hx___cachedFilterBounds->width);
HXDLIN( 611)				hx::AddEq(w,(_hx_tmp4 + _hx_tmp5));
HXLINE( 612)				Float _hx_tmp6 = ::Math_obj::abs(this->_hx___cachedFilterBounds->y);
HXDLIN( 612)				Float _hx_tmp7 = ::Math_obj::abs(this->_hx___cachedFilterBounds->height);
HXDLIN( 612)				hx::AddEq(h,(_hx_tmp6 + _hx_tmp7));
            			}
HXLINE( 615)			Bool _hx_tmp8 = hx::IsNull( this->_hx___cachedBitmap );
HXDLIN( 615)			if (_hx_tmp8) {
HXLINE( 616)				this->_hx___cachedBitmap = ::openfl::display::BitmapData_obj::_hx___asRenderTexture(null(),null());
            			}
HXLINE( 618)			Int _hx_tmp9 = ::Math_obj::ceil(w);
HXDLIN( 618)			Int _hx_tmp10 = ::Math_obj::ceil(h);
HXDLIN( 618)			this->_hx___cachedBitmap->_hx___resize(_hx_tmp9,_hx_tmp10);
HXLINE( 621)			HX_VARI(  ::openfl::geom::Matrix,m) = this->_hx___cacheGLMatrix->clone();
HXLINE( 622)			m->translate(-(x),-(y));
HXLINE( 624)			HX_VARI(  ::openfl::display::Shader,shader) = this->_hx___shader;
HXLINE( 625)			this->_hx___shader = null();
HXLINE( 626)			this->_hx___cachedBitmap->_hx___drawGL(renderSession,hx::ObjectPtr<OBJ_>(this),m,null(),null(),null(),true,false,true,null(),null());
HXLINE( 627)			this->_hx___shader = shader;
HXLINE( 629)			this->_hx___updateCachedBitmap = false;
            		}
HXLINE( 632)		Bool _hx_tmp11 = this->_hx___updateFilters;
HXDLIN( 632)		if (_hx_tmp11) {
HXLINE( 633)			::openfl::filters::BitmapFilter_obj::_hx___applyFilters(this->_hx___filters,renderSession,this->_hx___cachedBitmap,this->_hx___cachedBitmap,null(),null());
HXLINE( 634)			this->_hx___updateFilters = false;
            		}
HXLINE( 638)		this->_hx___cacheGLMatrix->invert();
HXLINE( 639)		{
HXLINE( 639)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___cacheGLMatrix;
HXDLIN( 639)			Float _hx_tmp12 = ((x * _this->a) + (y * _this->c));
HXDLIN( 639)			_this->tx = (_hx_tmp12 + _this->tx);
HXDLIN( 639)			Float _hx_tmp13 = ((x * _this->b) + (y * _this->d));
HXDLIN( 639)			_this->ty = (_hx_tmp13 + _this->ty);
            		}
HXLINE( 640)		this->_hx___cacheGLMatrix->concat(this->_hx___renderTransform);
HXLINE( 641)		this->_hx___cacheGLMatrix->translate(this->_hx___offset->x,this->_hx___offset->y);
HXLINE( 643)		renderSession->spriteBatch->renderBitmapData(this->_hx___cachedBitmap,this->_hx___cacheAsBitmapSmooth,this->_hx___cacheGLMatrix,this->_hx___worldColorTransform,this->_hx___worldAlpha,this->blendMode,this->_hx___shader,(int)0,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___cacheGL,(void))

void DisplayObject_obj::_hx___setStageReference( ::openfl::display::Stage stage){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__setStageReference",0xda522b58,"openfl.display.DisplayObject.__setStageReference","openfl/display/DisplayObject.hx",649,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(stage,"stage")
HXLINE( 649)		if (hx::IsNotEq( this->stage,stage )) {
HXLINE( 651)			Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN( 651)			if (_hx_tmp) {
HXLINE( 653)				 ::openfl::display::InteractiveObject _hx_tmp1 = this->stage->get_focus();
HXDLIN( 653)				if (hx::IsEq( _hx_tmp1,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE( 655)					this->stage->set_focus(null());
            				}
HXLINE( 659)				this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("removedFromStage",34,21,76,ba),false,false));
            			}
HXLINE( 663)			this->stage = stage;
HXLINE( 665)			Bool _hx_tmp2 = hx::IsNotNull( stage );
HXDLIN( 665)			if (_hx_tmp2) {
HXLINE( 667)				this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("addedToStage",63,22,55,0c),false,false));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___setStageReference,(void))

void DisplayObject_obj::_hx___setRenderDirty(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__setRenderDirty",0x7766cdd1,"openfl.display.DisplayObject.__setRenderDirty","openfl/display/DisplayObject.hx",678,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 678)		Bool _hx_tmp = !(this->_hx___renderDirty);
HXDLIN( 678)		if (_hx_tmp) {
HXLINE( 680)			this->_hx___updateCachedBitmap = true;
HXLINE( 681)			Bool _hx_tmp1;
HXDLIN( 681)			::Array< ::Dynamic> _hx_tmp2 = this->get_filters();
HXDLIN( 681)			Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp2 );
HXDLIN( 681)			if (_hx_tmp3) {
HXLINE( 681)				_hx_tmp1 = (this->get_filters()->length > (int)0);
            			}
            			else {
HXLINE( 681)				_hx_tmp1 = false;
            			}
HXDLIN( 681)			this->_hx___updateFilters = _hx_tmp1;
HXLINE( 682)			this->_hx___renderDirty = true;
HXLINE( 683)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setRenderDirty,(void))

void DisplayObject_obj::_hx___setTransformDirty(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__setTransformDirty",0x7e906131,"openfl.display.DisplayObject.__setTransformDirty","openfl/display/DisplayObject.hx",692,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 692)		Bool _hx_tmp = !(this->_hx___transformDirty);
HXDLIN( 692)		if (_hx_tmp) {
HXLINE( 694)			this->_hx___transformDirty = true;
HXLINE( 695)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,_hx___setTransformDirty,(void))

void DisplayObject_obj::_hx___update(Bool transformOnly,Bool updateChildren, ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__update",0x3f3ecc80,"openfl.display.DisplayObject.__update","openfl/display/DisplayObject.hx",702,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
            	HX_STACK_ARG(updateChildren,"updateChildren")
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
HXLINE( 704)		Bool _hx_tmp;
HXDLIN( 704)		Bool _hx_tmp1;
HXDLIN( 704)		Bool _hx_tmp2;
HXDLIN( 704)		Bool _hx_tmp3 = this->get_visible();
HXDLIN( 704)		if (_hx_tmp3) {
HXLINE( 704)			Float _hx_tmp4 = this->get_scaleX();
HXDLIN( 704)			_hx_tmp2 = (_hx_tmp4 != (int)0);
            		}
            		else {
HXLINE( 704)			_hx_tmp2 = false;
            		}
HXDLIN( 704)		if (_hx_tmp2) {
HXLINE( 704)			Float _hx_tmp5 = this->get_scaleY();
HXDLIN( 704)			_hx_tmp1 = (_hx_tmp5 != (int)0);
            		}
            		else {
HXLINE( 704)			_hx_tmp1 = false;
            		}
HXDLIN( 704)		if (_hx_tmp1) {
HXLINE( 704)			_hx_tmp = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 704)			_hx_tmp = false;
            		}
HXDLIN( 704)		this->_hx___renderable = _hx_tmp;
HXLINE( 706)		this->_hx___updateTransforms(null());
HXLINE( 709)		Bool _hx_tmp6;
HXDLIN( 709)		Bool _hx_tmp7 = hx::IsNotNull( this->parent );
HXDLIN( 709)		if (_hx_tmp7) {
HXLINE( 709)			_hx_tmp6 = this->_hx___isMask;
            		}
            		else {
HXLINE( 709)			_hx_tmp6 = false;
            		}
HXDLIN( 709)		if (_hx_tmp6) {
HXLINE( 711)			this->_hx___maskCached = false;
            		}
HXLINE( 715)		Bool _hx_tmp8;
HXDLIN( 715)		if (updateChildren) {
HXLINE( 715)			_hx_tmp8 = this->_hx___transformDirty;
            		}
            		else {
HXLINE( 715)			_hx_tmp8 = false;
            		}
HXDLIN( 715)		if (_hx_tmp8) {
HXLINE( 717)			this->_hx___transformDirty = false;
HXLINE( 718)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty--;
            		}
HXLINE( 722)		Bool _hx_tmp9;
HXDLIN( 722)		Bool _hx_tmp10;
HXDLIN( 722)		if (!(transformOnly)) {
HXLINE( 722)			_hx_tmp10 = hx::IsNotNull( this->_hx___mask );
            		}
            		else {
HXLINE( 722)			_hx_tmp10 = false;
            		}
HXDLIN( 722)		if (_hx_tmp10) {
HXLINE( 722)			_hx_tmp9 = !(this->_hx___mask->_hx___maskCached);
            		}
            		else {
HXLINE( 722)			_hx_tmp9 = false;
            		}
HXDLIN( 722)		if (_hx_tmp9) {
HXLINE( 724)			Bool _hx_tmp11 = hx::IsNull( this->_hx___maskGraphics );
HXDLIN( 724)			if (_hx_tmp11) {
HXLINE( 726)				this->_hx___maskGraphics =  ::openfl::display::Graphics_obj::__new();
            			}
HXLINE( 730)			this->_hx___maskGraphics->clear();
HXLINE( 732)			this->_hx___mask->_hx___update(true,true,this->_hx___maskGraphics);
HXLINE( 733)			this->_hx___mask->_hx___maskCached = true;
            		}
HXLINE( 737)		Bool _hx_tmp12 = hx::IsNotNull( maskGraphics );
HXDLIN( 737)		if (_hx_tmp12) {
HXLINE( 739)			this->_hx___updateMask(maskGraphics);
            		}
HXLINE( 743)		Bool _hx_tmp13;
HXDLIN( 743)		if (!(transformOnly)) {
HXLINE( 743)			_hx_tmp13 = this->_hx___cacheAsBitmap;
            		}
            		else {
HXLINE( 743)			_hx_tmp13 = false;
            		}
HXDLIN( 743)		if (_hx_tmp13) {
HXLINE( 746)			Bool _hx_tmp14;
HXDLIN( 746)			if (!(this->_hx___updateCachedBitmap)) {
HXLINE( 746)				_hx_tmp14 = this->_hx___updateFilters;
            			}
            			else {
HXLINE( 746)				_hx_tmp14 = true;
            			}
HXDLIN( 746)			if (_hx_tmp14) {
HXLINE( 748)				Bool _hx_tmp15 = hx::IsNull( this->_hx___cachedBitmapBounds );
HXDLIN( 748)				if (_hx_tmp15) {
HXLINE( 749)					this->_hx___cachedBitmapBounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            				}
HXLINE( 752)				Bool _hx_tmp16 = hx::IsNotNull( this->cacheAsBitmapBounds );
HXDLIN( 752)				if (_hx_tmp16) {
HXLINE( 753)					this->_hx___cachedBitmapBounds->copyFrom(this->cacheAsBitmapBounds);
            				}
            				else {
HXLINE( 756)					this->_hx___cachedBitmapBounds->setEmpty();
HXLINE( 757)					this->_hx___getRenderBounds(this->_hx___cachedBitmapBounds,::openfl::geom::Matrix_obj::_hx___identity);
            				}
HXLINE( 762)				Bool _hx_tmp17 = hx::IsNotNull( this->_hx___filters );
HXDLIN( 762)				if (_hx_tmp17) {
HXLINE( 764)					Bool _hx_tmp18 = hx::IsNull( this->_hx___cachedFilterBounds );
HXDLIN( 764)					if (_hx_tmp18) {
HXLINE( 765)						this->_hx___cachedFilterBounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            					}
HXLINE( 767)					this->_hx___cachedFilterBounds->setEmpty();
HXLINE( 768)					::openfl::filters::BitmapFilter_obj::_hx___expandBounds(this->_hx___filters,this->_hx___cachedFilterBounds,::openfl::geom::Matrix_obj::_hx___identity);
HXLINE( 770)					hx::AddEq(this->_hx___cachedBitmapBounds->x,this->_hx___cachedFilterBounds->x);
HXLINE( 771)					hx::AddEq(this->_hx___cachedBitmapBounds->y,this->_hx___cachedFilterBounds->y);
            				}
            			}
            		}
HXLINE( 779)		if (!(transformOnly)) {
HXLINE( 797)			 ::openfl::geom::ColorTransform _hx_tmp19 = this->get_transform()->get_colorTransform();
HXDLIN( 797)			Bool _hx_tmp20 = !(this->_hx___worldColorTransform->_hx___equals(_hx_tmp19,null()));
HXDLIN( 797)			if (_hx_tmp20) {
HXLINE( 799)				this->_hx___worldColorTransform = this->get_transform()->get_colorTransform()->_hx___clone();
            			}
HXLINE( 803)			Bool _hx_tmp21 = hx::IsNotNull( this->parent );
HXDLIN( 803)			if (_hx_tmp21) {
HXLINE( 807)				Float _hx_tmp22 = this->get_alpha();
HXDLIN( 807)				this->_hx___worldAlpha = (_hx_tmp22 * this->parent->_hx___worldAlpha);
HXLINE( 808)				this->_hx___worldColorTransform->_hx___combine(this->parent->_hx___worldColorTransform);
HXLINE( 810)				Bool _hx_tmp23;
HXDLIN( 810)				Bool _hx_tmp24 = hx::IsNotNull( this->blendMode );
HXDLIN( 810)				if (_hx_tmp24) {
HXLINE( 810)					_hx_tmp23 = hx::IsEq( this->blendMode,(int)10 );
            				}
            				else {
HXLINE( 810)					_hx_tmp23 = true;
            				}
HXDLIN( 810)				if (_hx_tmp23) {
HXLINE( 812)					this->_hx___blendMode = this->parent->_hx___blendMode;
            				}
HXLINE( 816)				Bool _hx_tmp25 = hx::IsNull( this->shader );
HXDLIN( 816)				if (_hx_tmp25) {
HXLINE( 817)					this->_hx___shader = this->parent->_hx___shader;
            				}
            			}
            			else {
HXLINE( 855)				this->_hx___worldAlpha = this->get_alpha();
            			}
HXLINE( 880)			Bool _hx_tmp26;
HXDLIN( 880)			if (updateChildren) {
HXLINE( 880)				_hx_tmp26 = this->_hx___renderDirty;
            			}
            			else {
HXLINE( 880)				_hx_tmp26 = false;
            			}
HXDLIN( 880)			if (_hx_tmp26) {
HXLINE( 882)				this->_hx___renderDirty = false;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(DisplayObject_obj,_hx___update,(void))

void DisplayObject_obj::_hx___updateChildren(Bool transformOnly){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__updateChildren",0xcfbb21df,"openfl.display.DisplayObject.__updateChildren","openfl/display/DisplayObject.hx",891,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(transformOnly,"transformOnly")
HXLINE( 893)		Bool _hx_tmp;
HXDLIN( 893)		Bool _hx_tmp1;
HXDLIN( 893)		Bool _hx_tmp2;
HXDLIN( 893)		Bool _hx_tmp3 = this->get_visible();
HXDLIN( 893)		if (_hx_tmp3) {
HXLINE( 893)			Float _hx_tmp4 = this->get_scaleX();
HXDLIN( 893)			_hx_tmp2 = (_hx_tmp4 != (int)0);
            		}
            		else {
HXLINE( 893)			_hx_tmp2 = false;
            		}
HXDLIN( 893)		if (_hx_tmp2) {
HXLINE( 893)			Float _hx_tmp5 = this->get_scaleY();
HXDLIN( 893)			_hx_tmp1 = (_hx_tmp5 != (int)0);
            		}
            		else {
HXLINE( 893)			_hx_tmp1 = false;
            		}
HXDLIN( 893)		if (_hx_tmp1) {
HXLINE( 893)			_hx_tmp = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 893)			_hx_tmp = false;
            		}
HXDLIN( 893)		this->_hx___renderable = _hx_tmp;
HXLINE( 894)		Bool _hx_tmp6;
HXDLIN( 894)		if (!(this->_hx___renderable)) {
HXLINE( 894)			_hx_tmp6 = !(this->_hx___isMask);
            		}
            		else {
HXLINE( 894)			_hx_tmp6 = false;
            		}
HXDLIN( 894)		if (_hx_tmp6) {
HXLINE( 894)			return;
            		}
HXLINE( 895)		this->_hx___worldAlpha = this->get_alpha();
HXLINE( 897)		Bool _hx_tmp7 = this->_hx___transformDirty;
HXDLIN( 897)		if (_hx_tmp7) {
HXLINE( 899)			this->_hx___transformDirty = false;
HXLINE( 900)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty--;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateChildren,(void))

void DisplayObject_obj::_hx___updateMask( ::openfl::display::Graphics maskGraphics){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__updateMask",0x5b0e798c,"openfl.display.DisplayObject.__updateMask","openfl/display/DisplayObject.hx",909,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(maskGraphics,"maskGraphics")
HXLINE( 909)		Bool _hx_tmp = hx::IsNotNull( this->_hx___graphics );
HXDLIN( 909)		if (_hx_tmp) {
HXLINE( 911)			maskGraphics->_hx___commands->overrideMatrix(this->_hx___worldTransform);
HXLINE( 912)			maskGraphics->_hx___commands->append(this->_hx___graphics->_hx___commands);
HXLINE( 913)			maskGraphics->set___dirty(true);
HXLINE( 914)			maskGraphics->_hx___visible = true;
HXLINE( 916)			Bool _hx_tmp1 = hx::IsNull( maskGraphics->_hx___bounds );
HXDLIN( 916)			if (_hx_tmp1) {
HXLINE( 918)				maskGraphics->_hx___bounds =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
            			}
HXLINE( 922)			this->_hx___graphics->_hx___getBounds(maskGraphics->_hx___bounds,::openfl::geom::Matrix_obj::_hx___identity);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateMask,(void))

void DisplayObject_obj::_hx___updateTransforms( ::openfl::geom::Matrix overrideTransform){
            	HX_STACK_FRAME("openfl.display.DisplayObject","__updateTransforms",0x37510227,"openfl.display.DisplayObject.__updateTransforms","openfl/display/DisplayObject.hx",929,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(overrideTransform,"overrideTransform")
HXLINE( 931)		HX_VARI( Bool,overrided) = hx::IsNotNull( overrideTransform );
HXLINE( 932)		HX_VAR(  ::openfl::geom::Matrix,local);
HXDLIN( 932)		if (overrided) {
HXLINE( 932)			local = overrideTransform->clone();
            		}
            		else {
HXLINE( 932)			local = this->_hx___transform;
            		}
HXLINE( 934)		Bool _hx_tmp = hx::IsNull( this->_hx___worldTransform );
HXDLIN( 934)		if (_hx_tmp) {
HXLINE( 936)			this->_hx___worldTransform =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            		}
HXLINE( 940)		Bool _hx_tmp1;
HXDLIN( 940)		if (!(overrided)) {
HXLINE( 940)			_hx_tmp1 = hx::IsNotNull( this->parent );
            		}
            		else {
HXLINE( 940)			_hx_tmp1 = false;
            		}
HXDLIN( 940)		if (_hx_tmp1) {
HXLINE( 942)			HX_VARI(  ::openfl::geom::Matrix,parentTransform) = this->parent->_hx___worldTransform;
HXLINE( 944)			Float _hx_tmp2 = (local->a * parentTransform->a);
HXDLIN( 944)			Float _hx_tmp3 = (local->b * parentTransform->c);
HXDLIN( 944)			this->_hx___worldTransform->a = (_hx_tmp2 + _hx_tmp3);
HXLINE( 945)			Float _hx_tmp4 = (local->a * parentTransform->b);
HXDLIN( 945)			Float _hx_tmp5 = (local->b * parentTransform->d);
HXDLIN( 945)			this->_hx___worldTransform->b = (_hx_tmp4 + _hx_tmp5);
HXLINE( 946)			Float _hx_tmp6 = (local->c * parentTransform->a);
HXDLIN( 946)			Float _hx_tmp7 = (local->d * parentTransform->c);
HXDLIN( 946)			this->_hx___worldTransform->c = (_hx_tmp6 + _hx_tmp7);
HXLINE( 947)			Float _hx_tmp8 = (local->c * parentTransform->b);
HXDLIN( 947)			Float _hx_tmp9 = (local->d * parentTransform->d);
HXDLIN( 947)			this->_hx___worldTransform->d = (_hx_tmp8 + _hx_tmp9);
HXLINE( 948)			Float _hx_tmp10 = ((local->tx * parentTransform->a) + (local->ty * parentTransform->c));
HXDLIN( 948)			this->_hx___worldTransform->tx = (_hx_tmp10 + parentTransform->tx);
HXLINE( 949)			Float _hx_tmp11 = ((local->tx * parentTransform->b) + (local->ty * parentTransform->d));
HXDLIN( 949)			this->_hx___worldTransform->ty = (_hx_tmp11 + parentTransform->ty);
HXLINE( 951)			this->_hx___worldOffset->copyFrom(this->parent->_hx___worldOffset);
            		}
            		else {
HXLINE( 955)			this->_hx___worldTransform->copyFrom(local);
HXLINE( 956)			this->_hx___worldOffset->setTo((int)0,(int)0);
            		}
HXLINE( 960)		Bool _hx_tmp12 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 960)		if (_hx_tmp12) {
HXLINE( 962)			 ::openfl::geom::Point _hx_tmp13 = this->_hx___scrollRect->get_topLeft();
HXDLIN( 962)			this->_hx___offset = this->_hx___worldTransform->deltaTransformPoint(_hx_tmp13);
HXLINE( 963)			this->_hx___worldOffset->offset(this->_hx___offset->x,this->_hx___offset->y);
            		}
            		else {
HXLINE( 967)			this->_hx___offset->setTo((int)0,(int)0);
            		}
HXLINE( 971)		this->_hx___renderTransform->copyFrom(this->_hx___worldTransform);
HXLINE( 972)		this->_hx___renderTransform->translate(-(this->_hx___worldOffset->x),-(this->_hx___worldOffset->y));
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,_hx___updateTransforms,(void))

Float DisplayObject_obj::get_alpha(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_alpha",0x5dd6147e,"openfl.display.DisplayObject.get_alpha","openfl/display/DisplayObject.hx",986,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE( 986)		return this->_hx___alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_alpha,return )

Float DisplayObject_obj::set_alpha(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_alpha",0x4127008a,"openfl.display.DisplayObject.set_alpha","openfl/display/DisplayObject.hx",991,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 993)		Bool _hx_tmp = (value > ((Float)1.0));
HXDLIN( 993)		if (_hx_tmp) {
HXLINE( 993)			value = ((Float)1.0);
            		}
HXLINE( 994)		Bool _hx_tmp1 = (value != this->_hx___alpha);
HXDLIN( 994)		if (_hx_tmp1) {
HXLINE( 994)			Bool _hx_tmp2 = !(this->_hx___renderDirty);
HXDLIN( 994)			if (_hx_tmp2) {
HXLINE( 994)				this->_hx___updateCachedBitmap = true;
HXDLIN( 994)				Bool _hx_tmp3;
HXDLIN( 994)				::Array< ::Dynamic> _hx_tmp4 = this->get_filters();
HXDLIN( 994)				Bool _hx_tmp5 = hx::IsNotNull( _hx_tmp4 );
HXDLIN( 994)				if (_hx_tmp5) {
HXLINE( 994)					_hx_tmp3 = (this->get_filters()->length > (int)0);
            				}
            				else {
HXLINE( 994)					_hx_tmp3 = false;
            				}
HXDLIN( 994)				this->_hx___updateFilters = _hx_tmp3;
HXDLIN( 994)				this->_hx___renderDirty = true;
HXDLIN( 994)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE( 995)		return (this->_hx___alpha = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_alpha,return )

 ::Dynamic DisplayObject_obj::set_blendMode( ::Dynamic value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_blendMode",0x330a4380,"openfl.display.DisplayObject.set_blendMode","openfl/display/DisplayObject.hx",1000,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1002)		this->_hx___blendMode = value;
HXLINE(1003)		return (this->blendMode = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_blendMode,return )

 ::openfl::display::Shader DisplayObject_obj::set_shader( ::openfl::display::Shader value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_shader",0x9bde6c79,"openfl.display.DisplayObject.set_shader","openfl/display/DisplayObject.hx",1007,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1009)		this->_hx___shader = value;
HXLINE(1010)		return (this->shader = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_shader,return )

Bool DisplayObject_obj::get_cacheAsBitmap(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_cacheAsBitmap",0xa5311003,"openfl.display.DisplayObject.get_cacheAsBitmap","openfl/display/DisplayObject.hx",1017,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1017)		return this->_hx___cacheAsBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmap,return )

Bool DisplayObject_obj::set_cacheAsBitmap(Bool value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_cacheAsBitmap",0xc89ee80f,"openfl.display.DisplayObject.set_cacheAsBitmap","openfl/display/DisplayObject.hx",1022,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1024)		Bool _hx_tmp = !(this->_hx___renderDirty);
HXDLIN(1024)		if (_hx_tmp) {
HXLINE(1024)			this->_hx___updateCachedBitmap = true;
HXDLIN(1024)			Bool _hx_tmp1;
HXDLIN(1024)			::Array< ::Dynamic> _hx_tmp2 = this->get_filters();
HXDLIN(1024)			Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp2 );
HXDLIN(1024)			if (_hx_tmp3) {
HXLINE(1024)				_hx_tmp1 = (this->get_filters()->length > (int)0);
            			}
            			else {
HXLINE(1024)				_hx_tmp1 = false;
            			}
HXDLIN(1024)			this->_hx___updateFilters = _hx_tmp1;
HXDLIN(1024)			this->_hx___renderDirty = true;
HXDLIN(1024)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE(1025)		Bool _hx_tmp4;
HXDLIN(1025)		if (this->_hx___forceCacheAsBitmap) {
HXLINE(1025)			_hx_tmp4 = true;
            		}
            		else {
HXLINE(1025)			_hx_tmp4 = value;
            		}
HXDLIN(1025)		return (this->_hx___cacheAsBitmap = _hx_tmp4);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmap,return )

 ::openfl::geom::Matrix DisplayObject_obj::get_cacheAsBitmapMatrix(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_cacheAsBitmapMatrix",0xe47a1ea4,"openfl.display.DisplayObject.get_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",1032,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1032)		return this->_hx___cacheAsBitmapMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmapMatrix,return )

 ::openfl::geom::Matrix DisplayObject_obj::set_cacheAsBitmapMatrix( ::openfl::geom::Matrix value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_cacheAsBitmapMatrix",0xe6db87b0,"openfl.display.DisplayObject.set_cacheAsBitmapMatrix","openfl/display/DisplayObject.hx",1037,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1039)		Bool _hx_tmp = !(this->_hx___renderDirty);
HXDLIN(1039)		if (_hx_tmp) {
HXLINE(1039)			this->_hx___updateCachedBitmap = true;
HXDLIN(1039)			Bool _hx_tmp1;
HXDLIN(1039)			::Array< ::Dynamic> _hx_tmp2 = this->get_filters();
HXDLIN(1039)			Bool _hx_tmp3 = hx::IsNotNull( _hx_tmp2 );
HXDLIN(1039)			if (_hx_tmp3) {
HXLINE(1039)				_hx_tmp1 = (this->get_filters()->length > (int)0);
            			}
            			else {
HXLINE(1039)				_hx_tmp1 = false;
            			}
HXDLIN(1039)			this->_hx___updateFilters = _hx_tmp1;
HXDLIN(1039)			this->_hx___renderDirty = true;
HXDLIN(1039)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE(1040)		return (this->_hx___cacheAsBitmapMatrix = value->clone());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmapMatrix,return )

Bool DisplayObject_obj::get_cacheAsBitmapSmooth(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_cacheAsBitmapSmooth",0x301cf091,"openfl.display.DisplayObject.get_cacheAsBitmapSmooth","openfl/display/DisplayObject.hx",1047,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1047)		return this->_hx___cacheAsBitmapSmooth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_cacheAsBitmapSmooth,return )

Bool DisplayObject_obj::set_cacheAsBitmapSmooth(Bool value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_cacheAsBitmapSmooth",0x327e599d,"openfl.display.DisplayObject.set_cacheAsBitmapSmooth","openfl/display/DisplayObject.hx",1054,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1054)		return (this->_hx___cacheAsBitmapSmooth = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_cacheAsBitmapSmooth,return )

::Array< ::Dynamic> DisplayObject_obj::get_filters(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_filters",0x661396db,"openfl.display.DisplayObject.get_filters","openfl/display/DisplayObject.hx",1061,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1061)		Bool _hx_tmp = hx::IsNull( this->_hx___filters );
HXDLIN(1061)		if (_hx_tmp) {
HXLINE(1063)			return ::Array_obj< ::Dynamic>::__new();
            		}
            		else {
HXLINE(1067)			return this->_hx___filters->copy();
            		}
HXLINE(1061)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_filters,return )

::Array< ::Dynamic> DisplayObject_obj::set_filters(::Array< ::Dynamic> value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_filters",0x70809de7,"openfl.display.DisplayObject.set_filters","openfl/display/DisplayObject.hx",1074,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1076)		Bool _hx_tmp;
HXDLIN(1076)		Bool _hx_tmp1 = hx::IsNotNull( value );
HXDLIN(1076)		if (_hx_tmp1) {
HXLINE(1076)			_hx_tmp = (value->length > (int)0);
            		}
            		else {
HXLINE(1076)			_hx_tmp = false;
            		}
HXDLIN(1076)		if (_hx_tmp) {
HXLINE(1078)			this->_hx___filters = value;
HXLINE(1079)			this->_hx___forceCacheAsBitmap = true;
HXLINE(1080)			this->_hx___cacheAsBitmap = true;
HXLINE(1081)			this->_hx___updateFilters = true;
            		}
            		else {
HXLINE(1085)			this->_hx___filters = null();
HXLINE(1086)			this->_hx___forceCacheAsBitmap = false;
HXLINE(1087)			this->_hx___cacheAsBitmap = false;
HXLINE(1088)			this->_hx___updateFilters = false;
            		}
HXLINE(1092)		Bool _hx_tmp2 = !(this->_hx___renderDirty);
HXDLIN(1092)		if (_hx_tmp2) {
HXLINE(1092)			this->_hx___updateCachedBitmap = true;
HXDLIN(1092)			Bool _hx_tmp3;
HXDLIN(1092)			::Array< ::Dynamic> _hx_tmp4 = this->get_filters();
HXDLIN(1092)			Bool _hx_tmp5 = hx::IsNotNull( _hx_tmp4 );
HXDLIN(1092)			if (_hx_tmp5) {
HXLINE(1092)				_hx_tmp3 = (this->get_filters()->length > (int)0);
            			}
            			else {
HXLINE(1092)				_hx_tmp3 = false;
            			}
HXDLIN(1092)			this->_hx___updateFilters = _hx_tmp3;
HXDLIN(1092)			this->_hx___renderDirty = true;
HXDLIN(1092)			::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            		}
HXLINE(1094)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_filters,return )

Float DisplayObject_obj::get_height(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_height",0x7d8c16c7,"openfl.display.DisplayObject.get_height","openfl/display/DisplayObject.hx",1099,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1101)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(1102)		this->_hx___getBounds(bounds,this->_hx___transform);
HXLINE(1104)		return bounds->height;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_height,return )

Float DisplayObject_obj::set_height(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_height",0x8109b53b,"openfl.display.DisplayObject.set_height","openfl/display/DisplayObject.hx",1109,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1111)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(1113)		HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE(1114)		matrix->identity();
HXLINE(1116)		this->_hx___getBounds(bounds,matrix);
HXLINE(1118)		Bool _hx_tmp = (value != bounds->height);
HXDLIN(1118)		if (_hx_tmp) {
HXLINE(1120)			Float _hx_tmp1 = ((Float)value / (Float)bounds->height);
HXDLIN(1120)			this->set_scaleY(_hx_tmp1);
            		}
            		else {
HXLINE(1124)			this->set_scaleY((int)1);
            		}
HXLINE(1128)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_height,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_mask(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_mask",0xd81ad7cc,"openfl.display.DisplayObject.get_mask","openfl/display/DisplayObject.hx",1135,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1135)		return this->_hx___mask;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mask,return )

 ::openfl::display::DisplayObject DisplayObject_obj::set_mask( ::openfl::display::DisplayObject value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_mask",0x86783140,"openfl.display.DisplayObject.set_mask","openfl/display/DisplayObject.hx",1140,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1142)		if (hx::IsNotEq( value,this->_hx___mask )) {
HXLINE(1143)			Bool _hx_tmp = !(this->_hx___transformDirty);
HXDLIN(1143)			if (_hx_tmp) {
HXLINE(1143)				this->_hx___transformDirty = true;
HXDLIN(1143)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1144)			Bool _hx_tmp1 = !(this->_hx___renderDirty);
HXDLIN(1144)			if (_hx_tmp1) {
HXLINE(1144)				this->_hx___updateCachedBitmap = true;
HXDLIN(1144)				Bool _hx_tmp2;
HXDLIN(1144)				::Array< ::Dynamic> _hx_tmp3 = this->get_filters();
HXDLIN(1144)				Bool _hx_tmp4 = hx::IsNotNull( _hx_tmp3 );
HXDLIN(1144)				if (_hx_tmp4) {
HXLINE(1144)					_hx_tmp2 = (this->get_filters()->length > (int)0);
            				}
            				else {
HXLINE(1144)					_hx_tmp2 = false;
            				}
HXDLIN(1144)				this->_hx___updateFilters = _hx_tmp2;
HXDLIN(1144)				this->_hx___renderDirty = true;
HXDLIN(1144)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE(1146)		Bool _hx_tmp5 = hx::IsNotNull( this->_hx___mask );
HXDLIN(1146)		if (_hx_tmp5) {
HXLINE(1147)			this->_hx___mask->_hx___isMask = false;
HXLINE(1148)			this->_hx___mask->_hx___maskCached = false;
HXLINE(1149)			{
HXLINE(1149)				HX_VARI(  ::openfl::display::DisplayObject,_this) = this->_hx___mask;
HXDLIN(1149)				Bool _hx_tmp6 = !(_this->_hx___transformDirty);
HXDLIN(1149)				if (_hx_tmp6) {
HXLINE(1149)					_this->_hx___transformDirty = true;
HXDLIN(1149)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1150)			{
HXLINE(1150)				HX_VARI_NAME(  ::openfl::display::DisplayObject,_this1,"_this") = this->_hx___mask;
HXDLIN(1150)				Bool _hx_tmp7 = !(_this1->_hx___renderDirty);
HXDLIN(1150)				if (_hx_tmp7) {
HXLINE(1150)					_this1->_hx___updateCachedBitmap = true;
HXDLIN(1150)					Bool _hx_tmp8;
HXDLIN(1150)					::Array< ::Dynamic> _hx_tmp9 = _this1->get_filters();
HXDLIN(1150)					Bool _hx_tmp10 = hx::IsNotNull( _hx_tmp9 );
HXDLIN(1150)					if (_hx_tmp10) {
HXLINE(1150)						_hx_tmp8 = (_this1->get_filters()->length > (int)0);
            					}
            					else {
HXLINE(1150)						_hx_tmp8 = false;
            					}
HXDLIN(1150)					_this1->_hx___updateFilters = _hx_tmp8;
HXDLIN(1150)					_this1->_hx___renderDirty = true;
HXDLIN(1150)					::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            				}
            			}
HXLINE(1151)			this->_hx___maskGraphics = null();
            		}
HXLINE(1153)		Bool _hx_tmp11 = hx::IsNotNull( value );
HXDLIN(1153)		if (_hx_tmp11) {
HXLINE(1153)			value->_hx___isMask = true;
            		}
HXLINE(1154)		return (this->_hx___mask = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_mask,return )

Float DisplayObject_obj::get_mouseX(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_mouseX",0x474e5973,"openfl.display.DisplayObject.get_mouseX","openfl/display/DisplayObject.hx",1159,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1161)		HX_VAR( Float,mouseX);
HXDLIN(1161)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(1161)		if (_hx_tmp) {
HXLINE(1161)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1161)			mouseX = ::openfl::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1162)		HX_VAR( Float,mouseY);
HXDLIN(1162)		Bool _hx_tmp1 = hx::IsNotNull( this->stage );
HXDLIN(1162)		if (_hx_tmp1) {
HXLINE(1162)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1162)			mouseY = ::openfl::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1164)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getWorldTransform();
HXDLIN(1164)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1164)		if ((norm == (int)0)) {
HXLINE(1164)			return -(_this->tx);
            		}
            		else {
HXLINE(1164)			return (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - mouseY)) + (_this->d * (mouseX - _this->tx))));
            		}
HXDLIN(1164)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseX,return )

Float DisplayObject_obj::get_mouseY(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_mouseY",0x474e5974,"openfl.display.DisplayObject.get_mouseY","openfl/display/DisplayObject.hx",1169,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1171)		HX_VAR( Float,mouseX);
HXDLIN(1171)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(1171)		if (_hx_tmp) {
HXLINE(1171)			mouseX = this->stage->_hx___mouseX;
            		}
            		else {
HXLINE(1171)			mouseX = ::openfl::Lib_obj::current->stage->_hx___mouseX;
            		}
HXLINE(1172)		HX_VAR( Float,mouseY);
HXDLIN(1172)		Bool _hx_tmp1 = hx::IsNotNull( this->stage );
HXDLIN(1172)		if (_hx_tmp1) {
HXLINE(1172)			mouseY = this->stage->_hx___mouseY;
            		}
            		else {
HXLINE(1172)			mouseY = ::openfl::Lib_obj::current->stage->_hx___mouseY;
            		}
HXLINE(1174)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___getWorldTransform();
HXDLIN(1174)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN(1174)		if ((norm == (int)0)) {
HXLINE(1174)			return -(_this->ty);
            		}
            		else {
HXLINE(1174)			return (((Float)((Float)1.0) / (Float)norm) * ((_this->a * (mouseY - _this->ty)) + (_this->b * (_this->tx - mouseX))));
            		}
HXDLIN(1174)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_mouseY,return )

::String DisplayObject_obj::get_name(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_name",0xd8c4092b,"openfl.display.DisplayObject.get_name","openfl/display/DisplayObject.hx",1181,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1181)		return this->_hx___name;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_name,return )

::String DisplayObject_obj::set_name(::String value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_name",0x8721629f,"openfl.display.DisplayObject.set_name","openfl/display/DisplayObject.hx",1188,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1188)		return (this->_hx___name = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_name,return )

 ::openfl::display::DisplayObject DisplayObject_obj::get_root(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_root",0xdb738502,"openfl.display.DisplayObject.get_root","openfl/display/DisplayObject.hx",1193,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1195)		Bool _hx_tmp = hx::IsNotNull( this->stage );
HXDLIN(1195)		if (_hx_tmp) {
HXLINE(1197)			return ::openfl::Lib_obj::current;
            		}
HXLINE(1201)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_root,return )

Float DisplayObject_obj::get_rotation(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_rotation",0xdf0fc41e,"openfl.display.DisplayObject.get_rotation","openfl/display/DisplayObject.hx",1208,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1208)		return this->_hx___rotation;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_rotation,return )

Float DisplayObject_obj::set_rotation(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_rotation",0xf408e792,"openfl.display.DisplayObject.set_rotation","openfl/display/DisplayObject.hx",1213,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1215)		Bool _hx_tmp = (value != this->_hx___rotation);
HXDLIN(1215)		if (_hx_tmp) {
HXLINE(1217)			this->_hx___rotation = value;
HXLINE(1218)			HX_VARI( Float,radians) = (this->_hx___rotation * ((Float)::Math_obj::PI / (Float)(int)180));
HXLINE(1219)			this->_hx___rotationSine = ::Math_obj::sin(radians);
HXLINE(1220)			this->_hx___rotationCosine = ::Math_obj::cos(radians);
HXLINE(1222)			HX_VARI_NAME( Float,_hx___scaleX,"__scaleX") = this->get_scaleX();
HXLINE(1223)			HX_VARI_NAME( Float,_hx___scaleY,"__scaleY") = this->get_scaleY();
HXLINE(1225)			this->_hx___transform->a = (this->_hx___rotationCosine * _hx___scaleX);
HXLINE(1226)			this->_hx___transform->b = (this->_hx___rotationSine * _hx___scaleX);
HXLINE(1227)			this->_hx___transform->c = (-(this->_hx___rotationSine) * _hx___scaleY);
HXLINE(1228)			this->_hx___transform->d = (this->_hx___rotationCosine * _hx___scaleY);
HXLINE(1230)			Bool _hx_tmp1 = !(this->_hx___transformDirty);
HXDLIN(1230)			if (_hx_tmp1) {
HXLINE(1230)				this->_hx___transformDirty = true;
HXDLIN(1230)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1234)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_rotation,return )

Float DisplayObject_obj::get_scaleX(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_scaleX",0xb765f96e,"openfl.display.DisplayObject.get_scaleX","openfl/display/DisplayObject.hx",1241,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1241)		Bool _hx_tmp = (this->_hx___transform->b == (int)0);
HXDLIN(1241)		if (_hx_tmp) {
HXLINE(1243)			return this->_hx___transform->a;
            		}
            		else {
HXLINE(1247)			Float _hx_tmp1 = ((this->_hx___transform->a * this->_hx___transform->a) + (this->_hx___transform->b * this->_hx___transform->b));
HXDLIN(1247)			return ::Math_obj::sqrt(_hx_tmp1);
            		}
HXLINE(1241)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleX,return )

Float DisplayObject_obj::set_scaleX(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_scaleX",0xbae397e2,"openfl.display.DisplayObject.set_scaleX","openfl/display/DisplayObject.hx",1254,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1256)		Bool _hx_tmp = (this->_hx___transform->c == (int)0);
HXDLIN(1256)		if (_hx_tmp) {
HXLINE(1258)			Bool _hx_tmp1 = (value != this->_hx___transform->a);
HXDLIN(1258)			if (_hx_tmp1) {
HXLINE(1258)				Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1258)				if (_hx_tmp2) {
HXLINE(1258)					this->_hx___transformDirty = true;
HXDLIN(1258)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1259)			this->_hx___transform->a = value;
            		}
            		else {
HXLINE(1263)			HX_VARI( Float,a) = (this->_hx___rotationCosine * value);
HXLINE(1264)			HX_VARI( Float,b) = (this->_hx___rotationSine * value);
HXLINE(1266)			Bool _hx_tmp3;
HXDLIN(1266)			if ((this->_hx___transform->a == a)) {
HXLINE(1266)				_hx_tmp3 = (this->_hx___transform->b != b);
            			}
            			else {
HXLINE(1266)				_hx_tmp3 = true;
            			}
HXDLIN(1266)			if (_hx_tmp3) {
HXLINE(1268)				Bool _hx_tmp4 = !(this->_hx___transformDirty);
HXDLIN(1268)				if (_hx_tmp4) {
HXLINE(1268)					this->_hx___transformDirty = true;
HXDLIN(1268)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1272)			this->_hx___transform->a = a;
HXLINE(1273)			this->_hx___transform->b = b;
            		}
HXLINE(1277)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleX,return )

Float DisplayObject_obj::get_scaleY(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_scaleY",0xb765f96f,"openfl.display.DisplayObject.get_scaleY","openfl/display/DisplayObject.hx",1284,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1284)		Bool _hx_tmp = (this->_hx___transform->c == (int)0);
HXDLIN(1284)		if (_hx_tmp) {
HXLINE(1286)			return this->_hx___transform->d;
            		}
            		else {
HXLINE(1290)			Float _hx_tmp1 = ((this->_hx___transform->c * this->_hx___transform->c) + (this->_hx___transform->d * this->_hx___transform->d));
HXDLIN(1290)			return ::Math_obj::sqrt(_hx_tmp1);
            		}
HXLINE(1284)		return ((Float)0.);
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scaleY,return )

Float DisplayObject_obj::set_scaleY(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_scaleY",0xbae397e3,"openfl.display.DisplayObject.set_scaleY","openfl/display/DisplayObject.hx",1297,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1299)		Bool _hx_tmp = (this->_hx___transform->c == (int)0);
HXDLIN(1299)		if (_hx_tmp) {
HXLINE(1301)			Bool _hx_tmp1 = (value != this->_hx___transform->d);
HXDLIN(1301)			if (_hx_tmp1) {
HXLINE(1301)				Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1301)				if (_hx_tmp2) {
HXLINE(1301)					this->_hx___transformDirty = true;
HXDLIN(1301)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1302)			this->_hx___transform->d = value;
            		}
            		else {
HXLINE(1306)			HX_VARI( Float,c) = (-(this->_hx___rotationSine) * value);
HXLINE(1307)			HX_VARI( Float,d) = (this->_hx___rotationCosine * value);
HXLINE(1309)			Bool _hx_tmp3;
HXDLIN(1309)			if ((this->_hx___transform->d == d)) {
HXLINE(1309)				_hx_tmp3 = (this->_hx___transform->c != c);
            			}
            			else {
HXLINE(1309)				_hx_tmp3 = true;
            			}
HXDLIN(1309)			if (_hx_tmp3) {
HXLINE(1311)				Bool _hx_tmp4 = !(this->_hx___transformDirty);
HXDLIN(1311)				if (_hx_tmp4) {
HXLINE(1311)					this->_hx___transformDirty = true;
HXDLIN(1311)					::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            				}
            			}
HXLINE(1315)			this->_hx___transform->c = c;
HXLINE(1316)			this->_hx___transform->d = d;
            		}
HXLINE(1320)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scaleY,return )

 ::openfl::geom::Rectangle DisplayObject_obj::get_scrollRect(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_scrollRect",0xba87dab1,"openfl.display.DisplayObject.get_scrollRect","openfl/display/DisplayObject.hx",1325,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1327)		Bool _hx_tmp = hx::IsNull( this->_hx___scrollRect );
HXDLIN(1327)		if (_hx_tmp) {
HXLINE(1327)			return null();
            		}
HXLINE(1329)		return this->_hx___scrollRect->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_scrollRect,return )

 ::openfl::geom::Rectangle DisplayObject_obj::set_scrollRect( ::openfl::geom::Rectangle value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_scrollRect",0xdaa7c325,"openfl.display.DisplayObject.set_scrollRect","openfl/display/DisplayObject.hx",1334,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1336)		if (hx::IsNotEq( value,this->_hx___scrollRect )) {
HXLINE(1338)			Bool _hx_tmp = !(this->_hx___transformDirty);
HXDLIN(1338)			if (_hx_tmp) {
HXLINE(1338)				this->_hx___transformDirty = true;
HXDLIN(1338)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1343)		return (this->_hx___scrollRect = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_scrollRect,return )

 ::openfl::geom::Transform DisplayObject_obj::get_transform(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_transform",0x275faa8c,"openfl.display.DisplayObject.get_transform","openfl/display/DisplayObject.hx",1348,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1350)		Bool _hx_tmp = hx::IsNull( this->_hx___objectTransform );
HXDLIN(1350)		if (_hx_tmp) {
HXLINE(1352)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1356)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_transform,return )

 ::openfl::geom::Transform DisplayObject_obj::set_transform( ::openfl::geom::Transform value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_transform",0x6c658c98,"openfl.display.DisplayObject.set_transform","openfl/display/DisplayObject.hx",1361,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1363)		Bool _hx_tmp = hx::IsNull( value );
HXDLIN(1363)		if (_hx_tmp) {
HXLINE(1365)			HX_STACK_DO_THROW( ::openfl::errors::TypeError_obj::__new(HX_("Parameter transform must be non-null.",56,12,fe,6e)));
            		}
HXLINE(1369)		Bool _hx_tmp1 = hx::IsNull( this->_hx___objectTransform );
HXDLIN(1369)		if (_hx_tmp1) {
HXLINE(1371)			this->_hx___objectTransform =  ::openfl::geom::Transform_obj::__new(hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(1375)		Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1375)		if (_hx_tmp2) {
HXLINE(1375)			this->_hx___transformDirty = true;
HXDLIN(1375)			::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            		}
HXLINE(1376)		 ::openfl::geom::Matrix _hx_tmp3 = value->get_matrix();
HXDLIN(1376)		this->_hx___objectTransform->set_matrix(_hx_tmp3);
HXLINE(1377)		 ::openfl::geom::ColorTransform _hx_tmp4 = value->get_colorTransform()->_hx___clone();
HXDLIN(1377)		this->_hx___objectTransform->set_colorTransform(_hx_tmp4);
HXLINE(1379)		return this->_hx___objectTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_transform,return )

Bool DisplayObject_obj::get_visible(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_visible",0xfff16d92,"openfl.display.DisplayObject.get_visible","openfl/display/DisplayObject.hx",1386,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1386)		return this->_hx___visible;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_visible,return )

Bool DisplayObject_obj::set_visible(Bool value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_visible",0x0a5e749e,"openfl.display.DisplayObject.set_visible","openfl/display/DisplayObject.hx",1391,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1393)		Bool _hx_tmp = (value != this->_hx___visible);
HXDLIN(1393)		if (_hx_tmp) {
HXLINE(1393)			Bool _hx_tmp1 = !(this->_hx___renderDirty);
HXDLIN(1393)			if (_hx_tmp1) {
HXLINE(1393)				this->_hx___updateCachedBitmap = true;
HXDLIN(1393)				Bool _hx_tmp2;
HXDLIN(1393)				::Array< ::Dynamic> _hx_tmp3 = this->get_filters();
HXDLIN(1393)				Bool _hx_tmp4 = hx::IsNotNull( _hx_tmp3 );
HXDLIN(1393)				if (_hx_tmp4) {
HXLINE(1393)					_hx_tmp2 = (this->get_filters()->length > (int)0);
            				}
            				else {
HXLINE(1393)					_hx_tmp2 = false;
            				}
HXDLIN(1393)				this->_hx___updateFilters = _hx_tmp2;
HXDLIN(1393)				this->_hx___renderDirty = true;
HXDLIN(1393)				::openfl::display::DisplayObject_obj::_hx___worldRenderDirty++;
            			}
            		}
HXLINE(1394)		return (this->_hx___visible = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_visible,return )

Float DisplayObject_obj::get_width(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_width",0x06a22326,"openfl.display.DisplayObject.get_width","openfl/display/DisplayObject.hx",1399,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1401)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(1402)		this->_hx___getBounds(bounds,this->_hx___transform);
HXLINE(1404)		return bounds->width;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_width,return )

Float DisplayObject_obj::set_width(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_width",0xe9f30f32,"openfl.display.DisplayObject.set_width","openfl/display/DisplayObject.hx",1409,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1411)		HX_VARI(  ::openfl::geom::Rectangle,bounds) =  ::openfl::geom::Rectangle_obj::__new(null(),null(),null(),null());
HXLINE(1413)		HX_VARI(  ::openfl::geom::Matrix,matrix) = ::openfl::geom::Matrix_obj::_hx___temp;
HXLINE(1414)		matrix->identity();
HXLINE(1416)		this->_hx___getBounds(bounds,matrix);
HXLINE(1418)		Bool _hx_tmp = (value != bounds->width);
HXDLIN(1418)		if (_hx_tmp) {
HXLINE(1420)			Float _hx_tmp1 = ((Float)value / (Float)bounds->width);
HXDLIN(1420)			this->set_scaleX(_hx_tmp1);
            		}
            		else {
HXLINE(1424)			this->set_scaleX((int)1);
            		}
HXLINE(1428)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_width,return )

Float DisplayObject_obj::get_x(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_x",0xc67a5d98,"openfl.display.DisplayObject.get_x","openfl/display/DisplayObject.hx",1435,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1435)		return this->_hx___transform->tx;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_x,return )

Float DisplayObject_obj::set_x(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_x",0xaf4953a4,"openfl.display.DisplayObject.set_x","openfl/display/DisplayObject.hx",1440,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1442)		Bool _hx_tmp = (value != this->_hx___transform->tx);
HXDLIN(1442)		if (_hx_tmp) {
HXLINE(1442)			Bool _hx_tmp1 = !(this->_hx___transformDirty);
HXDLIN(1442)			if (_hx_tmp1) {
HXLINE(1442)				this->_hx___transformDirty = true;
HXDLIN(1442)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1443)		return (this->_hx___transform->tx = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_x,return )

Float DisplayObject_obj::get_y(){
            	HX_STACK_FRAME("openfl.display.DisplayObject","get_y",0xc67a5d99,"openfl.display.DisplayObject.get_y","openfl/display/DisplayObject.hx",1450,0xc7539829)
            	HX_STACK_THIS(this)
HXLINE(1450)		return this->_hx___transform->ty;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DisplayObject_obj,get_y,return )

Float DisplayObject_obj::set_y(Float value){
            	HX_STACK_FRAME("openfl.display.DisplayObject","set_y",0xaf4953a5,"openfl.display.DisplayObject.set_y","openfl/display/DisplayObject.hx",1455,0xc7539829)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1457)		Bool _hx_tmp = (value != this->_hx___transform->ty);
HXDLIN(1457)		if (_hx_tmp) {
HXLINE(1457)			Bool _hx_tmp1 = !(this->_hx___transformDirty);
HXDLIN(1457)			if (_hx_tmp1) {
HXLINE(1457)				this->_hx___transformDirty = true;
HXDLIN(1457)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
            		}
HXLINE(1458)		return (this->_hx___transform->ty = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DisplayObject_obj,set_y,return )

Int DisplayObject_obj::_hx___instanceCount;

Int DisplayObject_obj::_hx___worldRenderDirty;

Int DisplayObject_obj::_hx___worldTransformDirty;

Bool DisplayObject_obj::_hx___cacheAsBitmapMode;


DisplayObject_obj::DisplayObject_obj()
{
	HX_INIT_IMPLEMENT_DYNAMIC;
}

void DisplayObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DisplayObject);
	HX_MARK_DYNAMIC;
	HX_MARK_MEMBER_NAME(blendMode,"blendMode");
	HX_MARK_MEMBER_NAME(cacheAsBitmapBounds,"cacheAsBitmapBounds");
	HX_MARK_MEMBER_NAME(loaderInfo,"loaderInfo");
	HX_MARK_MEMBER_NAME(mouseX,"mouseX");
	HX_MARK_MEMBER_NAME(mouseY,"mouseY");
	HX_MARK_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(root,"root");
	HX_MARK_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_MARK_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_MARK_MEMBER_NAME(_hx___worldOffset,"__worldOffset");
	HX_MARK_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_MARK_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_MARK_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_MARK_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_MARK_MEMBER_NAME(_hx___children,"__children");
	HX_MARK_MEMBER_NAME(_hx___filters,"__filters");
	HX_MARK_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_MARK_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_MARK_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_MARK_MEMBER_NAME(_hx___mask,"__mask");
	HX_MARK_MEMBER_NAME(_hx___maskGraphics,"__maskGraphics");
	HX_MARK_MEMBER_NAME(_hx___maskCached,"__maskCached");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	HX_MARK_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_MARK_MEMBER_NAME(_hx___offset,"__offset");
	HX_MARK_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_MARK_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_MARK_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_MARK_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_MARK_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_MARK_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_MARK_MEMBER_NAME(_hx___shader,"__shader");
	HX_MARK_MEMBER_NAME(_hx___transform,"__transform");
	HX_MARK_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_MARK_MEMBER_NAME(_hx___visible,"__visible");
	HX_MARK_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_MARK_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_MARK_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_MARK_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_MARK_MEMBER_NAME(_hx___worldTransformCache,"__worldTransformCache");
	HX_MARK_MEMBER_NAME(_hx___worldTransformChanged,"__worldTransformChanged");
	HX_MARK_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_MARK_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_MARK_MEMBER_NAME(_hx___worldZ,"__worldZ");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_MARK_MEMBER_NAME(_hx___cacheAsBitmapSmooth,"__cacheAsBitmapSmooth");
	HX_MARK_MEMBER_NAME(_hx___forceCacheAsBitmap,"__forceCacheAsBitmap");
	HX_MARK_MEMBER_NAME(_hx___updateCachedBitmap,"__updateCachedBitmap");
	HX_MARK_MEMBER_NAME(_hx___cachedBitmap,"__cachedBitmap");
	HX_MARK_MEMBER_NAME(_hx___cachedBitmapBounds,"__cachedBitmapBounds");
	HX_MARK_MEMBER_NAME(_hx___cachedFilterBounds,"__cachedFilterBounds");
	HX_MARK_MEMBER_NAME(_hx___cacheGLMatrix,"__cacheGLMatrix");
	HX_MARK_MEMBER_NAME(_hx___updateFilters,"__updateFilters");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DisplayObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_DYNAMIC;
	HX_VISIT_MEMBER_NAME(blendMode,"blendMode");
	HX_VISIT_MEMBER_NAME(cacheAsBitmapBounds,"cacheAsBitmapBounds");
	HX_VISIT_MEMBER_NAME(loaderInfo,"loaderInfo");
	HX_VISIT_MEMBER_NAME(mouseX,"mouseX");
	HX_VISIT_MEMBER_NAME(mouseY,"mouseY");
	HX_VISIT_MEMBER_NAME(opaqueBackground,"opaqueBackground");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(root,"root");
	HX_VISIT_MEMBER_NAME(scale9Grid,"scale9Grid");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(_hx___renderTransform,"__renderTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldColorTransform,"__worldColorTransform");
	HX_VISIT_MEMBER_NAME(_hx___worldOffset,"__worldOffset");
	HX_VISIT_MEMBER_NAME(_hx___worldTransform,"__worldTransform");
	HX_VISIT_MEMBER_NAME(_hx___alpha,"__alpha");
	HX_VISIT_MEMBER_NAME(_hx___blendMode,"__blendMode");
	HX_VISIT_MEMBER_NAME(_hx___cairo,"__cairo");
	HX_VISIT_MEMBER_NAME(_hx___children,"__children");
	HX_VISIT_MEMBER_NAME(_hx___filters,"__filters");
	HX_VISIT_MEMBER_NAME(_hx___graphics,"__graphics");
	HX_VISIT_MEMBER_NAME(_hx___interactive,"__interactive");
	HX_VISIT_MEMBER_NAME(_hx___isMask,"__isMask");
	HX_VISIT_MEMBER_NAME(_hx___mask,"__mask");
	HX_VISIT_MEMBER_NAME(_hx___maskGraphics,"__maskGraphics");
	HX_VISIT_MEMBER_NAME(_hx___maskCached,"__maskCached");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	HX_VISIT_MEMBER_NAME(_hx___objectTransform,"__objectTransform");
	HX_VISIT_MEMBER_NAME(_hx___offset,"__offset");
	HX_VISIT_MEMBER_NAME(_hx___renderable,"__renderable");
	HX_VISIT_MEMBER_NAME(_hx___renderDirty,"__renderDirty");
	HX_VISIT_MEMBER_NAME(_hx___rotation,"__rotation");
	HX_VISIT_MEMBER_NAME(_hx___rotationCosine,"__rotationCosine");
	HX_VISIT_MEMBER_NAME(_hx___rotationSine,"__rotationSine");
	HX_VISIT_MEMBER_NAME(_hx___scrollRect,"__scrollRect");
	HX_VISIT_MEMBER_NAME(_hx___shader,"__shader");
	HX_VISIT_MEMBER_NAME(_hx___transform,"__transform");
	HX_VISIT_MEMBER_NAME(_hx___transformDirty,"__transformDirty");
	HX_VISIT_MEMBER_NAME(_hx___visible,"__visible");
	HX_VISIT_MEMBER_NAME(_hx___worldAlpha,"__worldAlpha");
	HX_VISIT_MEMBER_NAME(_hx___worldAlphaChanged,"__worldAlphaChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldClip,"__worldClip");
	HX_VISIT_MEMBER_NAME(_hx___worldClipChanged,"__worldClipChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldTransformCache,"__worldTransformCache");
	HX_VISIT_MEMBER_NAME(_hx___worldTransformChanged,"__worldTransformChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldVisible,"__worldVisible");
	HX_VISIT_MEMBER_NAME(_hx___worldVisibleChanged,"__worldVisibleChanged");
	HX_VISIT_MEMBER_NAME(_hx___worldZ,"__worldZ");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmap,"__cacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmapMatrix,"__cacheAsBitmapMatrix");
	HX_VISIT_MEMBER_NAME(_hx___cacheAsBitmapSmooth,"__cacheAsBitmapSmooth");
	HX_VISIT_MEMBER_NAME(_hx___forceCacheAsBitmap,"__forceCacheAsBitmap");
	HX_VISIT_MEMBER_NAME(_hx___updateCachedBitmap,"__updateCachedBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cachedBitmap,"__cachedBitmap");
	HX_VISIT_MEMBER_NAME(_hx___cachedBitmapBounds,"__cachedBitmapBounds");
	HX_VISIT_MEMBER_NAME(_hx___cachedFilterBounds,"__cachedFilterBounds");
	HX_VISIT_MEMBER_NAME(_hx___cacheGLMatrix,"__cacheGLMatrix");
	HX_VISIT_MEMBER_NAME(_hx___updateFilters,"__updateFilters");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val DisplayObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_x()); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_y()); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_mask()); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_name()); }
		if (HX_FIELD_EQ(inName,"root") ) { return hx::Val( inCallProp == hx::paccAlways ? get_root() : root); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_alpha()); }
		if (HX_FIELD_EQ(inName,"stage") ) { return hx::Val( stage); }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_width()); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return hx::Val( get_x_dyn()); }
		if (HX_FIELD_EQ(inName,"set_x") ) { return hx::Val( set_x_dyn()); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return hx::Val( get_y_dyn()); }
		if (HX_FIELD_EQ(inName,"set_y") ) { return hx::Val( set_y_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_height()); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { return hx::Val( inCallProp == hx::paccAlways ? get_mouseX() : mouseX); }
		if (HX_FIELD_EQ(inName,"mouseY") ) { return hx::Val( inCallProp == hx::paccAlways ? get_mouseY() : mouseY); }
		if (HX_FIELD_EQ(inName,"parent") ) { return hx::Val( parent); }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scaleX()); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scaleY()); }
		if (HX_FIELD_EQ(inName,"shader") ) { return hx::Val( shader); }
		if (HX_FIELD_EQ(inName,"__mask") ) { return hx::Val( _hx___mask); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_filters()); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_visible()); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { return hx::Val( _hx___alpha); }
		if (HX_FIELD_EQ(inName,"__cairo") ) { return hx::Val( _hx___cairo); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_rotation()); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { return hx::Val( _hx___isMask); }
		if (HX_FIELD_EQ(inName,"__offset") ) { return hx::Val( _hx___offset); }
		if (HX_FIELD_EQ(inName,"__shader") ) { return hx::Val( _hx___shader); }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { return hx::Val( _hx___worldZ); }
		if (HX_FIELD_EQ(inName,"__update") ) { return hx::Val( _hx___update_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mask") ) { return hx::Val( get_mask_dyn()); }
		if (HX_FIELD_EQ(inName,"set_mask") ) { return hx::Val( set_mask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_name") ) { return hx::Val( get_name_dyn()); }
		if (HX_FIELD_EQ(inName,"set_name") ) { return hx::Val( set_name_dyn()); }
		if (HX_FIELD_EQ(inName,"get_root") ) { return hx::Val( get_root_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { return hx::Val( blendMode); }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_transform()); }
		if (HX_FIELD_EQ(inName,"__filters") ) { return hx::Val( _hx___filters); }
		if (HX_FIELD_EQ(inName,"__visible") ) { return hx::Val( _hx___visible); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return hx::Val( getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"__cacheGL") ) { return hx::Val( _hx___cacheGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_alpha") ) { return hx::Val( get_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return hx::Val( set_alpha_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { return hx::Val( loaderInfo); }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { return hx::Val( scale9Grid); }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollRect()); }
		if (HX_FIELD_EQ(inName,"__children") ) { return hx::Val( _hx___children); }
		if (HX_FIELD_EQ(inName,"__graphics") ) { return hx::Val( _hx___graphics); }
		if (HX_FIELD_EQ(inName,"__rotation") ) { return hx::Val( _hx___rotation); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"set_shader") ) { return hx::Val( set_shader_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseX") ) { return hx::Val( get_mouseX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_mouseY") ) { return hx::Val( get_mouseY_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scaleX") ) { return hx::Val( get_scaleX_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scaleX") ) { return hx::Val( set_scaleX_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scaleY") ) { return hx::Val( get_scaleY_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scaleY") ) { return hx::Val( set_scaleY_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { return hx::Val( _hx___blendMode); }
		if (HX_FIELD_EQ(inName,"__transform") ) { return hx::Val( _hx___transform); }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { return hx::Val( _hx___worldClip); }
		if (HX_FIELD_EQ(inName,"__broadcast") ) { return hx::Val( _hx___broadcast_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_filters") ) { return hx::Val( get_filters_dyn()); }
		if (HX_FIELD_EQ(inName,"set_filters") ) { return hx::Val( set_filters_dyn()); }
		if (HX_FIELD_EQ(inName,"get_visible") ) { return hx::Val( get_visible_dyn()); }
		if (HX_FIELD_EQ(inName,"set_visible") ) { return hx::Val( set_visible_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskCached") ) { return hx::Val( _hx___maskCached); }
		if (HX_FIELD_EQ(inName,"__renderable") ) { return hx::Val( _hx___renderable); }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { return hx::Val( _hx___scrollRect); }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { return hx::Val( _hx___worldAlpha); }
		if (HX_FIELD_EQ(inName,"hitTestPoint") ) { return hx::Val( hitTestPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateMask") ) { return hx::Val( _hx___updateMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_rotation") ) { return hx::Val( get_rotation_dyn()); }
		if (HX_FIELD_EQ(inName,"set_rotation") ) { return hx::Val( set_rotation_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cacheAsBitmap()); }
		if (HX_FIELD_EQ(inName,"__worldOffset") ) { return hx::Val( _hx___worldOffset); }
		if (HX_FIELD_EQ(inName,"__interactive") ) { return hx::Val( _hx___interactive); }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { return hx::Val( _hx___renderDirty); }
		if (HX_FIELD_EQ(inName,"globalToLocal") ) { return hx::Val( globalToLocal_dyn()); }
		if (HX_FIELD_EQ(inName,"hitTestObject") ) { return hx::Val( hitTestObject_dyn()); }
		if (HX_FIELD_EQ(inName,"localToGlobal") ) { return hx::Val( localToGlobal_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"__preRenderGL") ) { return hx::Val( _hx___preRenderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"set_blendMode") ) { return hx::Val( set_blendMode_dyn()); }
		if (HX_FIELD_EQ(inName,"get_transform") ) { return hx::Val( get_transform_dyn()); }
		if (HX_FIELD_EQ(inName,"set_transform") ) { return hx::Val( set_transform_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__maskGraphics") ) { return hx::Val( _hx___maskGraphics); }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { return hx::Val( _hx___rotationSine); }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { return hx::Val( _hx___worldVisible); }
		if (HX_FIELD_EQ(inName,"__cachedBitmap") ) { return hx::Val( _hx___cachedBitmap); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		if (HX_FIELD_EQ(inName,"__postRenderGL") ) { return hx::Val( _hx___postRenderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollRect") ) { return hx::Val( get_scrollRect_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollRect") ) { return hx::Val( set_scrollRect_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { return hx::Val( _hx___cacheAsBitmap); }
		if (HX_FIELD_EQ(inName,"__cacheGLMatrix") ) { return hx::Val( _hx___cacheGLMatrix); }
		if (HX_FIELD_EQ(inName,"__updateFilters") ) { return hx::Val( _hx___updateFilters); }
		if (HX_FIELD_EQ(inName,"__dispatchEvent") ) { return hx::Val( _hx___dispatchEvent_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { return hx::Val( opaqueBackground); }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { return hx::Val( _hx___worldTransform); }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { return hx::Val( _hx___rotationCosine); }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { return hx::Val( _hx___transformDirty); }
		if (HX_FIELD_EQ(inName,"__getInteractive") ) { return hx::Val( _hx___getInteractive_dyn()); }
		if (HX_FIELD_EQ(inName,"__getLocalBounds") ) { return hx::Val( _hx___getLocalBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__drawGraphicsGL") ) { return hx::Val( _hx___drawGraphicsGL_dyn()); }
		if (HX_FIELD_EQ(inName,"__setRenderDirty") ) { return hx::Val( _hx___setRenderDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateChildren") ) { return hx::Val( _hx___updateChildren_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { return hx::Val( _hx___renderTransform); }
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { return hx::Val( _hx___objectTransform); }
		if (HX_FIELD_EQ(inName,"__getRenderBounds") ) { return hx::Val( _hx___getRenderBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairoMask") ) { return hx::Val( _hx___renderCairoMask_dyn()); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmap") ) { return hx::Val( get_cacheAsBitmap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmap") ) { return hx::Val( set_cacheAsBitmap_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { return hx::Val( _hx___worldClipChanged); }
		if (HX_FIELD_EQ(inName,"__renderCanvasMask") ) { return hx::Val( _hx___renderCanvasMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateTransforms") ) { return hx::Val( _hx___updateTransforms_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cacheAsBitmapMatrix()); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapSmooth") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_cacheAsBitmapSmooth()); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapBounds") ) { return hx::Val( cacheAsBitmapBounds); }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { return hx::Val( _hx___worldAlphaChanged); }
		if (HX_FIELD_EQ(inName,"__getWorldTransform") ) { return hx::Val( _hx___getWorldTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"__setStageReference") ) { return hx::Val( _hx___setStageReference_dyn()); }
		if (HX_FIELD_EQ(inName,"__setTransformDirty") ) { return hx::Val( _hx___setTransformDirty_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__forceCacheAsBitmap") ) { return hx::Val( _hx___forceCacheAsBitmap); }
		if (HX_FIELD_EQ(inName,"__updateCachedBitmap") ) { return hx::Val( _hx___updateCachedBitmap); }
		if (HX_FIELD_EQ(inName,"__cachedBitmapBounds") ) { return hx::Val( _hx___cachedBitmapBounds); }
		if (HX_FIELD_EQ(inName,"__cachedFilterBounds") ) { return hx::Val( _hx___cachedFilterBounds); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { return hx::Val( _hx___worldColorTransform); }
		if (HX_FIELD_EQ(inName,"__worldTransformCache") ) { return hx::Val( _hx___worldTransformCache); }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { return hx::Val( _hx___worldVisibleChanged); }
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { return hx::Val( _hx___cacheAsBitmapMatrix); }
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapSmooth") ) { return hx::Val( _hx___cacheAsBitmapSmooth); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__worldTransformChanged") ) { return hx::Val( _hx___worldTransformChanged); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmapMatrix") ) { return hx::Val( get_cacheAsBitmapMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmapMatrix") ) { return hx::Val( set_cacheAsBitmapMatrix_dyn()); }
		if (HX_FIELD_EQ(inName,"get_cacheAsBitmapSmooth") ) { return hx::Val( get_cacheAsBitmapSmooth_dyn()); }
		if (HX_FIELD_EQ(inName,"set_cacheAsBitmapSmooth") ) { return hx::Val( set_cacheAsBitmapSmooth_dyn()); }
	}
	HX_CHECK_DYNAMIC_GET_FIELD(inName);
	return super::__Field(inName,inCallProp);
}

bool DisplayObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { outValue = _hx___instanceCount; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldRenderDirty") ) { outValue = _hx___worldRenderDirty; return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMode") ) { outValue = _hx___cacheAsBitmapMode; return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldTransformDirty") ) { outValue = _hx___worldTransformDirty; return true; }
	}
	return false;
}

hx::Val DisplayObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_x(inValue) ); }
		if (HX_FIELD_EQ(inName,"y") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_y(inValue) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mask") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_mask(inValue) ); }
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_name(inValue) ); }
		if (HX_FIELD_EQ(inName,"root") ) { root=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_alpha(inValue) ); }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::openfl::display::Stage >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_width(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_height(inValue) ); }
		if (HX_FIELD_EQ(inName,"mouseX") ) { mouseX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseY") ) { mouseY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::openfl::display::DisplayObjectContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleX") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleX(inValue) ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scaleY(inValue) ); }
		if (HX_FIELD_EQ(inName,"shader") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_shader(inValue) );shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__mask") ) { _hx___mask=inValue.Cast<  ::openfl::display::DisplayObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"filters") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_filters(inValue) ); }
		if (HX_FIELD_EQ(inName,"visible") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_visible(inValue) ); }
		if (HX_FIELD_EQ(inName,"__alpha") ) { _hx___alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cairo") ) { _hx___cairo=inValue.Cast<  ::lime::graphics::cairo::Cairo >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_rotation(inValue) ); }
		if (HX_FIELD_EQ(inName,"__isMask") ) { _hx___isMask=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__offset") ) { _hx___offset=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__shader") ) { _hx___shader=inValue.Cast<  ::openfl::display::Shader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldZ") ) { _hx___worldZ=inValue.Cast< Int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"blendMode") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_blendMode(inValue) );blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"transform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_transform(inValue) ); }
		if (HX_FIELD_EQ(inName,"__filters") ) { _hx___filters=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__visible") ) { _hx___visible=inValue.Cast< Bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"loaderInfo") ) { loaderInfo=inValue.Cast<  ::openfl::display::LoaderInfo >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scale9Grid") ) { scale9Grid=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scrollRect") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollRect(inValue) ); }
		if (HX_FIELD_EQ(inName,"__children") ) { _hx___children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__graphics") ) { _hx___graphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotation") ) { _hx___rotation=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__blendMode") ) { _hx___blendMode=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transform") ) { _hx___transform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldClip") ) { _hx___worldClip=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__maskCached") ) { _hx___maskCached=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderable") ) { _hx___renderable=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__scrollRect") ) { _hx___scrollRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlpha") ) { _hx___worldAlpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"cacheAsBitmap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmap(inValue) ); }
		if (HX_FIELD_EQ(inName,"__worldOffset") ) { _hx___worldOffset=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__interactive") ) { _hx___interactive=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__renderDirty") ) { _hx___renderDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__maskGraphics") ) { _hx___maskGraphics=inValue.Cast<  ::openfl::display::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationSine") ) { _hx___rotationSine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisible") ) { _hx___worldVisible=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cachedBitmap") ) { _hx___cachedBitmap=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmap") ) { _hx___cacheAsBitmap=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheGLMatrix") ) { _hx___cacheGLMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__updateFilters") ) { _hx___updateFilters=inValue.Cast< Bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"opaqueBackground") ) { opaqueBackground=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransform") ) { _hx___worldTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__rotationCosine") ) { _hx___rotationCosine=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__transformDirty") ) { _hx___transformDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"__renderTransform") ) { _hx___renderTransform=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__objectTransform") ) { _hx___objectTransform=inValue.Cast<  ::openfl::geom::Transform >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldClipChanged") ) { _hx___worldClipChanged=inValue.Cast< Bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"cacheAsBitmapMatrix") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmapMatrix(inValue) ); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapSmooth") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_cacheAsBitmapSmooth(inValue) ); }
		if (HX_FIELD_EQ(inName,"cacheAsBitmapBounds") ) { cacheAsBitmapBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldAlphaChanged") ) { _hx___worldAlphaChanged=inValue.Cast< Bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"__forceCacheAsBitmap") ) { _hx___forceCacheAsBitmap=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__updateCachedBitmap") ) { _hx___updateCachedBitmap=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cachedBitmapBounds") ) { _hx___cachedBitmapBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cachedFilterBounds") ) { _hx___cachedFilterBounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldColorTransform") ) { _hx___worldColorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldTransformCache") ) { _hx___worldTransformCache=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__worldVisibleChanged") ) { _hx___worldVisibleChanged=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMatrix") ) { _hx___cacheAsBitmapMatrix=inValue.Cast<  ::openfl::geom::Matrix >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapSmooth") ) { _hx___cacheAsBitmapSmooth=inValue.Cast< Bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"__worldTransformChanged") ) { _hx___worldTransformChanged=inValue.Cast< Bool >(); return inValue; }
	}
	try { return super::__SetField(inName,inValue,inCallProp); }
	catch(Dynamic e) { HX_DYNAMIC_SET_FIELD(inName,inValue); }
	return inValue;
}

bool DisplayObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__instanceCount") ) { _hx___instanceCount=ioValue.Cast< Int >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"__worldRenderDirty") ) { _hx___worldRenderDirty=ioValue.Cast< Int >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__cacheAsBitmapMode") ) { _hx___cacheAsBitmapMode=ioValue.Cast< Bool >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__worldTransformDirty") ) { _hx___worldTransformDirty=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void DisplayObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("alpha","\x5e","\xa7","\x96","\x21"));
	outFields->push(HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"));
	outFields->push(HX_HCSTRING("cacheAsBitmap","\xe3","\x82","\x0f","\x6a"));
	outFields->push(HX_HCSTRING("cacheAsBitmapMatrix","\x84","\xf9","\x81","\x95"));
	outFields->push(HX_HCSTRING("cacheAsBitmapSmooth","\x71","\xcb","\x24","\xe1"));
	outFields->push(HX_HCSTRING("cacheAsBitmapBounds","\xb8","\x49","\xd7","\x3f"));
	outFields->push(HX_HCSTRING("filters","\xbb","\xa1","\x46","\x09"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"));
	outFields->push(HX_HCSTRING("mask","\xec","\x40","\x56","\x48"));
	outFields->push(HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"));
	outFields->push(HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"));
	outFields->push(HX_HCSTRING("root","\x22","\xee","\xae","\x4b"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"));
	outFields->push(HX_HCSTRING("scaleX","\x8e","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scaleY","\x8f","\xea","\x25","\x3c"));
	outFields->push(HX_HCSTRING("scrollRect","\xd1","\xdb","\x66","\x09"));
	outFields->push(HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"));
	outFields->push(HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"));
	outFields->push(HX_HCSTRING("transform","\x6c","\x2d","\x93","\x45"));
	outFields->push(HX_HCSTRING("visible","\x72","\x78","\x24","\xa3"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"));
	outFields->push(HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"));
	outFields->push(HX_HCSTRING("__worldOffset","\x65","\x6c","\x25","\x74"));
	outFields->push(HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"));
	outFields->push(HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"));
	outFields->push(HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"));
	outFields->push(HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"));
	outFields->push(HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"));
	outFields->push(HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"));
	outFields->push(HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"));
	outFields->push(HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"));
	outFields->push(HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"));
	outFields->push(HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"));
	outFields->push(HX_HCSTRING("__maskGraphics","\xf7","\x44","\xfd","\x6b"));
	outFields->push(HX_HCSTRING("__maskCached","\x0e","\x09","\x6a","\xfe"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	outFields->push(HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"));
	outFields->push(HX_HCSTRING("__offset","\xb3","\x02","\x6f","\x08"));
	outFields->push(HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"));
	outFields->push(HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"));
	outFields->push(HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"));
	outFields->push(HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"));
	outFields->push(HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"));
	outFields->push(HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"));
	outFields->push(HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"));
	outFields->push(HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"));
	outFields->push(HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"));
	outFields->push(HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"));
	outFields->push(HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"));
	outFields->push(HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"));
	outFields->push(HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"));
	outFields->push(HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"));
	outFields->push(HX_HCSTRING("__worldTransformCache","\x08","\xac","\x78","\xad"));
	outFields->push(HX_HCSTRING("__worldTransformChanged","\x3a","\x40","\xad","\x27"));
	outFields->push(HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"));
	outFields->push(HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"));
	outFields->push(HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"));
	outFields->push(HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"));
	outFields->push(HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"));
	outFields->push(HX_HCSTRING("__cacheAsBitmapSmooth","\x51","\xec","\x18","\x4f"));
	outFields->push(HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb"));
	outFields->push(HX_HCSTRING("__updateCachedBitmap","\x3a","\xd0","\x57","\x9c"));
	outFields->push(HX_HCSTRING("__cachedBitmap","\x91","\x7c","\xd7","\x65"));
	outFields->push(HX_HCSTRING("__cachedBitmapBounds","\xe6","\xb9","\xf6","\x6e"));
	outFields->push(HX_HCSTRING("__cachedFilterBounds","\x6f","\x46","\x2f","\x70"));
	outFields->push(HX_HCSTRING("__cacheGLMatrix","\x68","\x77","\xe7","\xbd"));
	outFields->push(HX_HCSTRING("__updateFilters","\x92","\x3f","\x67","\x5c"));
	HX_APPEND_DYNAMIC_FIELDS(outFields);
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo DisplayObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,blendMode),HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,cacheAsBitmapBounds),HX_HCSTRING("cacheAsBitmapBounds","\xb8","\x49","\xd7","\x3f")},
	{hx::fsObject /*::openfl::display::LoaderInfo*/ ,(int)offsetof(DisplayObject_obj,loaderInfo),HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,mouseX),HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,mouseY),HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,opaqueBackground),HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a")},
	{hx::fsObject /*::openfl::display::DisplayObjectContainer*/ ,(int)offsetof(DisplayObject_obj,parent),HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,root),HX_HCSTRING("root","\x22","\xee","\xae","\x4b")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,scale9Grid),HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(DisplayObject_obj,shader),HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d")},
	{hx::fsObject /*::openfl::display::Stage*/ ,(int)offsetof(DisplayObject_obj,stage),HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___renderTransform),HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1")},
	{hx::fsObject /*::openfl::geom::ColorTransform*/ ,(int)offsetof(DisplayObject_obj,_hx___worldColorTransform),HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(DisplayObject_obj,_hx___worldOffset),HX_HCSTRING("__worldOffset","\x65","\x6c","\x25","\x74")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransform),HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___alpha),HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(DisplayObject_obj,_hx___blendMode),HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a")},
	{hx::fsObject /*::lime::graphics::cairo::Cairo*/ ,(int)offsetof(DisplayObject_obj,_hx___cairo),HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___children),HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(DisplayObject_obj,_hx___filters),HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(DisplayObject_obj,_hx___graphics),HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___interactive),HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___isMask),HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d")},
	{hx::fsObject /*::openfl::display::DisplayObject*/ ,(int)offsetof(DisplayObject_obj,_hx___mask),HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7")},
	{hx::fsObject /*::openfl::display::Graphics*/ ,(int)offsetof(DisplayObject_obj,_hx___maskGraphics),HX_HCSTRING("__maskGraphics","\xf7","\x44","\xfd","\x6b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___maskCached),HX_HCSTRING("__maskCached","\x0e","\x09","\x6a","\xfe")},
	{hx::fsString,(int)offsetof(DisplayObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{hx::fsObject /*::openfl::geom::Transform*/ ,(int)offsetof(DisplayObject_obj,_hx___objectTransform),HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54")},
	{hx::fsObject /*::openfl::geom::Point*/ ,(int)offsetof(DisplayObject_obj,_hx___offset),HX_HCSTRING("__offset","\xb3","\x02","\x6f","\x08")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderable),HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___renderDirty),HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotation),HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationCosine),HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___rotationSine),HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___scrollRect),HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41")},
	{hx::fsObject /*::openfl::display::Shader*/ ,(int)offsetof(DisplayObject_obj,_hx___shader),HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___transform),HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___transformDirty),HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___visible),HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24")},
	{hx::fsFloat,(int)offsetof(DisplayObject_obj,_hx___worldAlpha),HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldAlphaChanged),HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___worldClip),HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldClipChanged),HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___worldTransformCache),HX_HCSTRING("__worldTransformCache","\x08","\xac","\x78","\xad")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldTransformChanged),HX_HCSTRING("__worldTransformChanged","\x3a","\x40","\xad","\x27")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisible),HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___worldVisibleChanged),HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77")},
	{hx::fsInt,(int)offsetof(DisplayObject_obj,_hx___worldZ),HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmap),HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmapMatrix),HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___cacheAsBitmapSmooth),HX_HCSTRING("__cacheAsBitmapSmooth","\x51","\xec","\x18","\x4f")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___forceCacheAsBitmap),HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___updateCachedBitmap),HX_HCSTRING("__updateCachedBitmap","\x3a","\xd0","\x57","\x9c")},
	{hx::fsObject /*::openfl::display::BitmapData*/ ,(int)offsetof(DisplayObject_obj,_hx___cachedBitmap),HX_HCSTRING("__cachedBitmap","\x91","\x7c","\xd7","\x65")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___cachedBitmapBounds),HX_HCSTRING("__cachedBitmapBounds","\xe6","\xb9","\xf6","\x6e")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(DisplayObject_obj,_hx___cachedFilterBounds),HX_HCSTRING("__cachedFilterBounds","\x6f","\x46","\x2f","\x70")},
	{hx::fsObject /*::openfl::geom::Matrix*/ ,(int)offsetof(DisplayObject_obj,_hx___cacheGLMatrix),HX_HCSTRING("__cacheGLMatrix","\x68","\x77","\xe7","\xbd")},
	{hx::fsBool,(int)offsetof(DisplayObject_obj,_hx___updateFilters),HX_HCSTRING("__updateFilters","\x92","\x3f","\x67","\x5c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo DisplayObject_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___instanceCount,HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___worldRenderDirty,HX_HCSTRING("__worldRenderDirty","\xca","\xee","\xec","\xf2")},
	{hx::fsInt,(void *) &DisplayObject_obj::_hx___worldTransformDirty,HX_HCSTRING("__worldTransformDirty","\xd8","\x61","\x34","\x46")},
	{hx::fsBool,(void *) &DisplayObject_obj::_hx___cacheAsBitmapMode,HX_HCSTRING("__cacheAsBitmapMode","\xc6","\x58","\x18","\xcf")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String DisplayObject_obj_sMemberFields[] = {
	HX_HCSTRING("blendMode","\x54","\xe4","\x37","\x0c"),
	HX_HCSTRING("cacheAsBitmapBounds","\xb8","\x49","\xd7","\x3f"),
	HX_HCSTRING("loaderInfo","\x21","\xb2","\xe4","\xb6"),
	HX_HCSTRING("mouseX","\x93","\x4a","\x0e","\xcc"),
	HX_HCSTRING("mouseY","\x94","\x4a","\x0e","\xcc"),
	HX_HCSTRING("opaqueBackground","\x2f","\xb8","\xa7","\x1a"),
	HX_HCSTRING("parent","\x2a","\x05","\x7e","\xed"),
	HX_HCSTRING("root","\x22","\xee","\xae","\x4b"),
	HX_HCSTRING("scale9Grid","\xd5","\x50","\x22","\x8f"),
	HX_HCSTRING("shader","\x25","\xbf","\x20","\x1d"),
	HX_HCSTRING("stage","\xbe","\x6a","\x0b","\x84"),
	HX_HCSTRING("__renderTransform","\x16","\xb8","\x95","\xb1"),
	HX_HCSTRING("__worldColorTransform","\x5b","\xce","\x21","\xa3"),
	HX_HCSTRING("__worldOffset","\x65","\x6c","\x25","\x74"),
	HX_HCSTRING("__worldTransform","\xda","\xa7","\xd8","\x9a"),
	HX_HCSTRING("__alpha","\x3e","\x00","\xf5","\x8b"),
	HX_HCSTRING("__blendMode","\x34","\x2d","\x64","\x3a"),
	HX_HCSTRING("__cairo","\x68","\x89","\x77","\xab"),
	HX_HCSTRING("__children","\x5f","\x8c","\xa2","\x13"),
	HX_HCSTRING("__filters","\x9b","\xf2","\x94","\x8a"),
	HX_HCSTRING("__graphics","\xeb","\x6b","\xa0","\xb5"),
	HX_HCSTRING("__interactive","\xc2","\x7e","\xd1","\x84"),
	HX_HCSTRING("__isMask","\x16","\x71","\xec","\x0d"),
	HX_HCSTRING("__mask","\x0c","\xa4","\x4e","\xf7"),
	HX_HCSTRING("__maskGraphics","\xf7","\x44","\xfd","\x6b"),
	HX_HCSTRING("__maskCached","\x0e","\x09","\x6a","\xfe"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("__objectTransform","\x8d","\x6f","\x30","\x54"),
	HX_HCSTRING("__offset","\xb3","\x02","\x6f","\x08"),
	HX_HCSTRING("__renderable","\x10","\xb7","\x2c","\x2b"),
	HX_HCSTRING("__renderDirty","\xbc","\xbd","\xf9","\xed"),
	HX_HCSTRING("__rotation","\x5e","\xb0","\xbe","\xab"),
	HX_HCSTRING("__rotationCosine","\xf7","\x71","\x7b","\x14"),
	HX_HCSTRING("__rotationSine","\xcb","\xf9","\xad","\x3f"),
	HX_HCSTRING("__scrollRect","\xf1","\x56","\xfa","\x41"),
	HX_HCSTRING("__shader","\x45","\x2a","\x50","\xc5"),
	HX_HCSTRING("__transform","\x4c","\x76","\xbf","\x73"),
	HX_HCSTRING("__transformDirty","\x26","\xf6","\x91","\x84"),
	HX_HCSTRING("__visible","\x52","\xc9","\x72","\x24"),
	HX_HCSTRING("__worldAlpha","\xcc","\xd2","\xd6","\xc5"),
	HX_HCSTRING("__worldAlphaChanged","\x88","\x37","\xd8","\xd0"),
	HX_HCSTRING("__worldClip","\x22","\x0b","\x0b","\x7d"),
	HX_HCSTRING("__worldClipChanged","\xf2","\x55","\x0d","\x68"),
	HX_HCSTRING("__worldTransformCache","\x08","\xac","\x78","\xad"),
	HX_HCSTRING("__worldTransformChanged","\x3a","\x40","\xad","\x27"),
	HX_HCSTRING("__worldVisible","\x60","\xdb","\x58","\xf8"),
	HX_HCSTRING("__worldVisibleChanged","\x74","\x29","\x51","\x77"),
	HX_HCSTRING("__worldZ","\xe8","\x5c","\xce","\x71"),
	HX_HCSTRING("__cacheAsBitmap","\xc3","\xbb","\xc1","\xf1"),
	HX_HCSTRING("__cacheAsBitmapMatrix","\x64","\x1a","\x76","\x03"),
	HX_HCSTRING("__cacheAsBitmapSmooth","\x51","\xec","\x18","\x4f"),
	HX_HCSTRING("__forceCacheAsBitmap","\x18","\xa5","\xdf","\xcb"),
	HX_HCSTRING("__updateCachedBitmap","\x3a","\xd0","\x57","\x9c"),
	HX_HCSTRING("__cachedBitmap","\x91","\x7c","\xd7","\x65"),
	HX_HCSTRING("__cachedBitmapBounds","\xe6","\xb9","\xf6","\x6e"),
	HX_HCSTRING("__cachedFilterBounds","\x6f","\x46","\x2f","\x70"),
	HX_HCSTRING("__cacheGLMatrix","\x68","\x77","\xe7","\xbd"),
	HX_HCSTRING("__updateFilters","\x92","\x3f","\x67","\x5c"),
	HX_HCSTRING("getBounds","\xab","\x0f","\x74","\xe2"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	HX_HCSTRING("globalToLocal","\xcd","\x4e","\xae","\x6b"),
	HX_HCSTRING("hitTestObject","\xe4","\x54","\x64","\xd7"),
	HX_HCSTRING("hitTestPoint","\xcb","\xa9","\x21","\xe4"),
	HX_HCSTRING("localToGlobal","\xc9","\x41","\xeb","\x47"),
	HX_HCSTRING("__broadcast","\xe1","\xeb","\x45","\x0d"),
	HX_HCSTRING("__dispatchEvent","\xe0","\xff","\x16","\x4e"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getInteractive","\x0c","\x1c","\x37","\xf8"),
	HX_HCSTRING("__getLocalBounds","\x6a","\x04","\x36","\xdf"),
	HX_HCSTRING("__getRenderBounds","\x01","\x11","\xb8","\x7b"),
	HX_HCSTRING("__getWorldTransform","\xd0","\xf4","\xfc","\x8b"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCairoMask","\x3e","\x0c","\x22","\x6b"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderCanvasMask","\xfa","\xd7","\xef","\x51"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__drawGraphicsGL","\xf4","\xa7","\x39","\x8e"),
	HX_HCSTRING("__preRenderGL","\x1e","\x63","\xbc","\x10"),
	HX_HCSTRING("__postRenderGL","\x9b","\xce","\x55","\x48"),
	HX_HCSTRING("__cacheGL","\xc7","\xbd","\x6f","\xa4"),
	HX_HCSTRING("__setStageReference","\x4f","\xe5","\xe5","\xf4"),
	HX_HCSTRING("__setRenderDirty","\x7a","\x43","\x7f","\x81"),
	HX_HCSTRING("__setTransformDirty","\x28","\x1b","\x24","\x99"),
	HX_HCSTRING("__update","\x29","\xf1","\x34","\x2f"),
	HX_HCSTRING("__updateChildren","\x88","\x97","\xd3","\xd9"),
	HX_HCSTRING("__updateMask","\xb5","\xa6","\x9e","\x39"),
	HX_HCSTRING("__updateTransforms","\x10","\xf4","\xb0","\x50"),
	HX_HCSTRING("get_alpha","\xb5","\x03","\x40","\x65"),
	HX_HCSTRING("set_alpha","\xc1","\xef","\x90","\x48"),
	HX_HCSTRING("set_blendMode","\x37","\x9a","\xa1","\x12"),
	HX_HCSTRING("set_shader","\x62","\xcd","\x25","\x11"),
	HX_HCSTRING("get_cacheAsBitmap","\x3a","\x8e","\x7f","\x70"),
	HX_HCSTRING("set_cacheAsBitmap","\x46","\x66","\xed","\x93"),
	HX_HCSTRING("get_cacheAsBitmapMatrix","\x1b","\xa0","\xd7","\x9d"),
	HX_HCSTRING("set_cacheAsBitmapMatrix","\x27","\x09","\x39","\xa0"),
	HX_HCSTRING("get_cacheAsBitmapSmooth","\x08","\x72","\x7a","\xe9"),
	HX_HCSTRING("set_cacheAsBitmapSmooth","\x14","\xdb","\xdb","\xeb"),
	HX_HCSTRING("get_filters","\xd2","\x01","\x41","\x8f"),
	HX_HCSTRING("set_filters","\xde","\x08","\xae","\x99"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_mask","\x75","\xfc","\x10","\xc8"),
	HX_HCSTRING("set_mask","\xe9","\x55","\x6e","\x76"),
	HX_HCSTRING("get_mouseX","\x5c","\xba","\x95","\xbc"),
	HX_HCSTRING("get_mouseY","\x5d","\xba","\x95","\xbc"),
	HX_HCSTRING("get_name","\xd4","\x2d","\xba","\xc8"),
	HX_HCSTRING("set_name","\x48","\x87","\x17","\x77"),
	HX_HCSTRING("get_root","\xab","\xa9","\x69","\xcb"),
	HX_HCSTRING("get_rotation","\x47","\xf1","\x9f","\xbd"),
	HX_HCSTRING("set_rotation","\xbb","\x14","\x99","\xd2"),
	HX_HCSTRING("get_scaleX","\x57","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleX","\xcb","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scaleY","\x58","\x5a","\xad","\x2c"),
	HX_HCSTRING("set_scaleY","\xcc","\xf8","\x2a","\x30"),
	HX_HCSTRING("get_scrollRect","\x1a","\x64","\x5c","\x7f"),
	HX_HCSTRING("set_scrollRect","\x8e","\x4c","\x7c","\x9f"),
	HX_HCSTRING("get_transform","\x43","\x01","\xf7","\x06"),
	HX_HCSTRING("set_transform","\x4f","\xe3","\xfc","\x4b"),
	HX_HCSTRING("get_visible","\x89","\xd8","\x1e","\x29"),
	HX_HCSTRING("set_visible","\x95","\xdf","\x8b","\x33"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_x","\x4f","\xa5","\x60","\x91"),
	HX_HCSTRING("set_x","\x5b","\x9b","\x2f","\x7a"),
	HX_HCSTRING("get_y","\x50","\xa5","\x60","\x91"),
	HX_HCSTRING("set_y","\x5c","\x9b","\x2f","\x7a"),
	::String(null()) };

static void DisplayObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___worldRenderDirty,"__worldRenderDirty");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___worldTransformDirty,"__worldTransformDirty");
	HX_MARK_MEMBER_NAME(DisplayObject_obj::_hx___cacheAsBitmapMode,"__cacheAsBitmapMode");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DisplayObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___instanceCount,"__instanceCount");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___worldRenderDirty,"__worldRenderDirty");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___worldTransformDirty,"__worldTransformDirty");
	HX_VISIT_MEMBER_NAME(DisplayObject_obj::_hx___cacheAsBitmapMode,"__cacheAsBitmapMode");
};

#endif

hx::Class DisplayObject_obj::__mClass;

static ::String DisplayObject_obj_sStaticFields[] = {
	HX_HCSTRING("__instanceCount","\xda","\x31","\x1e","\x3f"),
	HX_HCSTRING("__worldRenderDirty","\xca","\xee","\xec","\xf2"),
	HX_HCSTRING("__worldTransformDirty","\xd8","\x61","\x34","\x46"),
	HX_HCSTRING("__cacheAsBitmapMode","\xc6","\x58","\x18","\xcf"),
	::String(null())
};

void DisplayObject_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.DisplayObject","\xf7","\x4b","\x6f","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DisplayObject_obj::__GetStatic;
	__mClass->mSetStaticField = &DisplayObject_obj::__SetStatic;
	__mClass->mMarkFunc = DisplayObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DisplayObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DisplayObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DisplayObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DisplayObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DisplayObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DisplayObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DisplayObject_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",46,0xc7539829)
HXLINE(  46)		_hx___instanceCount = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",47,0xc7539829)
HXLINE(  47)		_hx___worldRenderDirty = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",48,0xc7539829)
HXLINE(  48)		_hx___worldTransformDirty = (int)0;
            	}
{
            	HX_STACK_FRAME("openfl.display.DisplayObject","boot",0x26f12809,"openfl.display.DisplayObject.boot","openfl/display/DisplayObject.hx",50,0xc7539829)
HXLINE(  50)		_hx___cacheAsBitmapMode = false;
            	}
}

} // end namespace openfl
} // end namespace display
