// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_openfl_display_TextureUvs
#include <openfl/display/TextureUvs.h>
#endif

namespace openfl{
namespace display{

void TextureUvs_obj::__construct(){
            	HX_STACK_FRAME("openfl.display.TextureUvs","new",0xe69f4b33,"openfl.display.TextureUvs.new","openfl/display/BitmapData.hx",1424,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE(1434)		this->y3 = ((Float)0);
HXLINE(1433)		this->y2 = ((Float)0);
HXLINE(1432)		this->y1 = ((Float)0);
HXLINE(1431)		this->y0 = ((Float)0);
HXLINE(1430)		this->x3 = ((Float)0);
HXLINE(1429)		this->x2 = ((Float)0);
HXLINE(1428)		this->x1 = ((Float)0);
HXLINE(1427)		this->x0 = ((Float)0);
            	}

Dynamic TextureUvs_obj::__CreateEmpty() { return new TextureUvs_obj; }

hx::ObjectPtr< TextureUvs_obj > TextureUvs_obj::__new()
{
	hx::ObjectPtr< TextureUvs_obj > _hx_result = new TextureUvs_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TextureUvs_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextureUvs_obj > _hx_result = new TextureUvs_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TextureUvs_obj::reset(){
            	HX_STACK_FRAME("openfl.display.TextureUvs","reset",0x93065f62,"openfl.display.TextureUvs.reset","openfl/display/BitmapData.hx",1437,0xdd12d5b9)
            	HX_STACK_THIS(this)
HXLINE(1437)		this->x0 = (this->x1 = (this->x2 = (this->x3 = (this->y0 = (this->y1 = (this->y2 = (this->y3 = (int)0)))))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextureUvs_obj,reset,(void))


TextureUvs_obj::TextureUvs_obj()
{
}

hx::Val TextureUvs_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x0") ) { return hx::Val( x0); }
		if (HX_FIELD_EQ(inName,"x1") ) { return hx::Val( x1); }
		if (HX_FIELD_EQ(inName,"x2") ) { return hx::Val( x2); }
		if (HX_FIELD_EQ(inName,"x3") ) { return hx::Val( x3); }
		if (HX_FIELD_EQ(inName,"y0") ) { return hx::Val( y0); }
		if (HX_FIELD_EQ(inName,"y1") ) { return hx::Val( y1); }
		if (HX_FIELD_EQ(inName,"y2") ) { return hx::Val( y2); }
		if (HX_FIELD_EQ(inName,"y3") ) { return hx::Val( y3); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TextureUvs_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x0") ) { x0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x3") ) { x3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y0") ) { y0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y3") ) { y3=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TextureUvs_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x0","\xb8","\x68","\x00","\x00"));
	outFields->push(HX_HCSTRING("x1","\xb9","\x68","\x00","\x00"));
	outFields->push(HX_HCSTRING("x2","\xba","\x68","\x00","\x00"));
	outFields->push(HX_HCSTRING("x3","\xbb","\x68","\x00","\x00"));
	outFields->push(HX_HCSTRING("y0","\x97","\x69","\x00","\x00"));
	outFields->push(HX_HCSTRING("y1","\x98","\x69","\x00","\x00"));
	outFields->push(HX_HCSTRING("y2","\x99","\x69","\x00","\x00"));
	outFields->push(HX_HCSTRING("y3","\x9a","\x69","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextureUvs_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,x0),HX_HCSTRING("x0","\xb8","\x68","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,x1),HX_HCSTRING("x1","\xb9","\x68","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,x2),HX_HCSTRING("x2","\xba","\x68","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,x3),HX_HCSTRING("x3","\xbb","\x68","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,y0),HX_HCSTRING("y0","\x97","\x69","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,y1),HX_HCSTRING("y1","\x98","\x69","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,y2),HX_HCSTRING("y2","\x99","\x69","\x00","\x00")},
	{hx::fsFloat,(int)offsetof(TextureUvs_obj,y3),HX_HCSTRING("y3","\x9a","\x69","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TextureUvs_obj_sStaticStorageInfo = 0;
#endif

static ::String TextureUvs_obj_sMemberFields[] = {
	HX_HCSTRING("x0","\xb8","\x68","\x00","\x00"),
	HX_HCSTRING("x1","\xb9","\x68","\x00","\x00"),
	HX_HCSTRING("x2","\xba","\x68","\x00","\x00"),
	HX_HCSTRING("x3","\xbb","\x68","\x00","\x00"),
	HX_HCSTRING("y0","\x97","\x69","\x00","\x00"),
	HX_HCSTRING("y1","\x98","\x69","\x00","\x00"),
	HX_HCSTRING("y2","\x99","\x69","\x00","\x00"),
	HX_HCSTRING("y3","\x9a","\x69","\x00","\x00"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	::String(null()) };

static void TextureUvs_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextureUvs_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextureUvs_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextureUvs_obj::__mClass,"__mClass");
};

#endif

hx::Class TextureUvs_obj::__mClass;

void TextureUvs_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.TextureUvs","\xc1","\x35","\x4f","\x17");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TextureUvs_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextureUvs_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextureUvs_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextureUvs_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextureUvs_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextureUvs_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
