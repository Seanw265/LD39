// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLBuffer
#include <lime/graphics/opengl/GLBuffer.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_VertexBuffer3D
#include <openfl/display3D/VertexBuffer3D.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace display3D{

void VertexBuffer3D_obj::__construct( ::openfl::display3D::Context3D context, ::lime::graphics::opengl::GLBuffer glBuffer,Int numVertices,Int data32PerVertex,Int bufferUsage){
            	HX_STACK_FRAME("openfl.display3D.VertexBuffer3D","new",0xf0b52080,"openfl.display3D.VertexBuffer3D.new","openfl/display3D/VertexBuffer3D.hx",21,0xb1ad396e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(context,"context")
            	HX_STACK_ARG(glBuffer,"glBuffer")
            	HX_STACK_ARG(numVertices,"numVertices")
            	HX_STACK_ARG(data32PerVertex,"data32PerVertex")
            	HX_STACK_ARG(bufferUsage,"bufferUsage")
HXLINE(  23)		this->context = context;
HXLINE(  24)		this->glBuffer = glBuffer;
HXLINE(  25)		this->numVertices = numVertices;
HXLINE(  26)		this->data32PerVertex = data32PerVertex;
HXLINE(  27)		this->bufferUsage = bufferUsage;
            	}

Dynamic VertexBuffer3D_obj::__CreateEmpty() { return new VertexBuffer3D_obj; }

hx::ObjectPtr< VertexBuffer3D_obj > VertexBuffer3D_obj::__new( ::openfl::display3D::Context3D context, ::lime::graphics::opengl::GLBuffer glBuffer,Int numVertices,Int data32PerVertex,Int bufferUsage)
{
	hx::ObjectPtr< VertexBuffer3D_obj > _hx_result = new VertexBuffer3D_obj();
	_hx_result->__construct(context,glBuffer,numVertices,data32PerVertex,bufferUsage);
	return _hx_result;
}

Dynamic VertexBuffer3D_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VertexBuffer3D_obj > _hx_result = new VertexBuffer3D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

void VertexBuffer3D_obj::dispose(){
            	HX_STACK_FRAME("openfl.display3D.VertexBuffer3D","dispose",0x6b6860bf,"openfl.display3D.VertexBuffer3D.dispose","openfl/display3D/VertexBuffer3D.hx",34,0xb1ad396e)
            	HX_STACK_THIS(this)
HXLINE(  34)		this->context->_hx___deleteVertexBuffer(hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(VertexBuffer3D_obj,dispose,(void))

void VertexBuffer3D_obj::uploadFromByteArray( ::openfl::utils::ByteArrayData byteArray,Int byteArrayOffset,Int startOffset,Int count){
            	HX_STACK_FRAME("openfl.display3D.VertexBuffer3D","uploadFromByteArray",0x0096a806,"openfl.display3D.VertexBuffer3D.uploadFromByteArray","openfl/display3D/VertexBuffer3D.hx",39,0xb1ad396e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(byteArray,"byteArray")
            	HX_STACK_ARG(byteArrayOffset,"byteArrayOffset")
            	HX_STACK_ARG(startOffset,"startOffset")
            	HX_STACK_ARG(count,"count")
HXLINE(  43)		{
HXLINE(  43)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->glBuffer;
HXDLIN(  43)			{
HXLINE(  43)				Int buffer1;
HXDLIN(  43)				Bool _hx_tmp = hx::IsNull( buffer );
HXDLIN(  43)				if (_hx_tmp) {
HXLINE(  43)					buffer1 = (int)0;
            				}
            				else {
HXLINE(  43)					buffer1 = buffer->id;
            				}
HXDLIN(  43)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,buffer1);
            			}
            		}
HXLINE(  47)		HX_VAR(  ::lime::utils::ArrayBufferView,float32Array);
HXLINE(  62)		HX_VARI( ::cpp::VirtualArray,array) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytesData(byteArray);
HXDLIN(  62)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  62)		Bool _hx_tmp1 = hx::IsNotNull( array );
HXDLIN(  62)		if (_hx_tmp1) {
HXLINE(  62)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  62)			_this->byteOffset = (int)0;
HXDLIN(  62)			_this->length = array->get_length();
HXDLIN(  62)			Int _hx_tmp2 = (_this->length * _this->bytesPerElement);
HXDLIN(  62)			_this->byteLength = _hx_tmp2;
HXDLIN(  62)			Int byteLength = _this->byteLength;
HXDLIN(  62)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(  62)			_this->buffer = this2;
HXDLIN(  62)			_this->copyFromArray(array,null());
HXDLIN(  62)			this1 = _this;
            		}
            		else {
HXLINE(  62)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  62)		float32Array = this1;
HXLINE(  65)		{
HXLINE(  65)			Int usage = this->bufferUsage;
HXDLIN(  65)			{
HXLINE(  65)				Int byteOffset = float32Array->byteOffset;
HXDLIN(  65)				Int size = float32Array->byteLength;
HXDLIN(  65)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data((int)34962,hx::DynamicPtr(float32Array->buffer),byteOffset,size,usage);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(VertexBuffer3D_obj,uploadFromByteArray,(void))

void VertexBuffer3D_obj::uploadFromFloat32Array( ::lime::utils::ArrayBufferView data){
            	HX_STACK_FRAME("openfl.display3D.VertexBuffer3D","uploadFromFloat32Array",0xa0c31ae9,"openfl.display3D.VertexBuffer3D.uploadFromFloat32Array","openfl/display3D/VertexBuffer3D.hx",70,0xb1ad396e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
HXLINE(  72)		{
HXLINE(  72)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->glBuffer;
HXDLIN(  72)			{
HXLINE(  72)				Int buffer1;
HXDLIN(  72)				Bool _hx_tmp = hx::IsNull( buffer );
HXDLIN(  72)				if (_hx_tmp) {
HXLINE(  72)					buffer1 = (int)0;
            				}
            				else {
HXLINE(  72)					buffer1 = buffer->id;
            				}
HXDLIN(  72)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,buffer1);
            			}
            		}
HXLINE(  73)		{
HXLINE(  73)			Int usage = this->bufferUsage;
HXDLIN(  73)			{
HXLINE(  73)				Int byteOffset = data->byteOffset;
HXDLIN(  73)				Int size = data->byteLength;
HXDLIN(  73)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data((int)34962,hx::DynamicPtr(data->buffer),byteOffset,size,usage);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexBuffer3D_obj,uploadFromFloat32Array,(void))

void VertexBuffer3D_obj::uploadFromVector(::Array< Float > data,Int startVertex,Int numVertices){
            	HX_STACK_FRAME("openfl.display3D.VertexBuffer3D","uploadFromVector",0xcf228b0e,"openfl.display3D.VertexBuffer3D.uploadFromVector","openfl/display3D/VertexBuffer3D.hx",78,0xb1ad396e)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(startVertex,"startVertex")
            	HX_STACK_ARG(numVertices,"numVertices")
HXLINE(  82)		{
HXLINE(  82)			HX_VARI(  ::lime::graphics::opengl::GLBuffer,buffer) = this->glBuffer;
HXDLIN(  82)			{
HXLINE(  82)				Int buffer1;
HXDLIN(  82)				Bool _hx_tmp = hx::IsNull( buffer );
HXDLIN(  82)				if (_hx_tmp) {
HXLINE(  82)					buffer1 = (int)0;
            				}
            				else {
HXLINE(  82)					buffer1 = buffer->id;
            				}
HXDLIN(  82)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_buffer((int)34962,buffer1);
            			}
            		}
HXLINE(  86)		HX_VAR(  ::lime::utils::ArrayBufferView,float32Array);
HXLINE(  97)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN(  97)		Bool _hx_tmp1 = hx::IsNotNull( data );
HXDLIN(  97)		if (_hx_tmp1) {
HXLINE(  97)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)8);
HXDLIN(  97)			_this->byteOffset = (int)0;
HXDLIN(  97)			_this->length = data->length;
HXDLIN(  97)			Int _hx_tmp2 = (_this->length * _this->bytesPerElement);
HXDLIN(  97)			_this->byteLength = _hx_tmp2;
HXDLIN(  97)			Int byteLength = _this->byteLength;
HXDLIN(  97)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN(  97)			_this->buffer = this2;
HXDLIN(  97)			_this->copyFromArray(data,null());
HXDLIN(  97)			this1 = _this;
            		}
            		else {
HXLINE(  97)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Float32Array",8e,c1,f4,d4));
            		}
HXDLIN(  97)		float32Array = this1;
HXLINE( 100)		{
HXLINE( 100)			Int usage = this->bufferUsage;
HXDLIN( 100)			{
HXLINE( 100)				Int byteOffset = float32Array->byteOffset;
HXDLIN( 100)				Int size = float32Array->byteLength;
HXDLIN( 100)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_buffer_data((int)34962,hx::DynamicPtr(float32Array->buffer),byteOffset,size,usage);
            			}
            		}
HXLINE( 102)		float32Array = null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(VertexBuffer3D_obj,uploadFromVector,(void))


VertexBuffer3D_obj::VertexBuffer3D_obj()
{
}

void VertexBuffer3D_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexBuffer3D);
	HX_MARK_MEMBER_NAME(context,"context");
	HX_MARK_MEMBER_NAME(data32PerVertex,"data32PerVertex");
	HX_MARK_MEMBER_NAME(glBuffer,"glBuffer");
	HX_MARK_MEMBER_NAME(numVertices,"numVertices");
	HX_MARK_MEMBER_NAME(bufferUsage,"bufferUsage");
	HX_MARK_END_CLASS();
}

void VertexBuffer3D_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(context,"context");
	HX_VISIT_MEMBER_NAME(data32PerVertex,"data32PerVertex");
	HX_VISIT_MEMBER_NAME(glBuffer,"glBuffer");
	HX_VISIT_MEMBER_NAME(numVertices,"numVertices");
	HX_VISIT_MEMBER_NAME(bufferUsage,"bufferUsage");
}

hx::Val VertexBuffer3D_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { return hx::Val( context); }
		if (HX_FIELD_EQ(inName,"dispose") ) { return hx::Val( dispose_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"glBuffer") ) { return hx::Val( glBuffer); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numVertices") ) { return hx::Val( numVertices); }
		if (HX_FIELD_EQ(inName,"bufferUsage") ) { return hx::Val( bufferUsage); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"data32PerVertex") ) { return hx::Val( data32PerVertex); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uploadFromVector") ) { return hx::Val( uploadFromVector_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { return hx::Val( uploadFromByteArray_dyn()); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"uploadFromFloat32Array") ) { return hx::Val( uploadFromFloat32Array_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VertexBuffer3D_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"context") ) { context=inValue.Cast<  ::openfl::display3D::Context3D >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"glBuffer") ) { glBuffer=inValue.Cast<  ::lime::graphics::opengl::GLBuffer >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"numVertices") ) { numVertices=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bufferUsage") ) { bufferUsage=inValue.Cast< Int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"data32PerVertex") ) { data32PerVertex=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexBuffer3D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("context","\xef","\x95","\x77","\x19"));
	outFields->push(HX_HCSTRING("data32PerVertex","\x98","\x35","\x56","\x8c"));
	outFields->push(HX_HCSTRING("glBuffer","\x05","\x35","\x83","\x93"));
	outFields->push(HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56"));
	outFields->push(HX_HCSTRING("bufferUsage","\x01","\xf0","\x7a","\x47"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo VertexBuffer3D_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::openfl::display3D::Context3D*/ ,(int)offsetof(VertexBuffer3D_obj,context),HX_HCSTRING("context","\xef","\x95","\x77","\x19")},
	{hx::fsInt,(int)offsetof(VertexBuffer3D_obj,data32PerVertex),HX_HCSTRING("data32PerVertex","\x98","\x35","\x56","\x8c")},
	{hx::fsObject /*::lime::graphics::opengl::GLBuffer*/ ,(int)offsetof(VertexBuffer3D_obj,glBuffer),HX_HCSTRING("glBuffer","\x05","\x35","\x83","\x93")},
	{hx::fsInt,(int)offsetof(VertexBuffer3D_obj,numVertices),HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56")},
	{hx::fsInt,(int)offsetof(VertexBuffer3D_obj,bufferUsage),HX_HCSTRING("bufferUsage","\x01","\xf0","\x7a","\x47")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VertexBuffer3D_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexBuffer3D_obj_sMemberFields[] = {
	HX_HCSTRING("context","\xef","\x95","\x77","\x19"),
	HX_HCSTRING("data32PerVertex","\x98","\x35","\x56","\x8c"),
	HX_HCSTRING("glBuffer","\x05","\x35","\x83","\x93"),
	HX_HCSTRING("numVertices","\x5f","\x10","\x2c","\x56"),
	HX_HCSTRING("bufferUsage","\x01","\xf0","\x7a","\x47"),
	HX_HCSTRING("dispose","\x9f","\x80","\x4c","\xbb"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	HX_HCSTRING("uploadFromFloat32Array","\x09","\xd7","\x7d","\xf0"),
	HX_HCSTRING("uploadFromVector","\x2e","\x6f","\x6b","\xa8"),
	::String(null()) };

static void VertexBuffer3D_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(VertexBuffer3D_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void VertexBuffer3D_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(VertexBuffer3D_obj::__mClass,"__mClass");
};

#endif

hx::Class VertexBuffer3D_obj::__mClass;

void VertexBuffer3D_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.VertexBuffer3D","\x8e","\x20","\x03","\xff");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = VertexBuffer3D_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VertexBuffer3D_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VertexBuffer3D_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = VertexBuffer3D_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexBuffer3D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexBuffer3D_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
