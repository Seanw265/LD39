// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_graphics_Image
#include <lime/graphics/Image.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GL
#include <lime/graphics/opengl/GL.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLTexture
#include <lime/graphics/opengl/GLTexture.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display3D_Context3D
#include <openfl/display3D/Context3D.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_RectangleTexture
#include <openfl/display3D/textures/RectangleTexture.h>
#endif
#ifndef INCLUDED_openfl_display3D_textures_TextureBase
#include <openfl/display3D/textures/TextureBase.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif

namespace openfl{
namespace display3D{
namespace textures{

void RectangleTexture_obj::__construct( ::openfl::display3D::Context3D context, ::lime::graphics::opengl::GLTexture glTexture,Bool optimize,Int width,Int height){
            	HX_STACK_FRAME("openfl.display3D.textures.RectangleTexture","new",0xcccbdd5b,"openfl.display3D.textures.RectangleTexture.new","openfl/display3D/textures/RectangleTexture.hx",19,0x83565556)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(context,"context")
            	HX_STACK_ARG(glTexture,"glTexture")
            	HX_STACK_ARG(optimize,"optimize")
            	HX_STACK_ARG(width,"width")
            	HX_STACK_ARG(height,"height")
HXLINE(  21)		this->optimizeForRenderToTexture = optimize;
HXLINE(  27)		super::__construct(context,glTexture,width,height);
HXLINE(  30)		Bool _hx_tmp = this->optimizeForRenderToTexture;
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  31)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_pixel_storei((int)37440,(int)1);
            		}
HXLINE(  33)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10240,(int)9728);
HXLINE(  34)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10241,(int)9728);
HXLINE(  35)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXLINE(  36)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
            	}

Dynamic RectangleTexture_obj::__CreateEmpty() { return new RectangleTexture_obj; }

hx::ObjectPtr< RectangleTexture_obj > RectangleTexture_obj::__new( ::openfl::display3D::Context3D context, ::lime::graphics::opengl::GLTexture glTexture,Bool optimize,Int width,Int height)
{
	hx::ObjectPtr< RectangleTexture_obj > _hx_result = new RectangleTexture_obj();
	_hx_result->__construct(context,glTexture,optimize,width,height);
	return _hx_result;
}

Dynamic RectangleTexture_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< RectangleTexture_obj > _hx_result = new RectangleTexture_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

void RectangleTexture_obj::uploadFromBitmapData( ::openfl::display::BitmapData bitmapData,hx::Null< Int >  __o_miplevel){
Int miplevel = __o_miplevel.Default(0);
            	HX_STACK_FRAME("openfl.display3D.textures.RectangleTexture","uploadFromBitmapData",0x711b2e49,"openfl.display3D.textures.RectangleTexture.uploadFromBitmapData","openfl/display3D/textures/RectangleTexture.hx",47,0x83565556)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(bitmapData,"bitmapData")
            	HX_STACK_ARG(miplevel,"miplevel")
HXLINE(  54)		HX_VARI(  ::openfl::utils::ByteArrayData,p) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromArrayBuffer(bitmapData->image->get_data()->buffer);
HXLINE(  57)		this->width = bitmapData->width;
HXLINE(  58)		this->height = bitmapData->height;
HXLINE(  60)		this->uploadFromByteArray(p,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RectangleTexture_obj,uploadFromBitmapData,(void))

void RectangleTexture_obj::uploadFromByteArray( ::openfl::utils::ByteArrayData data,Int byteArrayOffset){
            	HX_STACK_FRAME("openfl.display3D.textures.RectangleTexture","uploadFromByteArray",0xfd7a0ae1,"openfl.display3D.textures.RectangleTexture.uploadFromByteArray","openfl/display3D/textures/RectangleTexture.hx",65,0x83565556)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(data,"data")
            	HX_STACK_ARG(byteArrayOffset,"byteArrayOffset")
HXLINE(  67)		{
HXLINE(  67)			HX_VARI(  ::lime::graphics::opengl::GLTexture,texture) = this->glTexture;
HXDLIN(  67)			{
HXLINE(  67)				Int texture1;
HXDLIN(  67)				Bool _hx_tmp = hx::IsNull( texture );
HXDLIN(  67)				if (_hx_tmp) {
HXLINE(  67)					texture1 = (int)0;
            				}
            				else {
HXLINE(  67)					texture1 = texture->id;
            				}
HXDLIN(  67)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture((int)3553,texture1);
            			}
            		}
HXLINE(  93)		Bool _hx_tmp1 = this->optimizeForRenderToTexture;
HXDLIN(  93)		if (_hx_tmp1) {
HXLINE(  95)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_pixel_storei((int)37440,(int)1);
HXLINE(  96)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10240,(int)9728);
HXLINE(  97)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10241,(int)9728);
HXLINE(  98)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10242,(int)33071);
HXLINE(  99)			::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_parameteri((int)3553,(int)10243,(int)33071);
            		}
HXLINE( 106)		HX_VARI( ::cpp::VirtualArray,array) = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toBytesData(data);
HXDLIN( 106)		HX_VAR_NAME(  ::lime::utils::ArrayBufferView,this1,"this");
HXDLIN( 106)		Bool _hx_tmp2 = hx::IsNotNull( array );
HXDLIN( 106)		if (_hx_tmp2) {
HXLINE( 106)			HX_VARI(  ::lime::utils::ArrayBufferView,_this) =  ::lime::utils::ArrayBufferView_obj::__new((int)0,(int)4);
HXDLIN( 106)			_this->byteOffset = (int)0;
HXDLIN( 106)			_this->length = array->get_length();
HXDLIN( 106)			Int _hx_tmp3 = (_this->length * _this->bytesPerElement);
HXDLIN( 106)			_this->byteLength = _hx_tmp3;
HXDLIN( 106)			Int byteLength = _this->byteLength;
HXDLIN( 106)			HX_VARI_NAME(  ::haxe::io::Bytes,this2,"this") = ::haxe::io::Bytes_obj::alloc(byteLength);
HXDLIN( 106)			_this->buffer = this2;
HXDLIN( 106)			_this->copyFromArray(array,null());
HXDLIN( 106)			this1 = _this;
            		}
            		else {
HXLINE( 106)			HX_STACK_DO_THROW(HX_("Invalid constructor arguments for Uint8Array",8b,64,02,e4));
            		}
HXDLIN( 106)		HX_VARI(  ::lime::utils::ArrayBufferView,source) = this1;
HXLINE( 112)		{
HXLINE( 112)			Int width = this->width;
HXDLIN( 112)			Int height = this->height;
HXDLIN( 112)			HX_VAR(  ::haxe::io::Bytes,buffer);
HXDLIN( 112)			Bool _hx_tmp4 = hx::IsNull( source );
HXDLIN( 112)			if (_hx_tmp4) {
HXLINE( 112)				buffer = null();
            			}
            			else {
HXLINE( 112)				buffer = source->buffer;
            			}
HXDLIN( 112)			{
HXLINE( 112)				Int byteOffset;
HXDLIN( 112)				Bool _hx_tmp5 = hx::IsNull( source );
HXDLIN( 112)				if (_hx_tmp5) {
HXLINE( 112)					byteOffset = (int)0;
            				}
            				else {
HXLINE( 112)					byteOffset = source->byteOffset;
            				}
HXDLIN( 112)				::lime::graphics::opengl::GL_obj::cffi_lime_gl_tex_image_2d((int)3553,(int)0,(int)6408,width,height,(int)0,(int)6408,(int)5121,hx::DynamicPtr(buffer),byteOffset);
            			}
            		}
HXLINE( 113)		::lime::graphics::opengl::GL_obj::cffi_lime_gl_bind_texture((int)3553,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC2(RectangleTexture_obj,uploadFromByteArray,(void))


RectangleTexture_obj::RectangleTexture_obj()
{
}

hx::Val RectangleTexture_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"uploadFromByteArray") ) { return hx::Val( uploadFromByteArray_dyn()); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"uploadFromBitmapData") ) { return hx::Val( uploadFromBitmapData_dyn()); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"optimizeForRenderToTexture") ) { return hx::Val( optimizeForRenderToTexture); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val RectangleTexture_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 26:
		if (HX_FIELD_EQ(inName,"optimizeForRenderToTexture") ) { optimizeForRenderToTexture=inValue.Cast< Bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void RectangleTexture_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("optimizeForRenderToTexture","\x9e","\x19","\x9d","\x60"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo RectangleTexture_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(RectangleTexture_obj,optimizeForRenderToTexture),HX_HCSTRING("optimizeForRenderToTexture","\x9e","\x19","\x9d","\x60")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *RectangleTexture_obj_sStaticStorageInfo = 0;
#endif

static ::String RectangleTexture_obj_sMemberFields[] = {
	HX_HCSTRING("optimizeForRenderToTexture","\x9e","\x19","\x9d","\x60"),
	HX_HCSTRING("uploadFromBitmapData","\xa4","\x85","\x65","\x0d"),
	HX_HCSTRING("uploadFromByteArray","\xe6","\x17","\x1b","\xee"),
	::String(null()) };

static void RectangleTexture_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(RectangleTexture_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void RectangleTexture_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(RectangleTexture_obj::__mClass,"__mClass");
};

#endif

hx::Class RectangleTexture_obj::__mClass;

void RectangleTexture_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display3D.textures.RectangleTexture","\xe9","\x93","\xed","\xa3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = RectangleTexture_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(RectangleTexture_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< RectangleTexture_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = RectangleTexture_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectangleTexture_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectangleTexture_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display3D
} // end namespace textures
