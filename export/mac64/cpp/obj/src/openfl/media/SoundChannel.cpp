// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime_app_Event_Void_Void
#include <lime/app/Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_audio_AudioSource
#include <lime/audio/AudioSource.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

namespace openfl{
namespace media{

void SoundChannel_obj::__construct( ::lime::audio::AudioSource source){
            	HX_STACK_FRAME("openfl.media.SoundChannel","new",0xfc94e2ae,"openfl.media.SoundChannel.new","openfl/media/SoundChannel.hx",26,0xa4290000)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(source,"source")
HXLINE(  28)		super::__construct(hx::ObjectPtr<OBJ_>(this));
HXLINE(  30)		this->leftPeak = (int)1;
HXLINE(  31)		this->rightPeak = (int)1;
HXLINE(  35)		Bool _hx_tmp = hx::IsNotNull( source );
HXDLIN(  35)		if (_hx_tmp) {
HXLINE(  37)			this->_hx___source = source;
HXLINE(  38)			this->_hx___source->onComplete->add(this->source_onComplete_dyn(),null(),null());
HXLINE(  39)			this->_hx___isValid = true;
HXLINE(  41)			this->_hx___source->play();
            		}
            	}

Dynamic SoundChannel_obj::__CreateEmpty() { return new SoundChannel_obj; }

hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__new( ::lime::audio::AudioSource source)
{
	hx::ObjectPtr< SoundChannel_obj > _hx_result = new SoundChannel_obj();
	_hx_result->__construct(source);
	return _hx_result;
}

Dynamic SoundChannel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundChannel_obj > _hx_result = new SoundChannel_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

void SoundChannel_obj::stop(){
            	HX_STACK_FRAME("openfl.media.SoundChannel","stop",0x090ae1f4,"openfl.media.SoundChannel.stop","openfl/media/SoundChannel.hx",60,0xa4290000)
            	HX_STACK_THIS(this)
HXLINE(  62)		if (!(this->_hx___isValid)) {
HXLINE(  62)			return;
            		}
HXLINE(  65)		this->_hx___source->stop();
HXLINE(  66)		this->_hx___dispose();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,stop,(void))

void SoundChannel_obj::_hx___dispose(){
            	HX_STACK_FRAME("openfl.media.SoundChannel","__dispose",0x8d7f924d,"openfl.media.SoundChannel.__dispose","openfl/media/SoundChannel.hx",74,0xa4290000)
            	HX_STACK_THIS(this)
HXLINE(  76)		if (!(this->_hx___isValid)) {
HXLINE(  76)			return;
            		}
HXLINE(  79)		this->_hx___source->dispose();
HXLINE(  85)		this->_hx___isValid = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,_hx___dispose,(void))

Float SoundChannel_obj::get_position(){
            	HX_STACK_FRAME("openfl.media.SoundChannel","get_position",0x46d188a4,"openfl.media.SoundChannel.get_position","openfl/media/SoundChannel.hx",97,0xa4290000)
            	HX_STACK_THIS(this)
HXLINE(  99)		if (!(this->_hx___isValid)) {
HXLINE(  99)			return (int)0;
            		}
HXLINE( 102)		Int _hx_tmp = this->_hx___source->get_currentTime();
HXDLIN( 102)		return ((Float)(_hx_tmp + this->_hx___source->offset) / (Float)(int)1000);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_position,return )

Float SoundChannel_obj::set_position(Float value){
            	HX_STACK_FRAME("openfl.media.SoundChannel","set_position",0x5bcaac18,"openfl.media.SoundChannel.set_position","openfl/media/SoundChannel.hx",110,0xa4290000)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 112)		if (!(this->_hx___isValid)) {
HXLINE( 112)			return (int)0;
            		}
HXLINE( 115)		Int _hx_tmp = ::Std_obj::_hx_int((value * (int)1000));
HXDLIN( 115)		Int _hx_tmp1 = (_hx_tmp - this->_hx___source->offset);
HXDLIN( 115)		this->_hx___source->set_currentTime(_hx_tmp1);
HXLINE( 116)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_position,return )

 ::openfl::media::SoundTransform SoundChannel_obj::get_soundTransform(){
            	HX_STACK_FRAME("openfl.media.SoundChannel","get_soundTransform",0xc6e884d8,"openfl.media.SoundChannel.get_soundTransform","openfl/media/SoundChannel.hx",125,0xa4290000)
            	HX_STACK_THIS(this)
HXLINE( 127)		if (!(this->_hx___isValid)) {
HXLINE( 127)			return  ::openfl::media::SoundTransform_obj::__new(null(),null());
            		}
HXLINE( 132)		Float _hx_tmp = this->_hx___source->get_gain();
HXDLIN( 132)		return  ::openfl::media::SoundTransform_obj::__new(_hx_tmp,(int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_soundTransform,return )

 ::openfl::media::SoundTransform SoundChannel_obj::set_soundTransform( ::openfl::media::SoundTransform value){
            	HX_STACK_FRAME("openfl.media.SoundChannel","set_soundTransform",0xa397b74c,"openfl.media.SoundChannel.set_soundTransform","openfl/media/SoundChannel.hx",140,0xa4290000)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 142)		if (!(this->_hx___isValid)) {
HXLINE( 142)			return value;
            		}
HXLINE( 145)		this->_hx___source->set_gain(value->volume);
HXLINE( 149)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_soundTransform,return )

void SoundChannel_obj::source_onComplete(){
            	HX_STACK_FRAME("openfl.media.SoundChannel","source_onComplete",0xb57ef7ea,"openfl.media.SoundChannel.source_onComplete","openfl/media/SoundChannel.hx",176,0xa4290000)
            	HX_STACK_THIS(this)
HXLINE( 178)		this->_hx___dispose();
HXLINE( 179)		this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("soundComplete",a8,30,e6,1c),null(),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,source_onComplete,(void))


SoundChannel_obj::SoundChannel_obj()
{
}

void SoundChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundChannel);
	HX_MARK_MEMBER_NAME(leftPeak,"leftPeak");
	HX_MARK_MEMBER_NAME(rightPeak,"rightPeak");
	HX_MARK_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_MARK_MEMBER_NAME(_hx___source,"__source");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SoundChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(leftPeak,"leftPeak");
	HX_VISIT_MEMBER_NAME(rightPeak,"rightPeak");
	HX_VISIT_MEMBER_NAME(_hx___isValid,"__isValid");
	HX_VISIT_MEMBER_NAME(_hx___source,"__source");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SoundChannel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftPeak") ) { return hx::Val( leftPeak); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_position()); }
		if (HX_FIELD_EQ(inName,"__source") ) { return hx::Val( _hx___source); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightPeak") ) { return hx::Val( rightPeak); }
		if (HX_FIELD_EQ(inName,"__isValid") ) { return hx::Val( _hx___isValid); }
		if (HX_FIELD_EQ(inName,"__dispose") ) { return hx::Val( _hx___dispose_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn()); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return hx::Val( set_position_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_soundTransform()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"source_onComplete") ) { return hx::Val( source_onComplete_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_soundTransform") ) { return hx::Val( get_soundTransform_dyn()); }
		if (HX_FIELD_EQ(inName,"set_soundTransform") ) { return hx::Val( set_soundTransform_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SoundChannel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"leftPeak") ) { leftPeak=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_position(inValue) ); }
		if (HX_FIELD_EQ(inName,"__source") ) { _hx___source=inValue.Cast<  ::lime::audio::AudioSource >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightPeak") ) { rightPeak=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isValid") ) { _hx___isValid=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_soundTransform(inValue) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SoundChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("leftPeak","\xc6","\x21","\x50","\x51"));
	outFields->push(HX_HCSTRING("position","\xa9","\xa0","\xfa","\xca"));
	outFields->push(HX_HCSTRING("rightPeak","\x1b","\x34","\x1b","\xb5"));
	outFields->push(HX_HCSTRING("soundTransform","\x9d","\xee","\xde","\x22"));
	outFields->push(HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"));
	outFields->push(HX_HCSTRING("__source","\xfb","\x1b","\x61","\xda"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SoundChannel_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,leftPeak),HX_HCSTRING("leftPeak","\xc6","\x21","\x50","\x51")},
	{hx::fsFloat,(int)offsetof(SoundChannel_obj,rightPeak),HX_HCSTRING("rightPeak","\x1b","\x34","\x1b","\xb5")},
	{hx::fsBool,(int)offsetof(SoundChannel_obj,_hx___isValid),HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f")},
	{hx::fsObject /*::lime::audio::AudioSource*/ ,(int)offsetof(SoundChannel_obj,_hx___source),HX_HCSTRING("__source","\xfb","\x1b","\x61","\xda")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SoundChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String SoundChannel_obj_sMemberFields[] = {
	HX_HCSTRING("leftPeak","\xc6","\x21","\x50","\x51"),
	HX_HCSTRING("rightPeak","\x1b","\x34","\x1b","\xb5"),
	HX_HCSTRING("__isValid","\x92","\x69","\x8c","\x4f"),
	HX_HCSTRING("__source","\xfb","\x1b","\x61","\xda"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	HX_HCSTRING("__dispose","\x7f","\xd1","\x9a","\x3c"),
	HX_HCSTRING("get_position","\xb2","\x54","\x14","\x80"),
	HX_HCSTRING("set_position","\x26","\x78","\x0d","\x95"),
	HX_HCSTRING("get_soundTransform","\x66","\xcf","\x78","\xbe"),
	HX_HCSTRING("set_soundTransform","\xda","\x01","\x28","\x9b"),
	HX_HCSTRING("source_onComplete","\x1c","\xb9","\x97","\x13"),
	::String(null()) };

static void SoundChannel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundChannel_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundChannel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::__mClass,"__mClass");
};

#endif

hx::Class SoundChannel_obj::__mClass;

void SoundChannel_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.media.SoundChannel","\xbc","\xb3","\xae","\x75");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SoundChannel_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SoundChannel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SoundChannel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundChannel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundChannel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace media
