// Generated by Haxe 3.3.0
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Serializer
#include <haxe/Serializer.h>
#endif
#ifndef INCLUDED_haxe_Unserializer
#include <haxe/Unserializer.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_Event_Int_Void
#include <lime/app/Event_Int_Void.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Application
#include <openfl/display/Application.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_NetConnection
#include <openfl/net/NetConnection.h>
#endif
#ifndef INCLUDED_openfl_net_SharedObject
#include <openfl/net/SharedObject.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

namespace openfl{
namespace net{

void SharedObject_obj::__construct(){
            	HX_STACK_FRAME("openfl.net.SharedObject","new",0x9a737b25,"openfl.net.SharedObject.new","openfl/net/SharedObject.hx",44,0x31b7bda9)
            	HX_STACK_THIS(this)
HXLINE(  46)		super::__construct(null());
HXLINE(  48)		this->client = hx::ObjectPtr<OBJ_>(this);
HXLINE(  49)		this->objectEncoding = (int)3;
            	}

Dynamic SharedObject_obj::__CreateEmpty() { return new SharedObject_obj; }

hx::ObjectPtr< SharedObject_obj > SharedObject_obj::__new()
{
	hx::ObjectPtr< SharedObject_obj > _hx_result = new SharedObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic SharedObject_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SharedObject_obj > _hx_result = new SharedObject_obj();
	_hx_result->__construct();
	return _hx_result;
}

void SharedObject_obj::clear(){
            	HX_STACK_FRAME("openfl.net.SharedObject","clear",0x69cf1792,"openfl.net.SharedObject.clear","openfl/net/SharedObject.hx",54,0x31b7bda9)
            	HX_STACK_THIS(this)
HXLINE(  56)		this->data =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  58)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  72)			::String _hx_tmp = ::lime::_hx_system::System_obj::get_applicationStorageDirectory();
HXDLIN(  72)			HX_VARI( ::String,path) = (((((_hx_tmp + HX_("/",2f,00,00,00)) + this->_hx___localPath) + HX_("/",2f,00,00,00)) + this->_hx___name) + HX_(".sol",e2,74,bf,1e));
HXLINE(  74)			Bool _hx_tmp1 = ::sys::FileSystem_obj::exists(path);
HXDLIN(  74)			if (_hx_tmp1) {
HXLINE(  76)				::sys::FileSystem_obj::deleteFile(path);
            			}
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,clear,(void))

void SharedObject_obj::close(){
            	HX_STACK_FRAME("openfl.net.SharedObject","close",0x69d6bdbd,"openfl.net.SharedObject.close","openfl/net/SharedObject.hx",87,0x31b7bda9)
            	HX_STACK_THIS(this)
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,close,(void))

void SharedObject_obj::connect( ::openfl::net::NetConnection myConnection,::String params){
            	HX_STACK_FRAME("openfl.net.SharedObject","connect",0x37ad2d2f,"openfl.net.SharedObject.connect","openfl/net/SharedObject.hx",96,0x31b7bda9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(myConnection,"myConnection")
            	HX_STACK_ARG(params,"params")
HXLINE(  96)		::openfl::Lib_obj::notImplemented(HX_("SharedObject.connect",e0,68,9e,77));
            	}


HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,connect,(void))

 ::Dynamic SharedObject_obj::flush(hx::Null< Int >  __o_minDiskSpace){
Int minDiskSpace = __o_minDiskSpace.Default(0);
            	HX_STACK_FRAME("openfl.net.SharedObject","flush",0x240f08c9,"openfl.net.SharedObject.flush","openfl/net/SharedObject.hx",101,0x31b7bda9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(minDiskSpace,"minDiskSpace")
HXLINE( 103)		Bool _hx_tmp = (::Reflect_obj::fields(this->data)->length == (int)0);
HXDLIN( 103)		if (_hx_tmp) {
HXLINE( 105)			return (int)0;
            		}
HXLINE( 109)		HX_VARI( ::String,encodedData) = ::haxe::Serializer_obj::run(this->data);
HXLINE( 111)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 126)			::String _hx_tmp1 = ::lime::_hx_system::System_obj::get_applicationStorageDirectory();
HXDLIN( 126)			HX_VARI( ::String,path) = ((_hx_tmp1 + HX_("/",2f,00,00,00)) + this->_hx___localPath);
HXLINE( 128)			Bool _hx_tmp2 = !(::sys::FileSystem_obj::exists(path));
HXDLIN( 128)			if (_hx_tmp2) {
HXLINE( 130)				::openfl::net::SharedObject_obj::_hx___mkdir(path);
            			}
HXLINE( 134)			HX_VARI(  ::sys::io::FileOutput,output) = ::sys::io::File_obj::write((((path + HX_("/",2f,00,00,00)) + this->_hx___name) + HX_(".sol",e2,74,bf,1e)),false);
HXLINE( 135)			output->writeString(encodedData);
HXLINE( 136)			output->close();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 142)				return (int)1;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 146)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,flush,return )

void SharedObject_obj::send(::cpp::VirtualArray arguments){
            	HX_STACK_FRAME("openfl.net.SharedObject","send",0x8de64ee3,"openfl.net.SharedObject.send","openfl/net/SharedObject.hx",239,0x31b7bda9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(arguments,"arguments")
HXLINE( 239)		::openfl::Lib_obj::notImplemented(HX_("SharedObject.send",92,4a,d0,41));
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,send,(void))

void SharedObject_obj::setDirty(::String propertyName){
            	HX_STACK_FRAME("openfl.net.SharedObject","setDirty",0xad2ae42b,"openfl.net.SharedObject.setDirty","openfl/net/SharedObject.hx",244,0x31b7bda9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(propertyName,"propertyName")
            	}


HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,setDirty,(void))

void SharedObject_obj::setProperty(::String propertyName, ::Dynamic value){
            	HX_STACK_FRAME("openfl.net.SharedObject","setProperty",0xd13889dc,"openfl.net.SharedObject.setProperty","openfl/net/SharedObject.hx",253,0x31b7bda9)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(propertyName,"propertyName")
            	HX_STACK_ARG(value,"value")
HXLINE( 253)		Bool _hx_tmp = hx::IsNotNull( this->data );
HXDLIN( 253)		if (_hx_tmp) {
HXLINE( 255)			::Reflect_obj::setField(this->data,propertyName,value);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(SharedObject_obj,setProperty,(void))

Int SharedObject_obj::get_size(){
            	HX_STACK_FRAME("openfl.net.SharedObject","get_size",0x91348765,"openfl.net.SharedObject.get_size","openfl/net/SharedObject.hx",391,0x31b7bda9)
            	HX_STACK_THIS(this)
HXLINE( 391)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 393)			HX_VARI( ::String,d) = ::haxe::Serializer_obj::run(this->data);
HXLINE( 394)			return ::haxe::io::Bytes_obj::ofString(d)->length;
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE( 398)				return (int)0;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 391)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SharedObject_obj,get_size,return )

Int SharedObject_obj::defaultObjectEncoding;

 ::haxe::ds::StringMap SharedObject_obj::_hx___sharedObjects;

 ::openfl::net::SharedObject SharedObject_obj::getLocal(::String name,::String localPath,hx::Null< Bool >  __o_secure){
Bool secure = __o_secure.Default(false);
            	HX_STACK_FRAME("openfl.net.SharedObject","getLocal",0x9dee0410,"openfl.net.SharedObject.getLocal","openfl/net/SharedObject.hx",151,0x31b7bda9)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(localPath,"localPath")
            	HX_STACK_ARG(secure,"secure")
HXLINE( 153)		Bool _hx_tmp = hx::IsNull( localPath );
HXDLIN( 153)		if (_hx_tmp) {
HXLINE( 158)			localPath = HX_("",00,00,00,00);
            		}
HXLINE( 163)		Bool _hx_tmp1 = hx::IsNull( ::openfl::net::SharedObject_obj::_hx___sharedObjects );
HXDLIN( 163)		if (_hx_tmp1) {
HXLINE( 165)			::openfl::net::SharedObject_obj::_hx___sharedObjects =  ::haxe::ds::StringMap_obj::__new();
HXLINE( 166)			::openfl::Lib_obj::application->onExit->add(::openfl::net::SharedObject_obj::application_onExit_dyn(),null(),null());
            		}
HXLINE( 170)		HX_VARI( ::String,id) = ((localPath + HX_("/",2f,00,00,00)) + name);
HXLINE( 172)		Bool _hx_tmp2 = !(::openfl::net::SharedObject_obj::_hx___sharedObjects->exists(id));
HXDLIN( 172)		if (_hx_tmp2) {
HXLINE( 174)			HX_VARI(  ::openfl::net::SharedObject,sharedObject) =  ::openfl::net::SharedObject_obj::__new();
HXLINE( 175)			sharedObject->data =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE( 176)			sharedObject->_hx___localPath = localPath;
HXLINE( 177)			sharedObject->_hx___name = name;
HXLINE( 179)			HX_VARI( ::String,encodedData) = null();
HXLINE( 181)			try {
            				HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 195)				::String _hx_tmp3 = ::lime::_hx_system::System_obj::get_applicationStorageDirectory();
HXDLIN( 195)				HX_VARI( ::String,path) = (((((_hx_tmp3 + HX_("/",2f,00,00,00)) + localPath) + HX_("/",2f,00,00,00)) + name) + HX_(".sol",e2,74,bf,1e));
HXLINE( 197)				Bool _hx_tmp4 = ::sys::FileSystem_obj::exists(path);
HXDLIN( 197)				if (_hx_tmp4) {
HXLINE( 199)					encodedData = ::sys::io::File_obj::getContent(path);
            				}
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::Dynamic >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::Dynamic e = _hx_e;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
HXLINE( 207)			Bool _hx_tmp5;
HXDLIN( 207)			Bool _hx_tmp6 = hx::IsNotNull( encodedData );
HXDLIN( 207)			if (_hx_tmp6) {
HXLINE( 207)				_hx_tmp5 = (encodedData != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 207)				_hx_tmp5 = false;
            			}
HXDLIN( 207)			if (_hx_tmp5) {
HXLINE( 209)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 211)					HX_VARI(  ::haxe::Unserializer,unserializer) =  ::haxe::Unserializer_obj::__new(encodedData);
HXLINE( 212)					unserializer->setResolver( ::Dynamic(hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("resolveClass",ac,bd,dd,80),::openfl::net::SharedObject_obj::_hx___resolveClass_dyn())
            						->setFixed(1,HX_("resolveEnum",0d,90,51,de),::Type_obj::resolveEnum_dyn())));
HXLINE( 213)					sharedObject->data = unserializer->unserialize();
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e1 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
HXLINE( 219)			::openfl::net::SharedObject_obj::_hx___sharedObjects->set(id,sharedObject);
            		}
HXLINE( 223)		return ::openfl::net::SharedObject_obj::_hx___sharedObjects->get(id).StaticCast<  ::openfl::net::SharedObject >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SharedObject_obj,getLocal,return )

 ::openfl::net::SharedObject SharedObject_obj::getRemote(::String name,::String remotePath, ::Dynamic __o_persistence,hx::Null< Bool >  __o_secure){
 ::Dynamic persistence = __o_persistence.Default(false);
Bool secure = __o_secure.Default(false);
            	HX_STACK_FRAME("openfl.net.SharedObject","getRemote",0x3d1eb041,"openfl.net.SharedObject.getRemote","openfl/net/SharedObject.hx",228,0x31b7bda9)
            	HX_STACK_ARG(name,"name")
            	HX_STACK_ARG(remotePath,"remotePath")
            	HX_STACK_ARG(persistence,"persistence")
            	HX_STACK_ARG(secure,"secure")
HXLINE( 230)		::openfl::Lib_obj::notImplemented(HX_("SharedObject.getRemote",32,fa,9a,48));
HXLINE( 232)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(SharedObject_obj,getRemote,return )

void SharedObject_obj::_hx___mkdir(::String directory){
            	HX_STACK_FRAME("openfl.net.SharedObject","__mkdir",0x963e96d4,"openfl.net.SharedObject.__mkdir","openfl/net/SharedObject.hx",262,0x31b7bda9)
            	HX_STACK_ARG(directory,"directory")
HXLINE( 268)		directory = ::StringTools_obj::replace(directory,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00));
HXLINE( 269)		HX_VARI( ::String,total) = HX_("",00,00,00,00);
HXLINE( 271)		::String _hx_tmp = directory.substr((int)0,(int)1);
HXDLIN( 271)		if ((_hx_tmp == HX_("/",2f,00,00,00))) {
HXLINE( 273)			total = HX_("/",2f,00,00,00);
            		}
HXLINE( 277)		HX_VARI( ::Array< ::String >,parts) = directory.split(HX_("/",2f,00,00,00));
HXLINE( 278)		HX_VARI( ::String,oldPath) = HX_("",00,00,00,00);
HXLINE( 280)		Bool _hx_tmp1;
HXDLIN( 280)		Bool _hx_tmp2 = (parts->length > (int)0);
HXDLIN( 280)		if (_hx_tmp2) {
HXLINE( 280)			Int _hx_tmp3 = parts->__get((int)0).indexOf(HX_(":",3a,00,00,00),null());
HXDLIN( 280)			_hx_tmp1 = (_hx_tmp3 > (int)-1);
            		}
            		else {
HXLINE( 280)			_hx_tmp1 = false;
            		}
HXDLIN( 280)		if (_hx_tmp1) {
HXLINE( 282)			oldPath = ::Sys_obj::getCwd();
HXLINE( 283)			::String _hx_tmp4 = (parts->__get((int)0) + HX_("\\",5c,00,00,00));
HXDLIN( 283)			::Sys_obj::setCwd(_hx_tmp4);
HXLINE( 284)			parts->shift();
            		}
HXLINE( 288)		{
HXLINE( 288)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 288)			while((_g < parts->length)){
HXLINE( 288)				HX_VARI( ::String,part) = parts->__get(_g);
HXDLIN( 288)				++_g;
HXLINE( 290)				Bool _hx_tmp5;
HXDLIN( 290)				if ((part != HX_(".",2e,00,00,00))) {
HXLINE( 290)					_hx_tmp5 = (part != HX_("",00,00,00,00));
            				}
            				else {
HXLINE( 290)					_hx_tmp5 = false;
            				}
HXDLIN( 290)				if (_hx_tmp5) {
HXLINE( 292)					Bool _hx_tmp6;
HXDLIN( 292)					if ((total != HX_("",00,00,00,00))) {
HXLINE( 292)						_hx_tmp6 = (total != HX_("/",2f,00,00,00));
            					}
            					else {
HXLINE( 292)						_hx_tmp6 = false;
            					}
HXDLIN( 292)					if (_hx_tmp6) {
HXLINE( 294)						hx::AddEq(total,HX_("/",2f,00,00,00));
            					}
HXLINE( 298)					hx::AddEq(total,part);
HXLINE( 300)					Bool _hx_tmp7 = !(::sys::FileSystem_obj::exists(total));
HXDLIN( 300)					if (_hx_tmp7) {
HXLINE( 302)						::sys::FileSystem_obj::createDirectory(total);
            					}
            				}
            			}
            		}
HXLINE( 310)		if ((oldPath != HX_("",00,00,00,00))) {
HXLINE( 312)			::Sys_obj::setCwd(oldPath);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,_hx___mkdir,(void))

hx::Class SharedObject_obj::_hx___resolveClass(::String name){
            	HX_STACK_FRAME("openfl.net.SharedObject","__resolveClass",0x44fa3227,"openfl.net.SharedObject.__resolveClass","openfl/net/SharedObject.hx",321,0x31b7bda9)
            	HX_STACK_ARG(name,"name")
HXLINE( 323)		Bool _hx_tmp = hx::IsNotNull( name );
HXDLIN( 323)		if (_hx_tmp) {
HXLINE( 325)			Bool _hx_tmp1 = ::StringTools_obj::startsWith(name,HX_("neash.",ef,97,2f,63));
HXDLIN( 325)			if (_hx_tmp1) {
HXLINE( 327)				name = ::StringTools_obj::replace(name,HX_("neash.",ef,97,2f,63),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 331)			Bool _hx_tmp2 = ::StringTools_obj::startsWith(name,HX_("native.",b7,9a,13,b7));
HXDLIN( 331)			if (_hx_tmp2) {
HXLINE( 333)				name = ::StringTools_obj::replace(name,HX_("native.",b7,9a,13,b7),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 337)			Bool _hx_tmp3 = ::StringTools_obj::startsWith(name,HX_("flash.",7e,c4,22,38));
HXDLIN( 337)			if (_hx_tmp3) {
HXLINE( 339)				name = ::StringTools_obj::replace(name,HX_("flash.",7e,c4,22,38),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 343)			Bool _hx_tmp4 = ::StringTools_obj::startsWith(name,HX_("openfl._v2.",51,5c,9c,49));
HXDLIN( 343)			if (_hx_tmp4) {
HXLINE( 345)				name = ::StringTools_obj::replace(name,HX_("openfl._v2.",51,5c,9c,49),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 349)			Bool _hx_tmp5 = ::StringTools_obj::startsWith(name,HX_("openfl._legacy.",e4,67,0c,9f));
HXDLIN( 349)			if (_hx_tmp5) {
HXLINE( 351)				name = ::StringTools_obj::replace(name,HX_("openfl._legacy.",e4,67,0c,9f),HX_("openfl.",9e,ba,42,40));
            			}
HXLINE( 355)			return ::Type_obj::resolveClass(name);
            		}
HXLINE( 359)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,_hx___resolveClass,return )

void SharedObject_obj::application_onExit(Int _){
            	HX_STACK_FRAME("openfl.net.SharedObject","application_onExit",0x83beab07,"openfl.net.SharedObject.application_onExit","openfl/net/SharedObject.hx",373,0x31b7bda9)
            	HX_STACK_ARG(_,"_")
HXLINE( 373)		HX_VARI(  ::Dynamic,tmp) = ::openfl::net::SharedObject_obj::_hx___sharedObjects->iterator();
HXDLIN( 373)		while(true){
HXLINE( 373)			Bool _hx_tmp = !(( (Bool)( ::Dynamic(tmp->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic))()) ));
HXDLIN( 373)			if (_hx_tmp) {
HXLINE( 373)				goto _hx_goto_1;
            			}
HXDLIN( 373)			HX_VARI(  ::openfl::net::SharedObject,sharedObject) = ( ( ::openfl::net::SharedObject)( ::Dynamic(tmp->__Field(HX_("next",f3,84,02,49),hx::paccDynamic))()) );
HXLINE( 375)			sharedObject->flush(null());
            		}
            		_hx_goto_1:;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SharedObject_obj,application_onExit,(void))


SharedObject_obj::SharedObject_obj()
{
}

void SharedObject_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SharedObject);
	HX_MARK_MEMBER_NAME(client,"client");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(fps,"fps");
	HX_MARK_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_MARK_MEMBER_NAME(_hx___localPath,"__localPath");
	HX_MARK_MEMBER_NAME(_hx___name,"__name");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SharedObject_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(client,"client");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(fps,"fps");
	HX_VISIT_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_VISIT_MEMBER_NAME(_hx___localPath,"__localPath");
	HX_VISIT_MEMBER_NAME(_hx___name,"__name");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

hx::Val SharedObject_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { return hx::Val( fps); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_size()); }
		if (HX_FIELD_EQ(inName,"send") ) { return hx::Val( send_dyn()); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn()); }
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn()); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { return hx::Val( client); }
		if (HX_FIELD_EQ(inName,"__name") ) { return hx::Val( _hx___name); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { return hx::Val( connect_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setDirty") ) { return hx::Val( setDirty_dyn()); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return hx::Val( get_size_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__localPath") ) { return hx::Val( _hx___localPath); }
		if (HX_FIELD_EQ(inName,"setProperty") ) { return hx::Val( setProperty_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { return hx::Val( objectEncoding); }
	}
	return super::__Field(inName,inCallProp);
}

bool SharedObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"__mkdir") ) { outValue = _hx___mkdir_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getLocal") ) { outValue = getLocal_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getRemote") ) { outValue = getRemote_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__resolveClass") ) { outValue = _hx___resolveClass_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__sharedObjects") ) { outValue = _hx___sharedObjects; return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"application_onExit") ) { outValue = application_onExit_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultObjectEncoding") ) { outValue = defaultObjectEncoding; return true; }
	}
	return false;
}

hx::Val SharedObject_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"fps") ) { fps=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { client=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__name") ) { _hx___name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"__localPath") ) { _hx___localPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { objectEncoding=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SharedObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"__sharedObjects") ) { _hx___sharedObjects=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"defaultObjectEncoding") ) { defaultObjectEncoding=ioValue.Cast< Int >(); return true; }
	}
	return false;
}

void SharedObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("client","\x4b","\xca","\x4f","\x0a"));
	outFields->push(HX_HCSTRING("data","\x2a","\x56","\x63","\x42"));
	outFields->push(HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"));
	outFields->push(HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"));
	outFields->push(HX_HCSTRING("size","\xc1","\xa0","\x53","\x4c"));
	outFields->push(HX_HCSTRING("__localPath","\x90","\xb5","\xc0","\x3a"));
	outFields->push(HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SharedObject_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SharedObject_obj,client),HX_HCSTRING("client","\x4b","\xca","\x4f","\x0a")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SharedObject_obj,data),HX_HCSTRING("data","\x2a","\x56","\x63","\x42")},
	{hx::fsFloat,(int)offsetof(SharedObject_obj,fps),HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00")},
	{hx::fsInt,(int)offsetof(SharedObject_obj,objectEncoding),HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a")},
	{hx::fsString,(int)offsetof(SharedObject_obj,_hx___localPath),HX_HCSTRING("__localPath","\x90","\xb5","\xc0","\x3a")},
	{hx::fsString,(int)offsetof(SharedObject_obj,_hx___name),HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SharedObject_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &SharedObject_obj::defaultObjectEncoding,HX_HCSTRING("defaultObjectEncoding","\x53","\xfb","\xeb","\xff")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(void *) &SharedObject_obj::_hx___sharedObjects,HX_HCSTRING("__sharedObjects","\x8f","\xb9","\xf2","\xe8")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SharedObject_obj_sMemberFields[] = {
	HX_HCSTRING("client","\x4b","\xca","\x4f","\x0a"),
	HX_HCSTRING("data","\x2a","\x56","\x63","\x42"),
	HX_HCSTRING("fps","\xe9","\xc7","\x4d","\x00"),
	HX_HCSTRING("objectEncoding","\xb2","\x1e","\x15","\x2a"),
	HX_HCSTRING("__localPath","\x90","\xb5","\xc0","\x3a"),
	HX_HCSTRING("__name","\x6b","\xd5","\xf7","\xf7"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	HX_HCSTRING("connect","\xea","\x3b","\x80","\x15"),
	HX_HCSTRING("flush","\xc4","\x62","\x9b","\x02"),
	HX_HCSTRING("send","\x48","\x8d","\x50","\x4c"),
	HX_HCSTRING("setDirty","\x10","\xb9","\x04","\xe8"),
	HX_HCSTRING("setProperty","\x17","\x12","\x99","\xdc"),
	HX_HCSTRING("get_size","\x4a","\x5c","\x0e","\xcc"),
	::String(null()) };

static void SharedObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SharedObject_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(SharedObject_obj::defaultObjectEncoding,"defaultObjectEncoding");
	HX_MARK_MEMBER_NAME(SharedObject_obj::_hx___sharedObjects,"__sharedObjects");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SharedObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SharedObject_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(SharedObject_obj::defaultObjectEncoding,"defaultObjectEncoding");
	HX_VISIT_MEMBER_NAME(SharedObject_obj::_hx___sharedObjects,"__sharedObjects");
};

#endif

hx::Class SharedObject_obj::__mClass;

static ::String SharedObject_obj_sStaticFields[] = {
	HX_HCSTRING("defaultObjectEncoding","\x53","\xfb","\xeb","\xff"),
	HX_HCSTRING("__sharedObjects","\x8f","\xb9","\xf2","\xe8"),
	HX_HCSTRING("getLocal","\xf5","\xd8","\xc7","\xd8"),
	HX_HCSTRING("getRemote","\xbc","\x23","\xdf","\x80"),
	HX_HCSTRING("__mkdir","\x8f","\xa5","\x11","\x74"),
	HX_HCSTRING("__resolveClass","\xcc","\x40","\x9e","\xa1"),
	HX_HCSTRING("application_onExit","\x2c","\x70","\x9f","\x9f"),
	::String(null())
};

void SharedObject_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.net.SharedObject","\xb3","\x04","\xac","\x0a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SharedObject_obj::__GetStatic;
	__mClass->mSetStaticField = &SharedObject_obj::__SetStatic;
	__mClass->mMarkFunc = SharedObject_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SharedObject_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SharedObject_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SharedObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SharedObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SharedObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SharedObject_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SharedObject_obj::__boot()
{
{
            	HX_STACK_FRAME("openfl.net.SharedObject","boot",0x82b145cd,"openfl.net.SharedObject.boot","openfl/net/SharedObject.hx",29,0x31b7bda9)
HXLINE(  29)		defaultObjectEncoding = (int)3;
            	}
}

} // end namespace openfl
} // end namespace net
