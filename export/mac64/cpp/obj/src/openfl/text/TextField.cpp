// Generated by Haxe 3.3.0
#include <hxcpp.h>

#include "hxMath.h"
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeWindow
#include <lime/_backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_Event_String_Void
#include <lime/app/Event_String_Void.h>
#endif
#ifndef INCLUDED_lime_app_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void
#include <lime/app/Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_CanvasRenderContext
#include <lime/graphics/CanvasRenderContext.h>
#endif
#ifndef INCLUDED_lime_system_Clipboard
#include <lime/system/Clipboard.h>
#endif
#ifndef INCLUDED_lime_ui_MouseCursor
#include <lime/ui/MouseCursor.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_lime_ui__KeyModifier_KeyModifier_Impl_
#include <lime/ui/_KeyModifier/KeyModifier_Impl_.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractMaskManager
#include <openfl/_internal/renderer/AbstractMaskManager.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_AbstractRenderer
#include <openfl/_internal/renderer/AbstractRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_DrawCommandBuffer
#include <openfl/_internal/renderer/DrawCommandBuffer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_RenderSession
#include <openfl/_internal/renderer/RenderSession.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTextField
#include <openfl/_internal/renderer/cairo/CairoTextField.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLRenderer
#include <openfl/_internal/renderer/opengl/GLRenderer.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_utils_SpriteBatch
#include <openfl/_internal/renderer/opengl/utils/SpriteBatch.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextEngine
#include <openfl/_internal/text/TextEngine.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextFormatRange
#include <openfl/_internal/text/TextFormatRange.h>
#endif
#ifndef INCLUDED_openfl__internal_text_TextLayoutGroup
#include <openfl/_internal/text/TextLayoutGroup.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_FocusEvent
#include <openfl/events/FocusEvent.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_MouseEvent
#include <openfl/events/MouseEvent.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_text_TextLineMetrics
#include <openfl/text/TextLineMetrics.h>
#endif

namespace openfl{
namespace text{

void TextField_obj::__construct(){
            	HX_STACK_FRAME("openfl.text.TextField","new",0xbd7676bc,"openfl.text.TextField.new","openfl/text/TextField.hx",91,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(  93)		super::__construct();
HXLINE(  95)		this->_hx___caretIndex = (int)-1;
HXLINE(  96)		this->_hx___graphics =  ::openfl::display::Graphics_obj::__new();
HXLINE(  97)		this->_hx___textEngine =  ::openfl::_internal::text::TextEngine_obj::__new(hx::ObjectPtr<OBJ_>(this));
HXLINE(  98)		this->_hx___layoutDirty = true;
HXLINE(  99)		this->_hx___tabEnabled = true;
HXLINE( 101)		Bool _hx_tmp = hx::IsNull( ::openfl::text::TextField_obj::_hx___defaultTextFormat );
HXDLIN( 101)		if (_hx_tmp) {
HXLINE( 103)			::openfl::text::TextField_obj::_hx___defaultTextFormat =  ::openfl::text::TextFormat_obj::__new(HX_("Times New Roman",03,86,44,c3),(int)12,(int)0,false,false,false,HX_("",00,00,00,00),HX_("",00,00,00,00),(int)3,(int)0,(int)0,(int)0,(int)0);
HXLINE( 104)			::openfl::text::TextField_obj::_hx___defaultTextFormat->blockIndent = (int)0;
HXLINE( 105)			::openfl::text::TextField_obj::_hx___defaultTextFormat->bullet = false;
HXLINE( 106)			::openfl::text::TextField_obj::_hx___defaultTextFormat->letterSpacing = (int)0;
HXLINE( 107)			::openfl::text::TextField_obj::_hx___defaultTextFormat->kerning = false;
            		}
HXLINE( 111)		this->_hx___textFormat = ::openfl::text::TextField_obj::_hx___defaultTextFormat->clone();
HXLINE( 112)		this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(this->_hx___textFormat,(int)0,(int)0));
HXLINE( 114)		this->addEventListener(HX_("mouseDown",27,b1,c2,ee),this->this_onMouseDown_dyn(),null(),null(),null());
            	}

Dynamic TextField_obj::__CreateEmpty() { return new TextField_obj; }

hx::ObjectPtr< TextField_obj > TextField_obj::__new()
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

Dynamic TextField_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TextField_obj > _hx_result = new TextField_obj();
	_hx_result->__construct();
	return _hx_result;
}

void TextField_obj::appendText(::String text){
            	HX_STACK_FRAME("openfl.text.TextField","appendText",0xaa44eccb,"openfl.text.TextField.appendText","openfl/text/TextField.hx",119,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(text,"text")
HXLINE( 121)		hx::AddEq(this->_hx___textEngine->text,text);
HXLINE( 122)		Int _hx_tmp = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN( 122)		this->_hx___textEngine->textFormatRanges->__get(_hx_tmp).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___textEngine->text.length;
HXLINE( 124)		this->_hx___dirty = true;
HXLINE( 125)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,appendText,(void))

 ::openfl::geom::Rectangle TextField_obj::getCharBoundaries(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getCharBoundaries",0xf44814d0,"openfl.text.TextField.getCharBoundaries","openfl/text/TextField.hx",130,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 132)		Bool _hx_tmp;
HXDLIN( 132)		if ((charIndex >= (int)0)) {
HXLINE( 132)			_hx_tmp = (charIndex > (this->_hx___textEngine->text.length - (int)1));
            		}
            		else {
HXLINE( 132)			_hx_tmp = true;
            		}
HXDLIN( 132)		if (_hx_tmp) {
HXLINE( 132)			return null();
            		}
HXLINE( 134)		this->_hx___updateLayout();
HXLINE( 136)		{
HXLINE( 136)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 136)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 136)			while((_g < _g1->length)){
HXLINE( 136)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 136)				++_g;
HXLINE( 138)				Bool _hx_tmp1;
HXDLIN( 138)				if ((charIndex >= group->startIndex)) {
HXLINE( 138)					_hx_tmp1 = (charIndex <= group->endIndex);
            				}
            				else {
HXLINE( 138)					_hx_tmp1 = false;
            				}
HXDLIN( 138)				if (_hx_tmp1) {
HXLINE( 140)					HX_VARI( Float,x) = group->offsetX;
HXLINE( 142)					{
HXLINE( 142)						HX_VARI( Int,_g3) = (int)0;
HXDLIN( 142)						HX_VARI( Int,_g2) = (charIndex - group->startIndex);
HXDLIN( 142)						while((_g3 < _g2)){
HXLINE( 142)							HX_VARI( Int,i) = _g3++;
HXLINE( 144)							hx::AddEq(x,group->advances->__get(i));
            						}
            					}
HXLINE( 148)					return  ::openfl::geom::Rectangle_obj::__new(x,group->offsetY,group->advances->__get((charIndex - group->startIndex)),(group->ascent + group->descent));
            				}
            			}
            		}
HXLINE( 154)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getCharBoundaries,return )

Int TextField_obj::getCharIndexAtPoint(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","getCharIndexAtPoint",0x758b0c73,"openfl.text.TextField.getCharIndexAtPoint","openfl/text/TextField.hx",159,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 161)		Bool _hx_tmp;
HXDLIN( 161)		Bool _hx_tmp1;
HXDLIN( 161)		Bool _hx_tmp2;
HXDLIN( 161)		if (!((x <= (int)2))) {
HXLINE( 161)			Float _hx_tmp3 = this->get_width();
HXDLIN( 161)			_hx_tmp2 = (x > (_hx_tmp3 + (int)4));
            		}
            		else {
HXLINE( 161)			_hx_tmp2 = true;
            		}
HXDLIN( 161)		if (!(_hx_tmp2)) {
HXLINE( 161)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 161)			_hx_tmp1 = true;
            		}
HXDLIN( 161)		if (!(_hx_tmp1)) {
HXLINE( 161)			Float _hx_tmp4 = this->get_height();
HXDLIN( 161)			_hx_tmp = (y > (_hx_tmp4 + (int)4));
            		}
            		else {
HXLINE( 161)			_hx_tmp = true;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXLINE( 161)			return (int)-1;
            		}
HXLINE( 163)		this->_hx___updateLayout();
HXLINE( 165)		Int _hx_tmp5 = this->get_scrollH();
HXDLIN( 165)		hx::AddEq(x,_hx_tmp5);
HXLINE( 167)		{
HXLINE( 167)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 167)			Int _hx_tmp6 = this->get_scrollV();
HXDLIN( 167)			HX_VARI( Int,_g) = (_hx_tmp6 - (int)1);
HXDLIN( 167)			while((_g1 < _g)){
HXLINE( 167)				HX_VARI( Int,i) = _g1++;
HXLINE( 169)				hx::AddEq(y,this->_hx___textEngine->lineHeights->__get(i));
            			}
            		}
HXLINE( 173)		{
HXLINE( 173)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 173)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___textEngine->layoutGroups;
HXDLIN( 173)			while((_g2 < _g11->length)){
HXLINE( 173)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 173)				++_g2;
HXLINE( 175)				Bool _hx_tmp7;
HXDLIN( 175)				if ((y >= group->offsetY)) {
HXLINE( 175)					_hx_tmp7 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 175)					_hx_tmp7 = false;
            				}
HXDLIN( 175)				if (_hx_tmp7) {
HXLINE( 177)					Bool _hx_tmp8;
HXDLIN( 177)					if ((x >= group->offsetX)) {
HXLINE( 177)						_hx_tmp8 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 177)						_hx_tmp8 = false;
            					}
HXDLIN( 177)					if (_hx_tmp8) {
HXLINE( 179)						HX_VARI( Float,advance) = ((Float)0.0);
HXLINE( 181)						{
HXLINE( 181)							HX_VARI( Int,_g3) = (int)0;
HXDLIN( 181)							HX_VARI_NAME( Int,_g21,"_g2") = group->advances->length;
HXDLIN( 181)							while((_g3 < _g21)){
HXLINE( 181)								HX_VARI_NAME( Int,i1,"i") = _g3++;
HXLINE( 183)								hx::AddEq(advance,group->advances->__get(i1));
HXLINE( 185)								if ((x <= (group->offsetX + advance))) {
HXLINE( 187)									return (group->startIndex + i1);
            								}
            							}
            						}
HXLINE( 193)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 201)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getCharIndexAtPoint,return )

Int TextField_obj::getFirstCharInParagraph(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getFirstCharInParagraph",0xe06fd955,"openfl.text.TextField.getFirstCharInParagraph","openfl/text/TextField.hx",206,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 208)		Bool _hx_tmp;
HXDLIN( 208)		if ((charIndex >= (int)0)) {
HXLINE( 208)			_hx_tmp = (charIndex > (this->_hx___textEngine->text.length - (int)1));
            		}
            		else {
HXLINE( 208)			_hx_tmp = true;
            		}
HXDLIN( 208)		if (_hx_tmp) {
HXLINE( 208)			return (int)0;
            		}
HXLINE( 210)		HX_VARI( Int,index) = this->_hx___textEngine->text.indexOf(HX_("\n",0a,00,00,00),null());
HXLINE( 211)		HX_VARI( Int,startIndex) = (int)0;
HXLINE( 213)		while((index > (int)-1)){
HXLINE( 215)			if ((index <= charIndex)) {
HXLINE( 217)				startIndex = (index + (int)1);
            			}
            			else {
HXLINE( 219)				if ((index > charIndex)) {
HXLINE( 221)					goto _hx_goto_5;
            				}
            			}
HXLINE( 225)			index = this->_hx___textEngine->text.indexOf(HX_("\n",0a,00,00,00),(index + (int)1));
            		}
            		_hx_goto_5:;
HXLINE( 229)		return startIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getFirstCharInParagraph,return )

Int TextField_obj::getLineIndexAtPoint(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","getLineIndexAtPoint",0x633efa91,"openfl.text.TextField.getLineIndexAtPoint","openfl/text/TextField.hx",234,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 236)		this->_hx___updateLayout();
HXLINE( 238)		Bool _hx_tmp;
HXDLIN( 238)		Bool _hx_tmp1;
HXDLIN( 238)		Bool _hx_tmp2;
HXDLIN( 238)		if (!((x <= (int)2))) {
HXLINE( 238)			Float _hx_tmp3 = this->get_width();
HXDLIN( 238)			_hx_tmp2 = (x > (_hx_tmp3 + (int)4));
            		}
            		else {
HXLINE( 238)			_hx_tmp2 = true;
            		}
HXDLIN( 238)		if (!(_hx_tmp2)) {
HXLINE( 238)			_hx_tmp1 = (y <= (int)0);
            		}
            		else {
HXLINE( 238)			_hx_tmp1 = true;
            		}
HXDLIN( 238)		if (!(_hx_tmp1)) {
HXLINE( 238)			Float _hx_tmp4 = this->get_height();
HXDLIN( 238)			_hx_tmp = (y > (_hx_tmp4 + (int)4));
            		}
            		else {
HXLINE( 238)			_hx_tmp = true;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 238)			return (int)-1;
            		}
HXLINE( 240)		{
HXLINE( 240)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 240)			Int _hx_tmp5 = this->get_scrollV();
HXDLIN( 240)			HX_VARI( Int,_g) = (_hx_tmp5 - (int)1);
HXDLIN( 240)			while((_g1 < _g)){
HXLINE( 240)				HX_VARI( Int,i) = _g1++;
HXLINE( 242)				hx::AddEq(y,this->_hx___textEngine->lineHeights->__get(i));
            			}
            		}
HXLINE( 246)		{
HXLINE( 246)			HX_VARI_NAME( Int,_g2,"_g") = (int)0;
HXDLIN( 246)			HX_VARI_NAME( ::Array< ::Dynamic>,_g11,"_g1") = this->_hx___textEngine->layoutGroups;
HXDLIN( 246)			while((_g2 < _g11->length)){
HXLINE( 246)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g11->__get(_g2).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 246)				++_g2;
HXLINE( 248)				Bool _hx_tmp6;
HXDLIN( 248)				if ((y >= group->offsetY)) {
HXLINE( 248)					_hx_tmp6 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 248)					_hx_tmp6 = false;
            				}
HXDLIN( 248)				if (_hx_tmp6) {
HXLINE( 250)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 256)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getLineIndexAtPoint,return )

Int TextField_obj::getLineIndexOfChar(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineIndexOfChar",0xcab049d9,"openfl.text.TextField.getLineIndexOfChar","openfl/text/TextField.hx",261,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 263)		Bool _hx_tmp;
HXDLIN( 263)		if ((charIndex >= (int)0)) {
HXLINE( 263)			_hx_tmp = (charIndex > (this->_hx___textEngine->text.length - (int)1));
            		}
            		else {
HXLINE( 263)			_hx_tmp = true;
            		}
HXDLIN( 263)		if (_hx_tmp) {
HXLINE( 263)			return (int)-1;
            		}
HXLINE( 265)		this->_hx___updateLayout();
HXLINE( 267)		{
HXLINE( 267)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 267)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 267)			while((_g < _g1->length)){
HXLINE( 267)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 267)				++_g;
HXLINE( 269)				Bool _hx_tmp1;
HXDLIN( 269)				if ((group->startIndex <= charIndex)) {
HXLINE( 269)					_hx_tmp1 = (group->endIndex >= charIndex);
            				}
            				else {
HXLINE( 269)					_hx_tmp1 = false;
            				}
HXDLIN( 269)				if (_hx_tmp1) {
HXLINE( 271)					return group->lineIndex;
            				}
            			}
            		}
HXLINE( 277)		return (int)-1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineIndexOfChar,return )

Int TextField_obj::getLineLength(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineLength",0x953e9d8c,"openfl.text.TextField.getLineLength","openfl/text/TextField.hx",282,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 284)		this->_hx___updateLayout();
HXLINE( 286)		Bool _hx_tmp;
HXDLIN( 286)		if ((lineIndex >= (int)0)) {
HXLINE( 286)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 286)			_hx_tmp = true;
            		}
HXDLIN( 286)		if (_hx_tmp) {
HXLINE( 286)			return (int)0;
            		}
HXLINE( 288)		HX_VARI( Int,startIndex) = (int)-1;
HXLINE( 289)		HX_VARI( Int,endIndex) = (int)-1;
HXLINE( 291)		{
HXLINE( 291)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 291)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 291)			while((_g < _g1->length)){
HXLINE( 291)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 291)				++_g;
HXLINE( 293)				if ((group->lineIndex == lineIndex)) {
HXLINE( 295)					Bool _hx_tmp1 = (startIndex == (int)-1);
HXDLIN( 295)					if (_hx_tmp1) {
HXLINE( 295)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 297)					if ((group->lineIndex == (lineIndex + (int)1))) {
HXLINE( 299)						endIndex = group->startIndex;
HXLINE( 300)						goto _hx_goto_9;
            					}
            				}
            			}
            			_hx_goto_9:;
            		}
HXLINE( 306)		Bool _hx_tmp2 = (endIndex == (int)-1);
HXDLIN( 306)		if (_hx_tmp2) {
HXLINE( 306)			endIndex = this->_hx___textEngine->text.length;
            		}
HXLINE( 307)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineLength,return )

 ::openfl::text::TextLineMetrics TextField_obj::getLineMetrics(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineMetrics",0xa6c52add,"openfl.text.TextField.getLineMetrics","openfl/text/TextField.hx",312,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 314)		this->_hx___updateLayout();
HXLINE( 316)		HX_VARI( Float,ascender) = this->_hx___textEngine->lineAscents->__get(lineIndex);
HXLINE( 317)		HX_VARI( Float,descender) = this->_hx___textEngine->lineDescents->__get(lineIndex);
HXLINE( 318)		HX_VARI( Float,leading) = this->_hx___textEngine->lineLeadings->__get(lineIndex);
HXLINE( 319)		HX_VARI( Float,lineHeight) = this->_hx___textEngine->lineHeights->__get(lineIndex);
HXLINE( 320)		HX_VARI( Float,lineWidth) = this->_hx___textEngine->lineWidths->__get(lineIndex);
HXLINE( 324)		HX_VAR( Float,margin);
HXDLIN( 324)		 ::Dynamic _hx_switch_0 = this->_hx___textFormat->align;
            		if (  (_hx_switch_0==(int)0) ){
HXLINE( 324)			margin = ((Float)(this->_hx___textEngine->width - lineWidth) / (Float)(int)2);
HXDLIN( 324)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)4) ){
HXLINE( 324)			margin = ((this->_hx___textEngine->width - lineWidth) - (int)2);
HXDLIN( 324)			goto _hx_goto_10;
            		}
            		if (  (_hx_switch_0==(int)2) ||  (_hx_switch_0==(int)3) ||  (_hx_switch_0==(int)5) ){
HXLINE( 324)			margin = (int)2;
HXDLIN( 324)			goto _hx_goto_10;
            		}
            		_hx_goto_10:;
HXLINE( 332)		return  ::openfl::text::TextLineMetrics_obj::__new(margin,lineWidth,lineHeight,ascender,descender,leading);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineMetrics,return )

Int TextField_obj::getLineOffset(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineOffset",0x5676a039,"openfl.text.TextField.getLineOffset","openfl/text/TextField.hx",337,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 339)		this->_hx___updateLayout();
HXLINE( 341)		Bool _hx_tmp;
HXDLIN( 341)		if ((lineIndex >= (int)0)) {
HXLINE( 341)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 341)			_hx_tmp = true;
            		}
HXDLIN( 341)		if (_hx_tmp) {
HXLINE( 341)			return (int)-1;
            		}
HXLINE( 343)		{
HXLINE( 343)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 343)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 343)			while((_g < _g1->length)){
HXLINE( 343)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 343)				++_g;
HXLINE( 345)				if ((group->lineIndex == lineIndex)) {
HXLINE( 347)					return group->startIndex;
            				}
            			}
            		}
HXLINE( 353)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineOffset,return )

::String TextField_obj::getLineText(Int lineIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getLineText",0xb8113fd3,"openfl.text.TextField.getLineText","openfl/text/TextField.hx",358,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(lineIndex,"lineIndex")
HXLINE( 360)		this->_hx___updateLayout();
HXLINE( 362)		Bool _hx_tmp;
HXDLIN( 362)		if ((lineIndex >= (int)0)) {
HXLINE( 362)			_hx_tmp = (lineIndex > (this->_hx___textEngine->numLines - (int)1));
            		}
            		else {
HXLINE( 362)			_hx_tmp = true;
            		}
HXDLIN( 362)		if (_hx_tmp) {
HXLINE( 362)			return null();
            		}
HXLINE( 364)		HX_VARI( Int,startIndex) = (int)-1;
HXLINE( 365)		HX_VARI( Int,endIndex) = (int)-1;
HXLINE( 367)		{
HXLINE( 367)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 367)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->layoutGroups;
HXDLIN( 367)			while((_g < _g1->length)){
HXLINE( 367)				HX_VARI(  ::openfl::_internal::text::TextLayoutGroup,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXDLIN( 367)				++_g;
HXLINE( 369)				if ((group->lineIndex == lineIndex)) {
HXLINE( 371)					Bool _hx_tmp1 = (startIndex == (int)-1);
HXDLIN( 371)					if (_hx_tmp1) {
HXLINE( 371)						startIndex = group->startIndex;
            					}
            				}
            				else {
HXLINE( 373)					if ((group->lineIndex == (lineIndex + (int)1))) {
HXLINE( 375)						endIndex = group->startIndex;
HXLINE( 376)						goto _hx_goto_12;
            					}
            				}
            			}
            			_hx_goto_12:;
            		}
HXLINE( 382)		Bool _hx_tmp2 = (endIndex == (int)-1);
HXDLIN( 382)		if (_hx_tmp2) {
HXLINE( 382)			endIndex = this->_hx___textEngine->text.length;
            		}
HXLINE( 384)		return this->_hx___textEngine->text.substring(startIndex,endIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getLineText,return )

Int TextField_obj::getParagraphLength(Int charIndex){
            	HX_STACK_FRAME("openfl.text.TextField","getParagraphLength",0xed64f022,"openfl.text.TextField.getParagraphLength","openfl/text/TextField.hx",389,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(charIndex,"charIndex")
HXLINE( 391)		Bool _hx_tmp;
HXDLIN( 391)		if ((charIndex >= (int)0)) {
HXLINE( 391)			_hx_tmp = (charIndex > (this->_hx___textEngine->text.length - (int)1));
            		}
            		else {
HXLINE( 391)			_hx_tmp = true;
            		}
HXDLIN( 391)		if (_hx_tmp) {
HXLINE( 391)			return (int)0;
            		}
HXLINE( 393)		HX_VARI( Int,startIndex) = this->getFirstCharInParagraph(charIndex);
HXLINE( 394)		Int _hx_tmp1 = this->_hx___textEngine->text.indexOf(HX_("\n",0a,00,00,00),charIndex);
HXDLIN( 394)		HX_VARI( Int,endIndex) = (_hx_tmp1 + (int)1);
HXLINE( 396)		Bool _hx_tmp2 = (endIndex == (int)0);
HXDLIN( 396)		if (_hx_tmp2) {
HXLINE( 396)			endIndex = this->_hx___textEngine->text.length;
            		}
HXLINE( 397)		return (endIndex - startIndex);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,getParagraphLength,return )

 ::openfl::text::TextFormat TextField_obj::getTextFormat(hx::Null< Int >  __o_beginIndex,hx::Null< Int >  __o_endIndex){
Int beginIndex = __o_beginIndex.Default(0);
Int endIndex = __o_endIndex.Default(0);
            	HX_STACK_FRAME("openfl.text.TextField","getTextFormat",0x560e1d56,"openfl.text.TextField.getTextFormat","openfl/text/TextField.hx",402,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 404)		HX_VARI(  ::openfl::text::TextFormat,format) = null();
HXLINE( 406)		{
HXLINE( 406)			HX_VARI( Int,_g) = (int)0;
HXDLIN( 406)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->textFormatRanges;
HXDLIN( 406)			while((_g < _g1->length)){
HXLINE( 406)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,group) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN( 406)				++_g;
HXLINE( 408)				Bool _hx_tmp;
HXDLIN( 408)				Bool _hx_tmp1;
HXDLIN( 408)				if ((group->start <= beginIndex)) {
HXLINE( 408)					_hx_tmp1 = (group->end >= beginIndex);
            				}
            				else {
HXLINE( 408)					_hx_tmp1 = false;
            				}
HXDLIN( 408)				if (!(_hx_tmp1)) {
HXLINE( 408)					if ((group->start <= endIndex)) {
HXLINE( 408)						_hx_tmp = (group->end >= endIndex);
            					}
            					else {
HXLINE( 408)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 408)					_hx_tmp = true;
            				}
HXDLIN( 408)				if (_hx_tmp) {
HXLINE( 410)					Bool _hx_tmp2 = hx::IsNull( format );
HXDLIN( 410)					if (_hx_tmp2) {
HXLINE( 412)						format = group->format->clone();
            					}
            					else {
HXLINE( 416)						if ((group->format->font != format->font)) {
HXLINE( 416)							format->font = null();
            						}
HXLINE( 417)						Bool _hx_tmp3 = hx::IsNotEq( group->format->size,format->size );
HXDLIN( 417)						if (_hx_tmp3) {
HXLINE( 417)							format->size = null();
            						}
HXLINE( 418)						Bool _hx_tmp4 = hx::IsNotEq( group->format->color,format->color );
HXDLIN( 418)						if (_hx_tmp4) {
HXLINE( 418)							format->color = null();
            						}
HXLINE( 419)						Bool _hx_tmp5 = hx::IsNotEq( group->format->bold,format->bold );
HXDLIN( 419)						if (_hx_tmp5) {
HXLINE( 419)							format->bold = null();
            						}
HXLINE( 420)						Bool _hx_tmp6 = hx::IsNotEq( group->format->italic,format->italic );
HXDLIN( 420)						if (_hx_tmp6) {
HXLINE( 420)							format->italic = null();
            						}
HXLINE( 421)						Bool _hx_tmp7 = hx::IsNotEq( group->format->underline,format->underline );
HXDLIN( 421)						if (_hx_tmp7) {
HXLINE( 421)							format->underline = null();
            						}
HXLINE( 422)						if ((group->format->url != format->url)) {
HXLINE( 422)							format->url = null();
            						}
HXLINE( 423)						if ((group->format->target != format->target)) {
HXLINE( 423)							format->target = null();
            						}
HXLINE( 424)						Bool _hx_tmp8 = hx::IsNotEq( group->format->align,format->align );
HXDLIN( 424)						if (_hx_tmp8) {
HXLINE( 424)							format->align = null();
            						}
HXLINE( 425)						Bool _hx_tmp9 = hx::IsNotEq( group->format->leftMargin,format->leftMargin );
HXDLIN( 425)						if (_hx_tmp9) {
HXLINE( 425)							format->leftMargin = null();
            						}
HXLINE( 426)						Bool _hx_tmp10 = hx::IsNotEq( group->format->rightMargin,format->rightMargin );
HXDLIN( 426)						if (_hx_tmp10) {
HXLINE( 426)							format->rightMargin = null();
            						}
HXLINE( 427)						Bool _hx_tmp11 = hx::IsNotEq( group->format->indent,format->indent );
HXDLIN( 427)						if (_hx_tmp11) {
HXLINE( 427)							format->indent = null();
            						}
HXLINE( 428)						Bool _hx_tmp12 = hx::IsNotEq( group->format->leading,format->leading );
HXDLIN( 428)						if (_hx_tmp12) {
HXLINE( 428)							format->leading = null();
            						}
HXLINE( 429)						Bool _hx_tmp13 = hx::IsNotEq( group->format->blockIndent,format->blockIndent );
HXDLIN( 429)						if (_hx_tmp13) {
HXLINE( 429)							format->blockIndent = null();
            						}
HXLINE( 430)						Bool _hx_tmp14 = hx::IsNotEq( group->format->bullet,format->bullet );
HXDLIN( 430)						if (_hx_tmp14) {
HXLINE( 430)							format->bullet = null();
            						}
HXLINE( 431)						Bool _hx_tmp15 = hx::IsNotEq( group->format->kerning,format->kerning );
HXDLIN( 431)						if (_hx_tmp15) {
HXLINE( 431)							format->kerning = null();
            						}
HXLINE( 432)						Bool _hx_tmp16 = hx::IsNotEq( group->format->letterSpacing,format->letterSpacing );
HXDLIN( 432)						if (_hx_tmp16) {
HXLINE( 432)							format->letterSpacing = null();
            						}
HXLINE( 433)						if (hx::IsNotEq( group->format->tabStops,format->tabStops )) {
HXLINE( 433)							format->tabStops = null();
            						}
            					}
            				}
            			}
            		}
HXLINE( 441)		return format;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,getTextFormat,return )

void TextField_obj::replaceSelectedText(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","replaceSelectedText",0x86221d58,"openfl.text.TextField.replaceSelectedText","openfl/text/TextField.hx",446,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 448)		Bool _hx_tmp;
HXDLIN( 448)		if ((value == HX_("",00,00,00,00))) {
HXLINE( 448)			_hx_tmp = (this->_hx___selectionIndex == this->_hx___caretIndex);
            		}
            		else {
HXLINE( 448)			_hx_tmp = false;
            		}
HXDLIN( 448)		if (_hx_tmp) {
HXLINE( 448)			return;
            		}
HXLINE( 450)		HX_VAR( Int,startIndex);
HXDLIN( 450)		if ((this->_hx___caretIndex < this->_hx___selectionIndex)) {
HXLINE( 450)			startIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 450)			startIndex = this->_hx___selectionIndex;
            		}
HXLINE( 451)		HX_VAR( Int,endIndex);
HXDLIN( 451)		if ((this->_hx___caretIndex > this->_hx___selectionIndex)) {
HXLINE( 451)			endIndex = this->_hx___caretIndex;
            		}
            		else {
HXLINE( 451)			endIndex = this->_hx___selectionIndex;
            		}
HXLINE( 453)		this->replaceText(startIndex,endIndex,value);
HXLINE( 455)		this->_hx___caretIndex = (startIndex + value.length);
HXLINE( 456)		this->_hx___selectionIndex = this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,replaceSelectedText,(void))

void TextField_obj::replaceText(Int beginIndex,Int endIndex,::String newText){
            	HX_STACK_FRAME("openfl.text.TextField","replaceText",0x698fcd5d,"openfl.text.TextField.replaceText","openfl/text/TextField.hx",461,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
            	HX_STACK_ARG(newText,"newText")
HXLINE( 463)		Bool _hx_tmp;
HXDLIN( 463)		Bool _hx_tmp1;
HXDLIN( 463)		Bool _hx_tmp2;
HXDLIN( 463)		if ((endIndex >= beginIndex)) {
HXLINE( 463)			_hx_tmp2 = (beginIndex < (int)0);
            		}
            		else {
HXLINE( 463)			_hx_tmp2 = true;
            		}
HXDLIN( 463)		if (!(_hx_tmp2)) {
HXLINE( 463)			_hx_tmp1 = (endIndex > this->_hx___textEngine->text.length);
            		}
            		else {
HXLINE( 463)			_hx_tmp1 = true;
            		}
HXDLIN( 463)		if (!(_hx_tmp1)) {
HXLINE( 463)			_hx_tmp = hx::IsNull( newText );
            		}
            		else {
HXLINE( 463)			_hx_tmp = true;
            		}
HXDLIN( 463)		if (_hx_tmp) {
HXLINE( 463)			return;
            		}
HXLINE( 465)		::String _hx_tmp3 = this->_hx___textEngine->text.substring((int)0,beginIndex);
HXDLIN( 465)		::String _hx_tmp4 = (_hx_tmp3 + newText);
HXDLIN( 465)		::String _hx_tmp5 = this->_hx___textEngine->text.substring(endIndex,null());
HXDLIN( 465)		this->_hx___textEngine->text = (_hx_tmp4 + _hx_tmp5);
HXLINE( 467)		HX_VARI( Int,offset) = (newText.length - (endIndex - beginIndex));
HXLINE( 469)		HX_VARI( Int,i) = (int)0;
HXLINE( 470)		HX_VAR(  ::openfl::_internal::text::TextFormatRange,range);
HXLINE( 472)		while((i < this->_hx___textEngine->textFormatRanges->length)){
HXLINE( 474)			range = this->_hx___textEngine->textFormatRanges->__get(i).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE( 476)			Bool _hx_tmp6;
HXDLIN( 476)			if ((range->start <= beginIndex)) {
HXLINE( 476)				_hx_tmp6 = (range->end >= endIndex);
            			}
            			else {
HXLINE( 476)				_hx_tmp6 = false;
            			}
HXDLIN( 476)			if (_hx_tmp6) {
HXLINE( 478)				hx::AddEq(range->end,offset);
HXLINE( 479)				++i;
            			}
            			else {
HXLINE( 481)				Bool _hx_tmp7;
HXDLIN( 481)				if ((range->start >= beginIndex)) {
HXLINE( 481)					_hx_tmp7 = (range->end <= endIndex);
            				}
            				else {
HXLINE( 481)					_hx_tmp7 = false;
            				}
HXDLIN( 481)				if (_hx_tmp7) {
HXLINE( 483)					this->_hx___textEngine->textFormatRanges->removeRange(i,(int)1);
HXLINE( 484)					hx::SubEq(offset,(range->end - range->start));
            				}
            				else {
HXLINE( 486)					Bool _hx_tmp8;
HXDLIN( 486)					if ((range->start > beginIndex)) {
HXLINE( 486)						_hx_tmp8 = (range->start <= endIndex);
            					}
            					else {
HXLINE( 486)						_hx_tmp8 = false;
            					}
HXDLIN( 486)					if (_hx_tmp8) {
HXLINE( 488)						hx::AddEq(range->start,offset);
HXLINE( 489)						++i;
            					}
            					else {
HXLINE( 493)						++i;
            					}
            				}
            			}
            		}
HXLINE( 499)		this->_hx___dirty = true;
HXLINE( 500)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,replaceText,(void))

void TextField_obj::setSelection(Int beginIndex,Int endIndex){
            	HX_STACK_FRAME("openfl.text.TextField","setSelection",0xa586666e,"openfl.text.TextField.setSelection","openfl/text/TextField.hx",505,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 507)		this->_hx___selectionIndex = beginIndex;
HXLINE( 508)		this->_hx___caretIndex = endIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,setSelection,(void))

void TextField_obj::setTextFormat( ::openfl::text::TextFormat format,hx::Null< Int >  __o_beginIndex,hx::Null< Int >  __o_endIndex){
Int beginIndex = __o_beginIndex.Default(0);
Int endIndex = __o_endIndex.Default(0);
            	HX_STACK_FRAME("openfl.text.TextField","setTextFormat",0x9b13ff62,"openfl.text.TextField.setTextFormat","openfl/text/TextField.hx",513,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(format,"format")
            	HX_STACK_ARG(beginIndex,"beginIndex")
            	HX_STACK_ARG(endIndex,"endIndex")
HXLINE( 515)		Bool _hx_tmp = hx::IsNotNull( format->font );
HXDLIN( 515)		if (_hx_tmp) {
HXLINE( 515)			this->_hx___textFormat->font = format->font;
            		}
HXLINE( 516)		Bool _hx_tmp1 = hx::IsNotNull( format->size );
HXDLIN( 516)		if (_hx_tmp1) {
HXLINE( 516)			this->_hx___textFormat->size = format->size;
            		}
HXLINE( 517)		Bool _hx_tmp2 = hx::IsNotNull( format->color );
HXDLIN( 517)		if (_hx_tmp2) {
HXLINE( 517)			this->_hx___textFormat->color = format->color;
            		}
HXLINE( 518)		Bool _hx_tmp3 = hx::IsNotNull( format->bold );
HXDLIN( 518)		if (_hx_tmp3) {
HXLINE( 518)			this->_hx___textFormat->bold = format->bold;
            		}
HXLINE( 519)		Bool _hx_tmp4 = hx::IsNotNull( format->italic );
HXDLIN( 519)		if (_hx_tmp4) {
HXLINE( 519)			this->_hx___textFormat->italic = format->italic;
            		}
HXLINE( 520)		Bool _hx_tmp5 = hx::IsNotNull( format->underline );
HXDLIN( 520)		if (_hx_tmp5) {
HXLINE( 520)			this->_hx___textFormat->underline = format->underline;
            		}
HXLINE( 521)		Bool _hx_tmp6 = hx::IsNotNull( format->url );
HXDLIN( 521)		if (_hx_tmp6) {
HXLINE( 521)			this->_hx___textFormat->url = format->url;
            		}
HXLINE( 522)		Bool _hx_tmp7 = hx::IsNotNull( format->target );
HXDLIN( 522)		if (_hx_tmp7) {
HXLINE( 522)			this->_hx___textFormat->target = format->target;
            		}
HXLINE( 523)		Bool _hx_tmp8 = hx::IsNotNull( format->align );
HXDLIN( 523)		if (_hx_tmp8) {
HXLINE( 523)			this->_hx___textFormat->align = format->align;
            		}
HXLINE( 524)		Bool _hx_tmp9 = hx::IsNotNull( format->leftMargin );
HXDLIN( 524)		if (_hx_tmp9) {
HXLINE( 524)			this->_hx___textFormat->leftMargin = format->leftMargin;
            		}
HXLINE( 525)		Bool _hx_tmp10 = hx::IsNotNull( format->rightMargin );
HXDLIN( 525)		if (_hx_tmp10) {
HXLINE( 525)			this->_hx___textFormat->rightMargin = format->rightMargin;
            		}
HXLINE( 526)		Bool _hx_tmp11 = hx::IsNotNull( format->indent );
HXDLIN( 526)		if (_hx_tmp11) {
HXLINE( 526)			this->_hx___textFormat->indent = format->indent;
            		}
HXLINE( 527)		Bool _hx_tmp12 = hx::IsNotNull( format->leading );
HXDLIN( 527)		if (_hx_tmp12) {
HXLINE( 527)			this->_hx___textFormat->leading = format->leading;
            		}
HXLINE( 528)		Bool _hx_tmp13 = hx::IsNotNull( format->blockIndent );
HXDLIN( 528)		if (_hx_tmp13) {
HXLINE( 528)			this->_hx___textFormat->blockIndent = format->blockIndent;
            		}
HXLINE( 529)		Bool _hx_tmp14 = hx::IsNotNull( format->bullet );
HXDLIN( 529)		if (_hx_tmp14) {
HXLINE( 529)			this->_hx___textFormat->bullet = format->bullet;
            		}
HXLINE( 530)		Bool _hx_tmp15 = hx::IsNotNull( format->kerning );
HXDLIN( 530)		if (_hx_tmp15) {
HXLINE( 530)			this->_hx___textFormat->kerning = format->kerning;
            		}
HXLINE( 531)		Bool _hx_tmp16 = hx::IsNotNull( format->letterSpacing );
HXDLIN( 531)		if (_hx_tmp16) {
HXLINE( 531)			this->_hx___textFormat->letterSpacing = format->letterSpacing;
            		}
HXLINE( 532)		Bool _hx_tmp17 = hx::IsNotNull( format->tabStops );
HXDLIN( 532)		if (_hx_tmp17) {
HXLINE( 532)			this->_hx___textFormat->tabStops = format->tabStops;
            		}
HXLINE( 534)		this->_hx___dirty = true;
HXLINE( 535)		this->_hx___layoutDirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC3(TextField_obj,setTextFormat,(void))

void TextField_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACK_FRAME("openfl.text.TextField","__getBounds",0x189abae7,"openfl.text.TextField.__getBounds","openfl/text/TextField.hx",540,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(rect,"rect")
            	HX_STACK_ARG(matrix,"matrix")
HXLINE( 542)		this->_hx___updateLayout();
HXLINE( 543)		HX_VARI(  ::openfl::geom::Rectangle,bounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXLINE( 544)		this->_hx___textEngine->bounds->_hx___transform(bounds,matrix);
HXLINE( 545)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
            	}


::hx::EnumBase TextField_obj::_hx___getCursor(){
            	HX_STACK_FRAME("openfl.text.TextField","__getCursor",0xf165c348,"openfl.text.TextField.__getCursor","openfl/text/TextField.hx",552,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 552)		if (this->_hx___textEngine->selectable) {
HXLINE( 552)			return ::lime::ui::MouseCursor_obj::TEXT_dyn();
            		}
            		else {
HXLINE( 552)			return null();
            		}
HXDLIN( 552)		return null();
            	}


Int TextField_obj::_hx___getPosition(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","__getPosition",0xfe83559b,"openfl.text.TextField.__getPosition","openfl/text/TextField.hx",557,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 559)		this->_hx___updateLayout();
HXLINE( 561)		Int _hx_tmp = this->get_scrollH();
HXDLIN( 561)		hx::AddEq(x,_hx_tmp);
HXLINE( 563)		{
HXLINE( 563)			HX_VARI( Int,_g1) = (int)0;
HXDLIN( 563)			Int _hx_tmp1 = this->get_scrollV();
HXDLIN( 563)			HX_VARI( Int,_g) = (_hx_tmp1 - (int)1);
HXDLIN( 563)			while((_g1 < _g)){
HXLINE( 563)				HX_VARI( Int,i) = _g1++;
HXLINE( 565)				hx::AddEq(y,this->_hx___textEngine->lineHeights->__get(i));
            			}
            		}
HXLINE( 569)		Bool _hx_tmp2 = (y > this->_hx___textEngine->textHeight);
HXDLIN( 569)		if (_hx_tmp2) {
HXLINE( 569)			y = this->_hx___textEngine->textHeight;
            		}
HXLINE( 571)		HX_VARI( Bool,firstGroup) = true;
HXLINE( 572)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,group);
HXDLIN( 572)		HX_VAR(  ::openfl::_internal::text::TextLayoutGroup,nextGroup);
HXLINE( 574)		{
HXLINE( 574)			HX_VARI_NAME( Int,_g11,"_g1") = (int)0;
HXDLIN( 574)			HX_VARI_NAME( Int,_g2,"_g") = this->_hx___textEngine->layoutGroups->length;
HXDLIN( 574)			while((_g11 < _g2)){
HXLINE( 574)				HX_VARI_NAME( Int,i1,"i") = _g11++;
HXLINE( 576)				group = this->_hx___textEngine->layoutGroups->__get(i1).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
HXLINE( 578)				if ((i1 < (this->_hx___textEngine->layoutGroups->length - (int)1))) {
HXLINE( 580)					nextGroup = this->_hx___textEngine->layoutGroups->__get((i1 + (int)1)).StaticCast<  ::openfl::_internal::text::TextLayoutGroup >();
            				}
            				else {
HXLINE( 584)					nextGroup = null();
            				}
HXLINE( 588)				Bool _hx_tmp3 = firstGroup;
HXDLIN( 588)				if (_hx_tmp3) {
HXLINE( 590)					Bool _hx_tmp4 = (y < group->offsetY);
HXDLIN( 590)					if (_hx_tmp4) {
HXLINE( 590)						y = group->offsetY;
            					}
HXLINE( 591)					Bool _hx_tmp5 = (x < group->offsetX);
HXDLIN( 591)					if (_hx_tmp5) {
HXLINE( 591)						x = group->offsetX;
            					}
HXLINE( 592)					firstGroup = false;
            				}
HXLINE( 596)				Bool _hx_tmp6;
HXDLIN( 596)				Bool _hx_tmp7;
HXDLIN( 596)				if ((y >= group->offsetY)) {
HXLINE( 596)					_hx_tmp7 = (y <= (group->offsetY + group->height));
            				}
            				else {
HXLINE( 596)					_hx_tmp7 = false;
            				}
HXDLIN( 596)				if (!(_hx_tmp7)) {
HXLINE( 596)					_hx_tmp6 = hx::IsNull( nextGroup );
            				}
            				else {
HXLINE( 596)					_hx_tmp6 = true;
            				}
HXDLIN( 596)				if (_hx_tmp6) {
HXLINE( 598)					Bool _hx_tmp8;
HXDLIN( 598)					Bool _hx_tmp9;
HXDLIN( 598)					if ((x >= group->offsetX)) {
HXLINE( 598)						_hx_tmp9 = (x <= (group->offsetX + group->width));
            					}
            					else {
HXLINE( 598)						_hx_tmp9 = false;
            					}
HXDLIN( 598)					if (!(_hx_tmp9)) {
HXLINE( 598)						Bool _hx_tmp10 = hx::IsNotNull( nextGroup );
HXDLIN( 598)						if (_hx_tmp10) {
HXLINE( 598)							_hx_tmp8 = (nextGroup->lineIndex != group->lineIndex);
            						}
            						else {
HXLINE( 598)							_hx_tmp8 = true;
            						}
            					}
            					else {
HXLINE( 598)						_hx_tmp8 = true;
            					}
HXDLIN( 598)					if (_hx_tmp8) {
HXLINE( 600)						HX_VARI( Float,advance) = ((Float)0.0);
HXLINE( 602)						{
HXLINE( 602)							HX_VARI( Int,_g3) = (int)0;
HXDLIN( 602)							HX_VARI_NAME( Int,_g21,"_g2") = group->advances->length;
HXDLIN( 602)							while((_g3 < _g21)){
HXLINE( 602)								HX_VARI_NAME( Int,i2,"i") = _g3++;
HXLINE( 604)								hx::AddEq(advance,group->advances->__get(i2));
HXLINE( 606)								if ((x <= (group->offsetX + advance))) {
HXLINE( 608)									if ((x <= ((group->offsetX + (advance - group->advances->__get(i2))) + ((Float)group->advances->__get(i2) / (Float)(int)2)))) {
HXLINE( 610)										return (group->startIndex + i2);
            									}
            									else {
HXLINE( 614)										if (((group->startIndex + i2) < group->endIndex)) {
HXLINE( 614)											return ((group->startIndex + i2) + (int)1);
            										}
            										else {
HXLINE( 614)											return group->endIndex;
            										}
            									}
            								}
            							}
            						}
HXLINE( 622)						return group->endIndex;
            					}
            				}
            			}
            		}
HXLINE( 630)		return this->_hx___textEngine->text.length;
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,_hx___getPosition,return )

Bool TextField_obj::_hx___hitTest(Float x,Float y,Bool shapeFlag,::Array< ::Dynamic> stack,Bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACK_FRAME("openfl.text.TextField","__hitTest",0x83278481,"openfl.text.TextField.__hitTest","openfl/text/TextField.hx",635,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
            	HX_STACK_ARG(shapeFlag,"shapeFlag")
            	HX_STACK_ARG(stack,"stack")
            	HX_STACK_ARG(interactiveOnly,"interactiveOnly")
            	HX_STACK_ARG(hitObject,"hitObject")
HXLINE( 637)		Bool _hx_tmp;
HXDLIN( 637)		Bool _hx_tmp1;
HXDLIN( 637)		Bool _hx_tmp2 = !(!(hitObject->get_visible()));
HXDLIN( 637)		if (_hx_tmp2) {
HXLINE( 637)			_hx_tmp1 = this->_hx___isMask;
            		}
            		else {
HXLINE( 637)			_hx_tmp1 = true;
            		}
HXDLIN( 637)		if (!(_hx_tmp1)) {
HXLINE( 637)			if (interactiveOnly) {
HXLINE( 637)				_hx_tmp = !(this->mouseEnabled);
            			}
            			else {
HXLINE( 637)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 637)			_hx_tmp = true;
            		}
HXDLIN( 637)		if (_hx_tmp) {
HXLINE( 637)			return false;
            		}
HXLINE( 638)		Bool _hx_tmp3;
HXDLIN( 638)		 ::openfl::display::DisplayObject _hx_tmp4 = this->get_mask();
HXDLIN( 638)		Bool _hx_tmp5 = hx::IsNotNull( _hx_tmp4 );
HXDLIN( 638)		if (_hx_tmp5) {
HXLINE( 638)			_hx_tmp3 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 638)			_hx_tmp3 = false;
            		}
HXDLIN( 638)		if (_hx_tmp3) {
HXLINE( 638)			return false;
            		}
HXLINE( 640)		this->_hx___getWorldTransform();
HXLINE( 641)		this->_hx___updateLayout();
HXLINE( 643)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___worldTransform;
HXDLIN( 643)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 643)		HX_VAR( Float,px);
HXDLIN( 643)		if ((norm == (int)0)) {
HXLINE( 643)			px = -(_this->tx);
            		}
            		else {
HXLINE( 643)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 644)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___worldTransform;
HXDLIN( 644)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 644)		HX_VAR( Float,py);
HXDLIN( 644)		if ((norm1 == (int)0)) {
HXLINE( 644)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 644)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 646)		Bool _hx_tmp6 = this->_hx___textEngine->bounds->contains(px,py);
HXDLIN( 646)		if (_hx_tmp6) {
HXLINE( 648)			Bool _hx_tmp7 = hx::IsNotNull( stack );
HXDLIN( 648)			if (_hx_tmp7) {
HXLINE( 650)				stack->push(hitObject);
            			}
HXLINE( 654)			return true;
            		}
HXLINE( 658)		return false;
            	}


Bool TextField_obj::_hx___hitTestMask(Float x,Float y){
            	HX_STACK_FRAME("openfl.text.TextField","__hitTestMask",0x0119c60d,"openfl.text.TextField.__hitTestMask","openfl/text/TextField.hx",663,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(x,"x")
            	HX_STACK_ARG(y,"y")
HXLINE( 665)		this->_hx___getWorldTransform();
HXLINE( 666)		this->_hx___updateLayout();
HXLINE( 668)		HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___worldTransform;
HXDLIN( 668)		HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXDLIN( 668)		HX_VAR( Float,px);
HXDLIN( 668)		if ((norm == (int)0)) {
HXLINE( 668)			px = -(_this->tx);
            		}
            		else {
HXLINE( 668)			px = (((Float)((Float)1.0) / (Float)norm) * ((_this->c * (_this->ty - y)) + (_this->d * (x - _this->tx))));
            		}
HXLINE( 669)		HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___worldTransform;
HXDLIN( 669)		HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXDLIN( 669)		HX_VAR( Float,py);
HXDLIN( 669)		if ((norm1 == (int)0)) {
HXLINE( 669)			py = -(_this1->ty);
            		}
            		else {
HXLINE( 669)			py = (((Float)((Float)1.0) / (Float)norm1) * ((_this1->a * (y - _this1->ty)) + (_this1->b * (_this1->tx - x))));
            		}
HXLINE( 671)		Bool _hx_tmp = this->_hx___textEngine->bounds->contains(px,py);
HXDLIN( 671)		if (_hx_tmp) {
HXLINE( 673)			return true;
            		}
HXLINE( 677)		return false;
            	}


void TextField_obj::_hx___renderCairo( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderCairo",0x1a5f4f8e,"openfl.text.TextField.__renderCairo","openfl/text/TextField.hx",682,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 684)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
HXLINE( 685)		this->super::_hx___renderCairo(renderSession);
            	}


void TextField_obj::_hx___renderCanvas( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderCanvas",0xfc575b12,"openfl.text.TextField.__renderCanvas","openfl/text/TextField.hx",694,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 694)		Bool _hx_tmp;
HXDLIN( 694)		if (hx::IsEq( this->_hx___textEngine->antiAliasType,(int)0 )) {
HXLINE( 694)			_hx_tmp = hx::IsEq( this->_hx___textEngine->gridFitType,(int)1 );
            		}
            		else {
HXLINE( 694)			_hx_tmp = false;
            		}
HXDLIN( 694)		if (_hx_tmp) {
HXLINE( 696)			HX_VARI( Bool,smoothingEnabled) = renderSession->context->imageSmoothingEnabled;
HXLINE( 698)			if (smoothingEnabled) {
HXLINE( 700)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),false,hx::paccDynamic);
HXLINE( 702)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),false,hx::paccDynamic);
HXLINE( 703)				renderSession->context->imageSmoothingEnabled = false;
            			}
HXLINE( 707)			this->super::_hx___renderCanvas(renderSession);
HXLINE( 709)			if (smoothingEnabled) {
HXLINE( 711)				renderSession->context->__SetField(HX_("mozImageSmoothingEnabled",f0,68,e1,d7),true,hx::paccDynamic);
HXLINE( 713)				renderSession->context->__SetField(HX_("msImageSmoothingEnabled",a2,61,6c,a3),true,hx::paccDynamic);
HXLINE( 714)				renderSession->context->imageSmoothingEnabled = true;
            			}
            		}
            		else {
HXLINE( 720)			this->super::_hx___renderCanvas(renderSession);
            		}
            	}


void TextField_obj::_hx___renderDOM( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderDOM",0x037e5808,"openfl.text.TextField.__renderDOM","openfl/text/TextField.hx",729,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
            	}


void TextField_obj::_hx___renderGL( ::openfl::_internal::renderer::RenderSession renderSession){
            	HX_STACK_FRAME("openfl.text.TextField","__renderGL",0xa5533b3f,"openfl.text.TextField.__renderGL","openfl/text/TextField.hx",734,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(renderSession,"renderSession")
HXLINE( 736)		Bool _hx_tmp = this->_hx___cacheAsBitmap;
HXDLIN( 736)		if (_hx_tmp) {
HXLINE( 737)			{
HXLINE( 737)				HX_VARI( Bool,hasCacheMatrix) = hx::IsNotNull( this->_hx___cacheAsBitmapMatrix );
HXDLIN( 737)				HX_VARI( Float,x) = this->_hx___cachedBitmapBounds->x;
HXDLIN( 737)				HX_VARI( Float,y) = this->_hx___cachedBitmapBounds->y;
HXDLIN( 737)				HX_VARI( Float,w) = this->_hx___cachedBitmapBounds->width;
HXDLIN( 737)				HX_VARI( Float,h) = this->_hx___cachedBitmapBounds->height;
HXDLIN( 737)				Bool _hx_tmp1 = hx::IsNull( this->_hx___cacheGLMatrix );
HXDLIN( 737)				if (_hx_tmp1) {
HXLINE( 737)					this->_hx___cacheGLMatrix =  ::openfl::geom::Matrix_obj::__new(null(),null(),null(),null(),null(),null());
            				}
HXDLIN( 737)				if (hasCacheMatrix) {
HXLINE( 737)					HX_VARI(  ::openfl::geom::Rectangle,bmpBounds) = ::openfl::geom::Rectangle_obj::_hx___temp;
HXDLIN( 737)					this->_hx___cachedBitmapBounds->_hx___transform(bmpBounds,this->_hx___cacheAsBitmapMatrix);
HXDLIN( 737)					x = bmpBounds->x;
HXDLIN( 737)					y = bmpBounds->y;
HXDLIN( 737)					w = bmpBounds->width;
HXDLIN( 737)					h = bmpBounds->height;
HXDLIN( 737)					this->_hx___cacheGLMatrix = this->_hx___cacheAsBitmapMatrix->clone();
            				}
            				else {
HXLINE( 737)					this->_hx___cacheGLMatrix->identity();
            				}
HXDLIN( 737)				Bool _hx_tmp2;
HXDLIN( 737)				if ((w <= (int)0)) {
HXLINE( 737)					_hx_tmp2 = (h <= (int)0);
            				}
            				else {
HXLINE( 737)					_hx_tmp2 = false;
            				}
HXDLIN( 737)				if (!(_hx_tmp2)) {
HXLINE( 737)					Bool _hx_tmp3;
HXDLIN( 737)					if (!(this->_hx___updateCachedBitmap)) {
HXLINE( 737)						_hx_tmp3 = this->_hx___updateFilters;
            					}
            					else {
HXLINE( 737)						_hx_tmp3 = true;
            					}
HXDLIN( 737)					if (_hx_tmp3) {
HXLINE( 737)						Bool _hx_tmp4 = hx::IsNotNull( this->_hx___cachedFilterBounds );
HXDLIN( 737)						if (_hx_tmp4) {
HXLINE( 737)							Float _hx_tmp5 = ::Math_obj::abs(this->_hx___cachedFilterBounds->x);
HXDLIN( 737)							Float _hx_tmp6 = ::Math_obj::abs(this->_hx___cachedFilterBounds->width);
HXDLIN( 737)							hx::AddEq(w,(_hx_tmp5 + _hx_tmp6));
HXDLIN( 737)							Float _hx_tmp7 = ::Math_obj::abs(this->_hx___cachedFilterBounds->y);
HXDLIN( 737)							Float _hx_tmp8 = ::Math_obj::abs(this->_hx___cachedFilterBounds->height);
HXDLIN( 737)							hx::AddEq(h,(_hx_tmp7 + _hx_tmp8));
            						}
HXDLIN( 737)						Bool _hx_tmp9 = hx::IsNull( this->_hx___cachedBitmap );
HXDLIN( 737)						if (_hx_tmp9) {
HXLINE( 737)							this->_hx___cachedBitmap = ::openfl::display::BitmapData_obj::_hx___asRenderTexture(null(),null());
            						}
HXDLIN( 737)						Int _hx_tmp10 = ::Math_obj::ceil(w);
HXDLIN( 737)						Int _hx_tmp11 = ::Math_obj::ceil(h);
HXDLIN( 737)						this->_hx___cachedBitmap->_hx___resize(_hx_tmp10,_hx_tmp11);
HXDLIN( 737)						HX_VARI(  ::openfl::geom::Matrix,m) = this->_hx___cacheGLMatrix->clone();
HXDLIN( 737)						m->translate(-(x),-(y));
HXDLIN( 737)						HX_VARI(  ::openfl::display::Shader,shader) = this->_hx___shader;
HXDLIN( 737)						this->_hx___shader = null();
HXDLIN( 737)						this->_hx___cachedBitmap->_hx___drawGL(renderSession,hx::ObjectPtr<OBJ_>(this),m,null(),null(),null(),true,false,true,null(),null());
HXDLIN( 737)						this->_hx___shader = shader;
HXDLIN( 737)						this->_hx___updateCachedBitmap = false;
            					}
HXDLIN( 737)					Bool _hx_tmp12 = this->_hx___updateFilters;
HXDLIN( 737)					if (_hx_tmp12) {
HXLINE( 737)						::openfl::filters::BitmapFilter_obj::_hx___applyFilters(this->_hx___filters,renderSession,this->_hx___cachedBitmap,this->_hx___cachedBitmap,null(),null());
HXDLIN( 737)						this->_hx___updateFilters = false;
            					}
HXDLIN( 737)					this->_hx___cacheGLMatrix->invert();
HXDLIN( 737)					{
HXLINE( 737)						HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___cacheGLMatrix;
HXDLIN( 737)						Float _hx_tmp13 = ((x * _this->a) + (y * _this->c));
HXDLIN( 737)						_this->tx = (_hx_tmp13 + _this->tx);
HXDLIN( 737)						Float _hx_tmp14 = ((x * _this->b) + (y * _this->d));
HXDLIN( 737)						_this->ty = (_hx_tmp14 + _this->ty);
            					}
HXDLIN( 737)					this->_hx___cacheGLMatrix->concat(this->_hx___renderTransform);
HXDLIN( 737)					this->_hx___cacheGLMatrix->translate(this->_hx___offset->x,this->_hx___offset->y);
HXDLIN( 737)					renderSession->spriteBatch->renderBitmapData(this->_hx___cachedBitmap,this->_hx___cacheAsBitmapSmooth,this->_hx___cacheGLMatrix,this->_hx___worldColorTransform,this->_hx___worldAlpha,this->blendMode,this->_hx___shader,(int)0,null());
            				}
            			}
HXLINE( 738)			return;
            		}
HXLINE( 741)		{
HXLINE( 741)			Bool _hx_tmp15 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 741)			if (_hx_tmp15) {
HXLINE( 741)				renderSession->maskManager->pushRect(this->_hx___scrollRect,this->_hx___renderTransform);
            			}
HXDLIN( 741)			Bool _hx_tmp16;
HXDLIN( 741)			Bool _hx_tmp17;
HXDLIN( 741)			Bool _hx_tmp18 = hx::IsNotNull( this->_hx___mask );
HXDLIN( 741)			if (_hx_tmp18) {
HXLINE( 741)				_hx_tmp17 = hx::IsNotNull( this->_hx___maskGraphics );
            			}
            			else {
HXLINE( 741)				_hx_tmp17 = false;
            			}
HXDLIN( 741)			if (_hx_tmp17) {
HXLINE( 741)				Int _hx_tmp19 = this->_hx___maskGraphics->_hx___commands->get_length();
HXDLIN( 741)				_hx_tmp16 = (_hx_tmp19 > (int)0);
            			}
            			else {
HXLINE( 741)				_hx_tmp16 = false;
            			}
HXDLIN( 741)			if (_hx_tmp16) {
HXLINE( 741)				renderSession->maskManager->pushMask(hx::ObjectPtr<OBJ_>(this));
            			}
            		}
HXLINE( 746)		::openfl::_internal::renderer::cairo::CairoTextField_obj::render(hx::ObjectPtr<OBJ_>(this),renderSession);
HXLINE( 751)		Bool _hx_tmp20;
HXDLIN( 751)		if (hx::IsEq( this->_hx___textEngine->antiAliasType,(int)0 )) {
HXLINE( 751)			_hx_tmp20 = hx::IsNotEq( this->_hx___textEngine->gridFitType,(int)1 );
            		}
            		else {
HXLINE( 751)			_hx_tmp20 = true;
            		}
HXDLIN( 751)		::openfl::_internal::renderer::opengl::GLRenderer_obj::renderBitmap(hx::ObjectPtr<OBJ_>(this),renderSession,_hx_tmp20);
HXLINE( 759)		{
HXLINE( 759)			Bool _hx_tmp21;
HXDLIN( 759)			Bool _hx_tmp22;
HXDLIN( 759)			Bool _hx_tmp23 = hx::IsNotNull( this->_hx___mask );
HXDLIN( 759)			if (_hx_tmp23) {
HXLINE( 759)				_hx_tmp22 = hx::IsNotNull( this->_hx___maskGraphics );
            			}
            			else {
HXLINE( 759)				_hx_tmp22 = false;
            			}
HXDLIN( 759)			if (_hx_tmp22) {
HXLINE( 759)				Int _hx_tmp24 = this->_hx___maskGraphics->_hx___commands->get_length();
HXDLIN( 759)				_hx_tmp21 = (_hx_tmp24 > (int)0);
            			}
            			else {
HXLINE( 759)				_hx_tmp21 = false;
            			}
HXDLIN( 759)			if (_hx_tmp21) {
HXLINE( 759)				renderSession->maskManager->popMask();
            			}
HXDLIN( 759)			Bool _hx_tmp25 = hx::IsNotNull( this->_hx___scrollRect );
HXDLIN( 759)			if (_hx_tmp25) {
HXLINE( 759)				renderSession->maskManager->popRect();
            			}
            		}
            	}


void TextField_obj::_hx___startCursorTimer(){
            	HX_STACK_FRAME("openfl.text.TextField","__startCursorTimer",0xacba2811,"openfl.text.TextField.__startCursorTimer","openfl/text/TextField.hx",764,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 766)		this->_hx___cursorTimer = ::haxe::Timer_obj::delay(this->_hx___startCursorTimer_dyn(),(int)600);
HXLINE( 767)		this->_hx___showCursor = !(this->_hx___showCursor);
HXLINE( 768)		this->_hx___dirty = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startCursorTimer,(void))

void TextField_obj::_hx___startTextInput(){
            	HX_STACK_FRAME("openfl.text.TextField","__startTextInput",0x3a7d3e9f,"openfl.text.TextField.__startTextInput","openfl/text/TextField.hx",773,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 775)		Bool _hx_tmp = (this->_hx___caretIndex < (int)0);
HXDLIN( 775)		if (_hx_tmp) {
HXLINE( 777)			this->_hx___caretIndex = this->_hx___textEngine->text.length;
HXLINE( 778)			this->_hx___selectionIndex = this->_hx___caretIndex;
            		}
HXLINE( 782)		Bool _hx_tmp1 = hx::IsNotNull( this->stage );
HXDLIN( 782)		if (_hx_tmp1) {
HXLINE( 786)			this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 788)			Bool _hx_tmp2 = !(this->_hx___inputEnabled);
HXDLIN( 788)			if (_hx_tmp2) {
HXLINE( 790)				this->stage->window->backend->setEnableTextEvents(true);
HXLINE( 792)				Bool _hx_tmp3 = !(this->stage->window->onTextInput->has(this->window_onTextInput_dyn()));
HXDLIN( 792)				if (_hx_tmp3) {
HXLINE( 794)					this->stage->window->onTextInput->add(this->window_onTextInput_dyn(),null(),null());
HXLINE( 795)					this->stage->window->onKeyDown->add(this->window_onKeyDown_dyn(),null(),null());
            				}
HXLINE( 799)				this->_hx___inputEnabled = true;
HXLINE( 800)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___startTextInput,(void))

void TextField_obj::_hx___stopCursorTimer(){
            	HX_STACK_FRAME("openfl.text.TextField","__stopCursorTimer",0x8f135c69,"openfl.text.TextField.__stopCursorTimer","openfl/text/TextField.hx",811,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 813)		Bool _hx_tmp = hx::IsNotNull( this->_hx___cursorTimer );
HXDLIN( 813)		if (_hx_tmp) {
HXLINE( 815)			this->_hx___cursorTimer->stop();
HXLINE( 816)			this->_hx___cursorTimer = null();
            		}
HXLINE( 820)		Bool _hx_tmp1 = this->_hx___showCursor;
HXDLIN( 820)		if (_hx_tmp1) {
HXLINE( 822)			this->_hx___showCursor = false;
HXLINE( 823)			this->_hx___dirty = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopCursorTimer,(void))

void TextField_obj::_hx___stopTextInput(){
            	HX_STACK_FRAME("openfl.text.TextField","__stopTextInput",0x6c7c2cf7,"openfl.text.TextField.__stopTextInput","openfl/text/TextField.hx",834,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 834)		Bool _hx_tmp;
HXDLIN( 834)		if (this->_hx___inputEnabled) {
HXLINE( 834)			_hx_tmp = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE( 834)			_hx_tmp = false;
            		}
HXDLIN( 834)		if (_hx_tmp) {
HXLINE( 836)			this->stage->window->backend->setEnableTextEvents(false);
HXLINE( 837)			this->stage->window->onTextInput->remove(this->window_onTextInput_dyn());
HXLINE( 838)			this->stage->window->onKeyDown->remove(this->window_onKeyDown_dyn());
HXLINE( 840)			this->_hx___inputEnabled = false;
HXLINE( 841)			this->_hx___stopCursorTimer();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___stopTextInput,(void))

void TextField_obj::_hx___updateLayout(){
            	HX_STACK_FRAME("openfl.text.TextField","__updateLayout",0x2d3b57d7,"openfl.text.TextField.__updateLayout","openfl/text/TextField.hx",852,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 852)		Bool _hx_tmp = this->_hx___layoutDirty;
HXDLIN( 852)		if (_hx_tmp) {
HXLINE( 854)			this->_hx___textEngine->update();
HXLINE( 856)			Bool _hx_tmp1 = hx::IsNotEq( this->_hx___textEngine->autoSize,(int)2 );
HXDLIN( 856)			if (_hx_tmp1) {
HXLINE( 858)				HX_VARI( Float,cacheWidth) = this->_hx___textEngine->width;
HXLINE( 861)				{
HXLINE( 861)					HX_VARI(  ::Dynamic,_g) = this->_hx___textEngine->autoSize;
HXDLIN( 861)					 ::Dynamic _hx_switch_0 = _g;
            					if (  (_hx_switch_0==(int)0) ||  (_hx_switch_0==(int)1) ||  (_hx_switch_0==(int)3) ){
HXLINE( 865)						Bool _hx_tmp2 = !(this->_hx___textEngine->wordWrap);
HXDLIN( 865)						if (_hx_tmp2) {
HXLINE( 867)							this->_hx___textEngine->width = (this->_hx___textEngine->textWidth + (int)4);
            						}
HXLINE( 871)						this->_hx___textEngine->height = (this->_hx___textEngine->textHeight + (int)4);
HXLINE( 863)						goto _hx_goto_18;
            					}
            					/* default */{
            					}
            					_hx_goto_18:;
            				}
HXLINE( 878)				Bool _hx_tmp3 = (this->_hx___textEngine->width != cacheWidth);
HXDLIN( 878)				if (_hx_tmp3) {
HXLINE( 880)					HX_VARI(  ::Dynamic,_g1) = this->_hx___textEngine->autoSize;
HXDLIN( 880)					 ::Dynamic _hx_switch_1 = _g1;
            					if (  (_hx_switch_1==(int)0) ){
HXLINE( 888)						HX_VARI_NAME(  ::openfl::text::TextField,_g11,"_g1") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 888)						Float _hx_tmp4 = _g11->get_x();
HXDLIN( 888)						Float _hx_tmp5 = ((Float)(cacheWidth - this->_hx___textEngine->width) / (Float)(int)2);
HXDLIN( 888)						_g11->set_x((_hx_tmp4 + _hx_tmp5));
HXDLIN( 888)						goto _hx_goto_19;
            					}
            					if (  (_hx_switch_1==(int)3) ){
HXLINE( 884)						HX_VARI_NAME(  ::openfl::text::TextField,_g12,"_g1") = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 884)						Float _hx_tmp6 = _g12->get_x();
HXDLIN( 884)						Float _hx_tmp7 = (_hx_tmp6 + (cacheWidth - this->_hx___textEngine->width));
HXDLIN( 884)						_g12->set_x(_hx_tmp7);
HXDLIN( 884)						goto _hx_goto_19;
            					}
            					/* default */{
            					}
            					_hx_goto_19:;
            				}
HXLINE( 898)				this->_hx___textEngine->getBounds();
            			}
HXLINE( 902)			this->_hx___layoutDirty = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,_hx___updateLayout,(void))

 ::Dynamic TextField_obj::get_antiAliasType(){
            	HX_STACK_FRAME("openfl.text.TextField","get_antiAliasType",0x57115f1b,"openfl.text.TextField.get_antiAliasType","openfl/text/TextField.hx",918,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 918)		return this->_hx___textEngine->antiAliasType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_antiAliasType,return )

 ::Dynamic TextField_obj::set_antiAliasType( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_antiAliasType",0x7a7f3727,"openfl.text.TextField.set_antiAliasType","openfl/text/TextField.hx",931,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 931)		return (this->_hx___textEngine->antiAliasType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_antiAliasType,return )

 ::Dynamic TextField_obj::get_autoSize(){
            	HX_STACK_FRAME("openfl.text.TextField","get_autoSize",0xd7aef1fd,"openfl.text.TextField.get_autoSize","openfl/text/TextField.hx",938,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 938)		return this->_hx___textEngine->autoSize;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_autoSize,return )

 ::Dynamic TextField_obj::set_autoSize( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_autoSize",0xeca81571,"openfl.text.TextField.set_autoSize","openfl/text/TextField.hx",943,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 945)		Bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->autoSize );
HXDLIN( 945)		if (_hx_tmp) {
HXLINE( 947)			this->_hx___dirty = true;
HXLINE( 948)			this->_hx___layoutDirty = true;
            		}
HXLINE( 952)		return (this->_hx___textEngine->autoSize = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_autoSize,return )

Bool TextField_obj::get_background(){
            	HX_STACK_FRAME("openfl.text.TextField","get_background",0x50119b5b,"openfl.text.TextField.get_background","openfl/text/TextField.hx",959,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 959)		return this->_hx___textEngine->background;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_background,return )

Bool TextField_obj::set_background(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_background",0x703183cf,"openfl.text.TextField.set_background","openfl/text/TextField.hx",964,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 966)		Bool _hx_tmp = (value != this->_hx___textEngine->background);
HXDLIN( 966)		if (_hx_tmp) {
HXLINE( 968)			this->_hx___dirty = true;
            		}
HXLINE( 972)		return (this->_hx___textEngine->background = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_background,return )

Int TextField_obj::get_backgroundColor(){
            	HX_STACK_FRAME("openfl.text.TextField","get_backgroundColor",0x63403c08,"openfl.text.TextField.get_backgroundColor","openfl/text/TextField.hx",979,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 979)		return this->_hx___textEngine->backgroundColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_backgroundColor,return )

Int TextField_obj::set_backgroundColor(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_backgroundColor",0x9fdd2f14,"openfl.text.TextField.set_backgroundColor","openfl/text/TextField.hx",984,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE( 986)		Bool _hx_tmp = (value != this->_hx___textEngine->backgroundColor);
HXDLIN( 986)		if (_hx_tmp) {
HXLINE( 988)			this->_hx___dirty = true;
            		}
HXLINE( 992)		return (this->_hx___textEngine->backgroundColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_backgroundColor,return )

Bool TextField_obj::get_border(){
            	HX_STACK_FRAME("openfl.text.TextField","get_border",0xa3e0d9d9,"openfl.text.TextField.get_border","openfl/text/TextField.hx",999,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE( 999)		return this->_hx___textEngine->border;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_border,return )

Bool TextField_obj::set_border(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_border",0xa75e784d,"openfl.text.TextField.set_border","openfl/text/TextField.hx",1004,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1006)		Bool _hx_tmp = (value != this->_hx___textEngine->border);
HXDLIN(1006)		if (_hx_tmp) {
HXLINE(1008)			this->_hx___dirty = true;
            		}
HXLINE(1012)		return (this->_hx___textEngine->border = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_border,return )

Int TextField_obj::get_borderColor(){
            	HX_STACK_FRAME("openfl.text.TextField","get_borderColor",0x6267b4ca,"openfl.text.TextField.get_borderColor","openfl/text/TextField.hx",1019,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1019)		return this->_hx___textEngine->borderColor;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_borderColor,return )

Int TextField_obj::set_borderColor(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_borderColor",0x5e3331d6,"openfl.text.TextField.set_borderColor","openfl/text/TextField.hx",1024,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1026)		Bool _hx_tmp = (value != this->_hx___textEngine->borderColor);
HXDLIN(1026)		if (_hx_tmp) {
HXLINE(1028)			this->_hx___dirty = true;
            		}
HXLINE(1032)		return (this->_hx___textEngine->borderColor = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_borderColor,return )

Int TextField_obj::get_bottomScrollV(){
            	HX_STACK_FRAME("openfl.text.TextField","get_bottomScrollV",0xfa9e92b1,"openfl.text.TextField.get_bottomScrollV","openfl/text/TextField.hx",1037,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1039)		this->_hx___updateLayout();
HXLINE(1041)		return this->_hx___textEngine->bottomScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_bottomScrollV,return )

Int TextField_obj::get_caretIndex(){
            	HX_STACK_FRAME("openfl.text.TextField","get_caretIndex",0x074fbdfc,"openfl.text.TextField.get_caretIndex","openfl/text/TextField.hx",1048,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1048)		return this->_hx___caretIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_caretIndex,return )

 ::openfl::text::TextFormat TextField_obj::get_defaultTextFormat(){
            	HX_STACK_FRAME("openfl.text.TextField","get_defaultTextFormat",0x83063818,"openfl.text.TextField.get_defaultTextFormat","openfl/text/TextField.hx",1055,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1055)		return this->_hx___textFormat->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_defaultTextFormat,return )

 ::openfl::text::TextFormat TextField_obj::set_defaultTextFormat( ::openfl::text::TextFormat value){
            	HX_STACK_FRAME("openfl.text.TextField","set_defaultTextFormat",0xd70f0624,"openfl.text.TextField.set_defaultTextFormat","openfl/text/TextField.hx",1060,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1062)		this->_hx___textFormat->_hx___merge(value);
HXLINE(1064)		this->_hx___layoutDirty = true;
HXLINE(1065)		this->_hx___dirty = true;
HXLINE(1067)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_defaultTextFormat,return )

Bool TextField_obj::get_displayAsPassword(){
            	HX_STACK_FRAME("openfl.text.TextField","get_displayAsPassword",0x62bc3b42,"openfl.text.TextField.get_displayAsPassword","openfl/text/TextField.hx",1074,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1074)		return this->_hx___textEngine->displayAsPassword;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_displayAsPassword,return )

Bool TextField_obj::set_displayAsPassword(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_displayAsPassword",0xb6c5094e,"openfl.text.TextField.set_displayAsPassword","openfl/text/TextField.hx",1079,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1081)		Bool _hx_tmp = (value != this->_hx___textEngine->displayAsPassword);
HXDLIN(1081)		if (_hx_tmp) {
HXLINE(1083)			this->_hx___dirty = true;
HXLINE(1084)			this->_hx___layoutDirty = true;
            		}
HXLINE(1088)		return (this->_hx___textEngine->displayAsPassword = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_displayAsPassword,return )

Bool TextField_obj::get_embedFonts(){
            	HX_STACK_FRAME("openfl.text.TextField","get_embedFonts",0xb8d5ce98,"openfl.text.TextField.get_embedFonts","openfl/text/TextField.hx",1095,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1095)		return this->_hx___textEngine->embedFonts;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_embedFonts,return )

Bool TextField_obj::set_embedFonts(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_embedFonts",0xd8f5b70c,"openfl.text.TextField.set_embedFonts","openfl/text/TextField.hx",1109,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1109)		return (this->_hx___textEngine->embedFonts = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_embedFonts,return )

 ::Dynamic TextField_obj::get_gridFitType(){
            	HX_STACK_FRAME("openfl.text.TextField","get_gridFitType",0x3fa66af8,"openfl.text.TextField.get_gridFitType","openfl/text/TextField.hx",1116,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1116)		return this->_hx___textEngine->gridFitType;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_gridFitType,return )

 ::Dynamic TextField_obj::set_gridFitType( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_gridFitType",0x3b71e804,"openfl.text.TextField.set_gridFitType","openfl/text/TextField.hx",1130,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1130)		return (this->_hx___textEngine->gridFitType = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_gridFitType,return )

Float TextField_obj::get_height(){
            	HX_STACK_FRAME("openfl.text.TextField","get_height",0x421294d4,"openfl.text.TextField.get_height","openfl/text/TextField.hx",1135,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1137)		this->_hx___updateLayout();
HXLINE(1138)		return this->_hx___textEngine->height;
            	}


Float TextField_obj::set_height(Float value){
            	HX_STACK_FRAME("openfl.text.TextField","set_height",0x45903348,"openfl.text.TextField.set_height","openfl/text/TextField.hx",1143,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1145)		Bool _hx_tmp;
HXDLIN(1145)		Float _hx_tmp1 = this->get_scaleY();
HXDLIN(1145)		if ((_hx_tmp1 == (int)1)) {
HXLINE(1145)			_hx_tmp = (value != this->_hx___textEngine->height);
            		}
            		else {
HXLINE(1145)			_hx_tmp = true;
            		}
HXDLIN(1145)		if (_hx_tmp) {
HXLINE(1147)			Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1147)			if (_hx_tmp2) {
HXLINE(1147)				this->_hx___transformDirty = true;
HXDLIN(1147)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1148)			this->_hx___dirty = true;
HXLINE(1149)			this->_hx___layoutDirty = true;
            		}
HXLINE(1153)		this->set_scaleY((int)1);
HXLINE(1154)		return (this->_hx___textEngine->height = value);
            	}


::String TextField_obj::get_htmlText(){
            	HX_STACK_FRAME("openfl.text.TextField","get_htmlText",0xb86d81e5,"openfl.text.TextField.get_htmlText","openfl/text/TextField.hx",1161,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1161)		return this->_hx___textEngine->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_htmlText,return )

::String TextField_obj::set_htmlText(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","set_htmlText",0xcd66a559,"openfl.text.TextField.set_htmlText","openfl/text/TextField.hx",1166,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1168)		Bool _hx_tmp;
HXDLIN(1168)		if (!(!(this->_hx___isHTML))) {
HXLINE(1168)			_hx_tmp = (this->_hx___textEngine->text != value);
            		}
            		else {
HXLINE(1168)			_hx_tmp = true;
            		}
HXDLIN(1168)		if (_hx_tmp) {
HXLINE(1170)			this->_hx___dirty = true;
HXLINE(1171)			this->_hx___layoutDirty = true;
            		}
HXLINE(1175)		this->_hx___isHTML = true;
HXLINE(1177)		{
HXLINE(1179)			value =  ::EReg_obj::__new(HX_("<br>",b2,8d,f3,27),HX_("g",67,00,00,00))->replace(value,HX_("\n",0a,00,00,00));
HXLINE(1180)			value =  ::EReg_obj::__new(HX_("<br/>",3b,61,28,cd),HX_("g",67,00,00,00))->replace(value,HX_("\n",0a,00,00,00));
HXLINE(1184)			HX_VARI( ::Array< ::String >,segments) = value.split(HX_("<font",0b,2c,cb,cf));
HXLINE(1186)			Bool _hx_tmp1 = (segments->length == (int)1);
HXDLIN(1186)			if (_hx_tmp1) {
HXLINE(1188)				value =  ::EReg_obj::__new(HX_("<.*?>",97,b4,92,aa),HX_("g",67,00,00,00))->replace(value,HX_("",00,00,00,00));
HXLINE(1190)				Bool _hx_tmp2 = (this->_hx___textEngine->textFormatRanges->length > (int)1);
HXDLIN(1190)				if (_hx_tmp2) {
HXLINE(1192)					Int _hx_tmp3 = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN(1192)					this->_hx___textEngine->textFormatRanges->removeRange((int)1,_hx_tmp3);
            				}
HXLINE(1196)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = this->_hx___textEngine->textFormatRanges->__get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1197)				range->format = this->_hx___textFormat;
HXLINE(1198)				range->start = (int)0;
HXLINE(1199)				range->end = value.length;
HXLINE(1201)				return (this->_hx___textEngine->text = value);
            			}
            			else {
HXLINE(1205)				this->_hx___textEngine->textFormatRanges->removeRange((int)0,this->_hx___textEngine->textFormatRanges->length);
HXLINE(1207)				value = HX_("",00,00,00,00);
HXLINE(1211)				{
HXLINE(1211)					HX_VARI( Int,_g) = (int)0;
HXDLIN(1211)					while((_g < segments->length)){
HXLINE(1211)						HX_VARI( ::String,segment) = segments->__get(_g);
HXDLIN(1211)						++_g;
HXLINE(1213)						if ((segment == HX_("",00,00,00,00))) {
HXLINE(1213)							continue;
            						}
HXLINE(1215)						HX_VARI( Int,closeFontIndex) = segment.indexOf(HX_("</font>",3c,82,5f,8e),null());
HXLINE(1217)						if ((closeFontIndex > (int)-1)) {
HXLINE(1219)							Int _hx_tmp4 = segment.indexOf(HX_(">",3e,00,00,00),null());
HXDLIN(1219)							HX_VARI( Int,start) = (_hx_tmp4 + (int)1);
HXLINE(1221)							HX_VARI(  ::openfl::text::TextFormat,format) = this->_hx___textFormat->clone();
HXLINE(1223)							HX_VARI( Int,faceIndex) = segment.indexOf(HX_("face=",00,55,48,fb),null());
HXLINE(1224)							HX_VARI( Int,colorIndex) = segment.indexOf(HX_("color=",7a,c5,86,c6),null());
HXLINE(1225)							HX_VARI( Int,sizeIndex) = segment.indexOf(HX_("size=",5c,08,d9,7c),null());
HXLINE(1227)							Bool _hx_tmp5;
HXDLIN(1227)							if ((faceIndex > (int)-1)) {
HXLINE(1227)								_hx_tmp5 = (faceIndex < start);
            							}
            							else {
HXLINE(1227)								_hx_tmp5 = false;
            							}
HXDLIN(1227)							if (_hx_tmp5) {
HXLINE(1229)								Int _hx_tmp6 = (faceIndex + (int)6);
HXDLIN(1229)								Int _hx_tmp7 = segment.indexOf(HX_("\"",22,00,00,00),faceIndex);
HXDLIN(1229)								format->font = segment.substr(_hx_tmp6,_hx_tmp7);
            							}
HXLINE(1233)							Bool _hx_tmp8;
HXDLIN(1233)							if ((colorIndex > (int)-1)) {
HXLINE(1233)								_hx_tmp8 = (colorIndex < start);
            							}
            							else {
HXLINE(1233)								_hx_tmp8 = false;
            							}
HXDLIN(1233)							if (_hx_tmp8) {
HXLINE(1235)								::String _hx_tmp9 = segment.substr((colorIndex + (int)8),(int)6);
HXDLIN(1235)								format->color = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + _hx_tmp9));
            							}
HXLINE(1239)							Bool _hx_tmp10;
HXDLIN(1239)							if ((sizeIndex > (int)-1)) {
HXLINE(1239)								_hx_tmp10 = (sizeIndex < start);
            							}
            							else {
HXLINE(1239)								_hx_tmp10 = false;
            							}
HXDLIN(1239)							if (_hx_tmp10) {
HXLINE(1241)								Int _hx_tmp11 = (sizeIndex + (int)6);
HXDLIN(1241)								Int _hx_tmp12 = segment.indexOf(HX_("\"",22,00,00,00),sizeIndex);
HXDLIN(1241)								::String _hx_tmp13 = segment.substr(_hx_tmp11,_hx_tmp12);
HXDLIN(1241)								format->size = ::Std_obj::parseInt(_hx_tmp13);
            							}
HXLINE(1245)							HX_VARI( ::String,sub) = segment.substring(start,closeFontIndex);
HXLINE(1246)							sub =  ::EReg_obj::__new(HX_("<.*?>",97,b4,92,aa),HX_("g",67,00,00,00))->replace(sub,HX_("",00,00,00,00));
HXLINE(1248)							Int _hx_tmp14 = value.length;
HXDLIN(1248)							Int _hx_tmp15 = (value.length + sub.length);
HXDLIN(1248)							this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(format,_hx_tmp14,_hx_tmp15));
HXLINE(1249)							hx::AddEq(value,sub);
HXLINE(1251)							Bool _hx_tmp16 = ((closeFontIndex + (int)7) < segment.length);
HXDLIN(1251)							if (_hx_tmp16) {
HXLINE(1253)								sub = segment.substr((closeFontIndex + (int)7),null());
HXLINE(1254)								Int _hx_tmp17 = value.length;
HXDLIN(1254)								Int _hx_tmp18 = (value.length + sub.length);
HXDLIN(1254)								this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(this->_hx___textFormat,_hx_tmp17,_hx_tmp18));
HXLINE(1255)								hx::AddEq(value,sub);
            							}
            						}
            						else {
HXLINE(1261)							Int _hx_tmp19 = value.length;
HXDLIN(1261)							Int _hx_tmp20 = (value.length + segment.length);
HXDLIN(1261)							this->_hx___textEngine->textFormatRanges->push( ::openfl::_internal::text::TextFormatRange_obj::__new(this->_hx___textFormat,_hx_tmp19,_hx_tmp20));
HXLINE(1262)							hx::AddEq(value,segment);
            						}
            					}
            				}
            			}
            		}
HXLINE(1272)		return (this->_hx___textEngine->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_htmlText,return )

Int TextField_obj::get_length(){
            	HX_STACK_FRAME("openfl.text.TextField","get_length",0xdece21d3,"openfl.text.TextField.get_length","openfl/text/TextField.hx",1277,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1279)		Bool _hx_tmp = hx::IsNotNull( this->_hx___textEngine->text );
HXDLIN(1279)		if (_hx_tmp) {
HXLINE(1281)			return this->_hx___textEngine->text.length;
            		}
HXLINE(1285)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_length,return )

Int TextField_obj::get_maxChars(){
            	HX_STACK_FRAME("openfl.text.TextField","get_maxChars",0x980651c6,"openfl.text.TextField.get_maxChars","openfl/text/TextField.hx",1292,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1292)		return this->_hx___textEngine->maxChars;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxChars,return )

Int TextField_obj::set_maxChars(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_maxChars",0xacff753a,"openfl.text.TextField.set_maxChars","openfl/text/TextField.hx",1297,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1299)		Bool _hx_tmp = (value != this->_hx___textEngine->maxChars);
HXDLIN(1299)		if (_hx_tmp) {
HXLINE(1301)			this->_hx___dirty = true;
HXLINE(1302)			this->_hx___layoutDirty = true;
            		}
HXLINE(1306)		return (this->_hx___textEngine->maxChars = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_maxChars,return )

Int TextField_obj::get_maxScrollH(){
            	HX_STACK_FRAME("openfl.text.TextField","get_maxScrollH",0xc4f0b4c4,"openfl.text.TextField.get_maxScrollH","openfl/text/TextField.hx",1311,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1313)		this->_hx___updateLayout();
HXLINE(1315)		return this->_hx___textEngine->maxScrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollH,return )

Int TextField_obj::get_maxScrollV(){
            	HX_STACK_FRAME("openfl.text.TextField","get_maxScrollV",0xc4f0b4d2,"openfl.text.TextField.get_maxScrollV","openfl/text/TextField.hx",1320,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1322)		this->_hx___updateLayout();
HXLINE(1324)		return this->_hx___textEngine->maxScrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_maxScrollV,return )

Bool TextField_obj::get_multiline(){
            	HX_STACK_FRAME("openfl.text.TextField","get_multiline",0x24925820,"openfl.text.TextField.get_multiline","openfl/text/TextField.hx",1331,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1331)		return this->_hx___textEngine->multiline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_multiline,return )

Bool TextField_obj::set_multiline(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_multiline",0x69983a2c,"openfl.text.TextField.set_multiline","openfl/text/TextField.hx",1336,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1338)		Bool _hx_tmp = (value != this->_hx___textEngine->multiline);
HXDLIN(1338)		if (_hx_tmp) {
HXLINE(1340)			this->_hx___dirty = true;
HXLINE(1341)			this->_hx___layoutDirty = true;
            		}
HXLINE(1345)		return (this->_hx___textEngine->multiline = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_multiline,return )

Int TextField_obj::get_numLines(){
            	HX_STACK_FRAME("openfl.text.TextField","get_numLines",0xda475406,"openfl.text.TextField.get_numLines","openfl/text/TextField.hx",1350,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1352)		this->_hx___updateLayout();
HXLINE(1354)		return this->_hx___textEngine->numLines;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_numLines,return )

::String TextField_obj::get_restrict(){
            	HX_STACK_FRAME("openfl.text.TextField","get_restrict",0x99d42d69,"openfl.text.TextField.get_restrict","openfl/text/TextField.hx",1361,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1361)		return this->_hx___textEngine->restrict;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_restrict,return )

::String TextField_obj::set_restrict(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","set_restrict",0xaecd50dd,"openfl.text.TextField.set_restrict","openfl/text/TextField.hx",1368,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1368)		return (this->_hx___textEngine->restrict = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_restrict,return )

Int TextField_obj::get_scrollH(){
            	HX_STACK_FRAME("openfl.text.TextField","get_scrollH",0xbeccf60e,"openfl.text.TextField.get_scrollH","openfl/text/TextField.hx",1375,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1375)		return this->_hx___textEngine->scrollH;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollH,return )

Int TextField_obj::set_scrollH(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_scrollH",0xc939fd1a,"openfl.text.TextField.set_scrollH","openfl/text/TextField.hx",1380,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1382)		Bool _hx_tmp = (value > this->_hx___textEngine->maxScrollH);
HXDLIN(1382)		if (_hx_tmp) {
HXLINE(1382)			value = this->_hx___textEngine->maxScrollH;
            		}
HXLINE(1383)		Bool _hx_tmp1 = (value < (int)0);
HXDLIN(1383)		if (_hx_tmp1) {
HXLINE(1383)			value = (int)0;
            		}
HXLINE(1385)		Bool _hx_tmp2 = (value != this->_hx___textEngine->scrollH);
HXDLIN(1385)		if (_hx_tmp2) {
HXLINE(1387)			this->_hx___dirty = true;
            		}
HXLINE(1391)		return (this->_hx___textEngine->scrollH = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollH,return )

Int TextField_obj::get_scrollV(){
            	HX_STACK_FRAME("openfl.text.TextField","get_scrollV",0xbeccf61c,"openfl.text.TextField.get_scrollV","openfl/text/TextField.hx",1398,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1398)		return this->_hx___textEngine->scrollV;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_scrollV,return )

Int TextField_obj::set_scrollV(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_scrollV",0xc939fd28,"openfl.text.TextField.set_scrollV","openfl/text/TextField.hx",1403,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1405)		Bool _hx_tmp = (value > this->_hx___textEngine->maxScrollV);
HXDLIN(1405)		if (_hx_tmp) {
HXLINE(1405)			value = this->_hx___textEngine->maxScrollV;
            		}
HXLINE(1406)		Bool _hx_tmp1 = (value < (int)1);
HXDLIN(1406)		if (_hx_tmp1) {
HXLINE(1406)			value = (int)1;
            		}
HXLINE(1408)		Bool _hx_tmp2 = (value != this->_hx___textEngine->scrollV);
HXDLIN(1408)		if (_hx_tmp2) {
HXLINE(1410)			this->_hx___dirty = true;
            		}
HXLINE(1414)		return (this->_hx___textEngine->scrollV = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_scrollV,return )

Bool TextField_obj::get_selectable(){
            	HX_STACK_FRAME("openfl.text.TextField","get_selectable",0xee1ebe03,"openfl.text.TextField.get_selectable","openfl/text/TextField.hx",1421,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1421)		return this->_hx___textEngine->selectable;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectable,return )

Bool TextField_obj::set_selectable(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_selectable",0x0e3ea677,"openfl.text.TextField.set_selectable","openfl/text/TextField.hx",1426,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1428)		Bool _hx_tmp;
HXDLIN(1428)		Bool _hx_tmp1 = (value != this->_hx___textEngine->selectable);
HXDLIN(1428)		if (_hx_tmp1) {
HXLINE(1428)			 ::Dynamic _hx_tmp2 = this->get_type();
HXDLIN(1428)			_hx_tmp = hx::IsEq( _hx_tmp2,(int)1 );
            		}
            		else {
HXLINE(1428)			_hx_tmp = false;
            		}
HXDLIN(1428)		if (_hx_tmp) {
HXLINE(1430)			Bool _hx_tmp3;
HXDLIN(1430)			Bool _hx_tmp4 = hx::IsNotNull( this->stage );
HXDLIN(1430)			if (_hx_tmp4) {
HXLINE(1430)				 ::openfl::display::InteractiveObject _hx_tmp5 = this->stage->get_focus();
HXDLIN(1430)				_hx_tmp3 = hx::IsEq( _hx_tmp5,hx::ObjectPtr<OBJ_>(this) );
            			}
            			else {
HXLINE(1430)				_hx_tmp3 = false;
            			}
HXDLIN(1430)			if (_hx_tmp3) {
HXLINE(1432)				this->_hx___startTextInput();
            			}
            			else {
HXLINE(1434)				if (!(value)) {
HXLINE(1436)					this->_hx___stopTextInput();
            				}
            			}
            		}
HXLINE(1442)		return (this->_hx___textEngine->selectable = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_selectable,return )

Int TextField_obj::get_selectionBeginIndex(){
            	HX_STACK_FRAME("openfl.text.TextField","get_selectionBeginIndex",0xb79fa288,"openfl.text.TextField.get_selectionBeginIndex","openfl/text/TextField.hx",1449,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1449)		Float _hx_tmp = ::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1449)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionBeginIndex,return )

Int TextField_obj::get_selectionEndIndex(){
            	HX_STACK_FRAME("openfl.text.TextField","get_selectionEndIndex",0xc3677dd6,"openfl.text.TextField.get_selectionEndIndex","openfl/text/TextField.hx",1456,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1456)		Float _hx_tmp = ::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1456)		return ::Std_obj::_hx_int(_hx_tmp);
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_selectionEndIndex,return )

Float TextField_obj::get_sharpness(){
            	HX_STACK_FRAME("openfl.text.TextField","get_sharpness",0xa1a5a7b4,"openfl.text.TextField.get_sharpness","openfl/text/TextField.hx",1463,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1463)		return this->_hx___textEngine->sharpness;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_sharpness,return )

Float TextField_obj::set_sharpness(Float value){
            	HX_STACK_FRAME("openfl.text.TextField","set_sharpness",0xe6ab89c0,"openfl.text.TextField.set_sharpness","openfl/text/TextField.hx",1468,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1470)		Bool _hx_tmp = (value != this->_hx___textEngine->sharpness);
HXDLIN(1470)		if (_hx_tmp) {
HXLINE(1472)			this->_hx___dirty = true;
            		}
HXLINE(1476)		return (this->_hx___textEngine->sharpness = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_sharpness,return )

::String TextField_obj::get_text(){
            	HX_STACK_FRAME("openfl.text.TextField","get_text",0x3b0d545a,"openfl.text.TextField.get_text","openfl/text/TextField.hx",1483,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1483)		return this->_hx___textEngine->text;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_text,return )

::String TextField_obj::set_text(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","set_text",0xe96aadce,"openfl.text.TextField.set_text","openfl/text/TextField.hx",1488,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1490)		Bool _hx_tmp;
HXDLIN(1490)		if (!(this->_hx___isHTML)) {
HXLINE(1490)			_hx_tmp = (this->_hx___textEngine->text != value);
            		}
            		else {
HXLINE(1490)			_hx_tmp = true;
            		}
HXDLIN(1490)		if (_hx_tmp) {
HXLINE(1492)			this->_hx___dirty = true;
HXLINE(1493)			this->_hx___layoutDirty = true;
            		}
            		else {
HXLINE(1497)			return value;
            		}
HXLINE(1501)		Bool _hx_tmp1 = (this->_hx___textEngine->textFormatRanges->length > (int)1);
HXDLIN(1501)		if (_hx_tmp1) {
HXLINE(1503)			Int _hx_tmp2 = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN(1503)			this->_hx___textEngine->textFormatRanges->removeRange((int)1,_hx_tmp2);
            		}
HXLINE(1507)		HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = this->_hx___textEngine->textFormatRanges->__get((int)0).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXLINE(1508)		range->format = this->_hx___textFormat;
HXLINE(1509)		range->start = (int)0;
HXLINE(1510)		range->end = value.length;
HXLINE(1512)		this->_hx___isHTML = false;
HXLINE(1514)		return (this->_hx___textEngine->text = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_text,return )

Int TextField_obj::get_textColor(){
            	HX_STACK_FRAME("openfl.text.TextField","get_textColor",0x69ca86a9,"openfl.text.TextField.get_textColor","openfl/text/TextField.hx",1521,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1521)		return this->_hx___textFormat->color;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textColor,return )

Int TextField_obj::set_textColor(Int value){
            	HX_STACK_FRAME("openfl.text.TextField","set_textColor",0xaed068b5,"openfl.text.TextField.set_textColor","openfl/text/TextField.hx",1526,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1528)		Bool _hx_tmp = hx::IsNotEq( value,this->_hx___textFormat->color );
HXDLIN(1528)		if (_hx_tmp) {
HXLINE(1528)			this->_hx___dirty = true;
            		}
HXLINE(1530)		{
HXLINE(1530)			HX_VARI( Int,_g) = (int)0;
HXDLIN(1530)			HX_VARI( ::Array< ::Dynamic>,_g1) = this->_hx___textEngine->textFormatRanges;
HXDLIN(1530)			while((_g < _g1->length)){
HXLINE(1530)				HX_VARI(  ::openfl::_internal::text::TextFormatRange,range) = _g1->__get(_g).StaticCast<  ::openfl::_internal::text::TextFormatRange >();
HXDLIN(1530)				++_g;
HXLINE(1532)				range->format->color = value;
            			}
            		}
HXLINE(1536)		return (this->_hx___textFormat->color = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_textColor,return )

Float TextField_obj::get_textWidth(){
            	HX_STACK_FRAME("openfl.text.TextField","get_textWidth",0xe9d0cb4c,"openfl.text.TextField.get_textWidth","openfl/text/TextField.hx",1540,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1542)		this->_hx___updateLayout();
HXLINE(1543)		return this->_hx___textEngine->textWidth;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textWidth,return )

Float TextField_obj::get_textHeight(){
            	HX_STACK_FRAME("openfl.text.TextField","get_textHeight",0x63308fe1,"openfl.text.TextField.get_textHeight","openfl/text/TextField.hx",1548,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1550)		this->_hx___updateLayout();
HXLINE(1551)		return this->_hx___textEngine->textHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_textHeight,return )

 ::Dynamic TextField_obj::get_type(){
            	HX_STACK_FRAME("openfl.text.TextField","get_type",0x3b1c7a67,"openfl.text.TextField.get_type","openfl/text/TextField.hx",1558,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1558)		return this->_hx___textEngine->type;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_type,return )

 ::Dynamic TextField_obj::set_type( ::Dynamic value){
            	HX_STACK_FRAME("openfl.text.TextField","set_type",0xe979d3db,"openfl.text.TextField.set_type","openfl/text/TextField.hx",1563,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1565)		Bool _hx_tmp = hx::IsNotEq( value,this->_hx___textEngine->type );
HXDLIN(1565)		if (_hx_tmp) {
HXLINE(1567)			if (hx::IsEq( value,(int)1 )) {
HXLINE(1569)				this->addEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null(),null(),null());
HXLINE(1570)				this->addEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null(),null(),null());
HXLINE(1571)				this->addEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null(),null(),null());
HXLINE(1573)				this->this_onFocusIn(null());
            			}
            			else {
HXLINE(1577)				this->removeEventListener(HX_("focusIn",dd,45,83,41),this->this_onFocusIn_dyn(),null());
HXLINE(1578)				this->removeEventListener(HX_("focusOut",96,6f,5e,11),this->this_onFocusOut_dyn(),null());
HXLINE(1579)				this->removeEventListener(HX_("addedToStage",63,22,55,0c),this->this_onAddedToStage_dyn(),null());
HXLINE(1581)				this->_hx___stopTextInput();
            			}
HXLINE(1585)			this->_hx___dirty = true;
            		}
HXLINE(1589)		return (this->_hx___textEngine->type = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_type,return )

Float TextField_obj::get_width(){
            	HX_STACK_FRAME("openfl.text.TextField","get_width",0x2d65e5b9,"openfl.text.TextField.get_width","openfl/text/TextField.hx",1594,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1596)		this->_hx___updateLayout();
HXLINE(1597)		return this->_hx___textEngine->width;
            	}


Float TextField_obj::set_width(Float value){
            	HX_STACK_FRAME("openfl.text.TextField","set_width",0x10b6d1c5,"openfl.text.TextField.set_width","openfl/text/TextField.hx",1602,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1604)		Bool _hx_tmp;
HXDLIN(1604)		Float _hx_tmp1 = this->get_scaleX();
HXDLIN(1604)		if ((_hx_tmp1 == (int)1)) {
HXLINE(1604)			_hx_tmp = (this->_hx___textEngine->width != value);
            		}
            		else {
HXLINE(1604)			_hx_tmp = true;
            		}
HXDLIN(1604)		if (_hx_tmp) {
HXLINE(1606)			Bool _hx_tmp2 = !(this->_hx___transformDirty);
HXDLIN(1606)			if (_hx_tmp2) {
HXLINE(1606)				this->_hx___transformDirty = true;
HXDLIN(1606)				::openfl::display::DisplayObject_obj::_hx___worldTransformDirty++;
            			}
HXLINE(1607)			this->_hx___dirty = true;
HXLINE(1608)			this->_hx___layoutDirty = true;
            		}
HXLINE(1612)		this->set_scaleX((int)1);
HXLINE(1613)		return (this->_hx___textEngine->width = value);
            	}


Bool TextField_obj::get_wordWrap(){
            	HX_STACK_FRAME("openfl.text.TextField","get_wordWrap",0xa91076e1,"openfl.text.TextField.get_wordWrap","openfl/text/TextField.hx",1620,0xccf02094)
            	HX_STACK_THIS(this)
HXLINE(1620)		return this->_hx___textEngine->wordWrap;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TextField_obj,get_wordWrap,return )

Bool TextField_obj::set_wordWrap(Bool value){
            	HX_STACK_FRAME("openfl.text.TextField","set_wordWrap",0xbe099a55,"openfl.text.TextField.set_wordWrap","openfl/text/TextField.hx",1625,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1627)		Bool _hx_tmp = (value != this->_hx___textEngine->wordWrap);
HXDLIN(1627)		if (_hx_tmp) {
HXLINE(1629)			this->_hx___dirty = true;
HXLINE(1630)			this->_hx___layoutDirty = true;
            		}
HXLINE(1634)		return (this->_hx___textEngine->wordWrap = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,set_wordWrap,return )

void TextField_obj::stage_onMouseMove( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","stage_onMouseMove",0x47084bd2,"openfl.text.TextField.stage_onMouseMove","openfl/text/TextField.hx",1646,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1648)		Bool _hx_tmp = hx::IsNull( this->stage );
HXDLIN(1648)		if (_hx_tmp) {
HXLINE(1648)			return;
            		}
HXLINE(1650)		Bool _hx_tmp1;
HXDLIN(1650)		if (this->_hx___textEngine->selectable) {
HXLINE(1650)			_hx_tmp1 = (this->_hx___selectionIndex >= (int)0);
            		}
            		else {
HXLINE(1650)			_hx_tmp1 = false;
            		}
HXDLIN(1650)		if (_hx_tmp1) {
HXLINE(1652)			this->_hx___updateLayout();
HXLINE(1654)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(1654)			Float _hx_tmp3 = this->get_mouseY();
HXDLIN(1654)			HX_VARI( Int,position) = this->_hx___getPosition(_hx_tmp2,_hx_tmp3);
HXLINE(1656)			Bool _hx_tmp4 = (position != this->_hx___caretIndex);
HXDLIN(1656)			if (_hx_tmp4) {
HXLINE(1658)				this->_hx___caretIndex = position;
HXLINE(1659)				this->_hx___dirty = true;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseMove,(void))

void TextField_obj::stage_onMouseUp( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","stage_onMouseUp",0x9bb86cdc,"openfl.text.TextField.stage_onMouseUp","openfl/text/TextField.hx",1668,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1670)		Bool _hx_tmp = hx::IsNull( this->stage );
HXDLIN(1670)		if (_hx_tmp) {
HXLINE(1670)			return;
            		}
HXLINE(1672)		this->stage->removeEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null());
HXLINE(1673)		this->stage->removeEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null());
HXLINE(1675)		 ::openfl::display::InteractiveObject _hx_tmp1 = this->stage->get_focus();
HXDLIN(1675)		if (hx::IsEq( _hx_tmp1,hx::ObjectPtr<OBJ_>(this) )) {
HXLINE(1677)			this->_hx___getWorldTransform();
HXLINE(1678)			this->_hx___updateLayout();
HXLINE(1680)			HX_VARI(  ::openfl::geom::Matrix,_this) = this->_hx___worldTransform;
HXDLIN(1680)			HX_VARI( Float,norm) = ((_this->a * _this->d) - (_this->b * _this->c));
HXLINE(1681)			HX_VARI_NAME(  ::openfl::geom::Matrix,_this1,"_this") = this->_hx___worldTransform;
HXDLIN(1681)			HX_VARI_NAME( Float,norm1,"norm") = ((_this1->a * _this1->d) - (_this1->b * _this1->c));
HXLINE(1683)			Float _hx_tmp2 = this->get_mouseX();
HXDLIN(1683)			Float _hx_tmp3 = this->get_mouseY();
HXDLIN(1683)			HX_VARI( Int,upPos) = this->_hx___getPosition(_hx_tmp2,_hx_tmp3);
HXLINE(1684)			HX_VAR( Int,leftPos);
HXLINE(1685)			HX_VAR( Int,rightPos);
HXLINE(1687)			Float _hx_tmp4 = ::Math_obj::min(this->_hx___selectionIndex,upPos);
HXDLIN(1687)			leftPos = ::Std_obj::_hx_int(_hx_tmp4);
HXLINE(1688)			Float _hx_tmp5 = ::Math_obj::max(this->_hx___selectionIndex,upPos);
HXDLIN(1688)			rightPos = ::Std_obj::_hx_int(_hx_tmp5);
HXLINE(1690)			this->_hx___selectionIndex = leftPos;
HXLINE(1691)			this->_hx___caretIndex = rightPos;
HXLINE(1693)			Bool _hx_tmp6 = this->_hx___inputEnabled;
HXDLIN(1693)			if (_hx_tmp6) {
HXLINE(1695)				this->this_onFocusIn(null());
HXLINE(1697)				this->_hx___stopCursorTimer();
HXLINE(1698)				this->_hx___startCursorTimer();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,stage_onMouseUp,(void))

void TextField_obj::this_onAddedToStage( ::openfl::events::Event event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onAddedToStage",0x3dbcbc7f,"openfl.text.TextField.this_onAddedToStage","openfl/text/TextField.hx",1709,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1709)		this->this_onFocusIn(null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onAddedToStage,(void))

void TextField_obj::this_onFocusIn( ::openfl::events::FocusEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onFocusIn",0x90f9e141,"openfl.text.TextField.this_onFocusIn","openfl/text/TextField.hx",1716,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1716)		Bool _hx_tmp;
HXDLIN(1716)		Bool _hx_tmp1;
HXDLIN(1716)		Bool _hx_tmp2;
HXDLIN(1716)		Bool _hx_tmp3 = this->get_selectable();
HXDLIN(1716)		if (_hx_tmp3) {
HXLINE(1716)			 ::Dynamic _hx_tmp4 = this->get_type();
HXDLIN(1716)			_hx_tmp2 = hx::IsEq( _hx_tmp4,(int)1 );
            		}
            		else {
HXLINE(1716)			_hx_tmp2 = false;
            		}
HXDLIN(1716)		if (_hx_tmp2) {
HXLINE(1716)			_hx_tmp1 = hx::IsNotNull( this->stage );
            		}
            		else {
HXLINE(1716)			_hx_tmp1 = false;
            		}
HXDLIN(1716)		if (_hx_tmp1) {
HXLINE(1716)			 ::openfl::display::InteractiveObject _hx_tmp5 = this->stage->get_focus();
HXDLIN(1716)			_hx_tmp = hx::IsEq( _hx_tmp5,hx::ObjectPtr<OBJ_>(this) );
            		}
            		else {
HXLINE(1716)			_hx_tmp = false;
            		}
HXDLIN(1716)		if (_hx_tmp) {
HXLINE(1718)			this->_hx___startTextInput();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusIn,(void))

void TextField_obj::this_onFocusOut( ::openfl::events::FocusEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onFocusOut",0x49afcbb2,"openfl.text.TextField.this_onFocusOut","openfl/text/TextField.hx",1727,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1727)		this->_hx___stopTextInput();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onFocusOut,(void))

void TextField_obj::this_onMouseDown( ::openfl::events::MouseEvent event){
            	HX_STACK_FRAME("openfl.text.TextField","this_onMouseDown",0xfda1ed8b,"openfl.text.TextField.this_onMouseDown","openfl/text/TextField.hx",1732,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(event,"event")
HXLINE(1734)		Bool _hx_tmp = !(this->get_selectable());
HXDLIN(1734)		if (_hx_tmp) {
HXLINE(1734)			return;
            		}
HXLINE(1736)		this->_hx___updateLayout();
HXLINE(1738)		Float _hx_tmp1 = this->get_mouseX();
HXDLIN(1738)		Float _hx_tmp2 = this->get_mouseY();
HXDLIN(1738)		this->_hx___caretIndex = this->_hx___getPosition(_hx_tmp1,_hx_tmp2);
HXLINE(1739)		this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(1740)		this->_hx___dirty = true;
HXLINE(1742)		this->stage->addEventListener(HX_("mouseMove",d6,9b,b5,f4),this->stage_onMouseMove_dyn(),null(),null(),null());
HXLINE(1743)		this->stage->addEventListener(HX_("mouseUp",e0,f3,72,c0),this->stage_onMouseUp_dyn(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,this_onMouseDown,(void))

void TextField_obj::window_onKeyDown(Int key,Int modifier){
            	HX_STACK_FRAME("openfl.text.TextField","window_onKeyDown",0x61330e17,"openfl.text.TextField.window_onKeyDown","openfl/text/TextField.hx",1750,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(key,"key")
            	HX_STACK_ARG(modifier,"modifier")
HXLINE(1750)		switch((int)(key)){
            			case (int)8: {
HXLINE(1754)				Bool _hx_tmp;
HXDLIN(1754)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1754)					_hx_tmp = (this->_hx___caretIndex > (int)0);
            				}
            				else {
HXLINE(1754)					_hx_tmp = false;
            				}
HXDLIN(1754)				if (_hx_tmp) {
HXLINE(1756)					this->_hx___selectionIndex = (this->_hx___caretIndex - (int)1);
            				}
HXLINE(1760)				Bool _hx_tmp1 = (this->_hx___selectionIndex != this->_hx___caretIndex);
HXDLIN(1760)				if (_hx_tmp1) {
HXLINE(1762)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1763)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(1765)					this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)99: {
HXLINE(1854)				Bool _hx_tmp2;
HXDLIN(1854)				if ((modifier != (int)1024)) {
HXLINE(1854)					_hx_tmp2 = (modifier == (int)2048);
            				}
            				else {
HXLINE(1854)					_hx_tmp2 = true;
            				}
HXDLIN(1854)				if (_hx_tmp2) {
HXLINE(1856)					::String _hx_tmp3 = this->_hx___textEngine->text.substring(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1856)					::lime::_hx_system::Clipboard_obj::set_text(_hx_tmp3);
            				}
            			}
            			break;
            			case (int)118: {
HXLINE(1877)				Bool _hx_tmp4;
HXDLIN(1877)				if ((modifier != (int)1024)) {
HXLINE(1877)					_hx_tmp4 = (modifier == (int)2048);
            				}
            				else {
HXLINE(1877)					_hx_tmp4 = true;
            				}
HXDLIN(1877)				if (_hx_tmp4) {
HXLINE(1879)					HX_VARI( ::String,text) = ::lime::_hx_system::Clipboard_obj::get_text();
HXLINE(1881)					Bool _hx_tmp5 = hx::IsNotNull( text );
HXDLIN(1881)					if (_hx_tmp5) {
HXLINE(1883)						this->replaceSelectedText(text);
            					}
            					else {
HXLINE(1887)						this->replaceSelectedText(HX_("",00,00,00,00));
            					}
HXLINE(1891)					this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            				}
            				else {
HXLINE(1894)					Int _hx_tmp6 = (this->_hx___textEngine->textFormatRanges->length - (int)1);
HXDLIN(1894)					this->_hx___textEngine->textFormatRanges->__get(_hx_tmp6).StaticCast<  ::openfl::_internal::text::TextFormatRange >()->end = this->_hx___textEngine->text.length;
            				}
            			}
            			break;
            			case (int)120: {
HXLINE(1862)				Bool _hx_tmp7;
HXDLIN(1862)				if ((modifier != (int)1024)) {
HXLINE(1862)					_hx_tmp7 = (modifier == (int)2048);
            				}
            				else {
HXLINE(1862)					_hx_tmp7 = true;
            				}
HXDLIN(1862)				if (_hx_tmp7) {
HXLINE(1864)					::String _hx_tmp8 = this->_hx___textEngine->text.substring(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1864)					::lime::_hx_system::Clipboard_obj::set_text(_hx_tmp8);
HXLINE(1866)					Bool _hx_tmp9 = (this->_hx___caretIndex != this->_hx___selectionIndex);
HXDLIN(1866)					if (_hx_tmp9) {
HXLINE(1868)						this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1869)						this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            					}
            				}
            			}
            			break;
            			case (int)127: {
HXLINE(1771)				Bool _hx_tmp10;
HXDLIN(1771)				if ((this->_hx___selectionIndex == this->_hx___caretIndex)) {
HXLINE(1771)					_hx_tmp10 = (this->_hx___caretIndex < this->_hx___textEngine->text.length);
            				}
            				else {
HXLINE(1771)					_hx_tmp10 = false;
            				}
HXDLIN(1771)				if (_hx_tmp10) {
HXLINE(1773)					this->_hx___selectionIndex = (this->_hx___caretIndex + (int)1);
            				}
HXLINE(1777)				Bool _hx_tmp11 = (this->_hx___selectionIndex != this->_hx___caretIndex);
HXDLIN(1777)				if (_hx_tmp11) {
HXLINE(1779)					this->replaceSelectedText(HX_("",00,00,00,00));
HXLINE(1780)					this->_hx___selectionIndex = this->_hx___caretIndex;
HXLINE(1782)					this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            				}
            			}
            			break;
            			case (int)1073741903: {
HXLINE(1821)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1823)					Bool _hx_tmp12 = (this->_hx___caretIndex < this->_hx___textEngine->text.length);
HXDLIN(1823)					if (_hx_tmp12) {
HXLINE(1825)						this->_hx___caretIndex++;
            					}
            				}
            				else {
HXLINE(1831)					Bool _hx_tmp13 = (this->_hx___selectionIndex == this->_hx___caretIndex);
HXDLIN(1831)					if (_hx_tmp13) {
HXLINE(1833)						Bool _hx_tmp14 = (this->_hx___caretIndex < this->_hx___textEngine->text.length);
HXDLIN(1833)						if (_hx_tmp14) {
HXLINE(1835)							this->_hx___caretIndex++;
            						}
            					}
            					else {
HXLINE(1841)						Float _hx_tmp15 = ::Math_obj::max(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1841)						this->_hx___caretIndex = ::Std_obj::_hx_int(_hx_tmp15);
            					}
HXLINE(1845)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(1849)				this->_hx___stopCursorTimer();
HXLINE(1850)				this->_hx___startCursorTimer();
            			}
            			break;
            			case (int)1073741904: {
HXLINE(1788)				if (::lime::ui::_KeyModifier::KeyModifier_Impl__obj::get_shiftKey(modifier)) {
HXLINE(1790)					Bool _hx_tmp16 = (this->_hx___caretIndex > (int)0);
HXDLIN(1790)					if (_hx_tmp16) {
HXLINE(1792)						this->_hx___caretIndex--;
            					}
            				}
            				else {
HXLINE(1798)					Bool _hx_tmp17 = (this->_hx___selectionIndex == this->_hx___caretIndex);
HXDLIN(1798)					if (_hx_tmp17) {
HXLINE(1800)						Bool _hx_tmp18 = (this->_hx___caretIndex > (int)0);
HXDLIN(1800)						if (_hx_tmp18) {
HXLINE(1802)							this->_hx___caretIndex--;
            						}
            					}
            					else {
HXLINE(1808)						Float _hx_tmp19 = ::Math_obj::min(this->_hx___caretIndex,this->_hx___selectionIndex);
HXDLIN(1808)						this->_hx___caretIndex = ::Std_obj::_hx_int(_hx_tmp19);
            					}
HXLINE(1812)					this->_hx___selectionIndex = this->_hx___caretIndex;
            				}
HXLINE(1816)				this->_hx___stopCursorTimer();
HXLINE(1817)				this->_hx___startCursorTimer();
            			}
            			break;
            			default:{
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(TextField_obj,window_onKeyDown,(void))

void TextField_obj::window_onTextInput(::String value){
            	HX_STACK_FRAME("openfl.text.TextField","window_onTextInput",0xe9818213,"openfl.text.TextField.window_onTextInput","openfl/text/TextField.hx",1904,0xccf02094)
            	HX_STACK_THIS(this)
            	HX_STACK_ARG(value,"value")
HXLINE(1906)		this->replaceSelectedText(value);
HXLINE(1908)		this->dispatchEvent( ::openfl::events::Event_obj::__new(HX_("change",70,91,72,b7),true,null()));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TextField_obj,window_onTextInput,(void))

 ::openfl::text::TextFormat TextField_obj::_hx___defaultTextFormat;


TextField_obj::TextField_obj()
{
}

void TextField_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TextField);
	HX_MARK_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_MARK_MEMBER_NAME(caretIndex,"caretIndex");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_MARK_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_MARK_MEMBER_NAME(numLines,"numLines");
	HX_MARK_MEMBER_NAME(selectionBeginIndex,"selectionBeginIndex");
	HX_MARK_MEMBER_NAME(selectionEndIndex,"selectionEndIndex");
	HX_MARK_MEMBER_NAME(textHeight,"textHeight");
	HX_MARK_MEMBER_NAME(textWidth,"textWidth");
	HX_MARK_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_MARK_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_MARK_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_MARK_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_MARK_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_MARK_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_MARK_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_MARK_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_MARK_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_MARK_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_MARK_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TextField_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bottomScrollV,"bottomScrollV");
	HX_VISIT_MEMBER_NAME(caretIndex,"caretIndex");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(maxScrollH,"maxScrollH");
	HX_VISIT_MEMBER_NAME(maxScrollV,"maxScrollV");
	HX_VISIT_MEMBER_NAME(numLines,"numLines");
	HX_VISIT_MEMBER_NAME(selectionBeginIndex,"selectionBeginIndex");
	HX_VISIT_MEMBER_NAME(selectionEndIndex,"selectionEndIndex");
	HX_VISIT_MEMBER_NAME(textHeight,"textHeight");
	HX_VISIT_MEMBER_NAME(textWidth,"textWidth");
	HX_VISIT_MEMBER_NAME(_hx___bounds,"__bounds");
	HX_VISIT_MEMBER_NAME(_hx___caretIndex,"__caretIndex");
	HX_VISIT_MEMBER_NAME(_hx___cursorTimer,"__cursorTimer");
	HX_VISIT_MEMBER_NAME(_hx___dirty,"__dirty");
	HX_VISIT_MEMBER_NAME(_hx___inputEnabled,"__inputEnabled");
	HX_VISIT_MEMBER_NAME(_hx___isHTML,"__isHTML");
	HX_VISIT_MEMBER_NAME(_hx___layoutDirty,"__layoutDirty");
	HX_VISIT_MEMBER_NAME(_hx___selectionIndex,"__selectionIndex");
	HX_VISIT_MEMBER_NAME(_hx___showCursor,"__showCursor");
	HX_VISIT_MEMBER_NAME(_hx___textEngine,"__textEngine");
	HX_VISIT_MEMBER_NAME(_hx___textFormat,"__textFormat");
	 ::openfl::display::InteractiveObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TextField_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_text()); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_type()); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_border()); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollH()); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_scrollV()); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { return hx::Val( _hx___dirty); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_autoSize()); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_htmlText()); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_maxChars()); }
		if (HX_FIELD_EQ(inName,"numLines") ) { return hx::Val( inCallProp == hx::paccAlways ? get_numLines() : numLines); }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_restrict()); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_wordWrap()); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { return hx::Val( _hx___bounds); }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { return hx::Val( _hx___isHTML); }
		if (HX_FIELD_EQ(inName,"get_text") ) { return hx::Val( get_text_dyn()); }
		if (HX_FIELD_EQ(inName,"set_text") ) { return hx::Val( set_text_dyn()); }
		if (HX_FIELD_EQ(inName,"get_type") ) { return hx::Val( get_type_dyn()); }
		if (HX_FIELD_EQ(inName,"set_type") ) { return hx::Val( set_type_dyn()); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_multiline()); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_sharpness()); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_textColor()); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_textWidth() : textWidth); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn()); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn()); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_background()); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { return hx::Val( inCallProp == hx::paccAlways ? get_caretIndex() : caretIndex); }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_embedFonts()); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { return hx::Val( inCallProp == hx::paccAlways ? get_maxScrollH() : maxScrollH); }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_maxScrollV() : maxScrollV); }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_selectable()); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_textHeight() : textHeight); }
		if (HX_FIELD_EQ(inName,"appendText") ) { return hx::Val( appendText_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn()); }
		if (HX_FIELD_EQ(inName,"get_border") ) { return hx::Val( get_border_dyn()); }
		if (HX_FIELD_EQ(inName,"set_border") ) { return hx::Val( set_border_dyn()); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn()); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn()); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn()); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_borderColor()); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_gridFitType()); }
		if (HX_FIELD_EQ(inName,"getLineText") ) { return hx::Val( getLineText_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceText") ) { return hx::Val( replaceText_dyn()); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn()); }
		if (HX_FIELD_EQ(inName,"__getCursor") ) { return hx::Val( _hx___getCursor_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollH") ) { return hx::Val( get_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollH") ) { return hx::Val( set_scrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_scrollV") ) { return hx::Val( get_scrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"set_scrollV") ) { return hx::Val( set_scrollV_dyn()); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { return hx::Val( _hx___caretIndex); }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { return hx::Val( _hx___showCursor); }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { return hx::Val( _hx___textEngine); }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { return hx::Val( _hx___textFormat); }
		if (HX_FIELD_EQ(inName,"setSelection") ) { return hx::Val( setSelection_dyn()); }
		if (HX_FIELD_EQ(inName,"get_autoSize") ) { return hx::Val( get_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"set_autoSize") ) { return hx::Val( set_autoSize_dyn()); }
		if (HX_FIELD_EQ(inName,"get_htmlText") ) { return hx::Val( get_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"set_htmlText") ) { return hx::Val( set_htmlText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxChars") ) { return hx::Val( get_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"set_maxChars") ) { return hx::Val( set_maxChars_dyn()); }
		if (HX_FIELD_EQ(inName,"get_numLines") ) { return hx::Val( get_numLines_dyn()); }
		if (HX_FIELD_EQ(inName,"get_restrict") ) { return hx::Val( get_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"set_restrict") ) { return hx::Val( set_restrict_dyn()); }
		if (HX_FIELD_EQ(inName,"get_wordWrap") ) { return hx::Val( get_wordWrap_dyn()); }
		if (HX_FIELD_EQ(inName,"set_wordWrap") ) { return hx::Val( set_wordWrap_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_antiAliasType()); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { return hx::Val( inCallProp == hx::paccAlways ? get_bottomScrollV() : bottomScrollV); }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { return hx::Val( _hx___cursorTimer); }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { return hx::Val( _hx___layoutDirty); }
		if (HX_FIELD_EQ(inName,"getLineLength") ) { return hx::Val( getLineLength_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineOffset") ) { return hx::Val( getLineOffset_dyn()); }
		if (HX_FIELD_EQ(inName,"getTextFormat") ) { return hx::Val( getTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"setTextFormat") ) { return hx::Val( setTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"__getPosition") ) { return hx::Val( _hx___getPosition_dyn()); }
		if (HX_FIELD_EQ(inName,"__hitTestMask") ) { return hx::Val( _hx___hitTestMask_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn()); }
		if (HX_FIELD_EQ(inName,"get_multiline") ) { return hx::Val( get_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"set_multiline") ) { return hx::Val( set_multiline_dyn()); }
		if (HX_FIELD_EQ(inName,"get_sharpness") ) { return hx::Val( get_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"set_sharpness") ) { return hx::Val( set_sharpness_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textColor") ) { return hx::Val( get_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_textColor") ) { return hx::Val( set_textColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textWidth") ) { return hx::Val( get_textWidth_dyn()); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { return hx::Val( _hx___inputEnabled); }
		if (HX_FIELD_EQ(inName,"getLineMetrics") ) { return hx::Val( getLineMetrics_dyn()); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn()); }
		if (HX_FIELD_EQ(inName,"__updateLayout") ) { return hx::Val( _hx___updateLayout_dyn()); }
		if (HX_FIELD_EQ(inName,"get_background") ) { return hx::Val( get_background_dyn()); }
		if (HX_FIELD_EQ(inName,"set_background") ) { return hx::Val( set_background_dyn()); }
		if (HX_FIELD_EQ(inName,"get_caretIndex") ) { return hx::Val( get_caretIndex_dyn()); }
		if (HX_FIELD_EQ(inName,"get_embedFonts") ) { return hx::Val( get_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"set_embedFonts") ) { return hx::Val( set_embedFonts_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollH") ) { return hx::Val( get_maxScrollH_dyn()); }
		if (HX_FIELD_EQ(inName,"get_maxScrollV") ) { return hx::Val( get_maxScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectable") ) { return hx::Val( get_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"set_selectable") ) { return hx::Val( set_selectable_dyn()); }
		if (HX_FIELD_EQ(inName,"get_textHeight") ) { return hx::Val( get_textHeight_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusIn") ) { return hx::Val( this_onFocusIn_dyn()); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_backgroundColor()); }
		if (HX_FIELD_EQ(inName,"__stopTextInput") ) { return hx::Val( _hx___stopTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"get_borderColor") ) { return hx::Val( get_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_borderColor") ) { return hx::Val( set_borderColor_dyn()); }
		if (HX_FIELD_EQ(inName,"get_gridFitType") ) { return hx::Val( get_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_gridFitType") ) { return hx::Val( set_gridFitType_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseUp") ) { return hx::Val( stage_onMouseUp_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onFocusOut") ) { return hx::Val( this_onFocusOut_dyn()); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { return hx::Val( _hx___selectionIndex); }
		if (HX_FIELD_EQ(inName,"__startTextInput") ) { return hx::Val( _hx___startTextInput_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onMouseDown") ) { return hx::Val( this_onMouseDown_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onKeyDown") ) { return hx::Val( window_onKeyDown_dyn()); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_defaultTextFormat()); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val(get_displayAsPassword()); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { return hx::Val( inCallProp == hx::paccAlways ? get_selectionEndIndex() : selectionEndIndex); }
		if (HX_FIELD_EQ(inName,"getCharBoundaries") ) { return hx::Val( getCharBoundaries_dyn()); }
		if (HX_FIELD_EQ(inName,"__stopCursorTimer") ) { return hx::Val( _hx___stopCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"get_antiAliasType") ) { return hx::Val( get_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"set_antiAliasType") ) { return hx::Val( set_antiAliasType_dyn()); }
		if (HX_FIELD_EQ(inName,"get_bottomScrollV") ) { return hx::Val( get_bottomScrollV_dyn()); }
		if (HX_FIELD_EQ(inName,"stage_onMouseMove") ) { return hx::Val( stage_onMouseMove_dyn()); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getLineIndexOfChar") ) { return hx::Val( getLineIndexOfChar_dyn()); }
		if (HX_FIELD_EQ(inName,"getParagraphLength") ) { return hx::Val( getParagraphLength_dyn()); }
		if (HX_FIELD_EQ(inName,"__startCursorTimer") ) { return hx::Val( _hx___startCursorTimer_dyn()); }
		if (HX_FIELD_EQ(inName,"window_onTextInput") ) { return hx::Val( window_onTextInput_dyn()); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { return hx::Val( inCallProp == hx::paccAlways ? get_selectionBeginIndex() : selectionBeginIndex); }
		if (HX_FIELD_EQ(inName,"getCharIndexAtPoint") ) { return hx::Val( getCharIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"getLineIndexAtPoint") ) { return hx::Val( getLineIndexAtPoint_dyn()); }
		if (HX_FIELD_EQ(inName,"replaceSelectedText") ) { return hx::Val( replaceSelectedText_dyn()); }
		if (HX_FIELD_EQ(inName,"get_backgroundColor") ) { return hx::Val( get_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"set_backgroundColor") ) { return hx::Val( set_backgroundColor_dyn()); }
		if (HX_FIELD_EQ(inName,"this_onAddedToStage") ) { return hx::Val( this_onAddedToStage_dyn()); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_defaultTextFormat") ) { return hx::Val( get_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"set_defaultTextFormat") ) { return hx::Val( set_defaultTextFormat_dyn()); }
		if (HX_FIELD_EQ(inName,"get_displayAsPassword") ) { return hx::Val( get_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"set_displayAsPassword") ) { return hx::Val( set_displayAsPassword_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionEndIndex") ) { return hx::Val( get_selectionEndIndex_dyn()); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"getFirstCharInParagraph") ) { return hx::Val( getFirstCharInParagraph_dyn()); }
		if (HX_FIELD_EQ(inName,"get_selectionBeginIndex") ) { return hx::Val( get_selectionBeginIndex_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

bool TextField_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { outValue = _hx___defaultTextFormat; return true; }
	}
	return false;
}

hx::Val TextField_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_text(inValue) ); }
		if (HX_FIELD_EQ(inName,"type") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_type(inValue) ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"border") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_border(inValue) ); }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"scrollH") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollH(inValue) ); }
		if (HX_FIELD_EQ(inName,"scrollV") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_scrollV(inValue) ); }
		if (HX_FIELD_EQ(inName,"__dirty") ) { _hx___dirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"autoSize") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_autoSize(inValue) ); }
		if (HX_FIELD_EQ(inName,"htmlText") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_htmlText(inValue) ); }
		if (HX_FIELD_EQ(inName,"maxChars") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_maxChars(inValue) ); }
		if (HX_FIELD_EQ(inName,"numLines") ) { numLines=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restrict") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_restrict(inValue) ); }
		if (HX_FIELD_EQ(inName,"wordWrap") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_wordWrap(inValue) ); }
		if (HX_FIELD_EQ(inName,"__bounds") ) { _hx___bounds=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__isHTML") ) { _hx___isHTML=inValue.Cast< Bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"multiline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_multiline(inValue) ); }
		if (HX_FIELD_EQ(inName,"sharpness") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_sharpness(inValue) ); }
		if (HX_FIELD_EQ(inName,"textColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_textColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"textWidth") ) { textWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_background(inValue) ); }
		if (HX_FIELD_EQ(inName,"caretIndex") ) { caretIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"embedFonts") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_embedFonts(inValue) ); }
		if (HX_FIELD_EQ(inName,"maxScrollH") ) { maxScrollH=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxScrollV") ) { maxScrollV=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectable") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_selectable(inValue) ); }
		if (HX_FIELD_EQ(inName,"textHeight") ) { textHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"borderColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_borderColor(inValue) ); }
		if (HX_FIELD_EQ(inName,"gridFitType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_gridFitType(inValue) ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__caretIndex") ) { _hx___caretIndex=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__showCursor") ) { _hx___showCursor=inValue.Cast< Bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textEngine") ) { _hx___textEngine=inValue.Cast<  ::openfl::_internal::text::TextEngine >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__textFormat") ) { _hx___textFormat=inValue.Cast<  ::openfl::text::TextFormat >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"antiAliasType") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_antiAliasType(inValue) ); }
		if (HX_FIELD_EQ(inName,"bottomScrollV") ) { bottomScrollV=inValue.Cast< Int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__cursorTimer") ) { _hx___cursorTimer=inValue.Cast<  ::haxe::Timer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__layoutDirty") ) { _hx___layoutDirty=inValue.Cast< Bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__inputEnabled") ) { _hx___inputEnabled=inValue.Cast< Bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_backgroundColor(inValue) ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"__selectionIndex") ) { _hx___selectionIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"defaultTextFormat") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_defaultTextFormat(inValue) ); }
		if (HX_FIELD_EQ(inName,"displayAsPassword") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_displayAsPassword(inValue) ); }
		if (HX_FIELD_EQ(inName,"selectionEndIndex") ) { selectionEndIndex=inValue.Cast< Int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"selectionBeginIndex") ) { selectionBeginIndex=inValue.Cast< Int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool TextField_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"__defaultTextFormat") ) { _hx___defaultTextFormat=ioValue.Cast<  ::openfl::text::TextFormat >(); return true; }
	}
	return false;
}

void TextField_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("antiAliasType","\x68","\xc4","\xfa","\xe7"));
	outFields->push(HX_HCSTRING("autoSize","\xd0","\x8f","\x79","\x2f"));
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("border","\xec","\x4c","\x1a","\x64"));
	outFields->push(HX_HCSTRING("borderColor","\xd7","\x3c","\xd5","\xd6"));
	outFields->push(HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"));
	outFields->push(HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"));
	outFields->push(HX_HCSTRING("defaultTextFormat","\xe5","\xc7","\xe0","\x0a"));
	outFields->push(HX_HCSTRING("displayAsPassword","\x0f","\xcb","\x96","\xea"));
	outFields->push(HX_HCSTRING("embedFonts","\x2b","\xc7","\xe1","\x8e"));
	outFields->push(HX_HCSTRING("gridFitType","\x05","\xf3","\x13","\xb4"));
	outFields->push(HX_HCSTRING("htmlText","\xb8","\x1f","\x38","\x10"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	outFields->push(HX_HCSTRING("maxChars","\x99","\xef","\xd0","\xef"));
	outFields->push(HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"));
	outFields->push(HX_HCSTRING("multiline","\xed","\xd2","\x11","\x9e"));
	outFields->push(HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"));
	outFields->push(HX_HCSTRING("restrict","\x3c","\xcb","\x9e","\xf1"));
	outFields->push(HX_HCSTRING("scrollH","\x9b","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("scrollV","\xa9","\x33","\xd8","\x30"));
	outFields->push(HX_HCSTRING("selectable","\x96","\xb6","\x2a","\xc4"));
	outFields->push(HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"));
	outFields->push(HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"));
	outFields->push(HX_HCSTRING("sharpness","\x81","\x22","\x25","\x1b"));
	outFields->push(HX_HCSTRING("text","\xad","\xcc","\xf9","\x4c"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"));
	outFields->push(HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"));
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("wordWrap","\xb4","\x14","\xdb","\x00"));
	outFields->push(HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"));
	outFields->push(HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"));
	outFields->push(HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"));
	outFields->push(HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"));
	outFields->push(HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"));
	outFields->push(HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"));
	outFields->push(HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"));
	outFields->push(HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"));
	outFields->push(HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"));
	outFields->push(HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"));
	outFields->push(HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TextField_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TextField_obj,bottomScrollV),HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b")},
	{hx::fsInt,(int)offsetof(TextField_obj,caretIndex),HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd")},
	{hx::fsInt,(int)offsetof(TextField_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{hx::fsInt,(int)offsetof(TextField_obj,maxScrollH),HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextField_obj,maxScrollV),HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a")},
	{hx::fsInt,(int)offsetof(TextField_obj,numLines),HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32")},
	{hx::fsInt,(int)offsetof(TextField_obj,selectionBeginIndex),HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7")},
	{hx::fsInt,(int)offsetof(TextField_obj,selectionEndIndex),HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b")},
	{hx::fsFloat,(int)offsetof(TextField_obj,textHeight),HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39")},
	{hx::fsFloat,(int)offsetof(TextField_obj,textWidth),HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63")},
	{hx::fsObject /*::openfl::geom::Rectangle*/ ,(int)offsetof(TextField_obj,_hx___bounds),HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___caretIndex),HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15")},
	{hx::fsObject /*::haxe::Timer*/ ,(int)offsetof(TextField_obj,_hx___cursorTimer),HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___dirty),HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___inputEnabled),HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___isHTML),HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___layoutDirty),HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3")},
	{hx::fsInt,(int)offsetof(TextField_obj,_hx___selectionIndex),HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d")},
	{hx::fsBool,(int)offsetof(TextField_obj,_hx___showCursor),HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0")},
	{hx::fsObject /*::openfl::_internal::text::TextEngine*/ ,(int)offsetof(TextField_obj,_hx___textEngine),HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c")},
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(int)offsetof(TextField_obj,_hx___textFormat),HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TextField_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::openfl::text::TextFormat*/ ,(void *) &TextField_obj::_hx___defaultTextFormat,HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TextField_obj_sMemberFields[] = {
	HX_HCSTRING("bottomScrollV","\xfe","\xf7","\x87","\x8b"),
	HX_HCSTRING("caretIndex","\x8f","\xb6","\x5b","\xdd"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("maxScrollH","\x57","\xad","\xfc","\x9a"),
	HX_HCSTRING("maxScrollV","\x65","\xad","\xfc","\x9a"),
	HX_HCSTRING("numLines","\xd9","\xf1","\x11","\x32"),
	HX_HCSTRING("selectionBeginIndex","\x95","\x7f","\x17","\xd7"),
	HX_HCSTRING("selectionEndIndex","\xa3","\x0d","\x42","\x4b"),
	HX_HCSTRING("textHeight","\x74","\x88","\x3c","\x39"),
	HX_HCSTRING("textWidth","\x19","\x46","\x50","\x63"),
	HX_HCSTRING("__bounds","\x95","\xf1","\x4c","\x0e"),
	HX_HCSTRING("__caretIndex","\xaf","\x31","\xef","\x15"),
	HX_HCSTRING("__cursorTimer","\xef","\x59","\x8f","\xe1"),
	HX_HCSTRING("__dirty","\xf2","\xa8","\x2e","\x44"),
	HX_HCSTRING("__inputEnabled","\xb7","\xe0","\x1d","\x37"),
	HX_HCSTRING("__isHTML","\x75","\x61","\x94","\x0a"),
	HX_HCSTRING("__layoutDirty","\xe8","\xe9","\x31","\xd3"),
	HX_HCSTRING("__selectionIndex","\x46","\x0a","\xc3","\x7d"),
	HX_HCSTRING("__showCursor","\xd3","\xae","\xf0","\xe0"),
	HX_HCSTRING("__textEngine","\x6f","\x43","\x08","\x6c"),
	HX_HCSTRING("__textFormat","\xe4","\x8a","\x12","\x6d"),
	HX_HCSTRING("appendText","\xa7","\xcf","\x05","\x5b"),
	HX_HCSTRING("getCharBoundaries","\x74","\x85","\xa1","\x8b"),
	HX_HCSTRING("getCharIndexAtPoint","\x17","\xee","\x9c","\xaa"),
	HX_HCSTRING("getFirstCharInParagraph","\xf9","\x5c","\x3d","\x08"),
	HX_HCSTRING("getLineIndexAtPoint","\x35","\xdc","\x50","\x98"),
	HX_HCSTRING("getLineIndexOfChar","\xb5","\x68","\x99","\xa1"),
	HX_HCSTRING("getLineLength","\x30","\xec","\x21","\xd0"),
	HX_HCSTRING("getLineMetrics","\xb9","\xab","\xc6","\xf2"),
	HX_HCSTRING("getLineOffset","\xdd","\xee","\x59","\x91"),
	HX_HCSTRING("getLineText","\x77","\xdd","\x16","\xb0"),
	HX_HCSTRING("getParagraphLength","\xfe","\x0e","\x4e","\xc4"),
	HX_HCSTRING("getTextFormat","\xfa","\x6b","\xf1","\x90"),
	HX_HCSTRING("replaceSelectedText","\xfc","\xfe","\x33","\xbb"),
	HX_HCSTRING("replaceText","\x01","\x6b","\x95","\x61"),
	HX_HCSTRING("setSelection","\x4a","\xb8","\x6a","\xb2"),
	HX_HCSTRING("setTextFormat","\x06","\x4e","\xf7","\xd5"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__getCursor","\xec","\x60","\x6b","\xe9"),
	HX_HCSTRING("__getPosition","\x3f","\xa4","\x66","\x39"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__hitTestMask","\xb1","\x14","\xfd","\x3b"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__startCursorTimer","\xed","\x46","\xa3","\x83"),
	HX_HCSTRING("__startTextInput","\x7b","\xae","\x85","\xaa"),
	HX_HCSTRING("__stopCursorTimer","\x0d","\xcd","\x6c","\x26"),
	HX_HCSTRING("__stopTextInput","\x9b","\x6c","\xcb","\xa1"),
	HX_HCSTRING("__updateLayout","\xb3","\xd8","\x3c","\x79"),
	HX_HCSTRING("get_antiAliasType","\xbf","\xcf","\x6a","\xee"),
	HX_HCSTRING("set_antiAliasType","\xcb","\xa7","\xd8","\x11"),
	HX_HCSTRING("get_autoSize","\xd9","\x43","\x93","\xe4"),
	HX_HCSTRING("set_autoSize","\x4d","\x67","\x8c","\xf9"),
	HX_HCSTRING("get_background","\x37","\x1c","\x13","\x9c"),
	HX_HCSTRING("set_background","\xab","\x04","\x33","\xbc"),
	HX_HCSTRING("get_backgroundColor","\xac","\x1d","\x52","\x98"),
	HX_HCSTRING("set_backgroundColor","\xb8","\x10","\xef","\xd4"),
	HX_HCSTRING("get_border","\xb5","\xbc","\xa1","\x54"),
	HX_HCSTRING("set_border","\x29","\x5b","\x1f","\x58"),
	HX_HCSTRING("get_borderColor","\x6e","\xf4","\xb6","\x97"),
	HX_HCSTRING("set_borderColor","\x7a","\x71","\x82","\x93"),
	HX_HCSTRING("get_bottomScrollV","\x55","\x03","\xf8","\x91"),
	HX_HCSTRING("get_caretIndex","\xd8","\x3e","\x51","\x53"),
	HX_HCSTRING("get_defaultTextFormat","\xbc","\xca","\x8e","\x89"),
	HX_HCSTRING("set_defaultTextFormat","\xc8","\x98","\x97","\xdd"),
	HX_HCSTRING("get_displayAsPassword","\xe6","\xcd","\x44","\x69"),
	HX_HCSTRING("set_displayAsPassword","\xf2","\x9b","\x4d","\xbd"),
	HX_HCSTRING("get_embedFonts","\x74","\x4f","\xd7","\x04"),
	HX_HCSTRING("set_embedFonts","\xe8","\x37","\xf7","\x24"),
	HX_HCSTRING("get_gridFitType","\x9c","\xaa","\xf5","\x74"),
	HX_HCSTRING("set_gridFitType","\xa8","\x27","\xc1","\x70"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_htmlText","\xc1","\xd3","\x51","\xc5"),
	HX_HCSTRING("set_htmlText","\x35","\xf7","\x4a","\xda"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("get_maxChars","\xa2","\xa3","\xea","\xa4"),
	HX_HCSTRING("set_maxChars","\x16","\xc7","\xe3","\xb9"),
	HX_HCSTRING("get_maxScrollH","\xa0","\x35","\xf2","\x10"),
	HX_HCSTRING("get_maxScrollV","\xae","\x35","\xf2","\x10"),
	HX_HCSTRING("get_multiline","\xc4","\xa6","\x75","\x5f"),
	HX_HCSTRING("set_multiline","\xd0","\x88","\x7b","\xa4"),
	HX_HCSTRING("get_numLines","\xe2","\xa5","\x2b","\xe7"),
	HX_HCSTRING("get_restrict","\x45","\x7f","\xb8","\xa6"),
	HX_HCSTRING("set_restrict","\xb9","\xa2","\xb1","\xbb"),
	HX_HCSTRING("get_scrollH","\xb2","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollH","\xbe","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_scrollV","\xc0","\x93","\xd2","\xb6"),
	HX_HCSTRING("set_scrollV","\xcc","\x9a","\x3f","\xc1"),
	HX_HCSTRING("get_selectable","\xdf","\x3e","\x20","\x3a"),
	HX_HCSTRING("set_selectable","\x53","\x27","\x40","\x5a"),
	HX_HCSTRING("get_selectionBeginIndex","\x2c","\x26","\x6d","\xdf"),
	HX_HCSTRING("get_selectionEndIndex","\x7a","\x10","\xf0","\xc9"),
	HX_HCSTRING("get_sharpness","\x58","\xf6","\x88","\xdc"),
	HX_HCSTRING("set_sharpness","\x64","\xd8","\x8e","\x21"),
	HX_HCSTRING("get_text","\x36","\x88","\xb4","\xcc"),
	HX_HCSTRING("set_text","\xaa","\xe1","\x11","\x7b"),
	HX_HCSTRING("get_textColor","\x4d","\xd5","\xad","\xa4"),
	HX_HCSTRING("set_textColor","\x59","\xb7","\xb3","\xe9"),
	HX_HCSTRING("get_textWidth","\xf0","\x19","\xb4","\x24"),
	HX_HCSTRING("get_textHeight","\xbd","\x10","\x32","\xaf"),
	HX_HCSTRING("get_type","\x43","\xae","\xc3","\xcc"),
	HX_HCSTRING("set_type","\xb7","\x07","\x21","\x7b"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	HX_HCSTRING("get_wordWrap","\xbd","\xc8","\xf4","\xb5"),
	HX_HCSTRING("set_wordWrap","\x31","\xec","\xed","\xca"),
	HX_HCSTRING("stage_onMouseMove","\x76","\xbc","\x61","\xde"),
	HX_HCSTRING("stage_onMouseUp","\x80","\xac","\x07","\xd1"),
	HX_HCSTRING("this_onAddedToStage","\x23","\x9e","\xce","\x72"),
	HX_HCSTRING("this_onFocusIn","\x1d","\x62","\xfb","\xdc"),
	HX_HCSTRING("this_onFocusOut","\x56","\x0b","\xff","\x7e"),
	HX_HCSTRING("this_onMouseDown","\x67","\x5d","\xaa","\x6d"),
	HX_HCSTRING("window_onKeyDown","\xf3","\x7d","\x3b","\xd1"),
	HX_HCSTRING("window_onTextInput","\xef","\xa0","\x6a","\xc0"),
	::String(null()) };

static void TextField_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TextField_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TextField_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TextField_obj::_hx___defaultTextFormat,"__defaultTextFormat");
};

#endif

hx::Class TextField_obj::__mClass;

static ::String TextField_obj_sStaticFields[] = {
	HX_HCSTRING("__defaultTextFormat","\xc5","\xf0","\xd0","\xbd"),
	::String(null())
};

void TextField_obj::__register()
{
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.text.TextField","\xca","\xa8","\xd5","\xef");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TextField_obj::__GetStatic;
	__mClass->mSetStaticField = &TextField_obj::__SetStatic;
	__mClass->mMarkFunc = TextField_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TextField_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TextField_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TextField_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TextField_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TextField_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TextField_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace text
